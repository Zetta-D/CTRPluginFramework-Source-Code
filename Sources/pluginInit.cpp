/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int OnLoadCro();
int __fastcall CTRPluginFramework::Initialize(CTRPluginFramework *this);
void __fastcall __noreturn CTRPluginFramework::ThreadExit(CTRPluginFramework *this);
void __fastcall __noreturn abort(int a1, int a2, int a3, int a4);
void __fastcall __noreturn CTRPluginFramework::ThreadInit(CTRPluginFramework *__hidden this, void *); // idb
int __fastcall LaunchMainThread(int a1);
int __fastcall CTRPluginFramework::Utils::Search<unsigned long>(int a1, int a2, char **a3);
_DWORD __cdecl CTRPluginFramework::KeepThreadMain(CTRPluginFramework *__hidden this, void *); // weak
int GLOBAL__sub_I_g_mainThread();
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// int __fastcall LightLock_Lock(_DWORD); weak
// _DWORD CTRPluginFramework::PluginMenuExecuteLoop::LockAR(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenuExecuteLoop::ExecuteAR(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenuExecuteLoop::UnlockAR(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenuExecuteLoop::Lock(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenuExecuteLoop::ExecuteBuiltin(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenuExecuteLoop::Unlock(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this); idb
// int __fastcall LightLock_Unlock(_DWORD); weak
// int __fastcall hidInit(_DWORD); weak
// _DWORD CTRPluginFramework::Font::Initialize(CTRPluginFramework::Font *__hidden this); idb
// int __fastcall gspInit(_DWORD); weak
// _DWORD CTRPluginFramework::Scheduler::Initialize(CTRPluginFramework::Scheduler *__hidden this); idb
// int __fastcall CTRPluginFramework::Directory::IsExists(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::Directory::Create(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::Exists(_DWORD); weak
// _DWORD CTRPluginFramework::Process::GetTitleID(CTRPluginFramework::Process *__hidden this); idb
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Process::GetName(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Screenshot::Initialize(CTRPluginFramework::Screenshot *__hidden this); idb
// int __fastcall threadGetCurrent(_DWORD); weak
// _DWORD CTRPluginFramework::Hook::Disable(CTRPluginFramework::Hook *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Play(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb
// int __fastcall gspExit(_DWORD); weak
// int __fastcall svcSignalEvent(_DWORD); weak
// int __fastcall threadExit(_DWORD); weak
// _DWORD CTRPluginFramework::PluginMenuImpl::ForceExit(CTRPluginFramework::PluginMenuImpl *__hidden this); idb
// int __fastcall threadJoin(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall svcExitThread(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Color::Color(CTRPluginFramework::Color *__hidden this, unsigned __int8, unsigned __int8, unsigned __int8, unsigned __int8); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::Flash(CTRPluginFramework::ScreenImpl *__hidden this, CTRPluginFramework::Color *); idb
// int __cdecl CTRPluginFramework::System::OnAbort(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::InitializeRandomEngine(CTRPluginFramework *__hidden this); idb
// _DWORD CTRPluginFramework::FwkSettings::Get(CTRPluginFramework::FwkSettings *__hidden this); idb
// int __fastcall svcSetThreadPriority(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::main(CTRPluginFramework *__hidden this); idb
// int __fastcall svcCreateEvent(_DWORD, _DWORD); weak
// int __fastcall svcCreateThread(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall svcWaitSynchronization(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall svcCloseHandle(_DWORD); weak
// int memcmp(const void *s1, const void *s2, size_t n);
// _DWORD CTRPluginFramework::Hook::Hook(CTRPluginFramework::Hook *__hidden this); weak

//-------------------------------------------------------------------------
// Data declarations

char CTRPluginFramework::g_keepRunning = '\x01'; // weak
_UNKNOWN g_onLoadCroLock; // weak
int g_mainThread; // weak
int CTRPluginFramework::g_keepEvent; // weak
int CTRPluginFramework::g_continueGameEvent; // weak
_UNKNOWN CTRPluginFramework::exception_data; // weak
int CTRPluginFramework::g_keepThreadHandle; // weak
_UNKNOWN g_onLoadCroHook; // weak
_UNKNOWN _ctru_heap_size; // weak
// extern _UNKNOWN ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E; weak
// extern _UNKNOWN ZN18CTRPluginFramework10Screenshot4PathB5cxx11E; weak
// extern _UNKNOWN ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E; weak
// extern _UNKNOWN CTRPluginFramework::OSDImpl::OSDHook; weak
// extern _UNKNOWN CTRPluginFramework::ProcessImpl::IsPaused; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Top; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Bottom; weak
// extern _UNKNOWN ERRF_ExceptionHandler; weak


//----- (000010A4) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 1A6C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1A70: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (0000111C) --------------------------------------------------------
int OnLoadCro()
{
  CTRPluginFramework::PluginMenuExecuteLoop *v0; // r0
  CTRPluginFramework::PluginMenuExecuteLoop *v1; // r0
  CTRPluginFramework::PluginMenuExecuteLoop *v2; // r0
  CTRPluginFramework::PluginMenuExecuteLoop *v3; // r0
  CTRPluginFramework::PluginMenuExecuteLoop *v4; // r0
  CTRPluginFramework::PluginMenuExecuteLoop *v5; // r0

  v0 = (CTRPluginFramework::PluginMenuExecuteLoop *)LightLock_Lock(&g_onLoadCroLock);
  v1 = (CTRPluginFramework::PluginMenuExecuteLoop *)CTRPluginFramework::PluginMenuExecuteLoop::LockAR(v0);
  v2 = (CTRPluginFramework::PluginMenuExecuteLoop *)CTRPluginFramework::PluginMenuExecuteLoop::ExecuteAR(v1);
  v3 = (CTRPluginFramework::PluginMenuExecuteLoop *)CTRPluginFramework::PluginMenuExecuteLoop::UnlockAR(v2);
  v4 = (CTRPluginFramework::PluginMenuExecuteLoop *)CTRPluginFramework::PluginMenuExecuteLoop::Lock(v3);
  v5 = (CTRPluginFramework::PluginMenuExecuteLoop *)CTRPluginFramework::PluginMenuExecuteLoop::ExecuteBuiltin(v4);
  CTRPluginFramework::PluginMenuExecuteLoop::Unlock(v5);
  return LightLock_Unlock(&g_onLoadCroLock);
}
// 1A74: using guessed type int __fastcall LightLock_Lock(_DWORD);
// 1A90: using guessed type int __fastcall LightLock_Unlock(_DWORD);

//----- (0000115C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Initialize(CTRPluginFramework *this)
{
  CTRPluginFramework::Font *v1; // r0
  int v2; // r0
  CTRPluginFramework::Scheduler *v3; // r0
  int v4; // r4
  int v5; // r0
  int v6; // r1
  int v7; // r4
  CTRPluginFramework::Process *v8; // r0
  int v9; // r0
  CTRPluginFramework::Screenshot *v10; // r0
  int v12; // [sp+0h] [bp-20h]

  v1 = (CTRPluginFramework::Font *)hidInit(this);
  v2 = CTRPluginFramework::Font::Initialize(v1);
  v3 = (CTRPluginFramework::Scheduler *)gspInit(v2);
  CTRPluginFramework::Scheduler::Initialize(v3);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v12, "/cheats");
  v4 = CTRPluginFramework::Directory::IsExists(&v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  if ( !v4 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v12, "/cheats");
    CTRPluginFramework::Directory::Create(&v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
    &ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E,
    "cheats.txt");
  if ( !CTRPluginFramework::File::Exists(&ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E) )
  {
    v5 = CTRPluginFramework::Process::GetTitleID(0);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v12, "/cheats/%016llX.txt", v5, v6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
      &ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E,
      &v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v12, "/Screenshots");
  v7 = CTRPluginFramework::Directory::IsExists(&v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  if ( !v7 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v12, "/Screenshots");
    CTRPluginFramework::Directory::Create(&v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
    &ZN18CTRPluginFramework10Screenshot4PathB5cxx11E,
    "/Screenshots");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
    &ZN18CTRPluginFramework10Screenshot4PathB5cxx11E,
    "/");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
    &ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E,
    "[");
  v8 = (CTRPluginFramework::Process *)CTRPluginFramework::Process::GetName(&ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E);
  v9 = CTRPluginFramework::Process::GetTitleID(v8);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v12, " - %08X] - Screenshot", v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(
    &ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E,
    &v12);
  v10 = (CTRPluginFramework::Screenshot *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  return CTRPluginFramework::Screenshot::Initialize(v10);
}
// 1A94: using guessed type int __fastcall hidInit(_DWORD);
// 1A9C: using guessed type int __fastcall gspInit(_DWORD);
// 1AA4: using guessed type int __fastcall CTRPluginFramework::Directory::IsExists(_DWORD);
// 1AA8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1AAC: using guessed type int __fastcall CTRPluginFramework::Directory::Create(_DWORD);
// 1AB0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 1AB4: using guessed type int __fastcall CTRPluginFramework::File::Exists(_DWORD);
// 1ABC: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 1AC0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 1AC4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1AC8: using guessed type int __fastcall CTRPluginFramework::Process::GetName(_DWORD);
// 1ACC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);

//----- (000012CC) --------------------------------------------------------
void __fastcall __noreturn CTRPluginFramework::ThreadExit(CTRPluginFramework *this)
{
  int v1; // r0
  bool v2; // r1
  int v3; // r3
  bool v4; // r1
  signed int v5; // r3
  int v6; // r0
  CTRPluginFramework::PluginMenuImpl *v7; // r0
  int v8; // r1
  int i; // r0

  if ( !g_mainThread )
    goto LABEL_9;
  v1 = threadGetCurrent(this);
  v3 = g_mainThread;
  if ( g_mainThread == v1 )
  {
    CTRPluginFramework::Hook::Disable((CTRPluginFramework::Hook *)&CTRPluginFramework::OSDImpl::OSDHook);
    v5 = CTRPluginFramework::ProcessImpl::IsPaused;
    if ( CTRPluginFramework::ProcessImpl::IsPaused >= 2u )
      v5 = 1;
    CTRPluginFramework::ProcessImpl::IsPaused = v5;
    v6 = CTRPluginFramework::ProcessImpl::Play(
           (CTRPluginFramework::ProcessImpl *)&CTRPluginFramework::g_keepRunning,
           v4);
    gspExit(v6);
    CTRPluginFramework::g_keepRunning = 0;
    svcSignalEvent(CTRPluginFramework::g_keepEvent);
    threadExit(1);
  }
  if ( !v3 )
    goto LABEL_9;
  v7 = (CTRPluginFramework::PluginMenuImpl *)CTRPluginFramework::ProcessImpl::Play(
                                               (CTRPluginFramework::ProcessImpl *)&CTRPluginFramework::g_keepRunning,
                                               v2);
  CTRPluginFramework::PluginMenuImpl::ForceExit(v7);
  for ( i = threadJoin(g_mainThread, v8, -1, -1); ; i = svcSignalEvent(CTRPluginFramework::g_continueGameEvent) )
  {
    svcExitThread(i);
LABEL_9:
    ;
  }
}
// 1: using guessed type char CTRPluginFramework::g_keepRunning;
// C: using guessed type int g_mainThread;
// 10: using guessed type int CTRPluginFramework::g_keepEvent;
// 14: using guessed type int CTRPluginFramework::g_continueGameEvent;
// 1AE0: using guessed type int __fastcall threadGetCurrent(_DWORD);
// 1AEC: using guessed type int __fastcall gspExit(_DWORD);
// 1AF0: using guessed type int __fastcall svcSignalEvent(_DWORD);
// 1AF4: using guessed type int __fastcall threadExit(_DWORD);
// 1AFC: using guessed type int __fastcall threadJoin(_DWORD, _DWORD, _DWORD, _DWORD);
// 1B00: using guessed type int __fastcall svcExitThread(_DWORD);

//----- (0000137C) --------------------------------------------------------
void __fastcall __noreturn abort(int a1, int a2, int a3, int a4)
{
  CTRPluginFramework *v4; // r0
  int v5; // [sp+Ch] [bp-Ch]

  v5 = a4;
  if ( CTRPluginFramework::System::OnAbort )
    CTRPluginFramework::System::OnAbort(a1, a2, a3, CTRPluginFramework::System::OnAbort);
  CTRPluginFramework::Color::Color((CTRPluginFramework::Color *)&v5, 0xFFu, 0x45u, 0, 0xFFu);
  CTRPluginFramework::ScreenImpl::Flash(CTRPluginFramework::ScreenImpl::Top, (CTRPluginFramework::Color *)&v5);
  v4 = (CTRPluginFramework *)CTRPluginFramework::ScreenImpl::Flash(
                               CTRPluginFramework::ScreenImpl::Bottom,
                               (CTRPluginFramework::Color *)&v5);
  CTRPluginFramework::ThreadExit(v4);
}
// 1B14: using guessed type int __cdecl CTRPluginFramework::System::OnAbort(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000013DC) --------------------------------------------------------
void __fastcall __noreturn CTRPluginFramework::ThreadInit(CTRPluginFramework *this, void *a2)
{
  CTRPluginFramework *v2; // r0
  int v3; // r0
  CTRPluginFramework::FwkSettings *v4; // r0
  int v5; // r4
  _DWORD *v6; // r0
  CTRPluginFramework *v7; // r0
  CTRPluginFramework *v8; // r0

  v2 = (CTRPluginFramework *)CTRPluginFramework::Initialize(this);
  CTRPluginFramework::InitializeRandomEngine(v2);
  v3 = svcSignalEvent(CTRPluginFramework::g_keepEvent);
  v4 = (CTRPluginFramework::FwkSettings *)threadGetCurrent(v3);
  v5 = *(_DWORD *)v4;
  v6 = (_DWORD *)CTRPluginFramework::FwkSettings::Get(v4);
  v7 = (CTRPluginFramework *)svcSetThreadPriority(v5, *v6);
  v8 = (CTRPluginFramework *)CTRPluginFramework::main(v7);
  CTRPluginFramework::ThreadExit(v8);
}
// 10: using guessed type int CTRPluginFramework::g_keepEvent;
// 1AE0: using guessed type int __fastcall threadGetCurrent(_DWORD);
// 1AF0: using guessed type int __fastcall svcSignalEvent(_DWORD);
// 1B28: using guessed type int __fastcall svcSetThreadPriority(_DWORD, _DWORD);

//----- (00001418) --------------------------------------------------------
int __fastcall LaunchMainThread(int a1)
{
  _DWORD *v1; // r3
  int v2; // r6
  int v3; // r1

  v1 = (_DWORD *)__mrc(15, 0, 13, 0, 3);
  v1[16] = &ERRF_ExceptionHandler;
  v1[17] = 1;
  v2 = a1;
  v1[18] = &CTRPluginFramework::exception_data;
  svcCreateEvent(&CTRPluginFramework::g_continueGameEvent, 0);
  svcCreateThread(
    &CTRPluginFramework::g_keepThreadHandle,
    CTRPluginFramework::KeepThreadMain,
    v2,
    &_ctru_heap_size,
    26,
    0);
  svcWaitSynchronization(CTRPluginFramework::g_continueGameEvent, v3, -1, -1);
  svcCloseHandle(CTRPluginFramework::g_continueGameEvent);
  return 0;
}
// 14: using guessed type int CTRPluginFramework::g_continueGameEvent;
// 74: using guessed type int CTRPluginFramework::g_keepThreadHandle;
// 1588: using guessed type _DWORD __cdecl CTRPluginFramework::KeepThreadMain(CTRPluginFramework *__hidden this, void *);
// 1B30: using guessed type int __fastcall svcCreateEvent(_DWORD, _DWORD);
// 1B34: using guessed type int __fastcall svcCreateThread(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1B38: using guessed type int __fastcall svcWaitSynchronization(_DWORD, _DWORD, _DWORD, _DWORD);
// 1B3C: using guessed type int __fastcall svcCloseHandle(_DWORD);

//----- (000014A4) --------------------------------------------------------
int __fastcall CTRPluginFramework::Utils::Search<unsigned long>(int a1, int a2, char **a3)
{
  int v3; // r5
  signed int v4; // r1
  char *v6; // r7
  char *v7; // r3
  int *v8; // r2
  int v9; // r3
  size_t v10; // r8
  int v11; // r2
  int v12; // r12
  int v13; // t1
  int v14; // r9
  unsigned int v15; // r6
  int v16; // r10
  unsigned int v17; // r5
  int v18; // r11
  int v19; // [sp+0h] [bp-428h]
  _DWORD v20[1]; // [sp+400h] [bp-28h]

  v3 = a2;
  v4 = a2 == 0;
  if ( !a1 )
    v4 = 1;
  if ( v4 )
    return 0;
  v6 = *a3;
  v7 = a3[1];
  if ( v7 == *a3 )
    return 0;
  v8 = &v19;
  v9 = v7 - v6;
  do
  {
    ++v4;
    *v8 = v9;
    ++v8;
  }
  while ( v4 != 256 );
  v10 = v9 - 1;
  v11 = v9 - 1;
  v12 = (int)(v6 - 1);
  while ( v11 )
  {
    v13 = *(unsigned __int8 *)(v12++ + 1);
    v20[v13 - 256] = v11--;
  }
  v14 = a1;
  v15 = 0;
  v16 = (unsigned __int8)v6[v10];
  v17 = v3 - v9;
  while ( 1 )
  {
    v18 = *(unsigned __int8 *)(v14 + v15 + v10);
    if ( v16 == v18 && !memcmp(v6, (const void *)(v14 + v15), v10) )
      break;
    v15 += v20[v18 - 256];
    if ( v17 < v15 )
      return 0;
  }
  return v14 + v15;
}

//----- (00001990) --------------------------------------------------------
int GLOBAL__sub_I_g_mainThread()
{
  return CTRPluginFramework::Hook::Hook((CTRPluginFramework::Hook *)&g_onLoadCroHook);
}
// 1BFC: using guessed type _DWORD CTRPluginFramework::Hook::Hook(CTRPluginFramework::Hook *__hidden this);

// ALL OK, 9 function(s) have been successfully decompiled
