/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

bool __fastcall __spoils<R0,R2,R3,R12> CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(int a1, int a2);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall CTRPluginFramework::FSPath::operator FS_Path(int result, _DWORD *a2);
int __fastcall CTRPluginFramework::Directory::Close(CTRPluginFramework::Directory *this, int a2, int a3);
signed int __fastcall CTRPluginFramework::Directory::OpenFile(int a1, int a2, _BYTE **a3, int a4);
CTRPluginFramework::Directory::DirectoryEntry *__fastcall CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(CTRPluginFramework::Directory::DirectoryEntry *this, unsigned int a2, unsigned __int8 *a3);
int __fastcall ZNK18CTRPluginFramework9Directory7GetNameB5cxx11Ev(int a1, int a2);
int __fastcall ZNK18CTRPluginFramework9Directory11GetFullNameB5cxx11Ev(int a1, int a2);
int __fastcall CTRPluginFramework::Directory::IsOpen(CTRPluginFramework::Directory *this);
CTRPluginFramework::Directory *__fastcall CTRPluginFramework::Directory::Directory(CTRPluginFramework::Directory *this);
_QWORD *__fastcall std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::clear(_QWORD *result);
CTRPluginFramework::Directory *__fastcall CTRPluginFramework::Directory::~Directory(CTRPluginFramework::Directory *this);
void **__fastcall std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base(void **a1);
signed int __fastcall CTRPluginFramework::Directory::ChangeWorkingDirectory(_DWORD *a1);
int __fastcall CTRPluginFramework::Directory::Create(int a1);
signed int __fastcall CTRPluginFramework::Directory::Remove(int a1);
int __fastcall CTRPluginFramework::Directory::Rename(int a1, int a2);
signed int __fastcall CTRPluginFramework::Directory::IsExists(int a1);
int __fastcall CTRPluginFramework::Directory::Open(int a1, int a2, int a3);
_DWORD *__fastcall CTRPluginFramework::Directory::Directory(int a1, int a2, int a3);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&>(char **a1, char *a2, int a3);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::push_back(int a1, int a2);
_DWORD *__fastcall CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(_DWORD *a1, _DWORD *a2);
void __fastcall std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::_M_realloc_insert<CTRPluginFramework::Directory::DirectoryEntry>(int a1, char *a2, int a3);
_DWORD *__fastcall CTRPluginFramework::Directory::DirectoryEntry::operator=(_DWORD *a1, _DWORD *a2);
int __fastcall std::__adjust_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,CTRPluginFramework::Directory::DirectoryEntry,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(int a1, int a2, int a3, _DWORD *a4);
int __fastcall std::__pop_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(_DWORD *a1, int a2, _DWORD *a3);
int __fastcall std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Val_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(_DWORD *a1);
int __fastcall std::__insertion_sort<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(int result, _DWORD *a2);
int __fastcall std::swap<CTRPluginFramework::Directory::DirectoryEntry>(_DWORD *a1, _DWORD *a2);
int __fastcall std::__introsort_loop<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(int result, char *a2, int a3, int a4);
signed int __fastcall CTRPluginFramework::Directory::_List(CTRPluginFramework::Directory *this);
int __fastcall CTRPluginFramework::Directory::ListFiles(int a1, int a2, int a3);
int __fastcall CTRPluginFramework::Directory::ListDirectories(int a1, int a2, int a3);
// int __fastcall decode_utf8(_DWORD, _DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_logic_error(const char *); idb
// _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *); weak
// int __fastcall FSDIR_Close(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Lock::~Lock(CTRPluginFramework::Lock *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Mutex::Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD); weak
// int __fastcall FSUSER_CreateDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(void); weak
// int __fastcall FSUSER_DeleteDirectoryRecursively(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall FSUSER_RenameDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall FSUSER_OpenDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::FSPath::SdmcFixPath(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Heap::Alloc(CTRPluginFramework::Heap *__hidden this, unsigned int); idb
// int __fastcall FSDIR_Read(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall utf16_to_utf8(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *__hidden this, void *); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(_DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN CTRPluginFramework::FSPath::FSMutex; weak
// extern _UNKNOWN ZN18CTRPluginFramework6FSPath23CurrentWorkingDirectoryB5cxx11E; weak
// extern _UNKNOWN CTRPluginFramework::_sdmcArchive; weak


//----- (00000004) --------------------------------------------------------
bool __fastcall __spoils<R0,R2,R3,R12> CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(int a1, int a2)
{
  int v2; // r5
  int v3; // r4
  int v4; // r6
  int v5; // r0
  bool v6; // zf
  _BOOL4 v7; // r3
  unsigned int v9; // [sp+0h] [bp-18h]
  unsigned int v10; // [sp+4h] [bp-14h]

  v9 = a1;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a2 + 4);
  do
  {
    v4 = decode_utf8(&v9, v2);
    v5 = decode_utf8(&v10, v3);
    v6 = v4 == -1;
    if ( v4 != -1 )
      v6 = v5 == -1;
    if ( v6 )
      break;
    v7 = v9 == 0;
    if ( v10 != v9 )
      v7 = 1;
    v2 += v4;
    v3 += v5;
  }
  while ( !v7 );
  return v9 < v10;
}
// 149C: using guessed type int __fastcall decode_utf8(_DWORD, _DWORD);

//----- (00000074) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  const char *v2; // r5
  int *v3; // r4
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  const char *v11; // [sp+4h] [bp-14h]

  v11 = a2;
  v2 = a2;
  *a1 = (int)(a1 + 2);
  if ( !a2 )
    std::__throw_logic_error("basic_string::_M_construct null not valid");
  v3 = a1;
  v4 = strlen(a2);
  v5 = (int)&v2[v4];
  v11 = (const char *)v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v3, &v11, 0);
    v7 = (int)v11;
    *v3 = v6;
    v3[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v3, v2, v5);
  result = v3;
  v9 = (int)v11;
  v10 = *v3;
  v3[1] = (int)v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 14A4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 14A8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000000FC) --------------------------------------------------------
int __fastcall CTRPluginFramework::FSPath::operator FS_Path(int result, _DWORD *a2)
{
  int v2; // r3

  if ( *a2 )
  {
    *(_BYTE *)result = 1;
    v2 = 0;
    *(_DWORD *)(result + 4) = 0;
  }
  else
  {
    *(_BYTE *)result = 4;
    *(_DWORD *)(result + 4) = 2 * (a2[1] + 1);
    v2 = a2[2];
  }
  *(_DWORD *)(result + 8) = v2;
  return result;
}

//----- (00000140) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::Close(CTRPluginFramework::Directory *this, int a2, int a3)
{
  CTRPluginFramework::Directory *v3; // r5
  int v4; // r4
  CTRPluginFramework::Directory *v6; // [sp+0h] [bp-18h]
  int v7; // [sp+4h] [bp-14h]
  int v8; // [sp+8h] [bp-10h]

  v6 = this;
  v7 = a2;
  v8 = a3;
  v3 = this;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v6, (CTRPluginFramework::Directory *)((char *)this + 32));
  if ( *((_BYTE *)v3 + 28) )
  {
    v4 = FSDIR_Close(*((_DWORD *)v3 + 6));
    if ( v4 >= 0 )
    {
      v4 = 0;
      *((_BYTE *)v3 + 28) = 0;
    }
  }
  else
  {
    v4 = -2;
  }
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v6);
  return v4;
}
// 14B0: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 14B4: using guessed type int __fastcall FSDIR_Close(_DWORD);

//----- (0000018C) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Directory::OpenFile(int a1, int a2, _BYTE **a3, int a4)
{
  int v4; // r4
  int v5; // r6
  int v6; // r5
  _BYTE **v7; // r4
  int v8; // r0
  char *v9; // r0
  char *v11; // [sp+0h] [bp-58h]
  int v12; // [sp+4h] [bp-54h]
  char v13; // [sp+8h] [bp-50h]
  char v14; // [sp+18h] [bp-40h]
  char v15; // [sp+30h] [bp-28h]

  if ( !*(_BYTE *)(a1 + 28) )
    return -2;
  v5 = a4;
  v11 = &v13;
  v12 = 0;
  v13 = 0;
  v6 = a2;
  v7 = a3;
  if ( **a3 == 47 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v15, a1);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v15, v7);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v11, &v15);
    v9 = &v15;
  }
  else
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v14, a1);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v14, "/");
    v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v14, v7);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v15, v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v11, &v15);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
    v9 = &v14;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v9);
  v4 = CTRPluginFramework::File::Open(v6, &v11, v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  return v4;
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14C0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 14C4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 14C8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14D4: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);

//----- (00000274) --------------------------------------------------------
CTRPluginFramework::Directory::DirectoryEntry *__fastcall CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(CTRPluginFramework::Directory::DirectoryEntry *this, unsigned int a2, unsigned __int8 *a3)
{
  CTRPluginFramework::Directory::DirectoryEntry *v3; // r4

  v3 = this;
  *(_DWORD *)this = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)this + 1,
    (const char *)a3);
  return v3;
}

//----- (00000290) --------------------------------------------------------
int __fastcall ZNK18CTRPluginFramework9Directory7GetNameB5cxx11Ev(int a1, int a2)
{
  int v2; // r5
  int v3; // r4
  int v4; // r0

  v2 = a2;
  v3 = a1;
  v4 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind(a2, "/", -1);
  if ( v4 == -1 )
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v3, v2);
  else
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(v3, v2, v4 + 1, -1);
  return v3;
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind(_DWORD, _DWORD, _DWORD);
// 14DC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000002E4) --------------------------------------------------------
int __fastcall ZNK18CTRPluginFramework9Directory11GetFullNameB5cxx11Ev(int a1, int a2)
{
  int v2; // r4

  v2 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, a2);
  return v2;
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (000002F8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::IsOpen(CTRPluginFramework::Directory *this)
{
  return *((unsigned __int8 *)this + 28);
}

//----- (00000300) --------------------------------------------------------
CTRPluginFramework::Directory *__fastcall CTRPluginFramework::Directory::Directory(CTRPluginFramework::Directory *this)
{
  CTRPluginFramework::Directory *v1; // r4

  v1 = this;
  *(_DWORD *)this = (char *)this + 8;
  *((_DWORD *)this + 1) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  CTRPluginFramework::Mutex::Mutex((CTRPluginFramework::Directory *)((char *)this + 32));
  *((_DWORD *)v1 + 11) = 0;
  *((_DWORD *)v1 + 12) = 0;
  *((_DWORD *)v1 + 13) = 0;
  return v1;
}

//----- (00000340) --------------------------------------------------------
_QWORD *__fastcall std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::clear(_QWORD *result)
{
  __int64 v1; // r6
  _QWORD *v2; // r4
  int v3; // r5
  int v4; // r0

  v1 = *result;
  if ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = result;
    v3 = v1;
    do
    {
      v4 = v3 + 4;
      v3 += 28;
      result = (_QWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4);
    }
    while ( HIDWORD(v1) != v3 );
    *((_DWORD *)v2 + 1) = v1;
  }
  return result;
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000374) --------------------------------------------------------
CTRPluginFramework::Directory *__fastcall CTRPluginFramework::Directory::~Directory(CTRPluginFramework::Directory *this)
{
  CTRPluginFramework::Directory *v1; // r4
  int v2; // r1
  int v3; // r2
  int v4; // r5
  int v5; // r6
  void *v6; // r0

  v1 = this;
  std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::clear((CTRPluginFramework::Directory *)((char *)this + 44));
  CTRPluginFramework::Directory::Close(v1, v2, v3);
  v4 = *((_DWORD *)v1 + 11);
  v5 = *((_DWORD *)v1 + 12);
  while ( v5 != v4 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4 + 4);
    v4 += 28;
  }
  v6 = (void *)*((_DWORD *)v1 + 11);
  if ( v6 )
    operator delete(v6);
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::Directory *)((char *)v1 + 32));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000003D4) --------------------------------------------------------
void **__fastcall std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base(void **a1)
{
  void **v1; // r4
  void *v2; // r0

  v1 = a1;
  v2 = *a1;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (000003F4) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Directory::ChangeWorkingDirectory(_DWORD *a1)
{
  _DWORD *v1; // r4
  signed int v2; // r5
  int v4; // [sp+4h] [bp-3Ch]
  char v5; // [sp+Ch] [bp-34h]
  char v6; // [sp+18h] [bp-28h]

  v1 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v6, a1);
  CTRPluginFramework::FSPath::FSPath(&v4, &v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  v2 = v4;
  if ( v4 )
  {
    v2 = -1;
  }
  else
  {
    CTRPluginFramework::Lock::Lock(
      (CTRPluginFramework::Lock *)&v6,
      (CTRPluginFramework::Mutex *)&CTRPluginFramework::FSPath::FSMutex);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(
      &ZN18CTRPluginFramework6FSPath23CurrentWorkingDirectoryB5cxx11E,
      v1);
    if ( *(_BYTE *)(*v1 + v1[1] - 1) != 47 )
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(
        &ZN18CTRPluginFramework6FSPath23CurrentWorkingDirectoryB5cxx11E,
        47);
    CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v6);
  }
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v5);
  return v2;
}
// 14B0: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14EC: using guessed type int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD);
// 14F0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 14F4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD);

//----- (0000048C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::Create(int a1)
{
  int v1; // r5
  int v2; // r4
  __int64 v3; // r6
  int v4; // r0
  int v6; // [sp+Ch] [bp-44h]
  char v7; // [sp+14h] [bp-3Ch]
  char v8; // [sp+20h] [bp-30h]
  int v9; // [sp+24h] [bp-2Ch]
  int v10; // [sp+28h] [bp-28h]

  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v8, a1);
  CTRPluginFramework::FSPath::FSPath(&v6, &v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  v1 = v6;
  if ( v6 )
  {
    v2 = -1;
  }
  else
  {
    v3 = CTRPluginFramework::_sdmcArchive;
    CTRPluginFramework::FSPath::operator FS_Path((int)&v8, &v6);
    v4 = FSUSER_CreateDirectory(v3, HIDWORD(v3), *(_DWORD *)&v8, v9, v10, v1);
    if ( v4 == -937409346 )
      v2 = 1;
    else
      v2 = v4 & (v4 >> 31);
  }
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v7);
  return v2;
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14EC: using guessed type int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD);
// 1500: using guessed type int __fastcall FSUSER_CreateDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000524) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Directory::Remove(int a1)
{
  int v1; // r5
  int v2; // r4
  __int64 v3; // r6
  int v4; // r0
  int v6; // [sp+Ch] [bp-44h]
  char v7; // [sp+14h] [bp-3Ch]
  char v8; // [sp+20h] [bp-30h]
  int v9; // [sp+24h] [bp-2Ch]
  int v10; // [sp+28h] [bp-28h]

  v1 = a1;
  if ( !std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare() )
    return -1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v8, v1);
  CTRPluginFramework::FSPath::FSPath(&v6, &v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  if ( v6 )
  {
    v2 = -1;
  }
  else
  {
    v3 = CTRPluginFramework::_sdmcArchive;
    CTRPluginFramework::FSPath::operator FS_Path((int)&v8, &v6);
    v4 = FSUSER_DeleteDirectoryRecursively(v3, HIDWORD(v3), *(_DWORD *)&v8, v9, v10);
    v2 = v4 & (v4 >> 31);
  }
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v7);
  return v2;
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14EC: using guessed type int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD);
// 1508: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(void);
// 150C: using guessed type int __fastcall FSUSER_DeleteDirectoryRecursively(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000005C4) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::Rename(int a1, int a2)
{
  int v2; // r5
  int v3; // r4
  __int64 v4; // r6
  int v5; // r0
  char v7; // [sp+24h] [bp-64h]
  int v8; // [sp+28h] [bp-60h]
  int v9; // [sp+2Ch] [bp-5Ch]
  int v10; // [sp+30h] [bp-58h]
  char v11; // [sp+38h] [bp-50h]
  int v12; // [sp+44h] [bp-44h]
  char v13; // [sp+4Ch] [bp-3Ch]
  char v14; // [sp+58h] [bp-30h]

  v2 = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v14, a1);
  CTRPluginFramework::FSPath::FSPath(&v10, &v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v14, v2);
  CTRPluginFramework::FSPath::FSPath(&v12, &v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
  if ( v12 | v10 )
  {
    v3 = -1;
  }
  else
  {
    v4 = CTRPluginFramework::_sdmcArchive;
    CTRPluginFramework::FSPath::operator FS_Path((int)&v7, &v10);
    CTRPluginFramework::FSPath::operator FS_Path((int)&v14, &v12);
    v5 = ((int (__fastcall *)(_DWORD, _DWORD, _DWORD, int, int))FSUSER_RenameDirectory)(
           v4,
           HIDWORD(v4),
           *(_DWORD *)&v7,
           v8,
           v9);
    v3 = v5 & (v5 >> 31);
  }
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v13);
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v11);
  return v3;
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14EC: using guessed type int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD);
// 1510: using guessed type int __fastcall FSUSER_RenameDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000698) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Directory::IsExists(int a1)
{
  signed int v1; // r5
  __int64 v2; // r6
  int v4; // [sp+10h] [bp-48h]
  int v5; // [sp+14h] [bp-44h]
  char v6; // [sp+1Ch] [bp-3Ch]
  char v7; // [sp+28h] [bp-30h]
  int v8; // [sp+2Ch] [bp-2Ch]
  int v9; // [sp+30h] [bp-28h]

  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v7, a1);
  CTRPluginFramework::FSPath::FSPath(&v5, &v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  v1 = v5;
  if ( v5 )
  {
    v1 = -1;
  }
  else
  {
    v2 = CTRPluginFramework::_sdmcArchive;
    CTRPluginFramework::FSPath::operator FS_Path((int)&v7, &v5);
    if ( FSUSER_OpenDirectory(&v4, v8, v2, HIDWORD(v2), *(_DWORD *)&v7, v8, v9) >= 0 )
    {
      FSDIR_Close(v4);
      v1 = 1;
    }
  }
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v6);
  return v1;
}
// 14B4: using guessed type int __fastcall FSDIR_Close(_DWORD);
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14EC: using guessed type int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD);
// 1514: using guessed type int __fastcall FSUSER_OpenDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0000072C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::Open(int a1, int a2, int a3)
{
  int v3; // r4
  int v4; // r7
  int v5; // r11
  int v6; // r1
  int v7; // r2
  _BYTE *v8; // r2
  int v9; // r6
  __int64 v10; // r8
  __int64 v11; // r8
  int v13; // [sp+14h] [bp-6Ch]
  char v14; // [sp+18h] [bp-68h]
  char v15; // [sp+20h] [bp-60h]
  int v16; // [sp+24h] [bp-5Ch]
  int v17; // [sp+28h] [bp-58h]
  int v18; // [sp+2Ch] [bp-54h]
  char v19; // [sp+34h] [bp-4Ch]
  char v20; // [sp+40h] [bp-40h]
  int v21; // [sp+44h] [bp-3Ch]
  int v22; // [sp+48h] [bp-38h]

  v3 = a1;
  v4 = a2;
  v5 = a3;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v14, (CTRPluginFramework::Mutex *)(a1 + 32));
  if ( *(_BYTE *)(v3 + 28) )
    CTRPluginFramework::Directory::Close((CTRPluginFramework::Directory *)v3, v6, v7);
  v8 = *(_BYTE **)v3;
  *(_DWORD *)(v3 + 4) = 0;
  *v8 = 0;
  *(_DWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 28) = 0;
  std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::clear((_QWORD *)(v3 + 44));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v20, v4);
  CTRPluginFramework::FSPath::FSPath(&v18, &v20);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v20);
  if ( v18 )
  {
    v9 = -1;
  }
  else
  {
    v10 = CTRPluginFramework::_sdmcArchive;
    CTRPluginFramework::FSPath::operator FS_Path((int)&v15, &v18);
    v9 = FSUSER_OpenDirectory(&v13, v16, v10, HIDWORD(v10), *(_DWORD *)&v15, v16, v17);
    if ( v9 >= 0
      || v5
      && (v9 = CTRPluginFramework::Directory::Create(v4)) == 0
      && (v11 = CTRPluginFramework::_sdmcArchive,
          CTRPluginFramework::FSPath::operator FS_Path((int)&v20, &v18),
          v9 = FSUSER_OpenDirectory(&v13, v21, v11, HIDWORD(v11), *(_DWORD *)&v20, v21, v22),
          v9 >= 0) )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v3, v4);
      CTRPluginFramework::FSPath::SdmcFixPath(v3);
      *(_DWORD *)(v3 + 24) = v13;
      *(_BYTE *)(v3 + 28) = 1;
    }
  }
  std::_Vector_base<unsigned short,std::allocator<unsigned short>>::~_Vector_base((void **)&v19);
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v14);
  return v9;
}
// 14B0: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14EC: using guessed type int __fastcall CTRPluginFramework::FSPath::FSPath(_DWORD, _DWORD);
// 14F0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 1514: using guessed type int __fastcall FSUSER_OpenDirectory(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1518: using guessed type int __fastcall CTRPluginFramework::FSPath::SdmcFixPath(_DWORD);

//----- (00000878) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Directory::Directory(int a1, int a2, int a3)
{
  _DWORD *v3; // r4
  int v4; // r6
  int v5; // r7

  v3 = (_DWORD *)a1;
  v4 = a2;
  v5 = a3;
  *(_DWORD *)a1 = a1 + 8;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  CTRPluginFramework::Mutex::Mutex((CTRPluginFramework::Mutex *)(a1 + 32));
  v3[11] = 0;
  v3[12] = 0;
  v3[13] = 0;
  CTRPluginFramework::Directory::Open((int)v3, v4, v5);
  return v3;
}

//----- (000008D0) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&>(char **a1, char *a2, int a3)
{
  char *v3; // r7
  char *v4; // r6
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  char **v9; // r8
  char *v10; // r9
  __int64 v11; // r10
  unsigned int v12; // r5
  char *v13; // r11
  int i; // r0
  int v15; // r5
  int v16; // r5
  int v17; // r11
  int v18; // r3
  int v19; // r2
  int v20; // ST04_4
  int v21; // ST00_4
  unsigned int v22; // r9
  char *v23; // r6
  int v24; // r9
  int v25; // r5
  int v26; // [sp+0h] [bp-30h]

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 3);
  if ( -1431655765 * ((v4 - *a1) >> 3) )
    v6 = -1431655765 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  HIDWORD(v11) = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xAAAAAAA )
  {
    v8 = 178956970;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    LODWORD(v11) = operator new(24 * v8);
    goto LABEL_8;
  }
  LODWORD(v11) = 0;
LABEL_8:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11 + v12, HIDWORD(v11));
  v13 = v3;
  for ( i = v11; ; i = v26 )
  {
    v26 = i + 24;
    if ( v10 == v13 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(i, v13);
    v13 += 24;
  }
  v15 = 178956971 * (v12 >> 3) & 0x1FFFFFFF;
  HIDWORD(v11) = 24 * v15 + 24;
  v16 = (int)&v3[24 * v15];
  v17 = v11 + HIDWORD(v11);
  v18 = v16;
  v19 = v17;
  while ( v4 != (char *)v18 )
  {
    v20 = v18;
    v21 = v19;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v19, v18);
    v19 = v21 + 24;
    v18 = v20 + 24;
  }
  v22 = 178956971 * ((unsigned int)&v4[-v16] >> 3);
  v23 = v3;
  v24 = 24 * (v22 & 0x1FFFFFFF);
  v25 = v16 + v24;
  HIDWORD(v11) = v17 + v24;
  while ( (char *)v25 != v23 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23);
    v23 += 24;
  }
  if ( v3 )
    operator delete(v3);
  *(_QWORD *)v9 = v11;
  v9[2] = (char *)(v11 + 24 * v8);
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14C8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000A40) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::push_back(int a1, int a2)
{
  int v2; // r4

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&>(
      (char **)a1,
      *(char **)(a1 + 4),
      a2);
  }
  else
  {
    v2 = a1;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(*(_DWORD *)(a1 + 4), a2);
    *(_DWORD *)(v2 + 4) += 24;
  }
}
// 14BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000A7C) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // r4

  v2 = a1;
  *a1 = *a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1 + 1, a2 + 1);
  return v2;
}
// 14C8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000A98) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::_M_realloc_insert<CTRPluginFramework::Directory::DirectoryEntry>(int a1, char *a2, int a3)
{
  char *v3; // r7
  _DWORD *v4; // r6
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int v9; // r8
  char *v10; // r9
  __int64 v11; // r10
  unsigned int v12; // r5
  char *v13; // r11
  _DWORD *i; // r0
  int v15; // r5
  int v16; // r5
  _DWORD *v17; // r11
  _DWORD *v18; // r3
  _DWORD *v19; // r2
  _DWORD *v20; // ST04_4
  _DWORD *v21; // ST00_4
  unsigned int v22; // r9
  char *v23; // r6
  int v24; // r9
  int v25; // r5
  int v26; // [sp+0h] [bp-30h]

  v3 = *(char **)a1;
  v4 = *(_DWORD **)(a1 + 4);
  v5 = -1227133513 * (((signed int)v4 - *(_DWORD *)a1) >> 2);
  if ( -1227133513 * (((signed int)v4 - *(_DWORD *)a1) >> 2) )
    v6 = -1227133513 * (((signed int)v4 - *(_DWORD *)a1) >> 2);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  HIDWORD(v11) = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x9249249 )
  {
    v8 = 153391689;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    LODWORD(v11) = operator new(28 * v8);
    goto LABEL_8;
  }
  LODWORD(v11) = 0;
LABEL_8:
  CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry((_DWORD *)(v11 + v12), (_DWORD *)HIDWORD(v11));
  v13 = v3;
  for ( i = (_DWORD *)v11; ; i = (_DWORD *)v26 )
  {
    v26 = (int)(i + 7);
    if ( v10 == v13 )
      break;
    CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(i, v13);
    v13 += 28;
  }
  v15 = 920350135 * (v12 >> 2) & 0x3FFFFFFF;
  HIDWORD(v11) = 28 * v15 + 28;
  v16 = (int)&v3[28 * v15];
  v17 = (_DWORD *)(v11 + HIDWORD(v11));
  v18 = (_DWORD *)v16;
  v19 = v17;
  while ( v4 != v18 )
  {
    v20 = v18;
    v21 = v19;
    CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(v19, v18);
    v19 = v21 + 7;
    v18 = v20 + 7;
  }
  v22 = 920350135 * (((unsigned int)v4 - v16) >> 2);
  v23 = v3;
  v24 = 7 * (v22 & 0x3FFFFFFF);
  v25 = v16 + v24 * 4;
  HIDWORD(v11) = &v17[v24];
  while ( (char *)v25 != v23 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23 + 4);
    v23 += 28;
  }
  if ( v3 )
    operator delete(v3);
  *(_QWORD *)v9 = v11;
  *(_DWORD *)(v9 + 8) = v11 + 28 * v8;
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000C08) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Directory::DirectoryEntry::operator=(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // r4

  v2 = a1;
  *a1 = *a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(a1 + 1, a2 + 1);
  return v2;
}
// 14CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (00000C24) --------------------------------------------------------
int __fastcall std::__adjust_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,CTRPluginFramework::Directory::DirectoryEntry,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(int a1, int a2, int a3, _DWORD *a4)
{
  _DWORD *v4; // r9
  int v5; // r11
  int v6; // r6
  int v7; // r7
  int v8; // r5
  int i; // r4
  int v10; // r8
  int j; // r5
  char v13; // [sp+Ch] [bp-44h]
  char v14; // [sp+10h] [bp-40h]

  v4 = a4;
  v5 = (a3 - 1) / 2;
  v6 = a1;
  v7 = a2;
  v8 = a3;
  for ( i = a2; v5 > i; i = v10 )
  {
    v10 = 2 * (i + 1);
    if ( CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
           v6 + 56 * (i + 1),
           v6 + 28 * (v10 - 1)) )
    {
      --v10;
    }
    CTRPluginFramework::Directory::DirectoryEntry::operator=((_DWORD *)(v6 + 28 * i), (_DWORD *)(v6 + 28 * v10));
  }
  if ( !(v8 & 1) && i == (v8 - 2) / 2 )
  {
    CTRPluginFramework::Directory::DirectoryEntry::operator=((_DWORD *)(v6 + 28 * i), (_DWORD *)(v6 + 28 * (2 * i + 1)));
    i = 2 * i + 1;
  }
  CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v13, v4);
  for ( j = (i - 1) / 2;
        v7 < i
     && CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
          v6 + 28 * j,
          (int)&v13);
        j = (j - 1) / 2 )
  {
    CTRPluginFramework::Directory::DirectoryEntry::operator=((_DWORD *)(v6 + 28 * i), (_DWORD *)(v6 + 28 * j));
    i = j;
  }
  CTRPluginFramework::Directory::DirectoryEntry::operator=((_DWORD *)(v6 + 28 * i), &v13);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000D4C) --------------------------------------------------------
int __fastcall std::__pop_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(_DWORD *a1, int a2, _DWORD *a3)
{
  _DWORD *v3; // r5
  _DWORD *v4; // r6
  int v5; // r4
  int v7; // [sp+0h] [bp-48h]
  char v8; // [sp+4h] [bp-44h]
  char v9; // [sp+1Ch] [bp-2Ch]
  char v10; // [sp+20h] [bp-28h]

  v3 = a1;
  v4 = a3;
  v5 = a2;
  CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v7, a3);
  CTRPluginFramework::Directory::DirectoryEntry::operator=(v4, v3);
  CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v9, &v7);
  std::__adjust_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,CTRPluginFramework::Directory::DirectoryEntry,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
    (int)v3,
    0,
    -1227133513 * ((v5 - (signed int)v3) >> 2),
    &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000DC4) --------------------------------------------------------
int __fastcall std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Val_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(_DWORD *a1)
{
  _DWORD *v1; // r4
  int v2; // r4
  _BOOL4 v3; // r0
  _DWORD *v4; // r6
  _DWORD *v5; // r5
  char v7; // [sp+4h] [bp-2Ch]
  char v8; // [sp+8h] [bp-28h]

  v1 = a1;
  CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v7, a1);
  v2 = (int)(v1 - 7);
  while ( 1 )
  {
    v3 = CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
           (int)&v7,
           v2);
    v4 = (_DWORD *)v2;
    v5 = (_DWORD *)(v2 + 28);
    v2 -= 28;
    if ( !v3 )
      break;
    CTRPluginFramework::Directory::DirectoryEntry::operator=(v5, v4);
  }
  CTRPluginFramework::Directory::DirectoryEntry::operator=(v5, &v7);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000E2C) --------------------------------------------------------
int __fastcall std::__insertion_sort<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(int result, _DWORD *a2)
{
  _DWORD *v2; // r8
  _DWORD *v3; // r5
  _DWORD *i; // r4
  _DWORD *v5; // r7
  int j; // r6
  _DWORD *v7; // r0
  char v8; // [sp+4h] [bp-3Ch]
  char v9; // [sp+8h] [bp-38h]

  if ( (_DWORD *)result != a2 )
  {
    v2 = a2;
    v3 = (_DWORD *)result;
    for ( i = (_DWORD *)(result + 28); ; i += 7 )
    {
      v5 = i;
      if ( v2 == i )
        break;
      if ( CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
             (int)i,
             (int)v3) )
      {
        CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v8, i);
        for ( j = -1227133513 * (i - v3); j > 0; --j )
        {
          v7 = v5;
          v5 -= 7;
          CTRPluginFramework::Directory::DirectoryEntry::operator=(v7, v5);
        }
        CTRPluginFramework::Directory::DirectoryEntry::operator=(v3, &v8);
        result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
      }
      else
      {
        result = std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Val_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(i);
      }
    }
  }
  return result;
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000ED8) --------------------------------------------------------
int __fastcall std::swap<CTRPluginFramework::Directory::DirectoryEntry>(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // r4
  _DWORD *v3; // r5
  char v5; // [sp+4h] [bp-2Ch]
  char v6; // [sp+8h] [bp-28h]

  v2 = a2;
  v3 = a1;
  CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v5, a1);
  CTRPluginFramework::Directory::DirectoryEntry::operator=(v3, v2);
  CTRPluginFramework::Directory::DirectoryEntry::operator=(v2, &v5);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000F1C) --------------------------------------------------------
int __fastcall std::__introsort_loop<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(int result, char *a2, int a3, int a4)
{
  char *v4; // r5
  int v5; // r8
  int v6; // r9
  char *v7; // r6
  int v8; // r7
  int v9; // r4
  int v10; // r7
  bool v11; // zf
  bool v12; // nf
  unsigned __int8 v13; // vf
  int v14; // r4
  int v15; // r1
  char *v16; // r1
  char *v17; // r4
  char *v18; // r11
  int v19; // r3
  int v20; // ST04_4
  _BOOL4 v21; // r0
  char v22; // [sp+8h] [bp-60h]
  char v23; // [sp+Ch] [bp-5Ch]
  char v24; // [sp+24h] [bp-44h]
  char v25; // [sp+28h] [bp-40h]

  v4 = (char *)result;
  v5 = a3;
  v6 = a4;
  v7 = a2;
  v8 = result + 28;
LABEL_2:
  if ( v7 - v4 > 448 )
  {
    v9 = -1227133513 * ((v7 - v4) >> 2);
    if ( !v5 )
    {
      v10 = (v9 - 2) >> 1;
      while ( 1 )
      {
        CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v22, &v4[28 * v10]);
        CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(&v24, &v22);
        std::__adjust_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,CTRPluginFramework::Directory::DirectoryEntry,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
          (int)v4,
          v10,
          -1227133513 * ((v7 - v4) >> 2),
          &v24);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
        if ( !v10 )
          break;
        --v10;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
      }
      for ( result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
            ;
            result = std::__pop_heap<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
                       v4,
                       (int)v7,
                       v7) )
      {
        v13 = __OFSUB__(v7 - v4, 28);
        v11 = v7 - v4 == 28;
        v12 = v7 - v4 - 28 < 0;
        v7 -= 28;
        if ( (unsigned __int8)(v12 ^ v13) | v11 )
          break;
      }
      return result;
    }
    v14 = (int)&v4[28 * (v9 >> 1)];
    --v5;
    v15 = (int)(v7 - 28);
    if ( CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
           v8,
           v14) )
    {
      if ( CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
             v14,
             v15) )
      {
LABEL_12:
        v16 = (char *)v14;
LABEL_17:
        std::swap<CTRPluginFramework::Directory::DirectoryEntry>(v4, v16);
        v17 = (char *)v8;
        v18 = v7;
        while ( 1 )
        {
          if ( !CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
                  (int)v17,
                  (int)v4) )
          {
            v19 = (int)(v18 - 28);
            do
            {
              v18 = (char *)v19;
              v20 = v19;
              v21 = CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
                      (int)v4,
                      v19);
              v19 = v20 - 28;
            }
            while ( v21 );
            if ( v17 >= v18 )
            {
              result = std::__introsort_loop<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
                         v17,
                         v7,
                         v5,
                         v6);
              v7 = v17;
              goto LABEL_2;
            }
            std::swap<CTRPluginFramework::Directory::DirectoryEntry>(v17, v18);
          }
          v17 += 28;
        }
      }
      if ( CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
             v8,
             (int)(v7 - 28)) )
      {
LABEL_14:
        v16 = v7 - 28;
        goto LABEL_17;
      }
    }
    else if ( !CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
                 v8,
                 v15) )
    {
      if ( !CTRPluginFramework::Directory::_List(void)::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}::operator() constconst(
              v14,
              (int)(v7 - 28)) )
        goto LABEL_12;
      goto LABEL_14;
    }
    v16 = (char *)v8;
    goto LABEL_17;
  }
  return result;
}
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000010F8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Directory::_List(CTRPluginFramework::Directory *this)
{
  CTRPluginFramework::Directory *v1; // r4
  unsigned int v2; // r1
  void *v3; // r1
  CTRPluginFramework::Heap *v4; // r6
  unsigned int v5; // r7
  CTRPluginFramework::Heap *v6; // r5
  int v7; // r0
  _DWORD *v8; // r0
  char *v9; // r4
  void *v10; // r1
  signed int v11; // r4
  int v12; // r5
  char *v13; // r7
  unsigned int v15; // [sp+4h] [bp-104Ch]
  char v16; // [sp+8h] [bp-1048h]
  int v17; // [sp+10h] [bp-1040h]
  char v18; // [sp+14h] [bp-103Ch]
  char v19; // [sp+2Ch] [bp-1024h]
  char v20; // [sp+30h] [bp-1020h]

  v1 = this;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v16, (CTRPluginFramework::Directory *)((char *)this + 32));
  v4 = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)0xD7A0, v2);
  v15 = 0;
  if ( !v4 )
    goto LABEL_23;
  while ( FSDIR_Read(*((_DWORD *)v1 + 6), &v15, 100, v4) >= 0 && v15 )
  {
    v5 = 0;
    v6 = v4;
    while ( v15 > v5 )
    {
      v7 = utf16_to_utf8(&v19, v6, 4096);
      if ( v7 != -1 )
      {
        *(&v20 + v7 - 4) = 0;
        v17 = *((_DWORD *)v6 + 135);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v18, &v19);
        v8 = (_DWORD *)*((_DWORD *)v1 + 12);
        if ( v8 == *((_DWORD **)v1 + 13) )
        {
          std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>::_M_realloc_insert<CTRPluginFramework::Directory::DirectoryEntry>(
            (int)v1 + 44,
            *((char **)v1 + 12),
            (int)&v17);
        }
        else
        {
          CTRPluginFramework::Directory::DirectoryEntry::DirectoryEntry(v8, &v17);
          *((_DWORD *)v1 + 12) += 28;
        }
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v18);
      }
      ++v5;
      v6 = (CTRPluginFramework::Heap *)((char *)v6 + 552);
    }
  }
  v12 = *((_DWORD *)v1 + 11);
  v13 = (char *)*((_DWORD *)v1 + 12);
  if ( (char *)v12 != v13 )
  {
    std::__introsort_loop<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,int,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
      v12,
      v13,
      2 * (31 - __clz(-1227133513 * ((signed int)&v13[-v12] >> 2))),
      0);
    if ( (signed int)&v13[-v12] <= 448 )
    {
      std::__insertion_sort<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
        v12,
        v13);
    }
    else
    {
      v9 = (char *)(v12 + 448);
      std::__insertion_sort<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Iter_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(
        v12,
        (_DWORD *)(v12 + 448));
      while ( v13 != v9 )
      {
        std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<CTRPluginFramework::Directory::DirectoryEntry *,std::vector<CTRPluginFramework::Directory::DirectoryEntry,std::allocator<CTRPluginFramework::Directory::DirectoryEntry>>>,__gnu_cxx::__ops::_Val_comp_iter<CTRPluginFramework::Directory::_List(void)const::{lambda(CTRPluginFramework::Directory::DirectoryEntry const&,CTRPluginFramework::Directory::DirectoryEntry const&)#1}>>(v9);
        v9 += 28;
      }
    }
    CTRPluginFramework::Heap::Free(v4, v10);
    v11 = 0;
  }
  else
  {
LABEL_23:
    CTRPluginFramework::Heap::Free(v4, v3);
    v11 = -1;
  }
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v16);
  return v11;
}
// 14B0: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1524: using guessed type int __fastcall FSDIR_Read(_DWORD, _DWORD, _DWORD, _DWORD);
// 1528: using guessed type int __fastcall utf16_to_utf8(_DWORD, _DWORD, _DWORD);

//----- (000012AC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::ListFiles(int a1, int a2, int a3)
{
  int v3; // r4
  _DWORD *v4; // r7
  int v5; // r8
  int v6; // r4
  int v7; // r10
  int v8; // r6
  int v9; // r9
  int i; // r4
  int v12; // [sp+0h] [bp-28h]
  int v13; // [sp+4h] [bp-24h]

  v12 = a1;
  v13 = a2;
  v3 = a1;
  v4 = (_DWORD *)a2;
  v5 = a3;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v12, (CTRPluginFramework::Mutex *)(a1 + 32));
  if ( *(_BYTE *)(v3 + 28) )
  {
    v7 = *(_DWORD *)(v5 + 4);
    if ( *(_DWORD *)(v3 + 48) == *(_DWORD *)(v3 + 44) )
      CTRPluginFramework::Directory::_List((CTRPluginFramework::Directory *)v3);
    v8 = -1431655765 * ((v4[1] - *v4) >> 3);
    v9 = *(_DWORD *)(v3 + 48);
    for ( i = *(_DWORD *)(v3 + 44) + 4; v9 != i - 4; i += 28 )
    {
      if ( !(*(_DWORD *)(i - 4) & 1)
        && (!v7 || std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(i, v5, 0) != -1) )
      {
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::push_back(
          (int)v4,
          i);
      }
    }
    v6 = -1431655765 * ((v4[1] - *v4) >> 3) - v8;
  }
  else
  {
    v6 = -2;
  }
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v12);
  return v6;
}
// 14B0: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 1530: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(_DWORD, _DWORD, _DWORD);

//----- (0000138C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Directory::ListDirectories(int a1, int a2, int a3)
{
  int v3; // r4
  _DWORD *v4; // r7
  int v5; // r8
  int v6; // r4
  int v7; // r9
  int v8; // r6
  int v9; // r10
  int i; // r4
  int v12; // [sp+0h] [bp-28h]
  int v13; // [sp+4h] [bp-24h]

  v12 = a1;
  v13 = a2;
  v3 = a1;
  v4 = (_DWORD *)a2;
  v5 = a3;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v12, (CTRPluginFramework::Mutex *)(a1 + 32));
  if ( *(_BYTE *)(v3 + 28) )
  {
    v7 = *(_DWORD *)(v5 + 4);
    if ( *(_DWORD *)(v3 + 48) == *(_DWORD *)(v3 + 44) )
      CTRPluginFramework::Directory::_List((CTRPluginFramework::Directory *)v3);
    v8 = -1431655765 * ((v4[1] - *v4) >> 3);
    v9 = *(_DWORD *)(v3 + 48);
    for ( i = *(_DWORD *)(v3 + 44) + 4; v9 != i - 4; i += 28 )
    {
      if ( *(_DWORD *)(i - 4) & 1
        && (!v7 || std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(i, v5, 0) != -1) )
      {
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::push_back(
          (int)v4,
          i);
      }
    }
    v6 = -1431655765 * ((v4[1] - *v4) >> 3) - v8;
  }
  else
  {
    v6 = -2;
  }
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v12);
  return v6;
}
// 14B0: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 1530: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(_DWORD, _DWORD, _DWORD);

// ALL OK, 34 function(s) have been successfully decompiled
