/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall CTRPluginFramework::ConvertToFloat(int a1);
void *__fastcall CTRPluginFramework::ConvertToDouble(int a1);
signed int __fastcall CTRPluginFramework::stou32(_DWORD *a1, _DWORD *a2);
signed int __fastcall CTRPluginFramework::stou64(_DWORD *a1, _QWORD *a2);
void *__fastcall CTRPluginFramework::ConvertToU64(const char **a1, char *a2, int a3);
int __fastcall CTRPluginFramework::Keyboard::Keyboard(int a1, int a2);
int __fastcall CTRPluginFramework::Keyboard::Keyboard(int a1, int a2, _QWORD *a3);
int __fastcall CTRPluginFramework::Keyboard::Keyboard(int a1, _QWORD *a2);
CTRPluginFramework::Keyboard *__fastcall CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *this);
int __fastcall CTRPluginFramework::Keyboard::IsHexadecimal(int result, bool a2);
int __fastcall CTRPluginFramework::Keyboard::SetMaxLength(CTRPluginFramework::Keyboard *this, unsigned int a2);
int __fastcall CTRPluginFramework::Keyboard::SetCompareCallback(int a1);
int __fastcall CTRPluginFramework::Keyboard::Populate(int a1, int a2);
signed int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int64 *a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int64 *a2, unsigned __int64 a3);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, float *a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, float *a2, float a3);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, double *a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, double *a2, double a3);
int __fastcall CTRPluginFramework::Keyboard::Open(int a1, int a2);
int __fastcall CTRPluginFramework::Keyboard::Open(int a1, int a2, int a3);
int __fastcall ZNK18CTRPluginFramework8Keyboard8GetInputB5cxx11Ev(int a1);
int __fastcall ZNK18CTRPluginFramework8Keyboard10GetMessageB5cxx11Ev(int a1);
int __fastcall CTRPluginFramework::Keyboard::SetError(int a1);
int __fastcall CTRPluginFramework::Keyboard::CanAbort(CTRPluginFramework::Keyboard *this, bool a2);
int __fastcall CTRPluginFramework::Keyboard::Close(CTRPluginFramework::Keyboard *this);
int __fastcall CTRPluginFramework::Keyboard::OnInputChange(int a1);
int __fastcall __gnu_cxx::__stoa<unsigned long,unsigned long,char,int>(int (__fastcall *a1)(int, int *, int), int a2, int a3, _DWORD *a4, int a5);
int *__fastcall CTRPluginFramework::ConvertToU32(int *a1, int a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned int *a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned int *a2, unsigned int a3);
char *__fastcall CTRPluginFramework::ConvertToU8(int *a1, int a2, int a3, int a4);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int8 *a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int8 *a2, int a3);
__int16 *__fastcall CTRPluginFramework::ConvertToU16(int *a1, int a2, int a3, int a4);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int16 *a2);
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int16 *a2, int a3);
// int __fastcall _errno(_DWORD); weak
// int __fastcall strtof(_DWORD, _DWORD); weak
// _DWORD __cdecl std::__throw_invalid_argument(const char *); idb
// void __cdecl __noreturn std::__throw_out_of_range(const char *); idb
// double strtod(const char *nptr, char **endptr);
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(void); weak
// unsigned __int64 strtoull(const char *nptr, char **endptr, int base);
// _DWORD __cdecl operator new(unsigned int); idb
// int CTRPluginFramework::KeyboardImpl::KeyboardImpl(void); weak
// int __fastcall CTRPluginFramework::KeyboardImpl::Populate(_DWORD, _DWORD); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::KeyboardImpl::~KeyboardImpl(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl CTRPluginFramework::KeyboardImpl::SetMaxInput(CTRPluginFramework::KeyboardImpl *__hidden this, int); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::SetCompareCallback(_DWORD); weak
// _DWORD CTRPluginFramework::KeyboardImpl::Run(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::KeyboardImpl::CanChangeLayout(CTRPluginFramework::KeyboardImpl *__hidden this, bool); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD); weak
// _DWORD CTRPluginFramework::KeyboardImpl::IsHexadecimal(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework12KeyboardImpl10GetMessageB5cxx11Ev(_DWORD); weak
// int __fastcall CTRPluginFramework::KeyboardImpl::SetError(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::KeyboardImpl::CanAbort(CTRPluginFramework::KeyboardImpl *__hidden this, bool); weak
// _DWORD CTRPluginFramework::KeyboardImpl::Close(CTRPluginFramework::KeyboardImpl *__hidden this); weak
// int __fastcall CTRPluginFramework::KeyboardImpl::OnInputChange(_DWORD); weak
// unsigned int strtoul(const char *nptr, char **endptr, int base);

//-------------------------------------------------------------------------
// Data declarations

char algn_1; // weak
int CTRPluginFramework::ConvertToFloat(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp; // weak
_UNKNOWN CTRPluginFramework::ConvertToDouble(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp; // weak
_UNKNOWN CTRPluginFramework::ConvertToU64(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp; // weak
int CTRPluginFramework::ConvertToU32(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp; // weak
char CTRPluginFramework::ConvertToU8(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp; // weak
__int16 CTRPluginFramework::ConvertToU16(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp; // weak
int dword_338[2] = { 2576980377, 429496729 }; // weak


//----- (00000028) --------------------------------------------------------
int *__fastcall CTRPluginFramework::ConvertToFloat(int a1)
{
  int v1; // s0
  int v2; // r3
  _BYTE *v3; // r4
  int v4; // r6
  int v5; // r0
  _DWORD *v6; // r0
  _DWORD *v7; // r0
  _BYTE *v9; // [sp+4h] [bp-1Ch]

  v2 = *(_DWORD *)(a1 + 4);
  if ( v2 && ((v3 = *(_BYTE **)a1, v2 != 1) || *v3 != 45) )
  {
    v4 = *(_DWORD *)((int (*)(void))_errno)();
    *(_DWORD *)((int (*)(void))_errno)() = 0;
    v5 = strtof(v3, &v9);
    if ( v9 == v3 )
      v5 = std::__throw_invalid_argument("stof");
    v6 = (_DWORD *)_errno(v5);
    if ( *v6 == 34 )
      std::__throw_out_of_range("stof");
    v7 = (_DWORD *)_errno(v6);
    if ( !*v7 )
      *(_DWORD *)_errno(v7) = v4;
    CTRPluginFramework::ConvertToFloat(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = v1;
  }
  else
  {
    CTRPluginFramework::ConvertToFloat(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = 0;
  }
  return &CTRPluginFramework::ConvertToFloat(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
}
// 8: using guessed type int CTRPluginFramework::ConvertToFloat(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
// 11FC: using guessed type int __fastcall _errno(_DWORD);
// 1200: using guessed type int __fastcall strtof(_DWORD, _DWORD);

//----- (000000EC) --------------------------------------------------------
void *__fastcall CTRPluginFramework::ConvertToDouble(int a1)
{
  __int64 v1; // d0
  int v2; // r3
  const char *v3; // r4
  int *v4; // r0
  int v5; // r6
  int v6; // r0
  _DWORD *v7; // r0
  _DWORD *v8; // r0
  char *endptr; // [sp+4h] [bp-1Ch]

  v2 = *(_DWORD *)(a1 + 4);
  if ( v2 && ((v3 = *(const char **)a1, v2 != 1) || *v3 != 45) )
  {
    v4 = (int *)_errno(a1);
    v5 = *v4;
    *(_DWORD *)_errno(v4) = 0;
    v6 = COERCE_UNSIGNED_INT64(strtod(v3, &endptr));
    if ( endptr == v3 )
      v6 = std::__throw_invalid_argument("stod");
    v7 = (_DWORD *)_errno(v6);
    if ( *v7 == 34 )
      std::__throw_out_of_range("stod");
    v8 = (_DWORD *)_errno(v7);
    if ( !*v8 )
      *(_DWORD *)_errno(v8) = v5;
    CTRPluginFramework::ConvertToDouble(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = v1;
  }
  else
  {
    CTRPluginFramework::ConvertToDouble(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = 0LL;
  }
  return &CTRPluginFramework::ConvertToDouble(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
}
// 11FC: using guessed type int __fastcall _errno(_DWORD);

//----- (000001B8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::stou32(_DWORD *a1, _DWORD *a2)
{
  _BYTE *v2; // r3
  signed int v3; // r12
  int v4; // r2
  int v5; // r3
  int v6; // t1
  unsigned int v7; // lr
  int v8; // r3

  v2 = (_BYTE *)*a1;
  if ( *(_BYTE *)*a1 == 45 )
  {
    v3 = 1;
    ++v2;
  }
  else
  {
    v3 = 0;
  }
  *a2 = 0;
  v4 = (int)(v2 - 1);
  while ( 1 )
  {
    v6 = *(unsigned __int8 *)(v4++ + 1);
    v5 = v6;
    if ( !v6 )
      break;
    v7 = v5 - 48;
    if ( *a2 > 0x19999999u || (v8 = 10 * *a2) != 0 && ~v8 < v7 )
    {
      *a2 = -1;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=();
      return 0;
    }
    *a2 = v8 + v7;
  }
  if ( !v3 )
    return 1;
  *a2 = -*a2;
  return v3;
}
// 1210: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(void);

//----- (00000260) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::stou64(_DWORD *a1, _QWORD *a2)
{
  _BYTE *v2; // r12
  bool v3; // zf
  _BOOL4 v4; // lr
  int v5; // r12
  int v6; // r2
  int v7; // t1
  int v8; // r2
  signed __int64 v9; // r4
  __int64 v10; // r8
  bool v11; // cf
  __int64 v12; // r2

  v2 = (_BYTE *)*a1;
  v3 = *(_BYTE *)*a1 == 45;
  v4 = v3;
  *a2 = 0LL;
  if ( v3 )
    ++v2;
  v5 = (int)(v2 - 1);
  while ( 1 )
  {
    v7 = *(unsigned __int8 *)(v5++ + 1);
    v6 = v7;
    if ( !v7 )
      break;
    v8 = v6 - 48;
    if ( *a2 > *(_QWORD *)dword_338 )
      goto LABEL_19;
    v9 = 10LL * *a2;
    v10 = v8;
    if ( v9 )
    {
      v11 = (unsigned int)~HIDWORD(v9) >= HIDWORD(v10);
      if ( ~HIDWORD(v9) == HIDWORD(v10) )
        v11 = ~(_DWORD)v9 >= (unsigned int)v8;
      if ( !v11 )
      {
LABEL_19:
        *a2 = -1LL;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=();
        return 0;
      }
    }
    *a2 = v9 + v8;
  }
  if ( !v4 )
    return 1;
  LODWORD(v12) = -(signed int)*a2;
  HIDWORD(v12) = -(signed int)((*a2 >> 32) + ((unsigned int)*a2 > 0));
  *a2 = v12;
  return v4;
}
// 338: using guessed type int dword_338[2];
// 1210: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(void);

//----- (00000344) --------------------------------------------------------
void *__fastcall CTRPluginFramework::ConvertToU64(const char **a1, char *a2, int a3)
{
  const char *v3; // r3
  const char *v5; // r4
  int *v6; // r0
  int v7; // r5
  unsigned __int64 v8; // r0
  unsigned __int64 v9; // r6
  _DWORD *v10; // r0
  _DWORD *v11; // r0
  char *endptr; // [sp+4h] [bp-1Ch]
  int v13; // [sp+8h] [bp-18h]

  endptr = a2;
  v13 = a3;
  v3 = a1[1];
  if ( v3 && (v3 != &algn_1 || **a1 != 45) )
  {
    if ( a2 )
    {
      v5 = *a1;
      v6 = (int *)_errno(a1);
      v7 = *v6;
      *(_DWORD *)_errno(v6) = 0;
      v8 = strtoull(v5, &endptr, 16);
      v9 = v8;
      if ( v5 == endptr )
        LODWORD(v8) = std::__throw_invalid_argument("stoull");
      v10 = (_DWORD *)_errno(v8);
      if ( *v10 == 34 )
        std::__throw_out_of_range("stoull");
      v11 = (_DWORD *)_errno(v10);
      if ( !*v11 )
        *(_DWORD *)_errno(v11) = v7;
      CTRPluginFramework::ConvertToU64(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = v9;
    }
    else
    {
      CTRPluginFramework::stou64(
        a1,
        &CTRPluginFramework::ConvertToU64(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp);
    }
  }
  else
  {
    CTRPluginFramework::ConvertToU64(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = 0LL;
  }
  return &CTRPluginFramework::ConvertToU64(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
}
// 1: using guessed type char;
// 11FC: using guessed type int __fastcall _errno(_DWORD);

//----- (00000428) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Keyboard(int a1, int a2)
{
  int v2; // r4
  int v3; // r5
  int v4; // r6
  int result; // r0

  v2 = a1;
  v3 = a2;
  v4 = operator new(0xE0u);
  CTRPluginFramework::KeyboardImpl::KeyboardImpl();
  *(_DWORD *)(v2 + 4) = v4;
  *(_WORD *)(v2 + 8) = 1;
  result = v2;
  *(_BYTE *)v2 = *(_DWORD *)(v3 + 4) != 0;
  return result;
}
// 121C: using guessed type int CTRPluginFramework::KeyboardImpl::KeyboardImpl(void);

//----- (00000470) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Keyboard(int a1, int a2, _QWORD *a3)
{
  int v3; // r4
  int v4; // r7
  _QWORD *v5; // r5
  int v6; // r6
  int result; // r0

  v3 = a1;
  v4 = a2;
  v5 = a3;
  v6 = operator new(0xE0u);
  CTRPluginFramework::KeyboardImpl::KeyboardImpl();
  *(_DWORD *)(v3 + 4) = v6;
  *(_BYTE *)(v3 + 8) = 0;
  *(_BYTE *)v3 = *(_DWORD *)(v4 + 4) != 0;
  CTRPluginFramework::KeyboardImpl::Populate(v6, v5);
  result = v3;
  *(_BYTE *)(v3 + 9) = *v5 >> 32 != (unsigned int)*v5;
  return result;
}
// 121C: using guessed type int CTRPluginFramework::KeyboardImpl::KeyboardImpl(void);
// 1220: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::Populate(_DWORD, _DWORD);

//----- (000004D8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Keyboard(int a1, _QWORD *a2)
{
  int v2; // r4
  _QWORD *v3; // r6
  int v4; // r7
  int v5; // r0
  int result; // r0
  char *v7; // [sp+0h] [bp-30h]
  int v8; // [sp+4h] [bp-2Ch]
  char v9; // [sp+8h] [bp-28h]

  v2 = a1;
  v3 = a2;
  v7 = &v9;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
  v8 = 0;
  v9 = 0;
  v4 = operator new(0xE0u);
  CTRPluginFramework::KeyboardImpl::KeyboardImpl();
  *(_DWORD *)(v2 + 4) = v4;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  v5 = *(_DWORD *)(v2 + 4);
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)v2 = 0;
  CTRPluginFramework::KeyboardImpl::Populate(v5, v3);
  result = v2;
  *(_BYTE *)(v2 + 9) = *v3 >> 32 != (unsigned int)*v3;
  return result;
}
// 121C: using guessed type int CTRPluginFramework::KeyboardImpl::KeyboardImpl(void);
// 1220: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::Populate(_DWORD, _DWORD);
// 1224: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void);
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000564) --------------------------------------------------------
CTRPluginFramework::Keyboard *__fastcall CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *this)
{
  void *v1; // r4
  CTRPluginFramework::Keyboard *v2; // r5

  v1 = (void *)*((_DWORD *)this + 1);
  v2 = this;
  if ( v1 )
  {
    CTRPluginFramework::KeyboardImpl::~KeyboardImpl(*((CTRPluginFramework::KeyboardImpl **)this + 1));
    operator delete(v1);
  }
  return v2;
}

//----- (00000590) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::IsHexadecimal(int result, bool a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

//----- (00000598) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::SetMaxLength(CTRPluginFramework::Keyboard *this, unsigned int a2)
{
  return CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)this + 1), a2);
}

//----- (000005A0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::SetCompareCallback(int a1)
{
  return CTRPluginFramework::KeyboardImpl::SetCompareCallback(*(_DWORD *)(a1 + 4));
}
// 1238: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetCompareCallback(_DWORD);

//----- (000005A8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Populate(int a1, int a2)
{
  int v2; // r4
  int result; // r0

  v2 = a1;
  result = CTRPluginFramework::KeyboardImpl::Populate(*(_DWORD *)(a1 + 4), a2);
  *(_BYTE *)(v2 + 9) = 1;
  return result;
}
// 1220: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::Populate(_DWORD, _DWORD);

//----- (000005C4) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this)
{
  if ( !*((_BYTE *)this + 9) )
    return -1;
  **((_BYTE **)this + 1) = *(_BYTE *)this;
  return CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)this + 1));
}

//----- (000005EC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int64 *a2)
{
  CTRPluginFramework::Keyboard *v2; // r4
  unsigned __int64 *v3; // r6
  signed int v4; // r1
  int v5; // r5
  const char **v6; // r7
  char *v7; // r0
  int v8; // r2

  v2 = this;
  v3 = a2;
  if ( *((_BYTE *)this + 8) )
    v4 = 2;
  else
    v4 = 1;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v4);
  if ( *((_BYTE *)v2 + 8) )
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 16);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v2 + 1), CTRPluginFramework::ConvertToU64);
  **((_BYTE **)v2 + 1) = *(_BYTE *)v2;
  v5 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
  if ( v5 != -1 )
  {
    v6 = (const char **)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v2 + 1));
    v7 = (char *)CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
    *v3 = *(_QWORD *)CTRPluginFramework::ConvertToU64(v6, v7, v8);
  }
  return v5;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (00000694) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int64 *a2, unsigned __int64 a3)
{
  CTRPluginFramework::Keyboard *v3; // r4
  int v4; // r7
  unsigned __int64 *v5; // r8
  signed int v6; // r1
  int v7; // r6
  const char **v8; // r5
  int v9; // r2
  int v10; // r3
  const char *v11; // r1
  int v12; // r6
  char *v13; // r0
  int v14; // r2
  int v16; // [sp+0h] [bp-30h]

  v3 = this;
  v4 = HIDWORD(a3);
  v5 = a2;
  if ( *((_BYTE *)this + 8) )
    v6 = 2;
  else
    v6 = 1;
  v7 = a3;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v6);
  v8 = (const char **)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v3 + 1));
  if ( *((_BYTE *)v3 + 8) )
  {
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 16);
    v9 = v7;
    v10 = v4;
    v11 = "%X";
  }
  else
  {
    v9 = v7;
    v10 = v4;
    v11 = "%d";
  }
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v16, v11, v9, v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v8, &v16);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v16);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v3 + 1), CTRPluginFramework::ConvertToU64);
  **((_BYTE **)v3 + 1) = *(_BYTE *)v3;
  v12 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
  if ( v12 != -1 )
  {
    v13 = (char *)CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
    *v5 = *(_QWORD *)CTRPluginFramework::ConvertToU64(v8, v13, v14);
  }
  return v12;
}
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1254: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 1258: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (0000078C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, float *a2)
{
  CTRPluginFramework::Keyboard *v2; // r4
  float *v3; // r6
  int v4; // r5
  int v5; // r7

  v2 = this;
  v3 = a2;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v2 + 1), CTRPluginFramework::ConvertToFloat);
  **((_BYTE **)v2 + 1) = *(_BYTE *)v2;
  v4 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
  if ( v4 != -1 )
  {
    v5 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v2 + 1));
    CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
    *(_DWORD *)v3 = *CTRPluginFramework::ConvertToFloat(v5);
  }
  return v4;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (00000804) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, float *a2, float a3)
{
  CTRPluginFramework::Keyboard *v3; // r4
  float *v4; // r7
  int v5; // r6
  int v6; // r5
  int v8; // [sp+0h] [bp-38h]

  v3 = this;
  v4 = a2;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v3 + 1), CTRPluginFramework::ConvertToFloat);
  **((_BYTE **)v3 + 1) = *(_BYTE *)v3;
  v5 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v3 + 1));
  ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(&v8, 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v5, &v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  v6 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
  if ( v6 != -1 )
  {
    CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
    *(_DWORD *)v4 = *CTRPluginFramework::ConvertToFloat(v5);
  }
  return v6;
}
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1258: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 125C: using guessed type int __fastcall ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(_DWORD, _DWORD);

//----- (000008B4) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, double *a2)
{
  CTRPluginFramework::Keyboard *v2; // r4
  double *v3; // r6
  int v4; // r5
  int v5; // r7

  v2 = this;
  v3 = a2;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v2 + 1), CTRPluginFramework::ConvertToDouble);
  **((_BYTE **)v2 + 1) = *(_BYTE *)v2;
  v4 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
  if ( v4 != -1 )
  {
    v5 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v2 + 1));
    CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
    *v3 = *(double *)CTRPluginFramework::ConvertToDouble(v5);
  }
  return v4;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (0000092C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, double *a2, double a3)
{
  int v3; // s0
  int v4; // s1
  CTRPluginFramework::Keyboard *v5; // r4
  double *v6; // r7
  int v7; // r6
  int v8; // r5
  char v10; // [sp+8h] [bp-30h]

  v5 = this;
  v6 = a2;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v5 + 1), CTRPluginFramework::ConvertToDouble);
  **((_BYTE **)v5 + 1) = *(_BYTE *)v5;
  v7 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v5 + 1));
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v10, "%.4lf", v3, v4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v7, &v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  v8 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v5 + 1));
  if ( v8 != -1 )
  {
    CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v5 + 1));
    *v6 = *(double *)CTRPluginFramework::ConvertToDouble(v7);
  }
  return v8;
}
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1254: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 1258: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (000009DC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(int a1, int a2)
{
  int v2; // r4
  int v3; // r6
  int v4; // r5
  int v5; // r0

  v2 = a1;
  v3 = a2;
  CTRPluginFramework::KeyboardImpl::SetLayout(*(_DWORD *)(a1 + 4), 0);
  **(_BYTE **)(v2 + 4) = *(_BYTE *)v2;
  v4 = CTRPluginFramework::KeyboardImpl::Run(*(CTRPluginFramework::KeyboardImpl **)(v2 + 4));
  if ( v4 != -1 )
  {
    v5 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*(_DWORD *)(v2 + 4));
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v3, v5);
  }
  return v4;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1260: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);

//----- (00000A30) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(int a1, int a2, int a3)
{
  int v3; // r4
  int v4; // r5
  int v5; // r6
  int v6; // r0
  int v7; // r5
  int v8; // r0

  v3 = a1;
  v4 = a3;
  v5 = a2;
  CTRPluginFramework::KeyboardImpl::SetLayout(*(_DWORD *)(a1 + 4), 0);
  **(_BYTE **)(v3 + 4) = *(_BYTE *)v3;
  v6 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*(_DWORD *)(v3 + 4));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v6, v4);
  v7 = CTRPluginFramework::KeyboardImpl::Run(*(CTRPluginFramework::KeyboardImpl **)(v3 + 4));
  if ( v7 != -1 )
  {
    v8 = ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*(_DWORD *)(v3 + 4));
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v5, v8);
  }
  return v7;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1260: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);

//----- (00000A98) --------------------------------------------------------
int __fastcall ZNK18CTRPluginFramework8Keyboard8GetInputB5cxx11Ev(int a1)
{
  return ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*(_DWORD *)(a1 + 4));
}
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (00000AA0) --------------------------------------------------------
int __fastcall ZNK18CTRPluginFramework8Keyboard10GetMessageB5cxx11Ev(int a1)
{
  return ZN18CTRPluginFramework12KeyboardImpl10GetMessageB5cxx11Ev(*(_DWORD *)(a1 + 4));
}
// 1264: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl10GetMessageB5cxx11Ev(_DWORD);

//----- (00000AA8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::SetError(int a1)
{
  return CTRPluginFramework::KeyboardImpl::SetError(*(_DWORD *)(a1 + 4));
}
// 1268: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetError(_DWORD);

//----- (00000AB0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::CanAbort(CTRPluginFramework::Keyboard *this, bool a2)
{
  return CTRPluginFramework::KeyboardImpl::CanAbort(*((CTRPluginFramework::KeyboardImpl **)this + 1), a2);
}
// 126C: using guessed type _DWORD __cdecl CTRPluginFramework::KeyboardImpl::CanAbort(CTRPluginFramework::KeyboardImpl *__hidden this, bool);

//----- (00000AB8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Close(CTRPluginFramework::Keyboard *this)
{
  return CTRPluginFramework::KeyboardImpl::Close(*((CTRPluginFramework::KeyboardImpl **)this + 1));
}
// 1270: using guessed type _DWORD CTRPluginFramework::KeyboardImpl::Close(CTRPluginFramework::KeyboardImpl *__hidden this);

//----- (00000AC0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::OnInputChange(int a1)
{
  return CTRPluginFramework::KeyboardImpl::OnInputChange(*(_DWORD *)(a1 + 4));
}
// 1274: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::OnInputChange(_DWORD);

//----- (00000AC8) --------------------------------------------------------
int __fastcall __gnu_cxx::__stoa<unsigned long,unsigned long,char,int>(int (__fastcall *a1)(int, int *, int), int a2, int a3, _DWORD *a4, int a5)
{
  int v5; // r4
  const char *v6; // r6
  _DWORD *v7; // r5
  int (__fastcall *v8)(int, int *, int); // r7
  int *v9; // r0
  int v10; // r8
  int v11; // r0
  int v12; // r7
  _DWORD *v13; // r0
  _DWORD *v14; // r0
  int v16; // [sp+4h] [bp-1Ch]

  v16 = a2;
  v5 = a3;
  v6 = (const char *)a2;
  v7 = a4;
  v8 = a1;
  v9 = (int *)_errno(a1);
  v10 = *v9;
  *(_DWORD *)_errno(v9) = 0;
  v11 = v8(v5, &v16, a5);
  if ( v16 == v5 )
    v11 = std::__throw_invalid_argument(v6);
  v12 = v11;
  v13 = (_DWORD *)_errno(v11);
  if ( *v13 == 34 )
    std::__throw_out_of_range(v6);
  if ( v7 )
    *v7 = v16 - v5;
  v14 = (_DWORD *)_errno(v13);
  if ( !*v14 )
    *(_DWORD *)_errno(v14) = v10;
  return v12;
}
// 11FC: using guessed type int __fastcall _errno(_DWORD);

//----- (00000B64) --------------------------------------------------------
int *__fastcall CTRPluginFramework::ConvertToU32(int *a1, int a2)
{
  int v2; // r3

  v2 = a1[1];
  if ( v2 && (v2 != 1 || *(_BYTE *)*a1 != 45) )
  {
    if ( a2 )
      CTRPluginFramework::ConvertToU32(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = __gnu_cxx::__stoa<unsigned long,unsigned long,char,int>((int (__fastcall *)(int, int *, int))&strtoul, (int)"stoul", *a1, 0, 16);
    else
      CTRPluginFramework::stou32(
        a1,
        &CTRPluginFramework::ConvertToU32(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp);
  }
  else
  {
    CTRPluginFramework::ConvertToU32(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = 0;
  }
  return &CTRPluginFramework::ConvertToU32(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
}
// 20: using guessed type int CTRPluginFramework::ConvertToU32(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;

//----- (00000BF0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned int *a2)
{
  CTRPluginFramework::Keyboard *v2; // r4
  unsigned int *v3; // r6
  signed int v4; // r1
  int v5; // r5
  int *v6; // r7
  int v7; // r0

  v2 = this;
  v3 = a2;
  if ( *((_BYTE *)this + 8) )
    v4 = 2;
  else
    v4 = 1;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v4);
  if ( *((_BYTE *)v2 + 8) )
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 8);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v2 + 1), CTRPluginFramework::ConvertToU32);
  **((_BYTE **)v2 + 1) = *(_BYTE *)v2;
  v5 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
  if ( v5 != -1 )
  {
    v6 = (int *)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v2 + 1));
    v7 = CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
    *v3 = *CTRPluginFramework::ConvertToU32(v6, v7);
  }
  return v5;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (00000C98) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned int *a2, unsigned int a3)
{
  CTRPluginFramework::Keyboard *v3; // r4
  unsigned int *v4; // r7
  signed int v5; // r1
  unsigned int v6; // r6
  int *v7; // r5
  unsigned int v8; // r2
  const char *v9; // r1
  int v10; // r6
  int v11; // r0
  int v13; // [sp+0h] [bp-30h]

  v3 = this;
  v4 = a2;
  if ( *((_BYTE *)this + 8) )
    v5 = 2;
  else
    v5 = 1;
  v6 = a3;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v5);
  v7 = (int *)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v3 + 1));
  if ( *((_BYTE *)v3 + 8) )
  {
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 8);
    v8 = v6;
    v9 = "%X";
  }
  else
  {
    v8 = v6;
    v9 = "%d";
  }
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v13, v9, v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v7, &v13);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v3 + 1), CTRPluginFramework::ConvertToU32);
  **((_BYTE **)v3 + 1) = *(_BYTE *)v3;
  v10 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
  if ( v10 != -1 )
  {
    v11 = CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
    *v4 = *CTRPluginFramework::ConvertToU32(v7, v11);
  }
  return v10;
}
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1254: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 1258: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (00000D80) --------------------------------------------------------
char *__fastcall CTRPluginFramework::ConvertToU8(int *a1, int a2, int a3, int a4)
{
  int v4; // r3
  char v5; // r3
  int v7; // [sp+Ch] [bp-Ch]

  v7 = a4;
  v4 = a1[1];
  if ( v4 && (v4 != 1 || *(_BYTE *)*a1 != 45) )
  {
    if ( a2 )
    {
      CTRPluginFramework::ConvertToU8(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = __gnu_cxx::__stoa<unsigned long,unsigned long,char,int>((int (__fastcall *)(int, int *, int))&strtoul, (int)"stoul", *a1, 0, 16);
      return &CTRPluginFramework::ConvertToU8(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
    }
    CTRPluginFramework::stou32(a1, &v7);
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  CTRPluginFramework::ConvertToU8(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = v5;
  return &CTRPluginFramework::ConvertToU8(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
}
// 24: using guessed type char CTRPluginFramework::ConvertToU8(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;

//----- (00000E0C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int8 *a2)
{
  CTRPluginFramework::Keyboard *v2; // r4
  unsigned __int8 *v3; // r6
  signed int v4; // r1
  int v5; // r5
  int *v6; // r7
  int v7; // r0
  int v8; // r2
  int v9; // r3

  v2 = this;
  v3 = a2;
  if ( *((_BYTE *)this + 8) )
    v4 = 2;
  else
    v4 = 1;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v4);
  if ( *((_BYTE *)v2 + 8) )
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 2);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v2 + 1), CTRPluginFramework::ConvertToU8);
  **((_BYTE **)v2 + 1) = *(_BYTE *)v2;
  v5 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
  if ( v5 != -1 )
  {
    v6 = (int *)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v2 + 1));
    v7 = CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
    *v3 = *CTRPluginFramework::ConvertToU8(v6, v7, v8, v9);
  }
  return v5;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (00000EB4) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int8 *a2, int a3)
{
  CTRPluginFramework::Keyboard *v3; // r4
  unsigned __int8 *v4; // r7
  signed int v5; // r1
  int v6; // r6
  int *v7; // r5
  int v8; // r2
  const char *v9; // r1
  int v10; // r6
  int v11; // r0
  int v12; // r2
  int v13; // r3
  int v15; // [sp+0h] [bp-30h]

  v3 = this;
  v4 = a2;
  if ( *((_BYTE *)this + 8) )
    v5 = 2;
  else
    v5 = 1;
  v6 = a3;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v5);
  v7 = (int *)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v3 + 1));
  if ( *((_BYTE *)v3 + 8) )
  {
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 2);
    v8 = v6;
    v9 = "%X";
  }
  else
  {
    v8 = v6;
    v9 = "%d";
  }
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v15, v9, v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v7, &v15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v3 + 1), CTRPluginFramework::ConvertToU8);
  **((_BYTE **)v3 + 1) = *(_BYTE *)v3;
  v10 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
  if ( v10 != -1 )
  {
    v11 = CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
    *v4 = *CTRPluginFramework::ConvertToU8(v7, v11, v12, v13);
  }
  return v10;
}
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1254: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 1258: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (00000F9C) --------------------------------------------------------
__int16 *__fastcall CTRPluginFramework::ConvertToU16(int *a1, int a2, int a3, int a4)
{
  int v4; // r3
  __int16 v5; // r3
  int v7; // [sp+Ch] [bp-Ch]

  v7 = a4;
  v4 = a1[1];
  if ( v4 && (v4 != 1 || *(_BYTE *)*a1 != 45) )
  {
    if ( a2 )
    {
      CTRPluginFramework::ConvertToU16(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = __gnu_cxx::__stoa<unsigned long,unsigned long,char,int>((int (__fastcall *)(int, int *, int))&strtoul, (int)"stoul", *a1, 0, 16);
      return &CTRPluginFramework::ConvertToU16(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
    }
    CTRPluginFramework::stou32(a1, &v7);
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  CTRPluginFramework::ConvertToU16(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp = v5;
  return &CTRPluginFramework::ConvertToU16(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;
}
// 26: using guessed type __int16 CTRPluginFramework::ConvertToU16(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::temp;

//----- (00001028) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int16 *a2)
{
  CTRPluginFramework::Keyboard *v2; // r4
  unsigned __int16 *v3; // r6
  signed int v4; // r1
  int v5; // r5
  int *v6; // r7
  int v7; // r0
  int v8; // r2
  int v9; // r3

  v2 = this;
  v3 = a2;
  if ( *((_BYTE *)this + 8) )
    v4 = 2;
  else
    v4 = 1;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v4);
  if ( *((_BYTE *)v2 + 8) )
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 4);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v2 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v2 + 1), CTRPluginFramework::ConvertToU16);
  **((_BYTE **)v2 + 1) = *(_BYTE *)v2;
  v5 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
  if ( v5 != -1 )
  {
    v6 = (int *)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v2 + 1));
    v7 = CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v2 + 1));
    *v3 = *CTRPluginFramework::ConvertToU16(v6, v7, v8, v9);
  }
  return v5;
}
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);

//----- (000010D0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *this, unsigned __int16 *a2, int a3)
{
  CTRPluginFramework::Keyboard *v3; // r4
  unsigned __int16 *v4; // r7
  signed int v5; // r1
  int v6; // r6
  int *v7; // r5
  int v8; // r2
  const char *v9; // r1
  int v10; // r6
  int v11; // r0
  int v12; // r2
  int v13; // r3
  int v15; // [sp+0h] [bp-30h]

  v3 = this;
  v4 = a2;
  if ( *((_BYTE *)this + 8) )
    v5 = 2;
  else
    v5 = 1;
  v6 = a3;
  CTRPluginFramework::KeyboardImpl::SetLayout(*((_DWORD *)this + 1), v5);
  v7 = (int *)ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(*((_DWORD *)v3 + 1));
  if ( *((_BYTE *)v3 + 8) )
  {
    CTRPluginFramework::KeyboardImpl::SetMaxInput(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 4);
    v8 = v6;
    v9 = "%X";
  }
  else
  {
    v8 = v6;
    v9 = "%d";
  }
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v15, v9, v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v7, &v15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
  CTRPluginFramework::KeyboardImpl::CanChangeLayout(*((CTRPluginFramework::KeyboardImpl **)v3 + 1), 1);
  CTRPluginFramework::KeyboardImpl::SetConvertCallback(*((_DWORD *)v3 + 1), CTRPluginFramework::ConvertToU16);
  **((_BYTE **)v3 + 1) = *(_BYTE *)v3;
  v10 = CTRPluginFramework::KeyboardImpl::Run(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
  if ( v10 != -1 )
  {
    v11 = CTRPluginFramework::KeyboardImpl::IsHexadecimal(*((CTRPluginFramework::KeyboardImpl **)v3 + 1));
    *v4 = *CTRPluginFramework::ConvertToU16(v7, v11, v12, v13);
  }
  return v10;
}
// 1228: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1240: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1248: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(_DWORD, _DWORD);
// 124C: using guessed type int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(_DWORD);
// 1254: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 1258: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

// ALL OK, 38 function(s) have been successfully decompiled
