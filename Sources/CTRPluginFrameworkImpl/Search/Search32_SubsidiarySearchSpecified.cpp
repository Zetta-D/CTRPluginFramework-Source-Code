/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU8(int result, unsigned __int8 ***a2, signed int a3, unsigned __int8 **a4);
int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU16(int result, unsigned __int16 ***a2, signed int a3, unsigned __int16 **a4);
_DWORD *__fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU32(_DWORD *result, unsigned int ***a2, signed int a3, unsigned int **a4);
float *__fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedFloat(float *result, unsigned __int64 *a2, signed int a3, float *a4);
// _DWORD __cdecl CTRPluginFramework::AlmostEqualRelative(CTRPluginFramework *__hidden this, float, float, float); idb


//----- (00000004) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU8(int result, unsigned __int8 ***a2, signed int a3, unsigned __int8 **a4)
{
  unsigned int v4; // r12
  unsigned __int8 **v5; // r2
  unsigned __int8 **v6; // r4
  unsigned __int8 *v7; // r5
  unsigned __int8 **v8; // r2
  unsigned __int8 **v9; // r4
  unsigned int v10; // lr
  unsigned __int8 *v11; // r6
  unsigned __int8 **v12; // r2
  unsigned __int8 **v13; // r4
  unsigned int v14; // lr
  unsigned __int8 *v15; // r6
  unsigned __int8 **v16; // r2
  unsigned __int8 **v17; // r4
  unsigned __int8 *v18; // lr
  unsigned __int8 *v19; // r5
  int v20; // r1
  unsigned __int8 **v21; // r2
  unsigned __int8 **v22; // r4
  unsigned __int8 *v23; // lr
  unsigned __int8 *v24; // r6
  unsigned __int8 **v25; // r2
  unsigned __int8 **v26; // r4
  unsigned int v27; // lr
  unsigned __int8 *v28; // r6
  unsigned __int8 **v29; // r2
  unsigned __int8 **v30; // r4
  unsigned int v31; // lr
  unsigned __int8 *v32; // r6
  unsigned __int8 **v33; // r2
  unsigned __int8 **v34; // r5
  unsigned __int8 *v35; // r1
  unsigned __int8 *v36; // lr
  unsigned __int8 **v37; // r2
  unsigned __int8 **v38; // r4
  unsigned __int8 *v39; // lr
  unsigned __int8 *v40; // r5
  int v41; // r1

  v4 = *(unsigned __int8 *)(result + 1384);
  if ( a3 == 0x2000 )
  {
    v29 = *a2;
    v30 = a2[1];
    while ( v30 != v29 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v31 = **v29;
      if ( v4 > v31 )
      {
        v32 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 4);
        *a4 = *v29;
        a4[1] = (unsigned __int8 *)v31;
        a4[2] = v32;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v29 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v33 = *a2;
      v34 = a2[1];
      while ( v34 != v33 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v35 = (unsigned __int8 *)*((unsigned __int8 *)v33 + 4);
        v36 = (unsigned __int8 *)**v33;
        if ( v35 != v36 && (v36 == &v35[v4] || v36 == &v35[-v4]) )
        {
          *a4 = *v33;
          a4[1] = v36;
          a4[2] = v35;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v33 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v37 = *a2;
        v38 = a2[1];
        while ( v38 != v37 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v39 = (unsigned __int8 *)*((unsigned __int8 *)v37 + 4);
          v40 = (unsigned __int8 *)**v37;
          if ( v39 != v40 )
          {
            v41 = v40 - v39;
            if ( v40 - v39 < 0 )
              v41 = v39 - v40;
            if ( v41 <= (signed int)v4 )
            {
              *a4 = *v37;
              a4[1] = v40;
              a4[2] = v39;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v37 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 0x20000 )
      {
        v16 = *a2;
        v17 = a2[1];
        while ( v17 != v16 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v18 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 4);
          v19 = (unsigned __int8 *)**v16;
          if ( v18 != v19 )
          {
            v20 = v19 - v18;
            if ( v19 - v18 < 0 )
              v20 = v18 - v19;
            if ( v20 >= (signed int)v4 )
            {
              *a4 = *v16;
              a4[1] = v19;
              a4[2] = v18;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v16 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v12 = *a2;
      v13 = a2[1];
      while ( v13 != v12 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v14 = **v12;
        if ( v4 >= v14 )
        {
          v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 4);
          *a4 = *v12;
          a4[1] = (unsigned __int8 *)v14;
          a4[2] = v15;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v12 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v21 = *a2;
    v22 = a2[1];
    while ( v22 != v21 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v23 = (unsigned __int8 *)**v21;
      if ( (unsigned __int8 *)v4 != v23 )
      {
        v24 = (unsigned __int8 *)*((unsigned __int8 *)v21 + 4);
        *a4 = *v21;
        a4[1] = v23;
        a4[2] = v24;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v21 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v25 = *a2;
      v26 = a2[1];
      while ( v26 != v25 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v27 = **v25;
        if ( v4 < v27 )
        {
          v28 = (unsigned __int8 *)*((unsigned __int8 *)v25 + 4);
          *a4 = *v25;
          a4[1] = (unsigned __int8 *)v27;
          a4[2] = v28;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v25 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 == 4096 )
    {
      v8 = *a2;
      v9 = a2[1];
      while ( v9 != v8 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v10 = **v8;
        if ( v4 <= v10 )
        {
          v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 4);
          *a4 = *v8;
          a4[1] = (unsigned __int8 *)v10;
          a4[2] = v11;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v8 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    v6 = a2[1];
    while ( v6 != v5 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      if ( v4 == **v5 )
      {
        v7 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 4);
        *a4 = *v5;
        a4[1] = (unsigned __int8 *)v4;
        a4[2] = v7;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v5 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  return result;
}

//----- (00000488) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU16(int result, unsigned __int16 ***a2, signed int a3, unsigned __int16 **a4)
{
  unsigned int v4; // r12
  unsigned __int16 **v5; // r2
  unsigned __int16 **v6; // r4
  unsigned __int16 *v7; // r5
  unsigned __int16 **v8; // r2
  unsigned __int16 **v9; // r4
  unsigned int v10; // lr
  unsigned __int16 *v11; // r6
  unsigned __int16 **v12; // r2
  unsigned __int16 **v13; // r4
  unsigned int v14; // lr
  unsigned __int16 *v15; // r6
  unsigned __int16 **v16; // r2
  unsigned __int16 **v17; // r4
  unsigned __int16 *v18; // lr
  unsigned __int16 *v19; // r5
  int v20; // r1
  unsigned __int16 **v21; // r2
  unsigned __int16 **v22; // r4
  unsigned __int16 *v23; // lr
  unsigned __int16 *v24; // r6
  unsigned __int16 **v25; // r2
  unsigned __int16 **v26; // r4
  unsigned int v27; // lr
  unsigned __int16 *v28; // r6
  unsigned __int16 **v29; // r2
  unsigned __int16 **v30; // r4
  unsigned int v31; // lr
  unsigned __int16 *v32; // r6
  unsigned __int16 **v33; // r2
  unsigned __int16 **v34; // r5
  unsigned __int16 *v35; // r1
  unsigned __int16 *v36; // lr
  unsigned __int16 **v37; // r2
  unsigned __int16 **v38; // r4
  unsigned __int16 *v39; // lr
  unsigned __int16 *v40; // r5
  int v41; // r1

  v4 = *(unsigned __int16 *)(result + 1384);
  if ( a3 == 0x2000 )
  {
    v29 = *a2;
    v30 = a2[1];
    while ( v30 != v29 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v31 = **v29;
      if ( v4 > v31 )
      {
        v32 = (unsigned __int16 *)*((unsigned __int16 *)v29 + 2);
        *a4 = *v29;
        a4[1] = (unsigned __int16 *)v31;
        a4[2] = v32;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v29 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v33 = *a2;
      v34 = a2[1];
      while ( v34 != v33 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v35 = (unsigned __int16 *)*((unsigned __int16 *)v33 + 2);
        v36 = (unsigned __int16 *)**v33;
        if ( v35 != v36
          && (v36 == (unsigned __int16 *)((char *)v35 + v4) || v36 == (unsigned __int16 *)((char *)v35 - v4)) )
        {
          *a4 = *v33;
          a4[1] = v36;
          a4[2] = v35;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v33 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v37 = *a2;
        v38 = a2[1];
        while ( v38 != v37 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v39 = (unsigned __int16 *)*((unsigned __int16 *)v37 + 2);
          v40 = (unsigned __int16 *)**v37;
          if ( v39 != v40 )
          {
            v41 = (char *)v40 - (char *)v39;
            if ( (char *)v40 - (char *)v39 < 0 )
              v41 = (char *)v39 - (char *)v40;
            if ( v41 <= (signed int)v4 )
            {
              *a4 = *v37;
              a4[1] = v40;
              a4[2] = v39;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v37 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 0x20000 )
      {
        v16 = *a2;
        v17 = a2[1];
        while ( v17 != v16 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v18 = (unsigned __int16 *)*((unsigned __int16 *)v16 + 2);
          v19 = (unsigned __int16 *)**v16;
          if ( v18 != v19 )
          {
            v20 = (char *)v19 - (char *)v18;
            if ( (char *)v19 - (char *)v18 < 0 )
              v20 = (char *)v18 - (char *)v19;
            if ( v20 >= (signed int)v4 )
            {
              *a4 = *v16;
              a4[1] = v19;
              a4[2] = v18;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v16 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v12 = *a2;
      v13 = a2[1];
      while ( v13 != v12 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v14 = **v12;
        if ( v4 >= v14 )
        {
          v15 = (unsigned __int16 *)*((unsigned __int16 *)v12 + 2);
          *a4 = *v12;
          a4[1] = (unsigned __int16 *)v14;
          a4[2] = v15;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v12 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v21 = *a2;
    v22 = a2[1];
    while ( v22 != v21 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v23 = (unsigned __int16 *)**v21;
      if ( (unsigned __int16 *)v4 != v23 )
      {
        v24 = (unsigned __int16 *)*((unsigned __int16 *)v21 + 2);
        *a4 = *v21;
        a4[1] = v23;
        a4[2] = v24;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v21 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v25 = *a2;
      v26 = a2[1];
      while ( v26 != v25 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v27 = **v25;
        if ( v4 < v27 )
        {
          v28 = (unsigned __int16 *)*((unsigned __int16 *)v25 + 2);
          *a4 = *v25;
          a4[1] = (unsigned __int16 *)v27;
          a4[2] = v28;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v25 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 == 4096 )
    {
      v8 = *a2;
      v9 = a2[1];
      while ( v9 != v8 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v10 = **v8;
        if ( v4 <= v10 )
        {
          v11 = (unsigned __int16 *)*((unsigned __int16 *)v8 + 2);
          *a4 = *v8;
          a4[1] = (unsigned __int16 *)v10;
          a4[2] = v11;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v8 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    v6 = a2[1];
    while ( v6 != v5 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      if ( v4 == **v5 )
      {
        v7 = (unsigned __int16 *)*((unsigned __int16 *)v5 + 2);
        *a4 = *v5;
        a4[1] = (unsigned __int16 *)v4;
        a4[2] = v7;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v5 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  return result;
}

//----- (00000910) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU32(_DWORD *result, unsigned int ***a2, signed int a3, unsigned int **a4)
{
  unsigned int v4; // r12
  unsigned int **v5; // r2
  unsigned int **v6; // r4
  unsigned int *v7; // r5
  unsigned int **v8; // r2
  unsigned int **v9; // r4
  unsigned int v10; // lr
  unsigned int *v11; // r6
  unsigned int **v12; // r2
  unsigned int **v13; // r4
  unsigned int v14; // lr
  unsigned int *v15; // r6
  unsigned int **v16; // r2
  unsigned int **v17; // r4
  unsigned int *v18; // lr
  unsigned int v19; // r5
  unsigned int v20; // r1
  unsigned int **v21; // r2
  unsigned int **v22; // r4
  unsigned int v23; // lr
  unsigned int *v24; // r6
  unsigned int **v25; // r2
  unsigned int **v26; // r4
  unsigned int v27; // lr
  unsigned int *v28; // r6
  unsigned int **v29; // r2
  unsigned int **v30; // r4
  unsigned int v31; // lr
  unsigned int *v32; // r6
  unsigned int **v33; // r2
  unsigned int **v34; // r5
  unsigned int *v35; // r1
  unsigned int *v36; // lr
  unsigned int **v37; // r2
  unsigned int **v38; // r4
  unsigned int *v39; // lr
  unsigned int *v40; // r5
  unsigned int v41; // r1

  v4 = result[346];
  if ( a3 == 0x2000 )
  {
    v29 = *a2;
    v30 = a2[1];
    while ( v30 != v29 && result[16] <= result[15] )
    {
      v31 = **v29;
      if ( v4 > v31 )
      {
        v32 = v29[1];
        *a4 = *v29;
        a4[1] = (unsigned int *)v31;
        a4[2] = v32;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      v29 += 3;
      ++result[14];
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v33 = *a2;
      v34 = a2[1];
      while ( v34 != v33 && result[16] <= result[15] )
      {
        v35 = v33[1];
        v36 = (unsigned int *)**v33;
        if ( v35 != v36 && ((unsigned int *)((char *)v35 + v4) == v36 || (unsigned int *)((char *)v35 - v4) == v36) )
        {
          *a4 = *v33;
          a4[1] = v36;
          a4[2] = v35;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v33 += 3;
        ++result[14];
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v37 = *a2;
        v38 = a2[1];
        while ( v38 != v37 && result[16] <= result[15] )
        {
          v39 = v37[1];
          v40 = (unsigned int *)**v37;
          if ( v39 != v40 )
          {
            v41 = (char *)v40 - (char *)v39;
            if ( (char *)v40 - (char *)v39 < 0 )
              v41 = (char *)v39 - (char *)v40;
            if ( v41 <= v4 )
            {
              *a4 = *v37;
              a4[1] = v40;
              a4[2] = v39;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          v37 += 3;
          ++result[14];
        }
      }
      else if ( a3 == 0x20000 )
      {
        v16 = *a2;
        v17 = a2[1];
        while ( v17 != v16 && result[16] <= result[15] )
        {
          v18 = v16[1];
          v19 = **v16;
          if ( v18 != (unsigned int *)v19 )
          {
            v20 = v19 - (_DWORD)v18;
            if ( (signed int)(v19 - (_DWORD)v18) < 0 )
              v20 = (unsigned int)v18 - v19;
            if ( v20 >= v4 )
            {
              *a4 = *v16;
              a4[1] = (unsigned int *)v19;
              a4[2] = v18;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          v16 += 3;
          ++result[14];
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v12 = *a2;
      v13 = a2[1];
      while ( v13 != v12 && result[16] <= result[15] )
      {
        v14 = **v12;
        if ( v4 >= v14 )
        {
          v15 = v12[1];
          *a4 = *v12;
          a4[1] = (unsigned int *)v14;
          a4[2] = v15;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v12 += 3;
        ++result[14];
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v21 = *a2;
    v22 = a2[1];
    while ( v22 != v21 && result[16] <= result[15] )
    {
      v23 = **v21;
      if ( v4 != v23 )
      {
        v24 = v21[1];
        *a4 = *v21;
        a4[1] = (unsigned int *)v23;
        a4[2] = v24;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      v21 += 3;
      ++result[14];
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v25 = *a2;
      v26 = a2[1];
      while ( v26 != v25 && result[16] <= result[15] )
      {
        v27 = **v25;
        if ( v4 < v27 )
        {
          v28 = v25[1];
          *a4 = *v25;
          a4[1] = (unsigned int *)v27;
          a4[2] = v28;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v25 += 3;
        ++result[14];
      }
    }
    else if ( a3 == 4096 )
    {
      v8 = *a2;
      v9 = a2[1];
      while ( v9 != v8 && result[16] <= result[15] )
      {
        v10 = **v8;
        if ( v4 <= v10 )
        {
          v11 = v8[1];
          *a4 = *v8;
          a4[1] = (unsigned int *)v10;
          a4[2] = v11;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v8 += 3;
        ++result[14];
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    v6 = a2[1];
    while ( v6 != v5 && result[16] <= result[15] )
    {
      if ( v4 == **v5 )
      {
        v7 = v5[1];
        *a4 = *v5;
        a4[1] = (unsigned int *)v4;
        a4[2] = v7;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      v5 += 3;
      ++result[14];
    }
  }
  return result;
}

//----- (00000D8C) --------------------------------------------------------
float *__fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedFloat(float *result, unsigned __int64 *a2, signed int a3, float *a4)
{
  float *v4; // r5
  float *v5; // r4
  float v6; // s16
  int v7; // r3
  float *v8; // r2
  float v9; // s15
  int v10; // r1
  int v11; // r3
  float *v12; // r2
  float v13; // s15
  int v14; // r1
  __int64 v15; // r6
  float v16; // r2
  float *v17; // r3
  float v18; // s18
  float v19; // s17
  int v20; // r3
  __int64 v21; // r6
  float v22; // r2
  float v23; // s17
  int v24; // r8
  int v25; // r3
  __int64 v26; // r6
  float v27; // r2
  float *v28; // r3
  int v29; // r8
  float v30; // s17
  int v31; // r3
  int v32; // r3
  float *v33; // r2
  float v34; // s15
  int v35; // r1
  int v36; // r3
  float *v37; // r2
  float v38; // s15
  int v39; // r1
  __int64 v40; // r6
  float v41; // r2
  float *v42; // r3
  int v43; // s18
  float v44; // s17
  float v45; // s15
  int v46; // r3
  __int64 v47; // r6
  float v48; // r2
  float *v49; // r3
  float v50; // s18
  float v51; // s17
  int v52; // r3

  v4 = a4;
  v5 = result;
  v6 = result[346];
  if ( a3 != 0x2000 )
  {
    if ( a3 <= 0x2000 )
    {
      if ( a3 == 1024 )
      {
        v26 = *a2;
        LODWORD(v26) = *a2 + 12;
        while ( HIDWORD(v26) != (_DWORD)v26 - 12 )
        {
          v27 = v5[16];
          if ( LODWORD(v27) > *((_DWORD *)v5 + 15) )
            break;
          v28 = *(float **)(v26 - 12);
          v29 = *(_DWORD *)(v26 - 8);
          v30 = *v28;
          if ( fabsf(v30) > 3.4028e38
            || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                    (CTRPluginFramework *)result,
                                    *(float *)&a2,
                                    v27,
                                    *(float *)&v28)) == 0 )
          {
            v31 = *(_DWORD *)(v26 - 12);
            v4[1] = v30;
            *(_DWORD *)v4 = v31;
            *((_DWORD *)v4 + 2) = v29;
            v4 += 3;
            ++*((_DWORD *)v5 + 16);
            ++*((_DWORD *)v5 + 3);
          }
          LODWORD(v26) = v26 + 12;
          ++*((_DWORD *)v5 + 14);
        }
      }
      else if ( a3 > 1024 )
      {
        if ( a3 == 2048 )
        {
          result = (float *)*((_DWORD *)a2 + 1);
          v32 = *(_DWORD *)a2;
          while ( result != (float *)v32 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
          {
            v33 = *(float **)v32;
            v34 = **(float **)v32;
            if ( v6 < v34 )
            {
              v35 = *(_DWORD *)(v32 + 4);
              v4[1] = v34;
              *(_DWORD *)v4 = v33;
              *((_DWORD *)v4 + 2) = v35;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
            v32 += 12;
            ++*((_DWORD *)v5 + 14);
          }
        }
        else if ( a3 == 4096 )
        {
          result = (float *)*((_DWORD *)a2 + 1);
          v7 = *(_DWORD *)a2;
          while ( result != (float *)v7 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
          {
            v8 = *(float **)v7;
            v9 = **(float **)v7;
            if ( v6 <= v9 )
            {
              v10 = *(_DWORD *)(v7 + 4);
              v4[1] = v9;
              *(_DWORD *)v4 = v8;
              *((_DWORD *)v4 + 2) = v10;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
            v7 += 12;
            ++*((_DWORD *)v5 + 14);
          }
        }
      }
      else if ( a3 == 512 )
      {
        v21 = *a2;
        while ( (_DWORD)v21 != HIDWORD(v21) )
        {
          v22 = v5[16];
          if ( LODWORD(v22) > *((_DWORD *)v5 + 15) )
            break;
          v23 = **(float **)v21;
          if ( fabsf(v23) <= 3.4028e38 )
          {
            v24 = *(_DWORD *)(v21 + 4);
            result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                (CTRPluginFramework *)result,
                                *(float *)&a2,
                                v22,
                                *(float *)v21);
            if ( result )
            {
              v25 = *(_DWORD *)v21;
              v4[1] = v23;
              *(_DWORD *)v4 = v25;
              *((_DWORD *)v4 + 2) = v24;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          LODWORD(v21) = v21 + 12;
          ++*((_DWORD *)v5 + 14);
        }
      }
      return result;
    }
    if ( a3 != 0x8000 )
    {
      if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v47 = *a2;
          LODWORD(v47) = *a2 + 12;
          while ( HIDWORD(v47) != (_DWORD)v47 - 12 )
          {
            v48 = v5[16];
            if ( LODWORD(v48) > *((_DWORD *)v5 + 15) )
              break;
            v49 = *(float **)(v47 - 12);
            v50 = *(float *)(v47 - 8);
            v51 = *v49;
            if ( fabsf(v51) > 3.4028e38
              || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                      (CTRPluginFramework *)result,
                                      *(float *)&a2,
                                      v48,
                                      *(float *)&v49)) == 0 )
            {
              if ( v6 >= fabs((double)(signed int)(float)(v51 - v50)) )
              {
                v52 = *(_DWORD *)(v47 - 12);
                v4[1] = v51;
                v4[2] = v50;
                *(_DWORD *)v4 = v52;
                v4 += 3;
                ++*((_DWORD *)v5 + 16);
                ++*((_DWORD *)v5 + 3);
              }
            }
            LODWORD(v47) = v47 + 12;
            ++*((_DWORD *)v5 + 14);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v15 = *a2;
          LODWORD(v15) = *a2 + 12;
          while ( HIDWORD(v15) != (_DWORD)v15 - 12 )
          {
            v16 = v5[16];
            if ( LODWORD(v16) > *((_DWORD *)v5 + 15) )
              break;
            v17 = *(float **)(v15 - 12);
            v18 = *(float *)(v15 - 8);
            v19 = *v17;
            if ( fabsf(v19) > 3.4028e38
              || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                      (CTRPluginFramework *)result,
                                      *(float *)&a2,
                                      v16,
                                      *(float *)&v17)) == 0 )
            {
              if ( v6 <= fabs((double)(signed int)(float)(v19 - v18)) )
              {
                v20 = *(_DWORD *)(v15 - 12);
                v4[1] = v19;
                v4[2] = v18;
                *(_DWORD *)v4 = v20;
                v4 += 3;
                ++*((_DWORD *)v5 + 16);
                ++*((_DWORD *)v5 + 3);
              }
            }
            LODWORD(v15) = v15 + 12;
            ++*((_DWORD *)v5 + 14);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        result = (float *)*((_DWORD *)a2 + 1);
        v11 = *(_DWORD *)a2;
        while ( result != (float *)v11 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
        {
          v12 = *(float **)v11;
          v13 = **(float **)v11;
          if ( v6 >= v13 )
          {
            v14 = *(_DWORD *)(v11 + 4);
            v4[1] = v13;
            *(_DWORD *)v4 = v12;
            *((_DWORD *)v4 + 2) = v14;
            v4 += 3;
            ++*((_DWORD *)v5 + 16);
            ++*((_DWORD *)v5 + 3);
          }
          v11 += 12;
          ++*((_DWORD *)v5 + 14);
        }
      }
      return result;
    }
    v40 = *a2;
    LODWORD(v40) = *a2 + 12;
    while ( 1 )
    {
      if ( HIDWORD(v40) == (_DWORD)v40 - 12 )
        return result;
      v41 = v5[16];
      if ( LODWORD(v41) > *((_DWORD *)v5 + 15) )
        return result;
      v42 = *(float **)(v40 - 12);
      v43 = *(_DWORD *)(v40 - 8);
      v44 = *v42;
      v45 = fabsf(*v42);
      if ( v45 > 3.4028e38 )
      {
        if ( v45 > 3.4028e38 )
        {
          if ( v45 > 3.4028e38 )
            goto LABEL_69;
          goto LABEL_84;
        }
      }
      else
      {
        result = (float *)CTRPluginFramework::AlmostEqualRelative(
                            (CTRPluginFramework *)result,
                            *(float *)&a2,
                            v41,
                            *(float *)&v42);
        if ( result )
          goto LABEL_69;
      }
      result = (float *)CTRPluginFramework::AlmostEqualRelative(
                          (CTRPluginFramework *)result,
                          *(float *)&a2,
                          v41,
                          *(float *)&v42);
      if ( result )
        goto LABEL_68;
LABEL_84:
      result = (float *)CTRPluginFramework::AlmostEqualRelative(
                          (CTRPluginFramework *)result,
                          *(float *)&a2,
                          v41,
                          *(float *)&v42);
      if ( result )
      {
LABEL_68:
        v46 = *(_DWORD *)(v40 - 12);
        v4[1] = v44;
        *((_DWORD *)v4 + 2) = v43;
        *(_DWORD *)v4 = v46;
        v4 += 3;
        ++*((_DWORD *)v5 + 16);
        ++*((_DWORD *)v5 + 3);
      }
LABEL_69:
      LODWORD(v40) = v40 + 12;
      ++*((_DWORD *)v5 + 14);
    }
  }
  result = (float *)*((_DWORD *)a2 + 1);
  v36 = *(_DWORD *)a2;
  while ( result != (float *)v36 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
  {
    v37 = *(float **)v36;
    v38 = **(float **)v36;
    if ( v6 > v38 )
    {
      v39 = *(_DWORD *)(v36 + 4);
      v4[1] = v38;
      *(_DWORD *)v4 = v37;
      *((_DWORD *)v4 + 2) = v39;
      v4 += 3;
      ++*((_DWORD *)v5 + 16);
      ++*((_DWORD *)v5 + 3);
    }
    v36 += 12;
    ++*((_DWORD *)v5 + 14);
  }
  return result;
}

// ALL OK, 4 function(s) have been successfully decompiled
