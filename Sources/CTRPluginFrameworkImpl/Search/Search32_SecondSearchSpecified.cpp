/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU8(int result, unsigned __int8 ***a2, signed int a3, unsigned __int8 **a4);
int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU16(int result, unsigned __int16 ***a2, signed int a3, unsigned __int16 **a4);
_DWORD *__fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU32(_DWORD *result, unsigned int ***a2, signed int a3, unsigned int **a4);
float *__fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedFloat(float *result, float **a2, signed int a3, int a4);
// _DWORD __cdecl CTRPluginFramework::AlmostEqualRelative(CTRPluginFramework *__hidden this, float, float, float); idb


//----- (00000004) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU8(int result, unsigned __int8 ***a2, signed int a3, unsigned __int8 **a4)
{
  unsigned int v4; // r12
  unsigned __int8 **v5; // r2
  unsigned __int8 **v6; // r4
  unsigned __int8 *v7; // r5
  unsigned __int8 **v8; // r2
  unsigned __int8 **v9; // r4
  unsigned __int8 *v10; // lr
  unsigned __int8 *v11; // r6
  unsigned __int8 **v12; // r2
  unsigned __int8 **v13; // r4
  unsigned __int8 *v14; // lr
  unsigned __int8 *v15; // r6
  unsigned __int8 **v16; // r2
  unsigned __int8 **v17; // r4
  unsigned __int8 *v18; // r12
  unsigned __int8 *v19; // lr
  int v20; // r1
  unsigned __int8 **v21; // r2
  unsigned __int8 **v22; // r4
  unsigned __int8 *v23; // lr
  unsigned __int8 *v24; // r6
  unsigned __int8 **v25; // r2
  unsigned __int8 **v26; // r4
  unsigned __int8 *v27; // lr
  unsigned __int8 *v28; // r6
  unsigned __int8 **v29; // r2
  unsigned __int8 **v30; // r4
  unsigned __int8 *v31; // lr
  unsigned __int8 *v32; // r6
  unsigned __int8 **v33; // r2
  unsigned __int8 **v34; // r4
  unsigned __int8 *v35; // r1
  unsigned __int8 *v36; // r12
  int v37; // lr
  unsigned __int8 **v38; // r2
  unsigned __int8 **v39; // r4
  unsigned __int8 *v40; // r12
  unsigned __int8 *v41; // lr
  int v42; // r1
  unsigned __int8 **v43; // r2
  unsigned __int8 **v44; // r4
  unsigned __int8 *v45; // r12
  unsigned __int8 **v46; // r2
  unsigned __int8 **v47; // r4
  unsigned __int8 *v48; // r12
  unsigned __int8 *v49; // lr
  unsigned __int8 **v50; // r2
  unsigned __int8 **v51; // r4
  unsigned __int8 *v52; // r12
  unsigned __int8 *v53; // lr
  unsigned __int8 **v54; // r2
  unsigned __int8 **v55; // r4
  unsigned __int8 *v56; // r12
  unsigned __int8 *v57; // lr
  int v58; // r1
  unsigned __int8 **v59; // r2
  unsigned __int8 **v60; // r4
  unsigned __int8 *v61; // r12
  unsigned __int8 *v62; // lr
  unsigned __int8 **v63; // r2
  unsigned __int8 **v64; // r4
  unsigned __int8 *v65; // r12
  unsigned __int8 *v66; // lr
  unsigned __int8 **v67; // r2
  unsigned __int8 **v68; // r4
  unsigned __int8 *v69; // r12
  unsigned __int8 *v70; // lr
  unsigned __int8 **v71; // r2
  unsigned __int8 **v72; // r4
  unsigned __int8 *v73; // r1
  unsigned __int8 *v74; // r12
  int v75; // lr
  unsigned __int8 **v76; // r2
  unsigned __int8 **v77; // r4
  unsigned __int8 *v78; // r12
  unsigned __int8 *v79; // lr
  int v80; // r1

  if ( *(_DWORD *)(result + 72) & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      v67 = *a2;
      v68 = a2[1];
      while ( v68 != v67 )
      {
        v69 = (unsigned __int8 *)*((unsigned __int8 *)v67 + 4);
        v70 = (unsigned __int8 *)**v67;
        if ( v70 < v69 )
        {
          *a4 = *v67;
          a4[1] = v70;
          a4[2] = v69;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v67 += 2;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v71 = *a2;
        v72 = a2[1];
        while ( v72 != v71 )
        {
          v73 = (unsigned __int8 *)*((unsigned __int8 *)v71 + 4);
          v74 = (unsigned __int8 *)**v71;
          if ( v74 != v73 )
          {
            v75 = *(unsigned __int8 *)(result + 1384);
            if ( v74 == &v73[v75] || v74 == &v73[-v75] )
            {
              *a4 = *v71;
              a4[1] = v74;
              a4[2] = v73;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v71 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v76 = *a2;
          v77 = a2[1];
          while ( v77 != v76 )
          {
            v78 = (unsigned __int8 *)*((unsigned __int8 *)v76 + 4);
            v79 = (unsigned __int8 *)**v76;
            if ( v79 != v78 )
            {
              v80 = v79 - v78;
              if ( v79 - v78 < 0 )
                v80 = v78 - v79;
              if ( v80 <= *(unsigned __int8 *)(result + 1384) )
              {
                *a4 = *v76;
                a4[1] = v79;
                a4[2] = v78;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v76 += 2;
            ++*(_DWORD *)(result + 56);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v54 = *a2;
          v55 = a2[1];
          while ( v55 != v54 )
          {
            v56 = (unsigned __int8 *)*((unsigned __int8 *)v54 + 4);
            v57 = (unsigned __int8 *)**v54;
            if ( v57 != v56 )
            {
              v58 = v57 - v56;
              if ( v57 - v56 < 0 )
                v58 = v56 - v57;
              if ( v58 >= *(unsigned __int8 *)(result + 1384) )
              {
                *a4 = *v54;
                a4[1] = v57;
                a4[2] = v56;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v54 += 2;
            ++*(_DWORD *)(result + 56);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v50 = *a2;
        v51 = a2[1];
        while ( v51 != v50 )
        {
          v52 = (unsigned __int8 *)*((unsigned __int8 *)v50 + 4);
          v53 = (unsigned __int8 *)**v50;
          if ( v53 <= v52 )
          {
            *a4 = *v50;
            a4[1] = v53;
            a4[2] = v52;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v50 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v59 = *a2;
      v60 = a2[1];
      while ( v60 != v59 )
      {
        v61 = (unsigned __int8 *)*((unsigned __int8 *)v59 + 4);
        v62 = (unsigned __int8 *)**v59;
        if ( v62 != v61 )
        {
          *a4 = *v59;
          a4[1] = v62;
          a4[2] = v61;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v59 += 2;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v63 = *a2;
        v64 = a2[1];
        while ( v64 != v63 )
        {
          v65 = (unsigned __int8 *)*((unsigned __int8 *)v63 + 4);
          v66 = (unsigned __int8 *)**v63;
          if ( v66 > v65 )
          {
            *a4 = *v63;
            a4[1] = v66;
            a4[2] = v65;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v63 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 4096 )
      {
        v46 = *a2;
        v47 = a2[1];
        while ( v47 != v46 )
        {
          v48 = (unsigned __int8 *)*((unsigned __int8 *)v46 + 4);
          v49 = (unsigned __int8 *)**v46;
          if ( v49 >= v48 )
          {
            *a4 = *v46;
            a4[1] = v49;
            a4[2] = v48;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v46 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 512 )
    {
      v43 = *a2;
      v44 = a2[1];
      while ( v44 != v43 )
      {
        v45 = (unsigned __int8 *)**v43;
        if ( v45 == (unsigned __int8 *)*((unsigned __int8 *)v43 + 4) )
        {
          *a4 = *v43;
          a4[1] = v45;
          a4[2] = v45;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v43 += 2;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else
  {
    v4 = *(unsigned __int8 *)(result + 1384);
    if ( a3 == 0x2000 )
    {
      v29 = *a2;
      v30 = a2[1];
      while ( v30 != v29 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v31 = (unsigned __int8 *)**v29;
        if ( v4 > (unsigned int)v31 )
        {
          v32 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 4);
          *a4 = *v29;
          a4[1] = v31;
          a4[2] = v32;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v29 += 2;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v33 = *a2;
        v34 = a2[1];
        while ( v34 != v33 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v35 = (unsigned __int8 *)*((unsigned __int8 *)v33 + 4);
          v36 = (unsigned __int8 *)**v33;
          if ( v36 != v35 )
          {
            v37 = *(unsigned __int8 *)(result + 1384);
            if ( v36 == &v35[v37] || v36 == &v35[-v37] )
            {
              *a4 = *v33;
              a4[1] = v36;
              a4[2] = v35;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v33 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v38 = *a2;
          v39 = a2[1];
          while ( v39 != v38 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v40 = (unsigned __int8 *)*((unsigned __int8 *)v38 + 4);
            v41 = (unsigned __int8 *)**v38;
            if ( v41 != v40 )
            {
              v42 = v41 - v40;
              if ( v41 - v40 < 0 )
                v42 = v40 - v41;
              if ( v42 <= *(unsigned __int8 *)(result + 1384) )
              {
                *a4 = *v38;
                a4[1] = v41;
                a4[2] = v40;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v38 += 2;
            ++*(_DWORD *)(result + 56);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v16 = *a2;
          v17 = a2[1];
          while ( v17 != v16 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v18 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 4);
            v19 = (unsigned __int8 *)**v16;
            if ( v19 != v18 )
            {
              v20 = v19 - v18;
              if ( v19 - v18 < 0 )
                v20 = v18 - v19;
              if ( v20 >= *(unsigned __int8 *)(result + 1384) )
              {
                *a4 = *v16;
                a4[1] = v19;
                a4[2] = v18;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v16 += 2;
            ++*(_DWORD *)(result + 56);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v12 = *a2;
        v13 = a2[1];
        while ( v13 != v12 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v14 = (unsigned __int8 *)**v12;
          if ( v4 >= (unsigned int)v14 )
          {
            v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 4);
            *a4 = *v12;
            a4[1] = v14;
            a4[2] = v15;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v12 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v21 = *a2;
      v22 = a2[1];
      while ( v22 != v21 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v23 = (unsigned __int8 *)**v21;
        if ( (unsigned __int8 *)v4 != v23 )
        {
          v24 = (unsigned __int8 *)*((unsigned __int8 *)v21 + 4);
          *a4 = *v21;
          a4[1] = v23;
          a4[2] = v24;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v21 += 2;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v25 = *a2;
        v26 = a2[1];
        while ( v26 != v25 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v27 = (unsigned __int8 *)**v25;
          if ( v4 < (unsigned int)v27 )
          {
            v28 = (unsigned __int8 *)*((unsigned __int8 *)v25 + 4);
            *a4 = *v25;
            a4[1] = v27;
            a4[2] = v28;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v25 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 4096 )
      {
        v8 = *a2;
        v9 = a2[1];
        while ( v9 != v8 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v10 = (unsigned __int8 *)**v8;
          if ( v4 <= (unsigned int)v10 )
          {
            v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 4);
            *a4 = *v8;
            a4[1] = v10;
            a4[2] = v11;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v8 += 2;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 512 )
    {
      v5 = *a2;
      v6 = a2[1];
      while ( v6 != v5 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        if ( v4 == **v5 )
        {
          v7 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 4);
          *a4 = *v5;
          a4[1] = (unsigned __int8 *)v4;
          a4[2] = v7;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v5 += 2;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  return result;
}

//----- (000008A8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU16(int result, unsigned __int16 ***a2, signed int a3, unsigned __int16 **a4)
{
  unsigned int v4; // r12
  unsigned __int16 **v5; // r2
  unsigned __int16 **v6; // r4
  unsigned __int16 *v7; // r5
  unsigned __int16 **v8; // r2
  unsigned __int16 **v9; // r4
  unsigned __int16 *v10; // lr
  unsigned __int16 *v11; // r6
  unsigned __int16 **v12; // r2
  unsigned __int16 **v13; // r4
  unsigned __int16 *v14; // lr
  unsigned __int16 *v15; // r6
  unsigned __int16 **v16; // r2
  unsigned __int16 **v17; // r4
  unsigned __int16 *v18; // r12
  unsigned __int16 *v19; // r5
  int v20; // r1
  unsigned __int16 **v21; // r2
  unsigned __int16 **v22; // r4
  unsigned __int16 *v23; // lr
  unsigned __int16 *v24; // r6
  unsigned __int16 **v25; // r2
  unsigned __int16 **v26; // r4
  unsigned __int16 *v27; // lr
  unsigned __int16 *v28; // r6
  unsigned __int16 **v29; // r2
  unsigned __int16 **v30; // r4
  unsigned __int16 *v31; // lr
  unsigned __int16 *v32; // r6
  unsigned __int16 **v33; // r2
  unsigned __int16 **v34; // r5
  unsigned __int16 *v35; // r1
  unsigned __int16 *v36; // r12
  int v37; // r4
  unsigned __int16 **v38; // r2
  unsigned __int16 **v39; // r4
  unsigned __int16 *v40; // r12
  unsigned __int16 *v41; // r5
  int v42; // r1
  unsigned __int16 **v43; // r2
  unsigned __int16 **v44; // r4
  unsigned __int16 *v45; // r12
  unsigned __int16 **v46; // r2
  unsigned __int16 **v47; // r4
  unsigned __int16 *v48; // r12
  unsigned __int16 *v49; // lr
  unsigned __int16 **v50; // r2
  unsigned __int16 **v51; // r4
  unsigned __int16 *v52; // r12
  unsigned __int16 *v53; // lr
  unsigned __int16 **v54; // r2
  unsigned __int16 **v55; // r4
  unsigned __int16 *v56; // r12
  unsigned __int16 *v57; // lr
  int v58; // r1
  unsigned __int16 **v59; // r2
  unsigned __int16 **v60; // r4
  unsigned __int16 *v61; // r12
  unsigned __int16 *v62; // lr
  unsigned __int16 **v63; // r2
  unsigned __int16 **v64; // r4
  unsigned __int16 *v65; // r12
  unsigned __int16 *v66; // lr
  unsigned __int16 **v67; // r2
  unsigned __int16 **v68; // r4
  unsigned __int16 *v69; // r12
  unsigned __int16 *v70; // lr
  unsigned __int16 **v71; // r2
  unsigned __int16 **v72; // r4
  unsigned __int16 *v73; // r1
  unsigned __int16 *v74; // r12
  int v75; // lr
  unsigned __int16 **v76; // r2
  unsigned __int16 **v77; // r4
  unsigned __int16 *v78; // r12
  unsigned __int16 *v79; // lr
  int v80; // r1

  if ( *(_DWORD *)(result + 72) & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      v67 = *a2;
      v68 = a2[1];
      while ( v68 != v67 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v69 = (unsigned __int16 *)*((unsigned __int16 *)v67 + 2);
        v70 = (unsigned __int16 *)**v67;
        if ( v70 < v69 )
        {
          *a4 = *v67;
          a4[1] = v70;
          a4[2] = v69;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v67 += 2;
        *(_DWORD *)(result + 56) += 2;
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v71 = *a2;
        v72 = a2[1];
        while ( v72 != v71 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v73 = (unsigned __int16 *)*((unsigned __int16 *)v71 + 2);
          v74 = (unsigned __int16 *)**v71;
          if ( v74 != v73 )
          {
            v75 = *(unsigned __int16 *)(result + 1384);
            if ( v74 == (unsigned __int16 *)((char *)v73 + v75) || v74 == (unsigned __int16 *)((char *)v73 - v75) )
            {
              *a4 = *v71;
              a4[1] = v74;
              a4[2] = v73;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v71 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v76 = *a2;
          v77 = a2[1];
          while ( v77 != v76 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v78 = (unsigned __int16 *)*((unsigned __int16 *)v76 + 2);
            v79 = (unsigned __int16 *)**v76;
            if ( v79 != v78 )
            {
              v80 = (char *)v79 - (char *)v78;
              if ( (char *)v79 - (char *)v78 < 0 )
                v80 = (char *)v78 - (char *)v79;
              if ( v80 <= *(unsigned __int16 *)(result + 1384) )
              {
                *a4 = *v76;
                a4[1] = v79;
                a4[2] = v78;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v76 += 2;
            *(_DWORD *)(result + 56) += 2;
          }
        }
        else if ( a3 == 0x20000 )
        {
          v54 = *a2;
          v55 = a2[1];
          while ( v55 != v54 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v56 = (unsigned __int16 *)*((unsigned __int16 *)v54 + 2);
            v57 = (unsigned __int16 *)**v54;
            if ( v57 != v56 )
            {
              v58 = (char *)v57 - (char *)v56;
              if ( (char *)v57 - (char *)v56 < 0 )
                v58 = (char *)v56 - (char *)v57;
              if ( v58 >= *(unsigned __int16 *)(result + 1384) )
              {
                *a4 = *v54;
                a4[1] = v57;
                a4[2] = v56;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v54 += 2;
            *(_DWORD *)(result + 56) += 2;
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v50 = *a2;
        v51 = a2[1];
        while ( v51 != v50 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v52 = (unsigned __int16 *)*((unsigned __int16 *)v50 + 2);
          v53 = (unsigned __int16 *)**v50;
          if ( v53 <= v52 )
          {
            *a4 = *v50;
            a4[1] = v53;
            a4[2] = v52;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v50 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v59 = *a2;
      v60 = a2[1];
      while ( v60 != v59 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v61 = (unsigned __int16 *)*((unsigned __int16 *)v59 + 2);
        v62 = (unsigned __int16 *)**v59;
        if ( v62 != v61 )
        {
          *a4 = *v59;
          a4[1] = v62;
          a4[2] = v61;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v59 += 2;
        *(_DWORD *)(result + 56) += 2;
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v63 = *a2;
        v64 = a2[1];
        while ( v64 != v63 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v65 = (unsigned __int16 *)*((unsigned __int16 *)v63 + 2);
          v66 = (unsigned __int16 *)**v63;
          if ( v66 > v65 )
          {
            *a4 = *v63;
            a4[1] = v66;
            a4[2] = v65;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v63 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
      else if ( a3 == 4096 )
      {
        v46 = *a2;
        v47 = a2[1];
        while ( v47 != v46 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v48 = (unsigned __int16 *)*((unsigned __int16 *)v46 + 2);
          v49 = (unsigned __int16 *)**v46;
          if ( v49 >= v48 )
          {
            *a4 = *v46;
            a4[1] = v49;
            a4[2] = v48;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v46 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
    }
    else if ( a3 == 512 )
    {
      v43 = *a2;
      v44 = a2[1];
      while ( v44 != v43 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v45 = (unsigned __int16 *)**v43;
        if ( v45 == (unsigned __int16 *)*((unsigned __int16 *)v43 + 2) )
        {
          *a4 = *v43;
          a4[1] = v45;
          a4[2] = v45;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v43 += 2;
        *(_DWORD *)(result + 56) += 2;
      }
    }
  }
  else
  {
    v4 = *(unsigned __int16 *)(result + 1384);
    if ( a3 == 0x2000 )
    {
      v29 = *a2;
      v30 = a2[1];
      while ( v30 != v29 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v31 = (unsigned __int16 *)**v29;
        if ( v4 > (unsigned int)v31 )
        {
          v32 = (unsigned __int16 *)*((unsigned __int16 *)v29 + 2);
          *a4 = *v29;
          a4[1] = v31;
          a4[2] = v32;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v29 += 2;
        *(_DWORD *)(result + 56) += 2;
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v33 = *a2;
        v34 = a2[1];
        while ( v34 != v33 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v35 = (unsigned __int16 *)*((unsigned __int16 *)v33 + 2);
          v36 = (unsigned __int16 *)**v33;
          if ( v36 != v35 )
          {
            v37 = *(unsigned __int16 *)(result + 1384);
            if ( v36 == (unsigned __int16 *)((char *)v35 + v37) || v36 == (unsigned __int16 *)((char *)v35 - v37) )
            {
              *a4 = *v33;
              a4[1] = v36;
              a4[2] = v35;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v33 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v38 = *a2;
          v39 = a2[1];
          while ( v39 != v38 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v40 = (unsigned __int16 *)*((unsigned __int16 *)v38 + 2);
            v41 = (unsigned __int16 *)**v38;
            if ( v41 != v40 )
            {
              v42 = (char *)v41 - (char *)v40;
              if ( (char *)v41 - (char *)v40 < 0 )
                v42 = (char *)v40 - (char *)v41;
              if ( v42 <= *(unsigned __int16 *)(result + 1384) )
              {
                *a4 = *v38;
                a4[1] = v41;
                a4[2] = v40;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v38 += 2;
            *(_DWORD *)(result + 56) += 2;
          }
        }
        else if ( a3 == 0x20000 )
        {
          v16 = *a2;
          v17 = a2[1];
          while ( v17 != v16 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v18 = (unsigned __int16 *)*((unsigned __int16 *)v16 + 2);
            v19 = (unsigned __int16 *)**v16;
            if ( v19 != v18 )
            {
              v20 = (char *)v19 - (char *)v18;
              if ( (char *)v19 - (char *)v18 < 0 )
                v20 = (char *)v18 - (char *)v19;
              if ( v20 >= *(unsigned __int16 *)(result + 1384) )
              {
                *a4 = *v16;
                a4[1] = v19;
                a4[2] = v18;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v16 += 2;
            *(_DWORD *)(result + 56) += 2;
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v12 = *a2;
        v13 = a2[1];
        while ( v13 != v12 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v14 = (unsigned __int16 *)**v12;
          if ( v4 >= (unsigned int)v14 )
          {
            v15 = (unsigned __int16 *)*((unsigned __int16 *)v12 + 2);
            *a4 = *v12;
            a4[1] = v14;
            a4[2] = v15;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v12 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v21 = *a2;
      v22 = a2[1];
      while ( v22 != v21 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v23 = (unsigned __int16 *)**v21;
        if ( (unsigned __int16 *)v4 != v23 )
        {
          v24 = (unsigned __int16 *)*((unsigned __int16 *)v21 + 2);
          *a4 = *v21;
          a4[1] = v23;
          a4[2] = v24;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v21 += 2;
        *(_DWORD *)(result + 56) += 2;
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v25 = *a2;
        v26 = a2[1];
        while ( v26 != v25 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v27 = (unsigned __int16 *)**v25;
          if ( v4 < (unsigned int)v27 )
          {
            v28 = (unsigned __int16 *)*((unsigned __int16 *)v25 + 2);
            *a4 = *v25;
            a4[1] = v27;
            a4[2] = v28;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v25 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
      else if ( a3 == 4096 )
      {
        v8 = *a2;
        v9 = a2[1];
        while ( v9 != v8 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v10 = (unsigned __int16 *)**v8;
          if ( v4 <= (unsigned int)v10 )
          {
            v11 = (unsigned __int16 *)*((unsigned __int16 *)v8 + 2);
            *a4 = *v8;
            a4[1] = v10;
            a4[2] = v11;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v8 += 2;
          *(_DWORD *)(result + 56) += 2;
        }
      }
    }
    else if ( a3 == 512 )
    {
      v5 = *a2;
      v6 = a2[1];
      while ( v6 != v5 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        if ( v4 == **v5 )
        {
          v7 = (unsigned __int16 *)*((unsigned __int16 *)v5 + 2);
          *a4 = *v5;
          a4[1] = (unsigned __int16 *)v4;
          a4[2] = v7;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v5 += 2;
        *(_DWORD *)(result + 56) += 2;
      }
    }
  }
  return result;
}

//----- (000011E4) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU32(_DWORD *result, unsigned int ***a2, signed int a3, unsigned int **a4)
{
  unsigned int v4; // r12
  unsigned int **v5; // r2
  unsigned int **v6; // r4
  unsigned int *v7; // r5
  unsigned int **v8; // r2
  unsigned int **v9; // r4
  unsigned int v10; // lr
  unsigned int *v11; // r6
  unsigned int **v12; // r2
  unsigned int **v13; // r4
  unsigned int v14; // lr
  unsigned int *v15; // r6
  unsigned int **v16; // r2
  unsigned int **v17; // r4
  unsigned int *v18; // r12
  unsigned int v19; // lr
  unsigned int v20; // r1
  unsigned int **v21; // r2
  unsigned int **v22; // r4
  unsigned int v23; // lr
  unsigned int *v24; // r6
  unsigned int **v25; // r2
  unsigned int **v26; // r4
  unsigned int v27; // lr
  unsigned int *v28; // r6
  unsigned int **v29; // r2
  unsigned int **v30; // r4
  unsigned int v31; // lr
  unsigned int *v32; // r6
  unsigned int **v33; // r2
  unsigned int **v34; // r4
  unsigned int *v35; // r1
  unsigned int v36; // r12
  int v37; // lr
  unsigned int **v38; // r2
  unsigned int **v39; // r4
  unsigned int *v40; // r12
  unsigned int v41; // lr
  unsigned int v42; // r1
  unsigned int **v43; // r2
  unsigned int **v44; // r4
  unsigned int *v45; // r12
  unsigned int **v46; // r2
  unsigned int **v47; // r4
  unsigned int v48; // r12
  unsigned int v49; // lr
  unsigned int **v50; // r2
  unsigned int **v51; // r4
  unsigned int v52; // r12
  unsigned int v53; // lr
  unsigned int **v54; // r2
  unsigned int **v55; // r4
  unsigned int *v56; // r12
  unsigned int v57; // lr
  unsigned int v58; // r1
  unsigned int **v59; // r2
  unsigned int **v60; // r4
  unsigned int *v61; // r12
  unsigned int v62; // lr
  unsigned int **v63; // r2
  unsigned int **v64; // r4
  unsigned int v65; // r12
  unsigned int v66; // lr
  unsigned int **v67; // r2
  unsigned int **v68; // r4
  unsigned int v69; // r12
  unsigned int v70; // lr
  unsigned int **v71; // r2
  unsigned int **v72; // r4
  unsigned int *v73; // r1
  unsigned int v74; // r12
  int v75; // lr
  unsigned int **v76; // r2
  unsigned int **v77; // r4
  unsigned int *v78; // r12
  unsigned int v79; // lr
  unsigned int v80; // r1

  if ( result[18] & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      v67 = *a2;
      v68 = a2[1];
      while ( v68 != v67 && result[16] <= result[15] )
      {
        v69 = (unsigned int)v67[1];
        v70 = **v67;
        if ( v70 < v69 )
        {
          *a4 = *v67;
          a4[1] = (unsigned int *)v70;
          a4[2] = (unsigned int *)v69;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v67 += 2;
        ++result[14];
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v71 = *a2;
        v72 = a2[1];
        while ( v72 != v71 && result[16] <= result[15] )
        {
          v73 = v71[1];
          v74 = **v71;
          if ( (unsigned int *)v74 != v73 )
          {
            v75 = result[346];
            if ( (unsigned int *)((char *)v73 + v75) == (unsigned int *)v74
              || (unsigned int *)((char *)v73 - v75) == (unsigned int *)v74 )
            {
              *a4 = *v71;
              a4[1] = (unsigned int *)v74;
              a4[2] = v73;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          v71 += 2;
          ++result[14];
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v76 = *a2;
          v77 = a2[1];
          while ( v77 != v76 && result[16] <= result[15] )
          {
            v78 = v76[1];
            v79 = **v76;
            if ( (unsigned int *)v79 != v78 )
            {
              v80 = v79 - (_DWORD)v78;
              if ( (signed int)(v79 - (_DWORD)v78) < 0 )
                v80 = (unsigned int)v78 - v79;
              if ( result[346] >= v80 )
              {
                *a4 = *v76;
                a4[1] = (unsigned int *)v79;
                a4[2] = v78;
                ++result[16];
                ++result[3];
                a4 += 3;
              }
            }
            v76 += 2;
            ++result[14];
          }
        }
        else if ( a3 == 0x20000 )
        {
          v54 = *a2;
          v55 = a2[1];
          while ( v55 != v54 && result[16] <= result[15] )
          {
            v56 = v54[1];
            v57 = **v54;
            if ( (unsigned int *)v57 != v56 )
            {
              v58 = v57 - (_DWORD)v56;
              if ( (signed int)(v57 - (_DWORD)v56) < 0 )
                v58 = (unsigned int)v56 - v57;
              if ( result[346] <= v58 )
              {
                *a4 = *v54;
                a4[1] = (unsigned int *)v57;
                a4[2] = v56;
                ++result[16];
                ++result[3];
                a4 += 3;
              }
            }
            v54 += 2;
            ++result[14];
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v50 = *a2;
        v51 = a2[1];
        while ( v51 != v50 && result[16] <= result[15] )
        {
          v52 = (unsigned int)v50[1];
          v53 = **v50;
          if ( v53 <= v52 )
          {
            *a4 = *v50;
            a4[1] = (unsigned int *)v53;
            a4[2] = (unsigned int *)v52;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v50 += 2;
          ++result[14];
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v59 = *a2;
      v60 = a2[1];
      while ( v60 != v59 && result[16] <= result[15] )
      {
        v61 = v59[1];
        v62 = **v59;
        if ( (unsigned int *)v62 != v61 )
        {
          *a4 = *v59;
          a4[1] = (unsigned int *)v62;
          a4[2] = v61;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v59 += 2;
        ++result[14];
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v63 = *a2;
        v64 = a2[1];
        while ( v64 != v63 && result[16] <= result[15] )
        {
          v65 = (unsigned int)v63[1];
          v66 = **v63;
          if ( v66 > v65 )
          {
            *a4 = *v63;
            a4[1] = (unsigned int *)v66;
            a4[2] = (unsigned int *)v65;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v63 += 2;
          ++result[14];
        }
      }
      else if ( a3 == 4096 )
      {
        v46 = *a2;
        v47 = a2[1];
        while ( v47 != v46 && result[16] <= result[15] )
        {
          v48 = (unsigned int)v46[1];
          v49 = **v46;
          if ( v49 >= v48 )
          {
            *a4 = *v46;
            a4[1] = (unsigned int *)v49;
            a4[2] = (unsigned int *)v48;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v46 += 2;
          ++result[14];
        }
      }
    }
    else if ( a3 == 512 )
    {
      v43 = *a2;
      v44 = a2[1];
      while ( v44 != v43 && result[16] <= result[15] )
      {
        v45 = (unsigned int *)**v43;
        if ( v45 == v43[1] )
        {
          *a4 = *v43;
          a4[1] = v45;
          a4[2] = v45;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v43 += 2;
        ++result[14];
      }
    }
  }
  else
  {
    v4 = result[346];
    if ( a3 == 0x2000 )
    {
      v29 = *a2;
      v30 = a2[1];
      while ( v30 != v29 && result[16] <= result[15] )
      {
        v31 = **v29;
        if ( v4 > v31 )
        {
          v32 = v29[1];
          *a4 = *v29;
          a4[1] = (unsigned int *)v31;
          a4[2] = v32;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v29 += 2;
        ++result[14];
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v33 = *a2;
        v34 = a2[1];
        while ( v34 != v33 && result[16] <= result[15] )
        {
          v35 = v33[1];
          v36 = **v33;
          if ( (unsigned int *)v36 != v35 )
          {
            v37 = result[346];
            if ( (unsigned int *)((char *)v35 + v37) == (unsigned int *)v36
              || (unsigned int *)((char *)v35 - v37) == (unsigned int *)v36 )
            {
              *a4 = *v33;
              a4[1] = (unsigned int *)v36;
              a4[2] = v35;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          v33 += 2;
          ++result[14];
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v38 = *a2;
          v39 = a2[1];
          while ( v39 != v38 )
          {
            v40 = v38[1];
            v41 = **v38;
            if ( (unsigned int *)v41 != v40 )
            {
              v42 = v41 - (_DWORD)v40;
              if ( (signed int)(v41 - (_DWORD)v40) < 0 )
                v42 = (unsigned int)v40 - v41;
              if ( result[346] >= v42 )
              {
                *a4 = *v38;
                a4[1] = (unsigned int *)v41;
                a4[2] = v40;
                ++result[16];
                ++result[3];
                a4 += 3;
              }
            }
            v38 += 2;
            ++result[14];
          }
        }
        else if ( a3 == 0x20000 )
        {
          v16 = *a2;
          v17 = a2[1];
          while ( v17 != v16 && result[16] <= result[15] )
          {
            v18 = v16[1];
            v19 = **v16;
            if ( (unsigned int *)v19 != v18 )
            {
              v20 = v19 - (_DWORD)v18;
              if ( (signed int)(v19 - (_DWORD)v18) < 0 )
                v20 = (unsigned int)v18 - v19;
              if ( result[346] <= v20 )
              {
                *a4 = *v16;
                a4[1] = (unsigned int *)v19;
                a4[2] = v18;
                ++result[16];
                ++result[3];
                a4 += 3;
              }
            }
            v16 += 2;
            ++result[14];
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v12 = *a2;
        v13 = a2[1];
        while ( v13 != v12 && result[16] <= result[15] )
        {
          v14 = **v12;
          if ( v4 >= v14 )
          {
            v15 = v12[1];
            *a4 = *v12;
            a4[1] = (unsigned int *)v14;
            a4[2] = v15;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v12 += 2;
          ++result[14];
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v21 = *a2;
      v22 = a2[1];
      while ( v22 != v21 && result[16] <= result[15] )
      {
        v23 = **v21;
        if ( v4 != v23 )
        {
          v24 = v21[1];
          *a4 = *v21;
          a4[1] = (unsigned int *)v23;
          a4[2] = v24;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v21 += 2;
        ++result[14];
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v25 = *a2;
        v26 = a2[1];
        while ( v26 != v25 && result[16] <= result[15] )
        {
          v27 = **v25;
          if ( v4 < v27 )
          {
            v28 = v25[1];
            *a4 = *v25;
            a4[1] = (unsigned int *)v27;
            a4[2] = v28;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v25 += 2;
          ++result[14];
        }
      }
      else if ( a3 == 4096 )
      {
        v8 = *a2;
        v9 = a2[1];
        while ( v9 != v8 && result[16] <= result[15] )
        {
          v10 = **v8;
          if ( v4 <= v10 )
          {
            v11 = v8[1];
            *a4 = *v8;
            a4[1] = (unsigned int *)v10;
            a4[2] = v11;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v8 += 2;
          ++result[14];
        }
      }
    }
    else if ( a3 == 512 )
    {
      v5 = *a2;
      v6 = a2[1];
      while ( v6 != v5 && result[16] <= result[15] )
      {
        if ( v4 == **v5 )
        {
          v7 = v5[1];
          *a4 = *v5;
          a4[1] = (unsigned int *)v4;
          a4[2] = v7;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v5 += 2;
        ++result[14];
      }
    }
  }
  return result;
}

//----- (00001B08) --------------------------------------------------------
float *__fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedFloat(float *result, float **a2, signed int a3, int a4)
{
  int v4; // r5
  float *v5; // r4
  int v6; // r7
  float v7; // s16
  float *v8; // r3
  float *v9; // r2
  float v10; // s15
  int v11; // r1
  float *v12; // r3
  float *v13; // r2
  float v14; // s15
  int v15; // r1
  float *v16; // r6
  float *v17; // r8
  float v18; // r2
  float v19; // s16
  float v20; // s17
  float *v21; // r3
  __int64 v22; // r6
  float v23; // r2
  float v24; // s17
  int v25; // r8
  int v26; // r3
  __int64 v27; // r6
  float v28; // r2
  float *v29; // r3
  int v30; // r8
  float v31; // s17
  int v32; // r3
  float *v33; // r3
  float *v34; // r2
  float v35; // s15
  int v36; // r1
  float *v37; // r3
  float *v38; // r2
  float v39; // s15
  int v40; // r1
  float *v41; // r6
  float *v42; // r8
  float v43; // r2
  float v44; // s17
  float *v45; // r3
  float v46; // s16
  float v47; // s15
  float v48; // s1
  float *v49; // r3
  float *v50; // r6
  float *v51; // r8
  float v52; // r2
  float v53; // s16
  float v54; // s17
  float *v55; // r3
  __int64 v56; // r6
  float v57; // r2
  float v58; // s16
  float v59; // s17
  int v60; // r3
  float *v61; // r3
  float v62; // s15
  float *v63; // r2
  float v64; // s14
  float *v65; // r3
  float v66; // s15
  float *v67; // r2
  float v68; // s14
  __int64 v69; // r6
  int v70; // r8
  float v71; // r2
  float v72; // s16
  float v73; // s17
  int v74; // r3
  __int64 v75; // r6
  float v76; // r2
  float v77; // s17
  float v78; // s16
  int v79; // r3
  float *v80; // r3
  float v81; // s15
  float *v82; // r2
  float v83; // s14
  float *v84; // r3
  float v85; // s15
  float *v86; // r2
  float v87; // s14
  __int64 v88; // r6
  int v89; // r8
  float v90; // r2
  float v91; // s17
  float v92; // r3
  float v93; // s16
  float v94; // s15
  float v95; // s1
  int v96; // r3
  __int64 v97; // r6
  int v98; // r8
  float v99; // r2
  float v100; // s16
  float v101; // s17
  int v102; // r3
  float v103; // s1
  float v104; // s1

  v4 = a4;
  v5 = result;
  if ( (_DWORD)result[18] & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      result = a2[1];
      v84 = *a2;
      while ( result != v84 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
      {
        v85 = v84[1];
        if ( fabsf(v85) <= 3.4028e38 )
        {
          v86 = *(float **)v84;
          v87 = **(float **)v84;
          if ( v87 < v85 )
          {
            *(float *)(v4 + 4) = v87;
            *(float *)(v4 + 8) = v85;
            *(_DWORD *)v4 = v86;
            v4 += 12;
            ++*((_DWORD *)v5 + 16);
            ++*((_DWORD *)v5 + 3);
          }
        }
        v84 += 2;
        ++*((_DWORD *)v5 + 14);
      }
      return result;
    }
    if ( a3 <= 0x2000 )
    {
      if ( a3 == 1024 )
      {
        v75 = *(_QWORD *)a2;
        while ( (_DWORD)v75 != HIDWORD(v75) )
        {
          v76 = v5[16];
          if ( LODWORD(v76) > *((_DWORD *)v5 + 15) )
            break;
          v77 = *(float *)(v75 + 4);
          if ( fabsf(v77) <= 3.4028e38 )
          {
            v78 = **(float **)v75;
            if ( fabsf(v78) > 3.4028e38
              || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                      (CTRPluginFramework *)result,
                                      *(float *)&a2,
                                      v76,
                                      *(float *)v75)) == 0 )
            {
              v79 = *(_DWORD *)v75;
              *(float *)(v4 + 4) = v78;
              *(float *)(v4 + 8) = v77;
              *(_DWORD *)v4 = v79;
              v4 += 12;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          LODWORD(v75) = v75 + 8;
          ++*((_DWORD *)v5 + 14);
        }
      }
      else if ( a3 > 1024 )
      {
        if ( a3 == 2048 )
        {
          result = a2[1];
          v80 = *a2;
          while ( result != v80 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
          {
            v81 = v80[1];
            if ( fabsf(v81) <= 3.4028e38 )
            {
              v82 = *(float **)v80;
              v83 = **(float **)v80;
              if ( v83 > v81 )
              {
                *(float *)(v4 + 4) = v83;
                *(float *)(v4 + 8) = v81;
                *(_DWORD *)v4 = v82;
                v4 += 12;
                ++*((_DWORD *)v5 + 16);
                ++*((_DWORD *)v5 + 3);
              }
            }
            v80 += 2;
            ++*((_DWORD *)v5 + 14);
          }
        }
        else if ( a3 == 4096 )
        {
          result = a2[1];
          v61 = *a2;
          while ( result != v61 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
          {
            v62 = v61[1];
            if ( fabsf(v62) <= 3.4028e38 )
            {
              v63 = *(float **)v61;
              v64 = **(float **)v61;
              if ( v64 >= v62 )
              {
                *(float *)(v4 + 4) = v64;
                *(float *)(v4 + 8) = v62;
                *(_DWORD *)v4 = v63;
                v4 += 12;
                ++*((_DWORD *)v5 + 16);
                ++*((_DWORD *)v5 + 3);
              }
            }
            v61 += 2;
            ++*((_DWORD *)v5 + 14);
          }
        }
      }
      else if ( a3 == 512 )
      {
        v56 = *(_QWORD *)a2;
        while ( HIDWORD(v56) != (_DWORD)v56 )
        {
          v57 = v5[16];
          if ( LODWORD(v57) > *((_DWORD *)v5 + 15) )
            break;
          v58 = *(float *)(v56 + 4);
          v59 = **(float **)v56;
          if ( fabsf(v58) <= 3.4028e38 && fabsf(v59) <= 3.4028e38 )
          {
            result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                (CTRPluginFramework *)result,
                                *(float *)&a2,
                                v57,
                                0.0);
            if ( result )
            {
              v60 = *(_DWORD *)v56;
              *(float *)(v4 + 4) = v59;
              *(float *)(v4 + 8) = v58;
              *(_DWORD *)v4 = v60;
              v4 += 12;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          LODWORD(v56) = v56 + 8;
          ++*((_DWORD *)v5 + 14);
        }
      }
      return result;
    }
    if ( a3 != 0x8000 )
    {
      if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v97 = *(_QWORD *)a2;
          v98 = (int)(result + 344);
          while ( HIDWORD(v97) != (_DWORD)v97 )
          {
            v99 = v5[16];
            if ( LODWORD(v99) > *((_DWORD *)v5 + 15) )
              break;
            v100 = *(float *)(v97 + 4);
            if ( fabsf(v100) <= 3.4028e38 )
            {
              v101 = **(float **)v97;
              if ( fabsf(v101) > 3.4028e38
                || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                        (CTRPluginFramework *)result,
                                        *(float *)&a2,
                                        v99,
                                        *(float *)v97)) == 0 )
              {
                if ( *(float *)(v98 + 8) >= fabs((double)(signed int)(float)(v101 - v100)) )
                {
                  v102 = *(_DWORD *)v97;
                  *(float *)(v4 + 4) = v101;
                  *(float *)(v4 + 8) = v100;
                  *(_DWORD *)v4 = v102;
                  v4 += 12;
                  ++*((_DWORD *)v5 + 16);
                  ++*((_DWORD *)v5 + 3);
                }
              }
            }
            LODWORD(v97) = v97 + 8;
            ++*((_DWORD *)v5 + 14);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v69 = *(_QWORD *)a2;
          v70 = (int)(result + 344);
          while ( HIDWORD(v69) != (_DWORD)v69 )
          {
            v71 = v5[16];
            if ( LODWORD(v71) > *((_DWORD *)v5 + 15) )
              break;
            v72 = *(float *)(v69 + 4);
            if ( fabsf(v72) <= 3.4028e38 )
            {
              v73 = **(float **)v69;
              if ( fabsf(v73) > 3.4028e38
                || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                        (CTRPluginFramework *)result,
                                        *(float *)&a2,
                                        v71,
                                        *(float *)v69)) == 0 )
              {
                if ( *(float *)(v70 + 8) <= fabs((double)(signed int)(float)(v73 - v72)) )
                {
                  v74 = *(_DWORD *)v69;
                  *(float *)(v4 + 4) = v73;
                  *(float *)(v4 + 8) = v72;
                  *(_DWORD *)v4 = v74;
                  v4 += 12;
                  ++*((_DWORD *)v5 + 16);
                  ++*((_DWORD *)v5 + 3);
                }
              }
            }
            LODWORD(v69) = v69 + 8;
            ++*((_DWORD *)v5 + 14);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        result = a2[1];
        v65 = *a2;
        while ( result != v65 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
        {
          v66 = v65[1];
          if ( fabsf(v66) <= 3.4028e38 )
          {
            v67 = *(float **)v65;
            v68 = **(float **)v65;
            if ( v68 <= v66 )
            {
              *(float *)(v4 + 4) = v68;
              *(float *)(v4 + 8) = v66;
              *(_DWORD *)v4 = v67;
              v4 += 12;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          v65 += 2;
          ++*((_DWORD *)v5 + 14);
        }
      }
      return result;
    }
    v88 = *(_QWORD *)a2;
    v89 = (int)(result + 344);
    while ( 1 )
    {
      if ( HIDWORD(v88) == (_DWORD)v88 )
        return result;
      v90 = v5[16];
      if ( LODWORD(v90) > *((_DWORD *)v5 + 15) )
        return result;
      v91 = *(float *)(v88 + 4);
      if ( fabsf(v91) > 3.4028e38 )
        goto LABEL_159;
      v92 = *(float *)v88;
      v93 = **(float **)v88;
      v94 = fabsf(v93);
      if ( v94 > 3.4028e38 )
      {
        if ( v94 > 3.4028e38 )
        {
          if ( v94 > 3.4028e38 )
            goto LABEL_159;
          goto LABEL_179;
        }
      }
      else
      {
        result = (float *)CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v90, v92);
        if ( result )
          goto LABEL_159;
      }
      v95 = v91 + *(float *)(v89 + 8);
      result = (float *)CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v90, v92);
      if ( result )
        goto LABEL_158;
LABEL_179:
      v104 = v91 - *(float *)(v89 + 8);
      result = (float *)CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v90, v92);
      if ( result )
      {
LABEL_158:
        v96 = *(_DWORD *)v88;
        *(float *)(v4 + 4) = v93;
        *(float *)(v4 + 8) = v91;
        *(_DWORD *)v4 = v96;
        v4 += 12;
        ++*((_DWORD *)v5 + 16);
        ++*((_DWORD *)v5 + 3);
      }
LABEL_159:
      LODWORD(v88) = v88 + 8;
      ++*((_DWORD *)v5 + 14);
    }
  }
  v6 = (int)(result + 344);
  v7 = result[346];
  if ( a3 != 0x2000 )
  {
    if ( a3 <= 0x2000 )
    {
      if ( a3 == 1024 )
      {
        v27 = *(_QWORD *)a2;
        LODWORD(v27) = *(unsigned __int64 *)a2 + 8;
        while ( HIDWORD(v27) != (_DWORD)v27 - 8 )
        {
          v28 = v5[16];
          if ( LODWORD(v28) > *((_DWORD *)v5 + 15) )
            break;
          v29 = *(float **)(v27 - 8);
          v30 = *(_DWORD *)(v27 - 4);
          v31 = *v29;
          if ( fabsf(v31) > 3.4028e38
            || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                    (CTRPluginFramework *)result,
                                    *(float *)&a2,
                                    v28,
                                    *(float *)&v29)) == 0 )
          {
            v32 = *(_DWORD *)(v27 - 8);
            *(float *)(v4 + 4) = v31;
            *(_DWORD *)v4 = v32;
            *(_DWORD *)(v4 + 8) = v30;
            v4 += 12;
            ++*((_DWORD *)v5 + 16);
            ++*((_DWORD *)v5 + 3);
          }
          LODWORD(v27) = v27 + 8;
          ++*((_DWORD *)v5 + 14);
        }
      }
      else if ( a3 > 1024 )
      {
        if ( a3 == 2048 )
        {
          result = a2[1];
          v33 = *a2;
          while ( result != v33 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
          {
            v34 = *(float **)v33;
            v35 = **(float **)v33;
            if ( v7 < v35 )
            {
              v36 = *((_DWORD *)v33 + 1);
              *(float *)(v4 + 4) = v35;
              *(_DWORD *)v4 = v34;
              *(_DWORD *)(v4 + 8) = v36;
              v4 += 12;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
            v33 += 2;
            ++*((_DWORD *)v5 + 14);
          }
        }
        else if ( a3 == 4096 )
        {
          result = a2[1];
          v8 = *a2;
          while ( result != v8 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
          {
            v9 = *(float **)v8;
            v10 = **(float **)v8;
            if ( v7 <= v10 )
            {
              v11 = *((_DWORD *)v8 + 1);
              *(float *)(v4 + 4) = v10;
              *(_DWORD *)v4 = v9;
              *(_DWORD *)(v4 + 8) = v11;
              v4 += 12;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
            v8 += 2;
            ++*((_DWORD *)v5 + 14);
          }
        }
      }
      else if ( a3 == 512 )
      {
        v22 = *(_QWORD *)a2;
        while ( (_DWORD)v22 != HIDWORD(v22) )
        {
          v23 = v5[16];
          if ( LODWORD(v23) > *((_DWORD *)v5 + 15) )
            break;
          v24 = **(float **)v22;
          if ( fabsf(v24) <= 3.4028e38 )
          {
            v25 = *(_DWORD *)(v22 + 4);
            result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                (CTRPluginFramework *)result,
                                *(float *)&a2,
                                v23,
                                *(float *)v22);
            if ( result )
            {
              v26 = *(_DWORD *)v22;
              *(float *)(v4 + 4) = v24;
              *(_DWORD *)v4 = v26;
              *(_DWORD *)(v4 + 8) = v25;
              v4 += 12;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          LODWORD(v22) = v22 + 8;
          ++*((_DWORD *)v5 + 14);
        }
      }
      return result;
    }
    if ( a3 != 0x8000 )
    {
      if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v50 = *a2;
          v51 = a2[1];
          while ( v51 != v50 )
          {
            v52 = v5[16];
            if ( LODWORD(v52) > *((_DWORD *)v5 + 15) )
              break;
            v53 = v50[1];
            if ( fabsf(v53) <= 3.4028e38 )
            {
              v54 = **(float **)v50;
              if ( fabsf(v54) > 3.4028e38
                || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                        (CTRPluginFramework *)result,
                                        *(float *)&a2,
                                        v52,
                                        *v50)) == 0 )
              {
                if ( *(float *)(v6 + 8) >= fabs((double)(signed int)(float)(v54 - v53)) )
                {
                  v55 = *(float **)v50;
                  *(float *)(v4 + 4) = v54;
                  *(float *)(v4 + 8) = v53;
                  *(_DWORD *)v4 = v55;
                  v4 += 12;
                  ++*((_DWORD *)v5 + 16);
                  ++*((_DWORD *)v5 + 3);
                }
              }
            }
            v50 += 2;
            ++*((_DWORD *)v5 + 14);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v16 = *a2;
          v17 = a2[1];
          while ( v17 != v16 )
          {
            v18 = v5[16];
            if ( LODWORD(v18) > *((_DWORD *)v5 + 15) )
              break;
            v19 = v16[1];
            if ( fabsf(v19) <= 3.4028e38 )
            {
              v20 = **(float **)v16;
              if ( fabsf(v20) > 3.4028e38
                || (result = (float *)CTRPluginFramework::AlmostEqualRelative(
                                        (CTRPluginFramework *)result,
                                        *(float *)&a2,
                                        v18,
                                        *v16)) == 0 )
              {
                if ( *(float *)(v6 + 8) <= fabs((double)(signed int)(float)(v20 - v19)) )
                {
                  v21 = *(float **)v16;
                  *(float *)(v4 + 4) = v20;
                  *(float *)(v4 + 8) = v19;
                  *(_DWORD *)v4 = v21;
                  v4 += 12;
                  ++*((_DWORD *)v5 + 16);
                  ++*((_DWORD *)v5 + 3);
                }
              }
            }
            v16 += 2;
            ++*((_DWORD *)v5 + 14);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        result = a2[1];
        v12 = *a2;
        while ( result != v12 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
        {
          v13 = *(float **)v12;
          v14 = **(float **)v12;
          if ( v7 >= v14 )
          {
            v15 = *((_DWORD *)v12 + 1);
            *(float *)(v4 + 4) = v14;
            *(_DWORD *)v4 = v13;
            *(_DWORD *)(v4 + 8) = v15;
            v4 += 12;
            ++*((_DWORD *)v5 + 16);
            ++*((_DWORD *)v5 + 3);
          }
          v12 += 2;
          ++*((_DWORD *)v5 + 14);
        }
      }
      return result;
    }
    v41 = *a2;
    v42 = a2[1];
    while ( 1 )
    {
      if ( v42 == v41 )
        return result;
      v43 = v5[16];
      if ( LODWORD(v43) > *((_DWORD *)v5 + 15) )
        return result;
      v44 = v41[1];
      if ( fabsf(v44) > 3.4028e38 )
        goto LABEL_72;
      v45 = *(float **)v41;
      v46 = **(float **)v41;
      v47 = fabsf(v46);
      if ( v47 > 3.4028e38 )
      {
        if ( v47 > 3.4028e38 )
        {
          if ( v47 > 3.4028e38 )
            goto LABEL_72;
          goto LABEL_175;
        }
      }
      else
      {
        result = (float *)CTRPluginFramework::AlmostEqualRelative(
                            (CTRPluginFramework *)result,
                            *(float *)&a2,
                            v43,
                            *(float *)&v45);
        if ( result )
          goto LABEL_72;
      }
      v48 = v44 + *(float *)(v6 + 8);
      result = (float *)CTRPluginFramework::AlmostEqualRelative(
                          (CTRPluginFramework *)result,
                          *(float *)&a2,
                          v43,
                          *(float *)&v45);
      if ( result )
        goto LABEL_71;
LABEL_175:
      v103 = v44 - *(float *)(v6 + 8);
      result = (float *)CTRPluginFramework::AlmostEqualRelative(
                          (CTRPluginFramework *)result,
                          *(float *)&a2,
                          v43,
                          *(float *)&v45);
      if ( result )
      {
LABEL_71:
        v49 = *(float **)v41;
        *(float *)(v4 + 4) = v46;
        *(float *)(v4 + 8) = v44;
        *(_DWORD *)v4 = v49;
        v4 += 12;
        ++*((_DWORD *)v5 + 16);
        ++*((_DWORD *)v5 + 3);
      }
LABEL_72:
      v41 += 2;
      ++*((_DWORD *)v5 + 14);
    }
  }
  result = a2[1];
  v37 = *a2;
  while ( result != v37 && *((_DWORD *)v5 + 16) <= *((_DWORD *)v5 + 15) )
  {
    v38 = *(float **)v37;
    v39 = **(float **)v37;
    if ( v7 > v39 )
    {
      v40 = *((_DWORD *)v37 + 1);
      *(float *)(v4 + 4) = v39;
      *(_DWORD *)v4 = v38;
      *(_DWORD *)(v4 + 8) = v40;
      v4 += 12;
      ++*((_DWORD *)v5 + 16);
      ++*((_DWORD *)v5 + 3);
    }
    v37 += 2;
    ++*((_DWORD *)v5 + 14);
  }
  return result;
}

// ALL OK, 4 function(s) have been successfully decompiled
