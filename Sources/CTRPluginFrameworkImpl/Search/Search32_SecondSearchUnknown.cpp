/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU8(int result, __int64 *a2, signed int a3, unsigned int **a4);
int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU16(int result, unsigned int **a2, signed int a3, unsigned int **a4);
_DWORD *__fastcall CTRPluginFramework::Search32::SecondSearchUnknownU32(_DWORD *result, int **a2, signed int a3, unsigned int **a4);
int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownFloat(int result, float a2, signed int a3, float *a4);
// _DWORD __cdecl CTRPluginFramework::AlmostEqualRelative(CTRPluginFramework *__hidden this, float, float, float); idb


//----- (00000004) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU8(int result, __int64 *a2, signed int a3, unsigned int **a4)
{
  unsigned int *v4; // r12
  __int64 v5; // r4
  unsigned int *v6; // r5
  unsigned int *v7; // r6
  unsigned int v8; // r2
  unsigned int v9; // t1
  unsigned int v10; // r1
  unsigned int v11; // r7
  unsigned int v12; // r1
  unsigned int v13; // r2
  unsigned int *v14; // r5
  unsigned int *v15; // r6
  unsigned int v16; // r2
  unsigned int v17; // t1
  unsigned int v18; // r1
  unsigned int v19; // r7
  unsigned int v20; // r1
  unsigned int v21; // r2
  int v22; // r5
  unsigned int *v23; // r6
  unsigned int *v24; // r7
  unsigned int v25; // r2
  unsigned int v26; // t1
  unsigned int v27; // r1
  unsigned int *v28; // r8
  int v29; // lr
  int v30; // r8
  int v31; // r8
  unsigned int v32; // r1
  unsigned int v33; // r2
  int v34; // lr
  unsigned int v35; // lr
  unsigned int v36; // t1
  unsigned int v37; // r2
  unsigned int *v38; // r6
  unsigned int v39; // r2
  unsigned int *v40; // r5
  unsigned int *v41; // r6
  unsigned int v42; // r2
  unsigned int v43; // t1
  unsigned int v44; // r1
  unsigned int *v45; // r7
  unsigned int v46; // r1
  unsigned int v47; // r2
  unsigned int *v48; // r5
  unsigned int *v49; // r6
  unsigned int v50; // r2
  unsigned int v51; // t1
  unsigned int v52; // r1
  unsigned int v53; // r7
  unsigned int v54; // r1
  unsigned int v55; // r2
  unsigned int *v56; // r5
  unsigned int *v57; // r6
  unsigned int v58; // r2
  unsigned int v59; // t1
  unsigned int v60; // r1
  unsigned int v61; // r7
  unsigned int v62; // r1
  unsigned int v63; // r2
  int v64; // lr
  unsigned int *v65; // r6
  unsigned int *v66; // r7
  unsigned int v67; // r2
  unsigned int v68; // t1
  unsigned int v69; // r1
  unsigned int *v70; // r5
  unsigned int v71; // r1
  unsigned int v72; // r2
  int v73; // r5
  unsigned int *v74; // r6
  unsigned int *v75; // r7
  unsigned int v76; // r2
  unsigned int v77; // t1
  unsigned int v78; // r1
  unsigned int *v79; // r8
  int v80; // lr
  int v81; // r8
  int v82; // r8
  unsigned int v83; // r1
  unsigned int v84; // r2
  int v85; // lr

  v4 = (unsigned int *)(*(_DWORD *)(result + 40) + 4 * *(_DWORD *)(result + 56));
  if ( a3 == 0x2000 )
  {
    v56 = (unsigned int *)*((_DWORD *)a2 + 1);
    v57 = *(unsigned int **)a2;
    while ( v56 != v57 )
    {
      v59 = *v57;
      ++v57;
      v58 = v59;
      if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
        break;
      v60 = *v4;
      v61 = (unsigned __int8)*v4;
      if ( v61 < (unsigned __int8)v58 )
      {
        *a4 = v4;
        a4[1] = (unsigned int *)v61;
        a4[2] = (unsigned int *)(unsigned __int8)v58;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      if ( BYTE1(v60) < (unsigned int)BYTE1(v58) )
      {
        *a4 = (unsigned int *)((char *)v4 + 1);
        a4[1] = (unsigned int *)BYTE1(v60);
        a4[2] = (unsigned int *)BYTE1(v58);
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      if ( BYTE2(v58) > (unsigned int)BYTE2(v60) )
      {
        *a4 = (unsigned int *)((char *)v4 + 2);
        a4[1] = (unsigned int *)BYTE2(v60);
        a4[2] = (unsigned int *)BYTE2(v58);
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      v62 = v60 >> 24;
      v63 = v58 >> 24;
      if ( v62 < v63 )
      {
        *a4 = (unsigned int *)((char *)v4 + 3);
        a4[1] = (unsigned int *)v62;
        a4[2] = (unsigned int *)v63;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      ++v4;
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v64 = *(unsigned __int8 *)(result + 1384);
      v65 = (unsigned int *)*((_DWORD *)a2 + 1);
      v66 = *(unsigned int **)a2;
      while ( v65 != v66 )
      {
        v68 = *v66;
        ++v66;
        v67 = v68;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
          break;
        v69 = *v4;
        v70 = (unsigned int *)(unsigned __int8)*v4;
        if ( (unsigned int *)(unsigned __int8)v67 != v70
          && (v70 == (unsigned int *)((unsigned __int8)v67 + v64) || v70 == (unsigned int *)((unsigned __int8)v67 - v64)) )
        {
          *a4 = v4;
          a4[1] = v70;
          a4[2] = (unsigned int *)(unsigned __int8)v67;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE1(v67) != BYTE1(v69) && (BYTE1(v69) == BYTE1(v67) + v64 || BYTE1(v69) == BYTE1(v67) - v64) )
        {
          *a4 = (unsigned int *)((char *)v4 + 1);
          a4[1] = (unsigned int *)BYTE1(v69);
          a4[2] = (unsigned int *)BYTE1(v67);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE2(v67) != BYTE2(v69) && (BYTE2(v69) == BYTE2(v67) + v64 || BYTE2(v69) == BYTE2(v67) - v64) )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)BYTE2(v69);
          a4[2] = (unsigned int *)BYTE2(v67);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v71 = v69 >> 24;
        v72 = v67 >> 24;
        if ( v72 != v71 && (v71 == v72 + v64 || v71 == v72 - v64) )
        {
          *a4 = (unsigned int *)((char *)v4 + 3);
          a4[1] = (unsigned int *)v71;
          a4[2] = (unsigned int *)v72;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v73 = *(unsigned __int8 *)(result + 1384);
        v74 = (unsigned int *)*((_DWORD *)a2 + 1);
        v75 = *(unsigned int **)a2;
        while ( v74 != v75 )
        {
          v77 = *v75;
          ++v75;
          v76 = v77;
          if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
            break;
          v78 = *v4;
          v79 = (unsigned int *)(unsigned __int8)*v4;
          if ( (unsigned int *)(unsigned __int8)v76 != v79 )
          {
            v80 = (int)v79 - (unsigned __int8)v76;
            if ( (signed int)v79 - (unsigned __int8)v76 < 0 )
              v80 = (unsigned __int8)v76 - (_DWORD)v79;
            if ( v80 <= v73 )
            {
              *a4 = v4;
              a4[1] = v79;
              a4[2] = (unsigned int *)(unsigned __int8)v76;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          if ( BYTE1(v76) != BYTE1(v78) )
          {
            v81 = BYTE1(v78) - BYTE1(v76);
            if ( v81 < 0 )
              v81 = BYTE1(v76) - BYTE1(v78);
            if ( v81 <= v73 )
            {
              *a4 = (unsigned int *)((char *)v4 + 1);
              a4[1] = (unsigned int *)BYTE1(v78);
              a4[2] = (unsigned int *)BYTE1(v76);
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          if ( BYTE2(v76) != BYTE2(v78) )
          {
            v82 = BYTE2(v78) - BYTE2(v76);
            if ( v82 < 0 )
              v82 = BYTE2(v76) - BYTE2(v78);
            if ( v82 <= v73 )
            {
              *a4 = (unsigned int *)((char *)v4 + 2);
              a4[1] = (unsigned int *)BYTE2(v78);
              a4[2] = (unsigned int *)BYTE2(v76);
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          v83 = v78 >> 24;
          v84 = v76 >> 24;
          if ( v84 != v83 )
          {
            v85 = v83 - v84;
            if ( (signed int)(v83 - v84) < 0 )
              v85 = v84 - v83;
            if ( v85 <= v73 )
            {
              *a4 = (unsigned int *)((char *)v4 + 3);
              a4[1] = (unsigned int *)v83;
              a4[2] = (unsigned int *)v84;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          ++v4;
        }
      }
      else if ( a3 == 0x20000 )
      {
        v22 = *(unsigned __int8 *)(result + 1384);
        v23 = (unsigned int *)*((_DWORD *)a2 + 1);
        v24 = *(unsigned int **)a2;
        while ( v23 != v24 )
        {
          v26 = *v24;
          ++v24;
          v25 = v26;
          if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
            break;
          v27 = *v4;
          v28 = (unsigned int *)(unsigned __int8)*v4;
          if ( (unsigned int *)(unsigned __int8)v25 != v28 )
          {
            v29 = (int)v28 - (unsigned __int8)v25;
            if ( (signed int)v28 - (unsigned __int8)v25 < 0 )
              v29 = (unsigned __int8)v25 - (_DWORD)v28;
            if ( v29 >= v22 )
            {
              *a4 = v4;
              a4[1] = v28;
              a4[2] = (unsigned int *)(unsigned __int8)v25;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          if ( BYTE1(v25) != BYTE1(v27) )
          {
            v30 = BYTE1(v27) - BYTE1(v25);
            if ( v30 < 0 )
              v30 = BYTE1(v25) - BYTE1(v27);
            if ( v30 >= v22 )
            {
              *a4 = (unsigned int *)((char *)v4 + 1);
              a4[1] = (unsigned int *)BYTE1(v27);
              a4[2] = (unsigned int *)BYTE1(v25);
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          if ( BYTE2(v25) != BYTE2(v27) )
          {
            v31 = BYTE2(v27) - BYTE2(v25);
            if ( v31 < 0 )
              v31 = BYTE2(v25) - BYTE2(v27);
            if ( v31 >= v22 )
            {
              *a4 = (unsigned int *)((char *)v4 + 2);
              a4[1] = (unsigned int *)BYTE2(v27);
              a4[2] = (unsigned int *)BYTE2(v25);
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          v32 = v27 >> 24;
          v33 = v25 >> 24;
          if ( v32 != v33 )
          {
            v34 = v32 - v33;
            if ( (signed int)(v32 - v33) < 0 )
              v34 = v33 - v32;
            if ( v34 >= v22 )
            {
              *a4 = (unsigned int *)((char *)v4 + 3);
              a4[1] = (unsigned int *)v32;
              a4[2] = (unsigned int *)v33;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          ++v4;
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v14 = (unsigned int *)*((_DWORD *)a2 + 1);
      v15 = *(unsigned int **)a2;
      while ( v14 != v15 )
      {
        v17 = *v15;
        ++v15;
        v16 = v17;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
          break;
        v18 = *v4;
        v19 = (unsigned __int8)*v4;
        if ( (unsigned __int8)v16 >= v19 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v19;
          a4[2] = (unsigned int *)(unsigned __int8)v16;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE1(v16) >= (unsigned int)BYTE1(v18) )
        {
          *a4 = (unsigned int *)((char *)v4 + 1);
          a4[1] = (unsigned int *)BYTE1(v18);
          a4[2] = (unsigned int *)BYTE1(v16);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE2(v16) >= (unsigned int)BYTE2(v18) )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)BYTE2(v18);
          a4[2] = (unsigned int *)BYTE2(v16);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v20 = v18 >> 24;
        v21 = v16 >> 24;
        if ( v20 <= v21 )
        {
          *a4 = (unsigned int *)((char *)v4 + 3);
          a4[1] = (unsigned int *)v20;
          a4[2] = (unsigned int *)v21;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v40 = (unsigned int *)*((_DWORD *)a2 + 1);
    v41 = *(unsigned int **)a2;
    while ( v40 != v41 )
    {
      v43 = *v41;
      ++v41;
      v42 = v43;
      if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
        break;
      v44 = *v4;
      v45 = (unsigned int *)(unsigned __int8)*v4;
      if ( (unsigned int *)(unsigned __int8)v42 != v45 )
      {
        *a4 = v4;
        a4[1] = v45;
        a4[2] = (unsigned int *)(unsigned __int8)v42;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      if ( BYTE1(v44) != BYTE1(v42) )
      {
        *a4 = (unsigned int *)((char *)v4 + 1);
        a4[1] = (unsigned int *)BYTE1(v44);
        a4[2] = (unsigned int *)BYTE1(v42);
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      if ( BYTE2(v42) != BYTE2(v44) )
      {
        *a4 = (unsigned int *)((char *)v4 + 2);
        a4[1] = (unsigned int *)BYTE2(v44);
        a4[2] = (unsigned int *)BYTE2(v42);
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      v46 = v44 >> 24;
      v47 = v42 >> 24;
      if ( v47 != v46 )
      {
        *a4 = (unsigned int *)((char *)v4 + 3);
        a4[1] = (unsigned int *)v46;
        a4[2] = (unsigned int *)v47;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      ++v4;
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v48 = (unsigned int *)*((_DWORD *)a2 + 1);
      v49 = *(unsigned int **)a2;
      while ( v48 != v49 )
      {
        v51 = *v49;
        ++v49;
        v50 = v51;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
          break;
        v52 = *v4;
        v53 = (unsigned __int8)*v4;
        if ( (unsigned __int8)v50 < v53 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v53;
          a4[2] = (unsigned int *)(unsigned __int8)v50;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE1(v50) < (unsigned int)BYTE1(v52) )
        {
          *a4 = (unsigned int *)((char *)v4 + 1);
          a4[1] = (unsigned int *)BYTE1(v52);
          a4[2] = (unsigned int *)BYTE1(v50);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE2(v52) > (unsigned int)BYTE2(v50) )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)BYTE2(v52);
          a4[2] = (unsigned int *)BYTE2(v50);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v54 = v52 >> 24;
        v55 = v50 >> 24;
        if ( v55 < v54 )
        {
          *a4 = (unsigned int *)((char *)v4 + 3);
          a4[1] = (unsigned int *)v54;
          a4[2] = (unsigned int *)v55;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
    else if ( a3 == 4096 )
    {
      v6 = (unsigned int *)*((_DWORD *)a2 + 1);
      v7 = *(unsigned int **)a2;
      while ( v6 != v7 )
      {
        v9 = *v7;
        ++v7;
        v8 = v9;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
          break;
        v10 = *v4;
        v11 = (unsigned __int8)*v4;
        if ( v11 >= (unsigned __int8)v8 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v11;
          a4[2] = (unsigned int *)(unsigned __int8)v8;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE1(v10) >= (unsigned int)BYTE1(v8) )
        {
          *a4 = (unsigned int *)((char *)v4 + 1);
          a4[1] = (unsigned int *)BYTE1(v10);
          a4[2] = (unsigned int *)BYTE1(v8);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        if ( BYTE2(v8) <= (unsigned int)BYTE2(v10) )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)BYTE2(v10);
          a4[2] = (unsigned int *)BYTE2(v8);
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v12 = v10 >> 24;
        v13 = v8 >> 24;
        if ( v12 >= v13 )
        {
          *a4 = (unsigned int *)((char *)v4 + 3);
          a4[1] = (unsigned int *)v12;
          a4[2] = (unsigned int *)v13;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    while ( HIDWORD(v5) != (_DWORD)v5 )
    {
      v36 = *(_DWORD *)v5;
      LODWORD(v5) = v5 + 4;
      v35 = v36;
      if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 4) )
        break;
      v37 = *v4;
      v38 = (unsigned int *)(unsigned __int8)*v4;
      if ( v38 == (unsigned int *)(unsigned __int8)v35 )
      {
        *a4 = v4;
        a4[1] = v38;
        a4[2] = v38;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      if ( BYTE1(v35) == BYTE1(v37) )
      {
        *a4 = (unsigned int *)((char *)v4 + 1);
        a4[1] = (unsigned int *)BYTE1(v35);
        a4[2] = (unsigned int *)BYTE1(v35);
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      if ( BYTE2(v35) == BYTE2(v37) )
      {
        *a4 = (unsigned int *)((char *)v4 + 2);
        a4[1] = (unsigned int *)BYTE2(v35);
        a4[2] = (unsigned int *)BYTE2(v35);
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      v39 = v37 >> 24;
      if ( v39 == v35 >> 24 )
      {
        *a4 = (unsigned int *)((char *)v4 + 3);
        a4[1] = (unsigned int *)v39;
        a4[2] = (unsigned int *)v39;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      ++v4;
    }
  }
  *(_DWORD *)(result + 56) = ((unsigned int)v4 - *(_DWORD *)(result + 40)) >> 2;
  return result;
}

//----- (00000C68) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU16(int result, unsigned int **a2, signed int a3, unsigned int **a4)
{
  unsigned int *v4; // r12
  unsigned int *v5; // r5
  unsigned int *v6; // lr
  unsigned int v7; // r2
  unsigned int v8; // t1
  unsigned int v9; // r1
  unsigned int v10; // r6
  unsigned int v11; // r1
  unsigned int v12; // r2
  unsigned int *v13; // r5
  unsigned int *v14; // lr
  unsigned int v15; // r2
  unsigned int v16; // t1
  unsigned int v17; // r1
  unsigned int v18; // r6
  unsigned int v19; // r1
  unsigned int v20; // r2
  int v21; // r5
  unsigned int *v22; // r6
  unsigned int *v23; // lr
  unsigned int v24; // r2
  unsigned int v25; // t1
  unsigned int v26; // r1
  unsigned int *v27; // r8
  int v28; // r4
  unsigned int v29; // r1
  unsigned int v30; // r2
  int v31; // r4
  unsigned int *v32; // r1
  unsigned int *v33; // r4
  unsigned int **v34; // t0
  unsigned int v35; // r2
  unsigned int v36; // t1
  unsigned int v37; // lr
  unsigned int *v38; // r6
  unsigned int v39; // r2
  unsigned int *v40; // r5
  unsigned int *v41; // lr
  unsigned int v42; // r2
  unsigned int v43; // t1
  unsigned int v44; // r1
  unsigned int *v45; // r6
  unsigned int v46; // r1
  unsigned int v47; // r2
  unsigned int *v48; // r5
  unsigned int *v49; // lr
  unsigned int v50; // r2
  unsigned int v51; // t1
  unsigned int v52; // r1
  unsigned int v53; // r6
  unsigned int v54; // r1
  unsigned int v55; // r2
  unsigned int *v56; // r5
  unsigned int *v57; // lr
  unsigned int v58; // r2
  unsigned int v59; // t1
  unsigned int v60; // r1
  unsigned int v61; // r6
  unsigned int v62; // r1
  unsigned int v63; // r2
  int v64; // lr
  unsigned int *v65; // r4
  unsigned int *v66; // r6
  unsigned int v67; // r2
  unsigned int v68; // t1
  unsigned int v69; // r1
  unsigned int *v70; // r8
  unsigned int v71; // r1
  unsigned int v72; // r2
  int v73; // r5
  unsigned int *v74; // r6
  unsigned int *v75; // lr
  unsigned int v76; // r2
  unsigned int v77; // t1
  unsigned int v78; // r1
  unsigned int *v79; // r8
  int v80; // r4
  unsigned int v81; // r1
  unsigned int v82; // r2
  int v83; // r4

  v4 = (unsigned int *)(*(_DWORD *)(result + 40) + 4 * *(_DWORD *)(result + 56));
  if ( a3 == 0x2000 )
  {
    v56 = a2[1];
    v57 = *a2;
    while ( v56 != v57 )
    {
      v59 = *v57;
      ++v57;
      v58 = v59;
      if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
        break;
      v60 = *v4;
      v61 = (unsigned __int16)*v4;
      if ( (unsigned __int16)v58 > v61 )
      {
        *a4 = v4;
        a4[1] = (unsigned int *)v61;
        a4[2] = (unsigned int *)(unsigned __int16)v58;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      v62 = v60 >> 16;
      v63 = v58 >> 16;
      if ( v63 > v62 )
      {
        *a4 = (unsigned int *)((char *)v4 + 2);
        a4[1] = (unsigned int *)v62;
        a4[2] = (unsigned int *)v63;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      ++v4;
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v64 = *(unsigned __int16 *)(result + 1384);
      v65 = *a2;
      v66 = a2[1];
      while ( v66 != v65 )
      {
        v68 = *v65;
        ++v65;
        v67 = v68;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
          break;
        v69 = *v4;
        if ( (unsigned __int16)v67 != (unsigned __int16)*v4 )
        {
          v70 = (unsigned int *)(unsigned __int16)*v4;
          if ( v70 == (unsigned int *)((unsigned __int16)v67 + v64)
            || v70 == (unsigned int *)((unsigned __int16)v67 - v64) )
          {
            *a4 = v4;
            a4[1] = v70;
            a4[2] = (unsigned int *)(unsigned __int16)v67;
            ++*(_DWORD *)(result + 12);
            ++*(_DWORD *)(result + 64);
            a4 += 3;
          }
        }
        v71 = v69 >> 16;
        v72 = v67 >> 16;
        if ( v72 != v71 && (v71 == v72 + v64 || v71 == v72 - v64) )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)v71;
          a4[2] = (unsigned int *)v72;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v73 = *(unsigned __int16 *)(result + 1384);
        v74 = a2[1];
        v75 = *a2;
        while ( v74 != v75 )
        {
          v77 = *v75;
          ++v75;
          v76 = v77;
          if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
            break;
          v78 = *v4;
          if ( (unsigned __int16)v76 != (unsigned __int16)*v4 )
          {
            v79 = (unsigned int *)(unsigned __int16)*v4;
            v80 = (int)v79 - (unsigned __int16)v76;
            if ( v80 < 0 )
              v80 = (unsigned __int16)v76 - (_DWORD)v79;
            if ( v80 <= v73 )
            {
              *a4 = v4;
              a4[1] = v79;
              a4[2] = (unsigned int *)(unsigned __int16)v76;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          v81 = v78 >> 16;
          v82 = v76 >> 16;
          if ( v82 != v81 )
          {
            v83 = v81 - v82;
            if ( (signed int)(v81 - v82) < 0 )
              v83 = v82 - v81;
            if ( v83 <= v73 )
            {
              *a4 = (unsigned int *)((char *)v4 + 2);
              a4[1] = (unsigned int *)v81;
              a4[2] = (unsigned int *)v82;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          ++v4;
        }
      }
      else if ( a3 == 0x20000 )
      {
        v21 = *(unsigned __int16 *)(result + 1384);
        v22 = a2[1];
        v23 = *a2;
        while ( v23 != v22 )
        {
          v25 = *v23;
          ++v23;
          v24 = v25;
          if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
            break;
          v26 = *v4;
          if ( (unsigned __int16)v24 != (unsigned __int16)*v4 )
          {
            v27 = (unsigned int *)(unsigned __int16)*v4;
            v28 = (int)v27 - (unsigned __int16)v24;
            if ( v28 < 0 )
              v28 = (unsigned __int16)v24 - (_DWORD)v27;
            if ( v28 >= v21 )
            {
              *a4 = v4;
              a4[1] = v27;
              a4[2] = (unsigned int *)(unsigned __int16)v24;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          v29 = v26 >> 16;
          v30 = v24 >> 16;
          if ( v30 != v29 )
          {
            v31 = v29 - v30;
            if ( (signed int)(v29 - v30) < 0 )
              v31 = v30 - v29;
            if ( v31 >= v21 )
            {
              *a4 = (unsigned int *)((char *)v4 + 2);
              a4[1] = (unsigned int *)v29;
              a4[2] = (unsigned int *)v30;
              ++*(_DWORD *)(result + 12);
              ++*(_DWORD *)(result + 64);
              a4 += 3;
            }
          }
          ++v4;
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v13 = a2[1];
      v14 = *a2;
      while ( v13 != v14 )
      {
        v16 = *v14;
        ++v14;
        v15 = v16;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
          break;
        v17 = *v4;
        v18 = (unsigned __int16)*v4;
        if ( (unsigned __int16)v15 >= v18 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v18;
          a4[2] = (unsigned int *)(unsigned __int16)v15;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v19 = v17 >> 16;
        v20 = v15 >> 16;
        if ( v20 >= v19 )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)v19;
          a4[2] = (unsigned int *)v20;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v40 = a2[1];
    v41 = *a2;
    while ( v40 != v41 )
    {
      v43 = *v41;
      ++v41;
      v42 = v43;
      if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
        break;
      v44 = *v4;
      v45 = (unsigned int *)(unsigned __int16)*v4;
      if ( (unsigned int *)(unsigned __int16)v42 != v45 )
      {
        *a4 = v4;
        a4[1] = v45;
        a4[2] = (unsigned int *)(unsigned __int16)v42;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      v46 = v44 >> 16;
      v47 = v42 >> 16;
      if ( v47 != v46 )
      {
        *a4 = (unsigned int *)((char *)v4 + 2);
        a4[1] = (unsigned int *)v46;
        a4[2] = (unsigned int *)v47;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      ++v4;
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v48 = a2[1];
      v49 = *a2;
      while ( v48 != v49 )
      {
        v51 = *v49;
        ++v49;
        v50 = v51;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
          break;
        v52 = *v4;
        v53 = (unsigned __int16)*v4;
        if ( (unsigned __int16)v50 < v53 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v53;
          a4[2] = (unsigned int *)(unsigned __int16)v50;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v54 = v52 >> 16;
        v55 = v50 >> 16;
        if ( v55 < v54 )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)v54;
          a4[2] = (unsigned int *)v55;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
    else if ( a3 == 4096 )
    {
      v5 = a2[1];
      v6 = *a2;
      while ( v5 != v6 )
      {
        v8 = *v6;
        ++v6;
        v7 = v8;
        if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
          break;
        v9 = *v4;
        v10 = (unsigned __int16)*v4;
        if ( v10 >= (unsigned __int16)v7 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v10;
          a4[2] = (unsigned int *)(unsigned __int16)v7;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        v11 = v9 >> 16;
        v12 = v7 >> 16;
        if ( v12 <= v11 )
        {
          *a4 = (unsigned int *)((char *)v4 + 2);
          a4[1] = (unsigned int *)v11;
          a4[2] = (unsigned int *)v12;
          ++*(_DWORD *)(result + 12);
          ++*(_DWORD *)(result + 64);
          a4 += 3;
        }
        ++v4;
      }
    }
  }
  else if ( a3 == 512 )
  {
    v34 = a2;
    v32 = *a2;
    v33 = v34[1];
    while ( v33 != v32 )
    {
      v36 = *v32;
      ++v32;
      v35 = v36;
      if ( *(_DWORD *)(result + 64) > (unsigned int)(*(_DWORD *)(result + 60) - 2) )
        break;
      v37 = *v4;
      v38 = (unsigned int *)(unsigned __int16)*v4;
      if ( (unsigned int *)(unsigned __int16)v35 == v38 )
      {
        *a4 = v4;
        a4[1] = v38;
        a4[2] = (unsigned int *)(unsigned __int16)v35;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      v39 = v35 >> 16;
      if ( v39 == v37 >> 16 )
      {
        *a4 = (unsigned int *)((char *)v4 + 2);
        a4[1] = (unsigned int *)v39;
        a4[2] = (unsigned int *)v39;
        ++*(_DWORD *)(result + 12);
        ++*(_DWORD *)(result + 64);
        a4 += 3;
      }
      ++v4;
    }
  }
  *(_DWORD *)(result + 56) = ((unsigned int)v4 - *(_DWORD *)(result + 40)) >> 2;
  return result;
}

//----- (000013AC) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Search32::SecondSearchUnknownU32(_DWORD *result, int **a2, signed int a3, unsigned int **a4)
{
  unsigned int *v4; // r12
  int *v5; // r2
  int *v6; // r5
  unsigned int v7; // lr
  unsigned int v8; // t1
  unsigned int v9; // r4
  int *v10; // r2
  int *v11; // r5
  unsigned int v12; // lr
  unsigned int v13; // t1
  unsigned int v14; // r4
  int *v15; // r2
  int *v16; // r6
  unsigned int v17; // r5
  unsigned int *v18; // lr
  unsigned int *v19; // t1
  unsigned int v20; // r4
  unsigned int v21; // r1
  int *v22; // r2
  int *v23; // r4
  unsigned int *v24; // lr
  unsigned int *v25; // t1
  int *v26; // r2
  int *v27; // r5
  unsigned int *v28; // lr
  unsigned int *v29; // t1
  unsigned int v30; // r4
  int *v31; // r2
  int *v32; // r5
  unsigned int v33; // lr
  unsigned int v34; // t1
  unsigned int v35; // r4
  int *v36; // r2
  int *v37; // r5
  unsigned int v38; // lr
  unsigned int v39; // t1
  unsigned int v40; // r4
  int v41; // r5
  int *v42; // r6
  int *v43; // lr
  unsigned int *v44; // r2
  unsigned int *v45; // t1
  unsigned int v46; // r1
  unsigned int v47; // r5
  int *v48; // r2
  int *v49; // r6
  unsigned int *v50; // lr
  unsigned int *v51; // t1
  unsigned int v52; // r4
  unsigned int v53; // r1

  v4 = (unsigned int *)(result[10] + 4 * result[14]);
  if ( a3 == 0x2000 )
  {
    v36 = *a2;
    v37 = a2[1];
    while ( v37 != v36 )
    {
      v39 = *v36;
      ++v36;
      v38 = v39;
      if ( result[16] > result[15] )
        break;
      v40 = *v4;
      if ( v38 > *v4 )
      {
        *a4 = v4;
        a4[1] = (unsigned int *)v40;
        a4[2] = (unsigned int *)v38;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      ++v4;
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v41 = result[346];
      v42 = a2[1];
      v43 = *a2;
      while ( v42 != v43 )
      {
        v45 = (unsigned int *)*v43;
        ++v43;
        v44 = v45;
        if ( result[16] > result[15] )
          break;
        v46 = *v4;
        if ( v44 != (unsigned int *)*v4
          && ((unsigned int *)((char *)v44 + v41) == (unsigned int *)v46
           || (unsigned int *)((char *)v44 - v41) == (unsigned int *)v46) )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v46;
          a4[2] = v44;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        ++v4;
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v47 = result[346];
        v48 = *a2;
        v49 = a2[1];
        while ( v49 != v48 )
        {
          v51 = (unsigned int *)*v48;
          ++v48;
          v50 = v51;
          if ( result[16] > result[15] )
            break;
          v52 = *v4;
          if ( v50 != (unsigned int *)*v4 )
          {
            v53 = v52 - (_DWORD)v50;
            if ( (signed int)(v52 - (_DWORD)v50) < 0 )
              v53 = (unsigned int)v50 - v52;
            if ( v53 <= v47 )
            {
              *a4 = v4;
              a4[1] = (unsigned int *)v52;
              a4[2] = v50;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          ++v4;
        }
      }
      else if ( a3 == 0x20000 )
      {
        v15 = *a2;
        v16 = a2[1];
        v17 = result[346];
        while ( v16 != v15 )
        {
          v19 = (unsigned int *)*v15;
          ++v15;
          v18 = v19;
          if ( result[16] > result[15] )
            break;
          v20 = *v4;
          if ( v18 != (unsigned int *)*v4 )
          {
            v21 = v20 - (_DWORD)v18;
            if ( (signed int)(v20 - (_DWORD)v18) < 0 )
              v21 = (unsigned int)v18 - v20;
            if ( v21 >= v17 )
            {
              *a4 = v4;
              a4[1] = (unsigned int *)v20;
              a4[2] = v18;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          ++v4;
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v10 = *a2;
      v11 = a2[1];
      while ( v11 != v10 )
      {
        v13 = *v10;
        ++v10;
        v12 = v13;
        if ( result[16] > result[15] )
          break;
        v14 = *v4;
        if ( v12 >= *v4 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v14;
          a4[2] = (unsigned int *)v12;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        ++v4;
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v26 = *a2;
    v27 = a2[1];
    while ( v27 != v26 )
    {
      v29 = (unsigned int *)*v26;
      ++v26;
      v28 = v29;
      if ( result[16] > result[15] )
        break;
      v30 = *v4;
      if ( v28 != (unsigned int *)*v4 )
      {
        *a4 = v4;
        a4[1] = (unsigned int *)v30;
        a4[2] = v28;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      ++v4;
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v31 = *a2;
      v32 = a2[1];
      while ( v32 != v31 )
      {
        v34 = *v31;
        ++v31;
        v33 = v34;
        if ( result[16] > result[15] )
          break;
        v35 = *v4;
        if ( v33 < *v4 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v35;
          a4[2] = (unsigned int *)v33;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        ++v4;
      }
    }
    else if ( a3 == 4096 )
    {
      v5 = *a2;
      v6 = a2[1];
      while ( v6 != v5 )
      {
        v8 = *v5;
        ++v5;
        v7 = v8;
        if ( result[16] > result[15] )
          break;
        v9 = *v4;
        if ( v7 <= *v4 )
        {
          *a4 = v4;
          a4[1] = (unsigned int *)v9;
          a4[2] = (unsigned int *)v7;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        ++v4;
      }
    }
  }
  else if ( a3 == 512 )
  {
    v22 = *a2;
    v23 = a2[1];
    while ( v23 != v22 )
    {
      v25 = (unsigned int *)*v22;
      ++v22;
      v24 = v25;
      if ( result[16] > result[15] )
        break;
      if ( v24 == (unsigned int *)*v4 )
      {
        *a4 = v4;
        a4[1] = v24;
        a4[2] = v24;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      ++v4;
    }
  }
  result[14] = ((unsigned int)v4 - result[10]) >> 2;
  return result;
}

//----- (000017B4) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownFloat(int result, float a2, signed int a3, float *a4)
{
  float *v4; // r5
  float *v5; // r4
  float *v6; // r6
  float *v7; // r3
  float v8; // s15
  float *v9; // r3
  float v10; // s15
  float *v11; // r7
  float *v12; // r8
  float v13; // s19
  float v14; // r2
  float v15; // r3
  float v16; // s16
  float v17; // s17
  float *v18; // r7
  float *v19; // r8
  float v20; // s16
  float v21; // r2
  float v22; // s17
  float *v23; // r7
  float *v24; // r8
  float v25; // r2
  float v26; // r3
  float v27; // s17
  float v28; // s16
  float *v29; // r3
  float v30; // s15
  float *v31; // r3
  float v32; // s15
  int v33; // s19
  float *v34; // r7
  float *v35; // r8
  float v36; // r2
  float v37; // r3
  float v38; // s16
  int v39; // s17
  float v40; // s15
  float v41; // s19
  float *v42; // r7
  float *v43; // r8
  float v44; // r2
  float v45; // r3
  float v46; // s16
  float v47; // s17

  v4 = a4;
  v5 = (float *)result;
  v6 = (float *)(*(_DWORD *)(result + 40) + 4 * *(_DWORD *)(result + 56));
  if ( a3 != 0x2000 )
  {
    if ( a3 <= 0x2000 )
    {
      if ( a3 == 1024 )
      {
        v23 = *(float **)LODWORD(a2);
        v24 = *(float **)(LODWORD(a2) + 4);
        while ( v24 != v23 )
        {
          v25 = v5[16];
          v26 = v5[15];
          v27 = *v23;
          if ( LODWORD(v25) > LODWORD(v26) )
            break;
          if ( fabsf(v27) <= 3.4028e38 )
          {
            v28 = *v6;
            if ( fabsf(v28) > 3.4028e38
              || (result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v25, v26)) == 0 )
            {
              v4[1] = v28;
              v4[2] = v27;
              *(_DWORD *)v4 = v6;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          ++v6;
          ++v23;
        }
      }
      else if ( a3 > 1024 )
      {
        if ( a3 == 2048 )
        {
          result = *(_DWORD *)(LODWORD(a2) + 4);
          v29 = *(float **)LODWORD(a2);
          while ( (float *)result != v29 )
          {
            v30 = *v29;
            ++v29;
            if ( *((_DWORD *)v5 + 16) > *((_DWORD *)v5 + 15) )
              break;
            if ( fabsf(v30) <= 3.4028e38 && v30 < *v6 )
            {
              v4[1] = *v6;
              v4[2] = v30;
              *(_DWORD *)v4 = v6;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
            ++v6;
          }
        }
        else if ( a3 == 4096 )
        {
          result = *(_DWORD *)(LODWORD(a2) + 4);
          v7 = *(float **)LODWORD(a2);
          while ( (float *)result != v7 )
          {
            v8 = *v7;
            ++v7;
            if ( *((_DWORD *)v5 + 16) > *((_DWORD *)v5 + 15) )
              break;
            if ( fabsf(v8) <= 3.4028e38 && v8 <= *v6 )
            {
              v4[1] = *v6;
              v4[2] = v8;
              *(_DWORD *)v4 = v6;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
            ++v6;
          }
        }
      }
      else if ( a3 == 512 )
      {
        v18 = *(float **)LODWORD(a2);
        v19 = *(float **)(LODWORD(a2) + 4);
        while ( v19 != v18 )
        {
          v20 = *v18;
          v21 = v5[16];
          ++v18;
          if ( LODWORD(v21) > *((_DWORD *)v5 + 15) )
            break;
          v22 = *v6;
          if ( fabsf(v20) <= 3.4028e38 && fabsf(v22) <= 3.4028e38 )
          {
            result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v21, 0.0);
            if ( result )
            {
              v4[1] = v22;
              v4[2] = v20;
              *(_DWORD *)v4 = v6;
              v4 += 3;
              ++*((_DWORD *)v5 + 16);
              ++*((_DWORD *)v5 + 3);
            }
          }
          ++v6;
        }
      }
      goto LABEL_6;
    }
    if ( a3 != 0x8000 )
    {
      if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v41 = *(float *)(result + 1384);
          v42 = *(float **)LODWORD(a2);
          v43 = *(float **)(LODWORD(a2) + 4);
          while ( v42 != v43 )
          {
            v44 = v5[16];
            v45 = v5[15];
            v46 = *v42;
            if ( LODWORD(v44) > LODWORD(v45) )
              break;
            if ( fabsf(v46) <= 3.4028e38 )
            {
              v47 = *v6;
              if ( fabsf(v47) > 3.4028e38
                || (result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v44, v45)) == 0 )
              {
                if ( v41 >= fabs((double)(signed int)(float)(v47 - v46)) )
                {
                  v4[1] = v47;
                  v4[2] = v46;
                  *(_DWORD *)v4 = v6;
                  v4 += 3;
                  ++*((_DWORD *)v5 + 16);
                  ++*((_DWORD *)v5 + 3);
                }
              }
            }
            ++v6;
            ++v42;
          }
        }
        else if ( a3 == 0x20000 )
        {
          v11 = *(float **)LODWORD(a2);
          v12 = *(float **)(LODWORD(a2) + 4);
          v13 = *(float *)(result + 1384);
          while ( v11 != v12 )
          {
            v14 = v5[16];
            v15 = v5[15];
            v16 = *v11;
            if ( LODWORD(v14) > LODWORD(v15) )
              break;
            if ( fabsf(v16) <= 3.4028e38 )
            {
              v17 = *v6;
              if ( fabsf(v17) > 3.4028e38
                || (result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v14, v15)) == 0 )
              {
                if ( v13 <= fabs((double)(signed int)(float)(v17 - v16)) )
                {
                  v4[1] = v17;
                  v4[2] = v16;
                  *(_DWORD *)v4 = v6;
                  v4 += 3;
                  ++*((_DWORD *)v5 + 16);
                  ++*((_DWORD *)v5 + 3);
                }
              }
            }
            ++v6;
            ++v11;
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        result = *(_DWORD *)(LODWORD(a2) + 4);
        v9 = *(float **)LODWORD(a2);
        while ( (float *)result != v9 )
        {
          v10 = *v9;
          ++v9;
          if ( *((_DWORD *)v5 + 16) > *((_DWORD *)v5 + 15) )
            break;
          if ( fabsf(v10) <= 3.4028e38 && v10 >= *v6 )
          {
            v4[1] = *v6;
            v4[2] = v10;
            *(_DWORD *)v4 = v6;
            v4 += 3;
            ++*((_DWORD *)v5 + 16);
            ++*((_DWORD *)v5 + 3);
          }
          ++v6;
        }
      }
      goto LABEL_6;
    }
    v33 = *(_DWORD *)(result + 1384);
    v34 = *(float **)LODWORD(a2);
    v35 = *(float **)(LODWORD(a2) + 4);
    while ( 1 )
    {
      if ( v35 == v34 )
        goto LABEL_6;
      v36 = v5[16];
      v37 = v5[15];
      v38 = *v34;
      if ( LODWORD(v36) > LODWORD(v37) )
        goto LABEL_6;
      if ( fabsf(v38) > 3.4028e38 )
        goto LABEL_75;
      v39 = *(_DWORD *)v6;
      v40 = fabsf(*v6);
      if ( v40 > 3.4028e38 )
      {
        if ( v40 > 3.4028e38 )
        {
          if ( v40 > 3.4028e38 )
            goto LABEL_75;
          goto LABEL_91;
        }
      }
      else
      {
        result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v36, v37);
        if ( result )
          goto LABEL_75;
      }
      result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v36, v37);
      if ( result )
        goto LABEL_74;
LABEL_91:
      result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, a2, v36, v37);
      if ( result )
      {
LABEL_74:
        *((_DWORD *)v4 + 1) = v39;
        v4[2] = v38;
        *(_DWORD *)v4 = v6;
        v4 += 3;
        ++*((_DWORD *)v5 + 16);
        ++*((_DWORD *)v5 + 3);
      }
LABEL_75:
      ++v6;
      ++v34;
    }
  }
  result = *(_DWORD *)(LODWORD(a2) + 4);
  v31 = *(float **)LODWORD(a2);
  while ( (float *)result != v31 )
  {
    v32 = *v31;
    ++v31;
    if ( *((_DWORD *)v5 + 16) > *((_DWORD *)v5 + 15) )
      break;
    if ( fabsf(v32) <= 3.4028e38 && v32 > *v6 )
    {
      v4[1] = *v6;
      v4[2] = v32;
      *(_DWORD *)v4 = v6;
      v4 += 3;
      ++*((_DWORD *)v5 + 16);
      ++*((_DWORD *)v5 + 3);
    }
    ++v6;
  }
LABEL_6:
  *((_DWORD *)v5 + 14) = ((unsigned int)v6 - *((_DWORD *)v5 + 10)) >> 2;
  return result;
}

// ALL OK, 4 function(s) have been successfully decompiled
