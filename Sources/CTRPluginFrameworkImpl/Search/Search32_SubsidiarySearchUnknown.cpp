/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU8(int result, unsigned __int8 ***a2, signed int a3, unsigned __int8 **a4);
int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU16(int result, unsigned __int16 ***a2, signed int a3, unsigned __int16 **a4);
_DWORD *__fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU32(_DWORD *result, unsigned int ***a2, signed int a3, unsigned int **a4);
unsigned int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownFloat(unsigned int result, int *a2, signed int a3, int a4);
// _DWORD __cdecl CTRPluginFramework::AlmostEqualRelative(CTRPluginFramework *__hidden this, float, float, float); idb


//----- (00000004) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU8(int result, unsigned __int8 ***a2, signed int a3, unsigned __int8 **a4)
{
  int v4; // r12
  unsigned __int8 **v5; // r2
  unsigned __int8 **v6; // r4
  unsigned __int8 *v7; // r12
  unsigned __int8 **v8; // r2
  unsigned __int8 **v9; // r4
  unsigned __int8 *v10; // r12
  unsigned __int8 *v11; // lr
  unsigned __int8 **v12; // r2
  unsigned __int8 **v13; // r4
  unsigned __int8 *v14; // r12
  unsigned __int8 *v15; // lr
  unsigned __int8 **v16; // r2
  unsigned __int8 **v17; // r4
  unsigned __int8 *v18; // lr
  unsigned __int8 *v19; // r5
  int v20; // r1
  unsigned __int8 **v21; // r2
  unsigned __int8 **v22; // r4
  unsigned __int8 *v23; // r12
  unsigned __int8 *v24; // lr
  unsigned __int8 **v25; // r2
  unsigned __int8 **v26; // r4
  unsigned __int8 *v27; // r12
  unsigned __int8 *v28; // lr
  unsigned __int8 **v29; // r2
  unsigned __int8 **v30; // r4
  unsigned __int8 *v31; // r12
  unsigned __int8 *v32; // lr
  unsigned __int8 **v33; // r2
  unsigned __int8 **v34; // r5
  unsigned __int8 *v35; // r1
  unsigned __int8 *v36; // lr
  unsigned __int8 **v37; // r2
  unsigned __int8 **v38; // r4
  unsigned __int8 *v39; // lr
  unsigned __int8 *v40; // r5
  int v41; // r1
  unsigned __int8 **v42; // r2
  unsigned __int8 **v43; // r4
  unsigned __int8 *v44; // r12
  unsigned __int8 **v45; // r2
  unsigned __int8 **v46; // r4
  unsigned __int8 *v47; // r12
  unsigned __int8 *v48; // lr
  unsigned __int8 **v49; // r2
  unsigned __int8 **v50; // r4
  unsigned __int8 *v51; // r12
  unsigned __int8 *v52; // lr
  unsigned __int8 **v53; // r2
  unsigned __int8 **v54; // r4
  unsigned __int8 *v55; // lr
  unsigned __int8 *v56; // r5
  int v57; // r1
  unsigned __int8 **v58; // r2
  unsigned __int8 **v59; // r4
  unsigned __int8 *v60; // r12
  unsigned __int8 *v61; // lr
  unsigned __int8 **v62; // r2
  unsigned __int8 **v63; // r4
  unsigned __int8 *v64; // r12
  unsigned __int8 *v65; // lr
  unsigned __int8 **v66; // r2
  unsigned __int8 **v67; // r4
  unsigned __int8 *v68; // r12
  unsigned __int8 *v69; // lr
  unsigned __int8 **v70; // r2
  unsigned __int8 **v71; // r5
  unsigned __int8 *v72; // r1
  unsigned __int8 *v73; // lr
  unsigned __int8 **v74; // r2
  unsigned __int8 **v75; // r4
  unsigned __int8 *v76; // lr
  unsigned __int8 *v77; // r5
  int v78; // r1

  v4 = *(unsigned __int8 *)(result + 1384);
  if ( *(_DWORD *)(result + 72) & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      v66 = *a2;
      v67 = a2[1];
      while ( v67 != v66 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v68 = (unsigned __int8 *)*((unsigned __int8 *)v66 + 4);
        v69 = (unsigned __int8 *)**v66;
        if ( v68 > v69 )
        {
          *a4 = *v66;
          a4[1] = v69;
          a4[2] = v68;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v66 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v70 = *a2;
        v71 = a2[1];
        while ( v71 != v70 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v72 = (unsigned __int8 *)*((unsigned __int8 *)v70 + 4);
          v73 = (unsigned __int8 *)**v70;
          if ( v72 != v73 && (v73 == &v72[v4] || v73 == &v72[-v4]) )
          {
            *a4 = *v70;
            a4[1] = v73;
            a4[2] = v72;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v70 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v74 = *a2;
          v75 = a2[1];
          while ( v75 != v74 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v76 = (unsigned __int8 *)*((unsigned __int8 *)v74 + 4);
            v77 = (unsigned __int8 *)**v74;
            if ( v76 != v77 )
            {
              v78 = v77 - v76;
              if ( v77 - v76 < 0 )
                v78 = v76 - v77;
              if ( v78 <= v4 )
              {
                *a4 = *v74;
                a4[1] = v77;
                a4[2] = v76;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v74 += 3;
            ++*(_DWORD *)(result + 56);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v53 = *a2;
          v54 = a2[1];
          while ( v54 != v53 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v55 = (unsigned __int8 *)*((unsigned __int8 *)v53 + 4);
            v56 = (unsigned __int8 *)**v53;
            if ( v55 != v56 )
            {
              v57 = v56 - v55;
              if ( v56 - v55 < 0 )
                v57 = v55 - v56;
              if ( v57 >= v4 )
              {
                *a4 = *v53;
                a4[1] = v56;
                a4[2] = v55;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v53 += 3;
            ++*(_DWORD *)(result + 56);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v49 = *a2;
        v50 = a2[1];
        while ( v50 != v49 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v51 = (unsigned __int8 *)*((unsigned __int8 *)v49 + 4);
          v52 = (unsigned __int8 *)**v49;
          if ( v51 >= v52 )
          {
            *a4 = *v49;
            a4[1] = v52;
            a4[2] = v51;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v49 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v58 = *a2;
      v59 = a2[1];
      while ( v59 != v58 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v60 = (unsigned __int8 *)*((unsigned __int8 *)v58 + 4);
        v61 = (unsigned __int8 *)**v58;
        if ( v60 != v61 )
        {
          *a4 = *v58;
          a4[1] = v61;
          a4[2] = v60;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v58 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v62 = *a2;
        v63 = a2[1];
        while ( v63 != v62 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v64 = (unsigned __int8 *)*((unsigned __int8 *)v62 + 4);
          v65 = (unsigned __int8 *)**v62;
          if ( v64 < v65 )
          {
            *a4 = *v62;
            a4[1] = v65;
            a4[2] = v64;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v62 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 4096 )
      {
        v45 = *a2;
        v46 = a2[1];
        while ( v46 != v45 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v47 = (unsigned __int8 *)*((unsigned __int8 *)v45 + 4);
          v48 = (unsigned __int8 *)**v45;
          if ( v47 <= v48 )
          {
            *a4 = *v45;
            a4[1] = v48;
            a4[2] = v47;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v45 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 512 )
    {
      v42 = *a2;
      v43 = a2[1];
      while ( v43 != v42 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v44 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 4);
        if ( v44 == (unsigned __int8 *)**v42 )
        {
          *a4 = *v42;
          a4[1] = v44;
          a4[2] = v44;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v42 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 0x2000 )
  {
    v29 = *a2;
    v30 = a2[1];
    while ( v30 != v29 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v31 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 4);
      v32 = (unsigned __int8 *)**v29;
      if ( v31 > v32 )
      {
        *a4 = *v29;
        a4[1] = v32;
        a4[2] = v31;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v29 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v33 = *a2;
      v34 = a2[1];
      while ( v34 != v33 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v35 = (unsigned __int8 *)*((unsigned __int8 *)v33 + 4);
        v36 = (unsigned __int8 *)**v33;
        if ( v35 != v36 && (v36 == &v35[v4] || v36 == &v35[-v4]) )
        {
          *a4 = *v33;
          a4[1] = v36;
          a4[2] = v35;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v33 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v37 = *a2;
        v38 = a2[1];
        while ( v38 != v37 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v39 = (unsigned __int8 *)*((unsigned __int8 *)v37 + 4);
          v40 = (unsigned __int8 *)**v37;
          if ( v39 != v40 )
          {
            v41 = v40 - v39;
            if ( v40 - v39 < 0 )
              v41 = v39 - v40;
            if ( v41 <= v4 )
            {
              *a4 = *v37;
              a4[1] = v40;
              a4[2] = v39;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v37 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 0x20000 )
      {
        v16 = *a2;
        v17 = a2[1];
        while ( v17 != v16 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v18 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 4);
          v19 = (unsigned __int8 *)**v16;
          if ( v18 != v19 )
          {
            v20 = v19 - v18;
            if ( v19 - v18 < 0 )
              v20 = v18 - v19;
            if ( v20 >= v4 )
            {
              *a4 = *v16;
              a4[1] = v19;
              a4[2] = v18;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v16 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v12 = *a2;
      v13 = a2[1];
      while ( v13 != v12 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v14 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 4);
        v15 = (unsigned __int8 *)**v12;
        if ( v14 >= v15 )
        {
          *a4 = *v12;
          a4[1] = v15;
          a4[2] = v14;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v12 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v21 = *a2;
    v22 = a2[1];
    while ( v22 != v21 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v23 = (unsigned __int8 *)*((unsigned __int8 *)v21 + 4);
      v24 = (unsigned __int8 *)**v21;
      if ( v23 != v24 )
      {
        *a4 = *v21;
        a4[1] = v24;
        a4[2] = v23;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v21 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v25 = *a2;
      v26 = a2[1];
      while ( v26 != v25 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v27 = (unsigned __int8 *)*((unsigned __int8 *)v25 + 4);
        v28 = (unsigned __int8 *)**v25;
        if ( v27 < v28 )
        {
          *a4 = *v25;
          a4[1] = v28;
          a4[2] = v27;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v25 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 == 4096 )
    {
      v8 = *a2;
      v9 = a2[1];
      while ( v9 != v8 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v10 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 4);
        v11 = (unsigned __int8 *)**v8;
        if ( v10 <= v11 )
        {
          *a4 = *v8;
          a4[1] = v11;
          a4[2] = v10;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v8 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    v6 = a2[1];
    while ( v6 != v5 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v7 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 4);
      if ( v7 == (unsigned __int8 *)**v5 )
      {
        *a4 = *v5;
        a4[1] = v7;
        a4[2] = v7;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v5 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  return result;
}

//----- (00000910) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU16(int result, unsigned __int16 ***a2, signed int a3, unsigned __int16 **a4)
{
  int v4; // r12
  unsigned __int16 **v5; // r2
  unsigned __int16 **v6; // r4
  unsigned __int16 *v7; // r12
  unsigned __int16 **v8; // r2
  unsigned __int16 **v9; // r4
  unsigned __int16 *v10; // r12
  unsigned __int16 *v11; // lr
  unsigned __int16 **v12; // r2
  unsigned __int16 **v13; // r4
  unsigned __int16 *v14; // r12
  unsigned __int16 *v15; // lr
  unsigned __int16 **v16; // r2
  unsigned __int16 **v17; // r4
  unsigned __int16 *v18; // lr
  unsigned __int16 *v19; // r5
  int v20; // r1
  unsigned __int16 **v21; // r2
  unsigned __int16 **v22; // r4
  unsigned __int16 *v23; // r12
  unsigned __int16 *v24; // lr
  unsigned __int16 **v25; // r2
  unsigned __int16 **v26; // r4
  unsigned __int16 *v27; // r12
  unsigned __int16 *v28; // lr
  unsigned __int16 **v29; // r2
  unsigned __int16 **v30; // r4
  unsigned __int16 *v31; // r12
  unsigned __int16 *v32; // lr
  unsigned __int16 **v33; // r2
  unsigned __int16 **v34; // r5
  unsigned __int16 *v35; // r1
  unsigned __int16 *v36; // lr
  unsigned __int16 **v37; // r2
  unsigned __int16 **v38; // r4
  unsigned __int16 *v39; // lr
  unsigned __int16 *v40; // r5
  int v41; // r1
  unsigned __int16 **v42; // r2
  unsigned __int16 **v43; // r4
  unsigned __int16 *v44; // r12
  unsigned __int16 **v45; // r2
  unsigned __int16 **v46; // r4
  unsigned __int16 *v47; // r12
  unsigned __int16 *v48; // lr
  unsigned __int16 **v49; // r2
  unsigned __int16 **v50; // r4
  unsigned __int16 *v51; // r12
  unsigned __int16 *v52; // lr
  unsigned __int16 **v53; // r2
  unsigned __int16 **v54; // r4
  unsigned __int16 *v55; // lr
  unsigned __int16 *v56; // r5
  int v57; // r1
  unsigned __int16 **v58; // r2
  unsigned __int16 **v59; // r4
  unsigned __int16 *v60; // r12
  unsigned __int16 *v61; // lr
  unsigned __int16 **v62; // r2
  unsigned __int16 **v63; // r4
  unsigned __int16 *v64; // r12
  unsigned __int16 *v65; // lr
  unsigned __int16 **v66; // r2
  unsigned __int16 **v67; // r4
  unsigned __int16 *v68; // r12
  unsigned __int16 *v69; // lr
  unsigned __int16 **v70; // r2
  unsigned __int16 **v71; // r5
  unsigned __int16 *v72; // r1
  unsigned __int16 *v73; // lr
  unsigned __int16 **v74; // r2
  unsigned __int16 **v75; // r4
  unsigned __int16 *v76; // lr
  unsigned __int16 *v77; // r5
  int v78; // r1

  v4 = *(unsigned __int16 *)(result + 1384);
  if ( *(_DWORD *)(result + 72) & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      v66 = *a2;
      v67 = a2[1];
      while ( v67 != v66 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v68 = (unsigned __int16 *)*((unsigned __int16 *)v66 + 2);
        v69 = (unsigned __int16 *)**v66;
        if ( v68 > v69 )
        {
          *a4 = *v66;
          a4[1] = v69;
          a4[2] = v68;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v66 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v70 = *a2;
        v71 = a2[1];
        while ( v71 != v70 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v72 = (unsigned __int16 *)*((unsigned __int16 *)v70 + 2);
          v73 = (unsigned __int16 *)**v70;
          if ( v72 != v73
            && (v73 == (unsigned __int16 *)((char *)v72 + v4) || v73 == (unsigned __int16 *)((char *)v72 - v4)) )
          {
            *a4 = *v70;
            a4[1] = v73;
            a4[2] = v72;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v70 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v74 = *a2;
          v75 = a2[1];
          while ( v75 != v74 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v76 = (unsigned __int16 *)*((unsigned __int16 *)v74 + 2);
            v77 = (unsigned __int16 *)**v74;
            if ( v76 != v77 )
            {
              v78 = (char *)v77 - (char *)v76;
              if ( (char *)v77 - (char *)v76 < 0 )
                v78 = (char *)v76 - (char *)v77;
              if ( v78 <= v4 )
              {
                *a4 = *v74;
                a4[1] = v77;
                a4[2] = v76;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v74 += 3;
            ++*(_DWORD *)(result + 56);
          }
        }
        else if ( a3 == 0x20000 )
        {
          v53 = *a2;
          v54 = a2[1];
          while ( v54 != v53 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
          {
            v55 = (unsigned __int16 *)*((unsigned __int16 *)v53 + 2);
            v56 = (unsigned __int16 *)**v53;
            if ( v55 != v56 )
            {
              v57 = (char *)v56 - (char *)v55;
              if ( (char *)v56 - (char *)v55 < 0 )
                v57 = (char *)v55 - (char *)v56;
              if ( v57 >= v4 )
              {
                *a4 = *v53;
                a4[1] = v56;
                a4[2] = v55;
                ++*(_DWORD *)(result + 64);
                ++*(_DWORD *)(result + 12);
                a4 += 3;
              }
            }
            v53 += 3;
            ++*(_DWORD *)(result + 56);
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v49 = *a2;
        v50 = a2[1];
        while ( v50 != v49 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v51 = (unsigned __int16 *)*((unsigned __int16 *)v49 + 2);
          v52 = (unsigned __int16 *)**v49;
          if ( v51 >= v52 )
          {
            *a4 = *v49;
            a4[1] = v52;
            a4[2] = v51;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v49 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v58 = *a2;
      v59 = a2[1];
      while ( v59 != v58 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v60 = (unsigned __int16 *)*((unsigned __int16 *)v58 + 2);
        v61 = (unsigned __int16 *)**v58;
        if ( v60 != v61 )
        {
          *a4 = *v58;
          a4[1] = v61;
          a4[2] = v60;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v58 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v62 = *a2;
        v63 = a2[1];
        while ( v63 != v62 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v64 = (unsigned __int16 *)*((unsigned __int16 *)v62 + 2);
          v65 = (unsigned __int16 *)**v62;
          if ( v64 < v65 )
          {
            *a4 = *v62;
            a4[1] = v65;
            a4[2] = v64;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v62 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 4096 )
      {
        v45 = *a2;
        v46 = a2[1];
        while ( v46 != v45 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v47 = (unsigned __int16 *)*((unsigned __int16 *)v45 + 2);
          v48 = (unsigned __int16 *)**v45;
          if ( v47 <= v48 )
          {
            *a4 = *v45;
            a4[1] = v48;
            a4[2] = v47;
            ++*(_DWORD *)(result + 64);
            ++*(_DWORD *)(result + 12);
            a4 += 3;
          }
          v45 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 512 )
    {
      v42 = *a2;
      v43 = a2[1];
      while ( v43 != v42 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v44 = (unsigned __int16 *)*((unsigned __int16 *)v42 + 2);
        if ( v44 == (unsigned __int16 *)**v42 )
        {
          *a4 = *v42;
          a4[1] = v44;
          a4[2] = v44;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v42 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 0x2000 )
  {
    v29 = *a2;
    v30 = a2[1];
    while ( v30 != v29 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v31 = (unsigned __int16 *)*((unsigned __int16 *)v29 + 2);
      v32 = (unsigned __int16 *)**v29;
      if ( v31 > v32 )
      {
        *a4 = *v29;
        a4[1] = v32;
        a4[2] = v31;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v29 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v33 = *a2;
      v34 = a2[1];
      while ( v34 != v33 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v35 = (unsigned __int16 *)*((unsigned __int16 *)v33 + 2);
        v36 = (unsigned __int16 *)**v33;
        if ( v35 != v36
          && (v36 == (unsigned __int16 *)((char *)v35 + v4) || v36 == (unsigned __int16 *)((char *)v35 - v4)) )
        {
          *a4 = *v33;
          a4[1] = v36;
          a4[2] = v35;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v33 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v37 = *a2;
        v38 = a2[1];
        while ( v38 != v37 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v39 = (unsigned __int16 *)*((unsigned __int16 *)v37 + 2);
          v40 = (unsigned __int16 *)**v37;
          if ( v39 != v40 )
          {
            v41 = (char *)v40 - (char *)v39;
            if ( (char *)v40 - (char *)v39 < 0 )
              v41 = (char *)v39 - (char *)v40;
            if ( v41 <= v4 )
            {
              *a4 = *v37;
              a4[1] = v40;
              a4[2] = v39;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v37 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
      else if ( a3 == 0x20000 )
      {
        v16 = *a2;
        v17 = a2[1];
        while ( v17 != v16 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
        {
          v18 = (unsigned __int16 *)*((unsigned __int16 *)v16 + 2);
          v19 = (unsigned __int16 *)**v16;
          if ( v18 != v19 )
          {
            v20 = (char *)v19 - (char *)v18;
            if ( (char *)v19 - (char *)v18 < 0 )
              v20 = (char *)v18 - (char *)v19;
            if ( v20 >= v4 )
            {
              *a4 = *v16;
              a4[1] = v19;
              a4[2] = v18;
              ++*(_DWORD *)(result + 64);
              ++*(_DWORD *)(result + 12);
              a4 += 3;
            }
          }
          v16 += 3;
          ++*(_DWORD *)(result + 56);
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v12 = *a2;
      v13 = a2[1];
      while ( v13 != v12 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v14 = (unsigned __int16 *)*((unsigned __int16 *)v12 + 2);
        v15 = (unsigned __int16 *)**v12;
        if ( v14 >= v15 )
        {
          *a4 = *v12;
          a4[1] = v15;
          a4[2] = v14;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v12 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v21 = *a2;
    v22 = a2[1];
    while ( v22 != v21 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v23 = (unsigned __int16 *)*((unsigned __int16 *)v21 + 2);
      v24 = (unsigned __int16 *)**v21;
      if ( v23 != v24 )
      {
        *a4 = *v21;
        a4[1] = v24;
        a4[2] = v23;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v21 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v25 = *a2;
      v26 = a2[1];
      while ( v26 != v25 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v27 = (unsigned __int16 *)*((unsigned __int16 *)v25 + 2);
        v28 = (unsigned __int16 *)**v25;
        if ( v27 < v28 )
        {
          *a4 = *v25;
          a4[1] = v28;
          a4[2] = v27;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v25 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
    else if ( a3 == 4096 )
    {
      v8 = *a2;
      v9 = a2[1];
      while ( v9 != v8 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
      {
        v10 = (unsigned __int16 *)*((unsigned __int16 *)v8 + 2);
        v11 = (unsigned __int16 *)**v8;
        if ( v10 <= v11 )
        {
          *a4 = *v8;
          a4[1] = v11;
          a4[2] = v10;
          ++*(_DWORD *)(result + 64);
          ++*(_DWORD *)(result + 12);
          a4 += 3;
        }
        v8 += 3;
        ++*(_DWORD *)(result + 56);
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    v6 = a2[1];
    while ( v6 != v5 && *(_DWORD *)(result + 64) <= *(_DWORD *)(result + 60) )
    {
      v7 = (unsigned __int16 *)*((unsigned __int16 *)v5 + 2);
      if ( v7 == (unsigned __int16 *)**v5 )
      {
        *a4 = *v5;
        a4[1] = v7;
        a4[2] = v7;
        ++*(_DWORD *)(result + 64);
        ++*(_DWORD *)(result + 12);
        a4 += 3;
      }
      v5 += 3;
      ++*(_DWORD *)(result + 56);
    }
  }
  return result;
}

//----- (00001220) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU32(_DWORD *result, unsigned int ***a2, signed int a3, unsigned int **a4)
{
  unsigned int v4; // r12
  unsigned int **v5; // r2
  unsigned int **v6; // r4
  unsigned int *v7; // r12
  unsigned int **v8; // r2
  unsigned int **v9; // r4
  unsigned int v10; // r12
  unsigned int v11; // lr
  unsigned int **v12; // r2
  unsigned int **v13; // r4
  unsigned int v14; // r12
  unsigned int v15; // lr
  unsigned int **v16; // r2
  unsigned int **v17; // r4
  unsigned int *v18; // lr
  unsigned int v19; // r5
  unsigned int v20; // r1
  unsigned int **v21; // r2
  unsigned int **v22; // r4
  unsigned int *v23; // r12
  unsigned int v24; // lr
  unsigned int **v25; // r2
  unsigned int **v26; // r4
  unsigned int v27; // r12
  unsigned int v28; // lr
  unsigned int **v29; // r2
  unsigned int **v30; // r4
  unsigned int v31; // r12
  unsigned int v32; // lr
  unsigned int **v33; // r2
  unsigned int **v34; // r5
  unsigned int *v35; // r1
  unsigned int v36; // lr
  unsigned int **v37; // r2
  unsigned int **v38; // r4
  unsigned int *v39; // lr
  unsigned int v40; // r5
  unsigned int v41; // r1
  unsigned int **v42; // r2
  unsigned int **v43; // r4
  unsigned int *v44; // r12
  unsigned int **v45; // r2
  unsigned int **v46; // r4
  unsigned int v47; // r12
  unsigned int v48; // lr
  unsigned int **v49; // r2
  unsigned int **v50; // r4
  unsigned int v51; // r12
  unsigned int v52; // lr
  unsigned int **v53; // r2
  unsigned int **v54; // r4
  unsigned int *v55; // lr
  unsigned int v56; // r5
  unsigned int v57; // r1
  unsigned int **v58; // r2
  unsigned int **v59; // r4
  unsigned int *v60; // r12
  unsigned int v61; // lr
  unsigned int **v62; // r2
  unsigned int **v63; // r4
  unsigned int v64; // r12
  unsigned int v65; // lr
  unsigned int **v66; // r2
  unsigned int **v67; // r4
  unsigned int v68; // r12
  unsigned int v69; // lr
  unsigned int **v70; // r2
  unsigned int **v71; // r5
  unsigned int *v72; // r1
  unsigned int v73; // lr
  unsigned int **v74; // r2
  unsigned int **v75; // r4
  unsigned int *v76; // lr
  unsigned int v77; // r5
  unsigned int v78; // r1

  v4 = result[346];
  if ( result[18] & 0x40 )
  {
    if ( a3 == 0x2000 )
    {
      v66 = *a2;
      v67 = a2[1];
      while ( v67 != v66 && result[16] <= result[15] )
      {
        v68 = (unsigned int)v66[1];
        v69 = **v66;
        if ( v68 > v69 )
        {
          *a4 = *v66;
          a4[1] = (unsigned int *)v69;
          a4[2] = (unsigned int *)v68;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v66 += 3;
        ++result[14];
      }
    }
    else if ( a3 > 0x2000 )
    {
      if ( a3 == 0x8000 )
      {
        v70 = *a2;
        v71 = a2[1];
        while ( v71 != v70 && result[16] <= result[15] )
        {
          v72 = v70[1];
          v73 = **v70;
          if ( v72 != (unsigned int *)v73
            && ((unsigned int *)((char *)v72 + v4) == (unsigned int *)v73
             || (unsigned int *)((char *)v72 - v4) == (unsigned int *)v73) )
          {
            *a4 = *v70;
            a4[1] = (unsigned int *)v73;
            a4[2] = v72;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v70 += 3;
          ++result[14];
        }
      }
      else if ( a3 > 0x8000 )
      {
        if ( a3 == 0x10000 )
        {
          v74 = *a2;
          v75 = a2[1];
          while ( v75 != v74 && result[16] <= result[15] )
          {
            v76 = v74[1];
            v77 = **v74;
            if ( v76 != (unsigned int *)v77 )
            {
              v78 = v77 - (_DWORD)v76;
              if ( (signed int)(v77 - (_DWORD)v76) < 0 )
                v78 = (unsigned int)v76 - v77;
              if ( v78 <= v4 )
              {
                *a4 = *v74;
                a4[1] = (unsigned int *)v77;
                a4[2] = v76;
                ++result[16];
                ++result[3];
                a4 += 3;
              }
            }
            v74 += 3;
            ++result[14];
          }
        }
        else if ( a3 == 0x20000 )
        {
          v53 = *a2;
          v54 = a2[1];
          while ( v54 != v53 && result[16] <= result[15] )
          {
            v55 = v53[1];
            v56 = **v53;
            if ( v55 != (unsigned int *)v56 )
            {
              v57 = v56 - (_DWORD)v55;
              if ( (signed int)(v56 - (_DWORD)v55) < 0 )
                v57 = (unsigned int)v55 - v56;
              if ( v57 >= v4 )
              {
                *a4 = *v53;
                a4[1] = (unsigned int *)v56;
                a4[2] = v55;
                ++result[16];
                ++result[3];
                a4 += 3;
              }
            }
            v53 += 3;
            ++result[14];
          }
        }
      }
      else if ( a3 == 0x4000 )
      {
        v49 = *a2;
        v50 = a2[1];
        while ( v50 != v49 && result[16] <= result[15] )
        {
          v51 = (unsigned int)v49[1];
          v52 = **v49;
          if ( v51 >= v52 )
          {
            *a4 = *v49;
            a4[1] = (unsigned int *)v52;
            a4[2] = (unsigned int *)v51;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v49 += 3;
          ++result[14];
        }
      }
    }
    else if ( a3 == 1024 )
    {
      v58 = *a2;
      v59 = a2[1];
      while ( v59 != v58 && result[16] <= result[15] )
      {
        v60 = v58[1];
        v61 = **v58;
        if ( v60 != (unsigned int *)v61 )
        {
          *a4 = *v58;
          a4[1] = (unsigned int *)v61;
          a4[2] = v60;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v58 += 3;
        ++result[14];
      }
    }
    else if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v62 = *a2;
        v63 = a2[1];
        while ( v63 != v62 && result[16] <= result[15] )
        {
          v64 = (unsigned int)v62[1];
          v65 = **v62;
          if ( v64 < v65 )
          {
            *a4 = *v62;
            a4[1] = (unsigned int *)v65;
            a4[2] = (unsigned int *)v64;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v62 += 3;
          ++result[14];
        }
      }
      else if ( a3 == 4096 )
      {
        v45 = *a2;
        v46 = a2[1];
        while ( v46 != v45 && result[16] <= result[15] )
        {
          v47 = (unsigned int)v45[1];
          v48 = **v45;
          if ( v47 <= v48 )
          {
            *a4 = *v45;
            a4[1] = (unsigned int *)v48;
            a4[2] = (unsigned int *)v47;
            ++result[16];
            ++result[3];
            a4 += 3;
          }
          v45 += 3;
          ++result[14];
        }
      }
    }
    else if ( a3 == 512 )
    {
      v42 = *a2;
      v43 = a2[1];
      while ( v43 != v42 && result[16] <= result[15] )
      {
        v44 = v42[1];
        if ( v44 == (unsigned int *)**v42 )
        {
          *a4 = *v42;
          a4[1] = v44;
          a4[2] = v44;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v42 += 3;
        ++result[14];
      }
    }
  }
  else if ( a3 == 0x2000 )
  {
    v29 = *a2;
    v30 = a2[1];
    while ( v30 != v29 && result[16] <= result[15] )
    {
      v31 = (unsigned int)v29[1];
      v32 = **v29;
      if ( v31 > v32 )
      {
        *a4 = *v29;
        a4[1] = (unsigned int *)v32;
        a4[2] = (unsigned int *)v31;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      v29 += 3;
      ++result[14];
    }
  }
  else if ( a3 > 0x2000 )
  {
    if ( a3 == 0x8000 )
    {
      v33 = *a2;
      v34 = a2[1];
      while ( v34 != v33 && result[16] <= result[15] )
      {
        v35 = v33[1];
        v36 = **v33;
        if ( v35 != (unsigned int *)v36
          && ((unsigned int *)((char *)v35 + v4) == (unsigned int *)v36
           || (unsigned int *)((char *)v35 - v4) == (unsigned int *)v36) )
        {
          *a4 = *v33;
          a4[1] = (unsigned int *)v36;
          a4[2] = v35;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v33 += 3;
        ++result[14];
      }
    }
    else if ( a3 > 0x8000 )
    {
      if ( a3 == 0x10000 )
      {
        v37 = *a2;
        v38 = a2[1];
        while ( v38 != v37 && result[16] <= result[15] )
        {
          v39 = v37[1];
          v40 = **v37;
          if ( v39 != (unsigned int *)v40 )
          {
            v41 = v40 - (_DWORD)v39;
            if ( (signed int)(v40 - (_DWORD)v39) < 0 )
              v41 = (unsigned int)v39 - v40;
            if ( v41 <= v4 )
            {
              *a4 = *v37;
              a4[1] = (unsigned int *)v40;
              a4[2] = v39;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          v37 += 3;
          ++result[14];
        }
      }
      else if ( a3 == 0x20000 )
      {
        v16 = *a2;
        v17 = a2[1];
        while ( v17 != v16 && result[16] <= result[15] )
        {
          v18 = v16[1];
          v19 = **v16;
          if ( v18 != (unsigned int *)v19 )
          {
            v20 = v19 - (_DWORD)v18;
            if ( (signed int)(v19 - (_DWORD)v18) < 0 )
              v20 = (unsigned int)v18 - v19;
            if ( v20 >= v4 )
            {
              *a4 = *v16;
              a4[1] = (unsigned int *)v19;
              a4[2] = v18;
              ++result[16];
              ++result[3];
              a4 += 3;
            }
          }
          v16 += 3;
          ++result[14];
        }
      }
    }
    else if ( a3 == 0x4000 )
    {
      v12 = *a2;
      v13 = a2[1];
      while ( v13 != v12 && result[16] <= result[15] )
      {
        v14 = (unsigned int)v12[1];
        v15 = **v12;
        if ( v14 >= v15 )
        {
          *a4 = *v12;
          a4[1] = (unsigned int *)v15;
          a4[2] = (unsigned int *)v14;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v12 += 3;
        ++result[14];
      }
    }
  }
  else if ( a3 == 1024 )
  {
    v21 = *a2;
    v22 = a2[1];
    while ( v22 != v21 && result[16] <= result[15] )
    {
      v23 = v21[1];
      v24 = **v21;
      if ( v23 != (unsigned int *)v24 )
      {
        *a4 = *v21;
        a4[1] = (unsigned int *)v24;
        a4[2] = v23;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      v21 += 3;
      ++result[14];
    }
  }
  else if ( a3 > 1024 )
  {
    if ( a3 == 2048 )
    {
      v25 = *a2;
      v26 = a2[1];
      while ( v26 != v25 && result[16] <= result[15] )
      {
        v27 = (unsigned int)v25[1];
        v28 = **v25;
        if ( v27 < v28 )
        {
          *a4 = *v25;
          a4[1] = (unsigned int *)v28;
          a4[2] = (unsigned int *)v27;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v25 += 3;
        ++result[14];
      }
    }
    else if ( a3 == 4096 )
    {
      v8 = *a2;
      v9 = a2[1];
      while ( v9 != v8 && result[16] <= result[15] )
      {
        v10 = (unsigned int)v8[1];
        v11 = **v8;
        if ( v10 <= v11 )
        {
          *a4 = *v8;
          a4[1] = (unsigned int *)v11;
          a4[2] = (unsigned int *)v10;
          ++result[16];
          ++result[3];
          a4 += 3;
        }
        v8 += 3;
        ++result[14];
      }
    }
  }
  else if ( a3 == 512 )
  {
    v5 = *a2;
    v6 = a2[1];
    while ( v6 != v5 && result[16] <= result[15] )
    {
      v7 = v5[1];
      if ( v7 == (unsigned int *)**v5 )
      {
        *a4 = *v5;
        a4[1] = v7;
        a4[2] = v7;
        ++result[16];
        ++result[3];
        a4 += 3;
      }
      v5 += 3;
      ++result[14];
    }
  }
  return result;
}

//----- (00001AF4) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownFloat(unsigned int result, int *a2, signed int a3, int a4)
{
  int v4; // r5
  float v5; // s16
  float *v6; // r4
  int *v7; // r6
  int v8; // r1
  int v9; // r3
  float *v10; // r2
  float v11; // s15
  int v12; // r1
  int v13; // r3
  float *v14; // r2
  float v15; // s15
  int v16; // r8
  int v17; // r7
  float v18; // r2
  float *v19; // r3
  float v20; // s18
  float v21; // s17
  int v22; // r3
  float *v23; // r7
  float *v24; // r8
  float v25; // r2
  float v26; // s17
  int v27; // r9
  float v28; // r3
  int v29; // r8
  int v30; // r7
  float v31; // r2
  float *v32; // r3
  int v33; // r9
  float v34; // s17
  int v35; // r3
  int v36; // r1
  int v37; // r3
  float *v38; // r2
  float v39; // s15
  int v40; // r1
  int v41; // r3
  float *v42; // r2
  float v43; // s15
  int v44; // r8
  int v45; // r7
  float v46; // r2
  float *v47; // r3
  int v48; // s18
  float v49; // s17
  float v50; // s15
  int v51; // r3
  int v52; // r8
  int v53; // r7
  float v54; // r2
  float *v55; // r3
  float v56; // s18
  float v57; // s17
  int v58; // r3
  int v59; // r1
  int v60; // r3
  float *v61; // r2
  float v62; // s15
  float v63; // s14
  int v64; // r1
  int v65; // r3
  float *v66; // r2
  float v67; // s15
  float v68; // s14
  __int64 v69; // r6
  float v70; // r2
  float *v71; // r3
  float v72; // s18
  float v73; // s17
  int v74; // r3
  __int64 v75; // r6
  float v76; // r2
  float v77; // s16
  int v78; // s17
  int v79; // r3
  __int64 v80; // r6
  float v81; // r2
  float *v82; // r3
  int v83; // s17
  float v84; // s16
  int v85; // r3
  int v86; // r1
  int v87; // r3
  float *v88; // r2
  float v89; // s15
  float v90; // s14
  int v91; // r1
  int v92; // r3
  float *v93; // r2
  float v94; // s15
  float v95; // s14
  __int64 v96; // r6
  float v97; // r2
  float *v98; // r3
  int v99; // s18
  float v100; // s17
  float v101; // s15
  int v102; // r3
  __int64 v103; // r6
  float v104; // r2
  float *v105; // r3
  float v106; // s18
  float v107; // s17
  int v108; // r3

  v4 = a4;
  v5 = *(float *)(result + 1384);
  v6 = (float *)result;
  v7 = a2;
  if ( *(_DWORD *)(result + 72) & 0x40 )
    goto LABEL_7;
  if ( a3 == 0x2000 )
  {
    v40 = a2[1];
    v41 = *v7;
    while ( v40 != v41 )
    {
      result = *((_DWORD *)v6 + 16);
      if ( result > *((_DWORD *)v6 + 15) )
        break;
      v42 = *(float **)v41;
      v43 = **(float **)v41;
      if ( v5 > v43 )
      {
        result = *(_DWORD *)(v41 + 4);
        *(float *)(v4 + 4) = v43;
        *(_DWORD *)v4 = v42;
        *(_DWORD *)(v4 + 8) = result;
        v4 += 12;
        ++*((_DWORD *)v6 + 16);
        ++*((_DWORD *)v6 + 3);
      }
      v41 += 12;
      ++*((_DWORD *)v6 + 14);
    }
    goto LABEL_135;
  }
  if ( a3 <= 0x2000 )
  {
    if ( a3 == 1024 )
    {
      v29 = a2[1];
      v30 = *a2 + 12;
      while ( v29 != v30 - 12 )
      {
        v31 = v6[16];
        if ( LODWORD(v31) > *((_DWORD *)v6 + 15) )
          break;
        v32 = *(float **)(v30 - 12);
        v33 = *(_DWORD *)(v30 - 8);
        v34 = *v32;
        if ( fabsf(v34) > 3.4028e38
          || (result = CTRPluginFramework::AlmostEqualRelative(
                         (CTRPluginFramework *)result,
                         *(float *)&a2,
                         v31,
                         *(float *)&v32)) == 0 )
        {
          v35 = *(_DWORD *)(v30 - 12);
          *(float *)(v4 + 4) = v34;
          *(_DWORD *)v4 = v35;
          *(_DWORD *)(v4 + 8) = v33;
          v4 += 12;
          ++*((_DWORD *)v6 + 16);
          ++*((_DWORD *)v6 + 3);
        }
        v30 += 12;
        ++*((_DWORD *)v6 + 14);
      }
LABEL_120:
      v80 = *(_QWORD *)v7;
      LODWORD(v80) = v80 + 12;
      while ( HIDWORD(v80) != (_DWORD)v80 - 12 )
      {
        v81 = v6[16];
        if ( LODWORD(v81) > *((_DWORD *)v6 + 15) )
          break;
        v82 = *(float **)(v80 - 12);
        v83 = *(_DWORD *)(v80 - 8);
        v84 = *v82;
        if ( fabsf(v84) > 3.4028e38
          || (result = CTRPluginFramework::AlmostEqualRelative(
                         (CTRPluginFramework *)result,
                         *(float *)&a2,
                         v81,
                         *(float *)&v82)) == 0 )
        {
          v85 = *(_DWORD *)(v80 - 12);
          *(float *)(v4 + 4) = v84;
          *(_DWORD *)(v4 + 8) = v83;
          *(_DWORD *)v4 = v85;
          v4 += 12;
          ++*((_DWORD *)v6 + 16);
          ++*((_DWORD *)v6 + 3);
        }
        LODWORD(v80) = v80 + 12;
        ++*((_DWORD *)v6 + 14);
      }
      return result;
    }
    if ( a3 > 1024 )
    {
      if ( a3 == 2048 )
      {
        v36 = a2[1];
        v37 = *v7;
        while ( v36 != v37 )
        {
          result = *((_DWORD *)v6 + 16);
          if ( result > *((_DWORD *)v6 + 15) )
            break;
          v38 = *(float **)v37;
          v39 = **(float **)v37;
          if ( v5 < v39 )
          {
            result = *(_DWORD *)(v37 + 4);
            *(float *)(v4 + 4) = v39;
            *(_DWORD *)v4 = v38;
            *(_DWORD *)(v4 + 8) = result;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
          v37 += 12;
          ++*((_DWORD *)v6 + 14);
        }
LABEL_129:
        v86 = v7[1];
        v87 = *v7;
        while ( v86 != v87 )
        {
          result = *((_DWORD *)v6 + 16);
          if ( result > *((_DWORD *)v6 + 15) )
            break;
          v88 = *(float **)v87;
          v89 = *(float *)(v87 + 4);
          v90 = **(float **)v87;
          if ( v89 < v90 )
          {
            *(float *)(v4 + 4) = v90;
            *(float *)(v4 + 8) = v89;
            *(_DWORD *)v4 = v88;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
          v87 += 12;
          ++*((_DWORD *)v6 + 14);
        }
        return result;
      }
      if ( a3 == 4096 )
      {
        v8 = a2[1];
        v9 = *v7;
        while ( v8 != v9 )
        {
          result = *((_DWORD *)v6 + 16);
          if ( result > *((_DWORD *)v6 + 15) )
            break;
          v10 = *(float **)v9;
          v11 = **(float **)v9;
          if ( v5 <= v11 )
          {
            result = *(_DWORD *)(v9 + 4);
            *(float *)(v4 + 4) = v11;
            *(_DWORD *)v4 = v10;
            *(_DWORD *)(v4 + 8) = result;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
          v9 += 12;
          ++*((_DWORD *)v6 + 14);
        }
LABEL_90:
        v59 = v7[1];
        v60 = *v7;
        while ( v59 != v60 )
        {
          result = *((_DWORD *)v6 + 16);
          if ( result > *((_DWORD *)v6 + 15) )
            break;
          v61 = *(float **)v60;
          v62 = *(float *)(v60 + 4);
          v63 = **(float **)v60;
          if ( v62 <= v63 )
          {
            *(float *)(v4 + 4) = v63;
            *(float *)(v4 + 8) = v62;
            *(_DWORD *)v4 = v61;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
          v60 += 12;
          ++*((_DWORD *)v6 + 14);
        }
        return result;
      }
    }
    else if ( a3 == 512 )
    {
      v23 = (float *)*a2;
      v24 = (float *)a2[1];
      while ( v24 != v23 )
      {
        v25 = v6[16];
        if ( LODWORD(v25) > *((_DWORD *)v6 + 15) )
          break;
        v26 = **(float **)v23;
        if ( fabsf(v26) <= 3.4028e38 )
        {
          v27 = *((_DWORD *)v23 + 1);
          result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v25, *v23);
          if ( result )
          {
            v28 = *v23;
            *(float *)(v4 + 4) = v26;
            *(float *)v4 = v28;
            *(_DWORD *)(v4 + 8) = v27;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
        }
        v23 += 3;
        ++*((_DWORD *)v6 + 14);
      }
LABEL_113:
      v75 = *(_QWORD *)v7;
      while ( HIDWORD(v75) != (_DWORD)v75 )
      {
        v76 = v6[16];
        if ( LODWORD(v76) > *((_DWORD *)v6 + 15) )
          break;
        v77 = **(float **)v75;
        if ( fabsf(v77) <= 3.4028e38 )
        {
          v78 = *(_DWORD *)(v75 + 4);
          result = CTRPluginFramework::AlmostEqualRelative(
                     (CTRPluginFramework *)result,
                     *(float *)&a2,
                     v76,
                     *(float *)v75);
          if ( result )
          {
            v79 = *(_DWORD *)v75;
            *(float *)(v4 + 4) = v77;
            *(_DWORD *)(v4 + 8) = v78;
            *(_DWORD *)v4 = v79;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
        }
        LODWORD(v75) = v75 + 12;
        ++*((_DWORD *)v6 + 14);
      }
      return result;
    }
    goto LABEL_7;
  }
  if ( a3 == 0x8000 )
  {
    v44 = a2[1];
    v45 = *a2 + 12;
    while ( 1 )
    {
      if ( v44 == v45 - 12 )
        goto LABEL_141;
      v46 = v6[16];
      if ( LODWORD(v46) > *((_DWORD *)v6 + 15) )
        goto LABEL_141;
      v47 = *(float **)(v45 - 12);
      v48 = *(_DWORD *)(v45 - 8);
      v49 = *v47;
      v50 = fabsf(*v47);
      if ( v50 > 3.4028e38 )
      {
        if ( v50 > 3.4028e38 )
        {
          if ( v50 > 3.4028e38 )
            goto LABEL_75;
          goto LABEL_167;
        }
      }
      else
      {
        result = CTRPluginFramework::AlmostEqualRelative(
                   (CTRPluginFramework *)result,
                   *(float *)&a2,
                   v46,
                   *(float *)&v47);
        if ( result )
          goto LABEL_75;
      }
      result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v46, *(float *)&v47);
      if ( result )
        goto LABEL_74;
LABEL_167:
      result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v46, *(float *)&v47);
      if ( result )
      {
LABEL_74:
        v51 = *(_DWORD *)(v45 - 12);
        *(float *)(v4 + 4) = v49;
        *(_DWORD *)(v4 + 8) = v48;
        *(_DWORD *)v4 = v51;
        v4 += 12;
        ++*((_DWORD *)v6 + 16);
        ++*((_DWORD *)v6 + 3);
      }
LABEL_75:
      v45 += 12;
      ++*((_DWORD *)v6 + 14);
    }
  }
  if ( a3 > 0x8000 )
  {
    if ( a3 == 0x10000 )
    {
      v52 = a2[1];
      v53 = *a2 + 12;
      while ( v52 != v53 - 12 )
      {
        v54 = v6[16];
        if ( LODWORD(v54) > *((_DWORD *)v6 + 15) )
          break;
        v55 = *(float **)(v53 - 12);
        v56 = *(float *)(v53 - 8);
        v57 = *v55;
        if ( fabsf(v57) > 3.4028e38
          || (result = CTRPluginFramework::AlmostEqualRelative(
                         (CTRPluginFramework *)result,
                         *(float *)&a2,
                         v54,
                         *(float *)&v55)) == 0 )
        {
          if ( v5 >= fabs((double)(signed int)(float)(v57 - v56)) )
          {
            v58 = *(_DWORD *)(v53 - 12);
            *(float *)(v4 + 4) = v57;
            *(float *)(v4 + 8) = v56;
            *(_DWORD *)v4 = v58;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
        }
        v53 += 12;
        ++*((_DWORD *)v6 + 14);
      }
LABEL_149:
      v103 = *(_QWORD *)v7;
      LODWORD(v103) = v103 + 12;
      while ( HIDWORD(v103) != (_DWORD)v103 - 12 )
      {
        v104 = v6[16];
        if ( LODWORD(v104) > *((_DWORD *)v6 + 15) )
          break;
        v105 = *(float **)(v103 - 12);
        v106 = *(float *)(v103 - 8);
        v107 = *v105;
        if ( fabsf(v107) > 3.4028e38
          || (result = CTRPluginFramework::AlmostEqualRelative(
                         (CTRPluginFramework *)result,
                         *(float *)&a2,
                         v104,
                         *(float *)&v105)) == 0 )
        {
          if ( v5 >= fabs((double)(signed int)(float)(v107 - v106)) )
          {
            v108 = *(_DWORD *)(v103 - 12);
            *(float *)(v4 + 4) = v107;
            *(float *)(v4 + 8) = v106;
            *(_DWORD *)v4 = v108;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
        }
        LODWORD(v103) = v103 + 12;
        ++*((_DWORD *)v6 + 14);
      }
      return result;
    }
    if ( a3 == 0x20000 )
    {
      v16 = a2[1];
      v17 = *a2 + 12;
      while ( v16 != v17 - 12 )
      {
        v18 = v6[16];
        if ( LODWORD(v18) > *((_DWORD *)v6 + 15) )
          break;
        v19 = *(float **)(v17 - 12);
        v20 = *(float *)(v17 - 8);
        v21 = *v19;
        if ( fabsf(v21) > 3.4028e38
          || (result = CTRPluginFramework::AlmostEqualRelative(
                         (CTRPluginFramework *)result,
                         *(float *)&a2,
                         v18,
                         *(float *)&v19)) == 0 )
        {
          if ( v5 <= fabs((double)(signed int)(float)(v21 - v20)) )
          {
            v22 = *(_DWORD *)(v17 - 12);
            *(float *)(v4 + 4) = v21;
            *(float *)(v4 + 8) = v20;
            *(_DWORD *)v4 = v22;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
        }
        v17 += 12;
        ++*((_DWORD *)v6 + 14);
      }
LABEL_107:
      v69 = *(_QWORD *)v7;
      LODWORD(v69) = v69 + 12;
      while ( HIDWORD(v69) != (_DWORD)v69 - 12 )
      {
        v70 = v6[16];
        if ( LODWORD(v70) > *((_DWORD *)v6 + 15) )
          break;
        v71 = *(float **)(v69 - 12);
        v72 = *(float *)(v69 - 8);
        v73 = *v71;
        if ( fabsf(v73) > 3.4028e38
          || (result = CTRPluginFramework::AlmostEqualRelative(
                         (CTRPluginFramework *)result,
                         *(float *)&a2,
                         v70,
                         *(float *)&v71)) == 0 )
        {
          if ( v5 <= fabs((double)(signed int)(float)(v73 - v72)) )
          {
            v74 = *(_DWORD *)(v69 - 12);
            *(float *)(v4 + 4) = v73;
            *(float *)(v4 + 8) = v72;
            *(_DWORD *)v4 = v74;
            v4 += 12;
            ++*((_DWORD *)v6 + 16);
            ++*((_DWORD *)v6 + 3);
          }
        }
        LODWORD(v69) = v69 + 12;
        ++*((_DWORD *)v6 + 14);
      }
      return result;
    }
  }
  else if ( a3 == 0x4000 )
  {
    v12 = a2[1];
    v13 = *v7;
    while ( v12 != v13 )
    {
      result = *((_DWORD *)v6 + 16);
      if ( result > *((_DWORD *)v6 + 15) )
        break;
      v14 = *(float **)v13;
      v15 = **(float **)v13;
      if ( v5 >= v15 )
      {
        result = *(_DWORD *)(v13 + 4);
        *(float *)(v4 + 4) = v15;
        *(_DWORD *)v4 = v14;
        *(_DWORD *)(v4 + 8) = result;
        v4 += 12;
        ++*((_DWORD *)v6 + 16);
        ++*((_DWORD *)v6 + 3);
      }
      v13 += 12;
      ++*((_DWORD *)v6 + 14);
    }
LABEL_99:
    v64 = v7[1];
    v65 = *v7;
    while ( v65 != v64 )
    {
      result = *((_DWORD *)v6 + 16);
      if ( result > *((_DWORD *)v6 + 15) )
        break;
      v66 = *(float **)v65;
      v67 = *(float *)(v65 + 4);
      v68 = **(float **)v65;
      if ( v67 >= v68 )
      {
        *(float *)(v4 + 4) = v68;
        *(float *)(v4 + 8) = v67;
        *(_DWORD *)v4 = v66;
        v4 += 12;
        ++*((_DWORD *)v6 + 16);
        ++*((_DWORD *)v6 + 3);
      }
      v65 += 12;
      ++*((_DWORD *)v6 + 14);
    }
    return result;
  }
LABEL_7:
  if ( a3 != 0x2000 )
  {
    if ( a3 <= 0x2000 )
    {
      if ( a3 != 1024 )
      {
        if ( a3 <= 1024 )
        {
          if ( a3 != 512 )
            return result;
          goto LABEL_113;
        }
        if ( a3 != 2048 )
        {
          if ( a3 != 4096 )
            return result;
          goto LABEL_90;
        }
        goto LABEL_129;
      }
      goto LABEL_120;
    }
    if ( a3 != 0x8000 )
    {
      if ( a3 <= 0x8000 )
      {
        if ( a3 != 0x4000 )
          return result;
        goto LABEL_99;
      }
      if ( a3 != 0x10000 )
      {
        if ( a3 != 0x20000 )
          return result;
        goto LABEL_107;
      }
      goto LABEL_149;
    }
LABEL_141:
    v96 = *(_QWORD *)v7;
    LODWORD(v96) = v96 + 12;
    while ( 1 )
    {
      if ( HIDWORD(v96) == (_DWORD)v96 - 12 )
        return result;
      v97 = v6[16];
      if ( LODWORD(v97) > *((_DWORD *)v6 + 15) )
        return result;
      v98 = *(float **)(v96 - 12);
      v99 = *(_DWORD *)(v96 - 8);
      v100 = *v98;
      v101 = fabsf(*v98);
      if ( v101 > 3.4028e38 )
      {
        if ( v101 > 3.4028e38 )
        {
          if ( v101 > 3.4028e38 )
            goto LABEL_148;
          goto LABEL_163;
        }
      }
      else
      {
        result = CTRPluginFramework::AlmostEqualRelative(
                   (CTRPluginFramework *)result,
                   *(float *)&a2,
                   v97,
                   *(float *)&v98);
        if ( result )
          goto LABEL_148;
      }
      result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v97, *(float *)&v98);
      if ( result )
        goto LABEL_147;
LABEL_163:
      result = CTRPluginFramework::AlmostEqualRelative((CTRPluginFramework *)result, *(float *)&a2, v97, *(float *)&v98);
      if ( result )
      {
LABEL_147:
        v102 = *(_DWORD *)(v96 - 12);
        *(float *)(v4 + 4) = v100;
        *(_DWORD *)(v4 + 8) = v99;
        *(_DWORD *)v4 = v102;
        v4 += 12;
        ++*((_DWORD *)v6 + 16);
        ++*((_DWORD *)v6 + 3);
      }
LABEL_148:
      LODWORD(v96) = v96 + 12;
      ++*((_DWORD *)v6 + 14);
    }
  }
LABEL_135:
  v91 = v7[1];
  v92 = *v7;
  while ( v91 != v92 )
  {
    result = *((_DWORD *)v6 + 16);
    if ( result > *((_DWORD *)v6 + 15) )
      break;
    v93 = *(float **)v92;
    v94 = *(float *)(v92 + 4);
    v95 = **(float **)v92;
    if ( v94 > v95 )
    {
      *(float *)(v4 + 4) = v95;
      *(float *)(v4 + 8) = v94;
      *(_DWORD *)v4 = v93;
      v4 += 12;
      ++*((_DWORD *)v6 + 16);
      ++*((_DWORD *)v6 + 3);
    }
    v92 += 12;
    ++*((_DWORD *)v6 + 14);
  }
  return result;
}

// ALL OK, 4 function(s) have been successfully decompiled
