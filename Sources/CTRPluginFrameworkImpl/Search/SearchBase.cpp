/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Search::UpdateProgress(int result);
int __fastcall CTRPluginFramework::Search::CheckNextRegion(CTRPluginFramework::Search *this, int a2);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
char *__fastcall CTRPluginFramework::Search::GetHeader(CTRPluginFramework::Search *this);
int __fastcall CTRPluginFramework::Search::GetTotalResults(int a1, int a2);
int __fastcall CTRPluginFramework::Search::GetType(CTRPluginFramework::Search *this);
bool __fastcall CTRPluginFramework::Search::IsFirstUnknownSearch(CTRPluginFramework::Search *this);
int __fastcall CTRPluginFramework::Search::WriteHeader(CTRPluginFramework::Search *this, int a2);
int __fastcall CTRPluginFramework::Search::WriteResults(int result);
int __fastcall CTRPluginFramework::Search::GetRegionIndex(CTRPluginFramework::Search *this, unsigned int a2);
int __fastcall CTRPluginFramework::Search::ExtractPreviousHits(int result, void *a2, unsigned int a3, unsigned int a4, unsigned int *a5, bool a6);
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (__fastcall *a2)(int ***, int, int), int a3, int a4, ...);
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search::Search(CTRPluginFramework::Search *this, CTRPluginFramework::Search *a2);
void __fastcall std::vector<CTRPluginFramework::Search::RegionIndex,std::allocator<CTRPluginFramework::Search::RegionIndex>>::_M_realloc_insert<CTRPluginFramework::Search::RegionIndex const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::Search::CreateIndexTable(CTRPluginFramework::Search *this, int a2);
_DWORD *__fastcall CTRPluginFramework::Search::Search(_DWORD *a1, int a2, int a3);
int __fastcall CTRPluginFramework::Search::Cancel(__int64 this, int a2);
int __fastcall CTRPluginFramework::Search::ExecuteSearch(__int64 this);
// _DWORD CTRPluginFramework::File::Tell(CTRPluginFramework::File *__hidden this); idb
// int __fastcall svcFlushProcessDataCache(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::File::Write(CTRPluginFramework::File *__hidden this, const void *, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::File::Read(CTRPluginFramework::File *__hidden this, void *, unsigned int); idb
// _DWORD CTRPluginFramework::File::GetSize(CTRPluginFramework::File *__hidden this); idb
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Time::Time(CTRPluginFramework::Time *__hidden this); idb
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD CTRPluginFramework::File::File(CTRPluginFramework::File *__hidden this); idb
// void *memset(void *s, int c, size_t n);
// int __fastcall CTRPluginFramework::Process::GetTitleID(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Directory::Directory(CTRPluginFramework::Directory *__hidden this); idb
// int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Directory::~Directory(CTRPluginFramework::Directory *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg);
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *__hidden this, void *); idb
// _DWORD CTRPluginFramework::Preferences::LoadBackgrounds(CTRPluginFramework::Preferences *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::_pool; // weak
_DWORD (*off_DA4)(CTRPluginFramework::Search *__hidden this) = &CTRPluginFramework::Search::Cancel; // weak
// extern _UNKNOWN CTRPluginFramework::ProcessImpl::ProcessHandle; weak


//----- (00000008) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::UpdateProgress(int result)
{
  int v1; // r2
  int v2; // r3

  v1 = *(_DWORD *)(result + 72);
  v2 = *(_DWORD *)(result + 56);
  if ( v1 & 0x80 )
    v1 = *(_DWORD *)(result + 40);
  if ( *(_DWORD *)(result + 72) & 0x80 )
    v2 -= v1;
  *(float *)(result + 16) = (float)((float)(unsigned int)(v2 + *(_DWORD *)(result + 48)) * 100.0)
                          / (float)*(unsigned int *)(result + 52);
  return result;
}

//----- (0000004C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::CheckNextRegion(CTRPluginFramework::Search *this, int a2)
{
  CTRPluginFramework::Search *v2; // r4
  unsigned int v3; // r3
  unsigned int v4; // r1
  int v6; // r5
  int v7; // r3
  int v8; // r2
  char *v9; // r3
  CTRPluginFramework::File *v10; // r0
  __int64 v11; // r0
  int v12; // r2
  int v13; // r5
  int v14; // r3
  CTRPluginFramework::File *v15; // r0
  int v16; // r3
  int v17; // r1
  __int64 v18; // r0
  int v19; // r3
  unsigned int v20; // r0
  unsigned int v21; // r2
  int v22; // r1
  int v23; // r2
  __int64 v24; // r2
  int v25; // r1
  int v26; // r2

  v2 = this;
  v3 = *((_DWORD *)this + 9);
  v4 = *((_DWORD *)this + 41);
  if ( *((_DWORD *)this + 18) & 0x80 )
  {
    if ( v4 - 1 == v3 )
      return 1;
    v6 = v3 + 1;
    v7 = (*(_QWORD *)((char *)this + 44) >> 32) + *(unsigned __int64 *)((char *)this + 44);
    v8 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 9) = v6;
    *((_DWORD *)this + 12) = v7 - v8;
    v9 = (char *)this + 24 * v6;
    v10 = (CTRPluginFramework::Search *)((char *)this + 88);
    *((_DWORD *)v10 - 12) = *((_DWORD *)v9 + 42);
    *((_DWORD *)v10 - 11) = *((_DWORD *)v9 + 43) - 1;
    LODWORD(v11) = CTRPluginFramework::File::Tell(v10);
    *((_QWORD *)v2 + 3 * v6 + 22) = v11;
    HIDWORD(v11) = *((_DWORD *)v2 + 10);
    v12 = *((_DWORD *)v2 + 11);
  }
  else
  {
    if ( v4 <= v3 )
      return 1;
    v13 = v3 + 1;
    *((_DWORD *)this + 9) = v3 + 1;
    v14 = *((_DWORD *)this + 6 * (v3 + 1) + 42);
    v15 = (CTRPluginFramework::Search *)((char *)this + 88);
    *((_DWORD *)v15 - 12) = v14;
    v16 = *((_DWORD *)v15 - 10);
    v17 = *(_DWORD *)(*((_DWORD *)v15 + 320) + 24 * *(_DWORD *)(*((_DWORD *)v15 + 320) + 36) + 184);
    *((_DWORD *)v15 - 8) = 0;
    *((_DWORD *)v15 - 10) = v16 + v17;
    LODWORD(v18) = CTRPluginFramework::File::Tell(v15);
    *((_QWORD *)v2 + 3 * v13 + 22) = v18;
    v19 = *((_DWORD *)v2 + 342);
    v20 = *(_DWORD *)(v19 + 164);
    while ( 1 )
    {
      v21 = *(_DWORD *)(v19 + 36);
      v22 = v19 + 24 * v21;
      if ( *(_DWORD *)(v22 + 168) == *((_DWORD *)v2 + 10) )
        break;
      if ( v21 >= v20 )
        return 1;
      *(_DWORD *)(v19 + 36) = v21 + 1;
    }
    if ( v21 >= v20 )
      return 1;
    v23 = *(_DWORD *)(v22 + 184);
    if ( !v23 )
      return (*(int (__fastcall **)(CTRPluginFramework::Search *))(*(_DWORD *)v2 + 20))(v2);
    *((_DWORD *)v2 + 11) = v23;
    v24 = *(_QWORD *)(v19 + 24 * *(_DWORD *)(v19 + 36) + 24 + 152);
    CTRPluginFramework::File::Seek(*((_DWORD *)v2 + 342) + 88, v22, v24, HIDWORD(v24), 1);
    v25 = *((_DWORD *)v2 + 10);
    v26 = *((_DWORD *)v2 + 6 * *((_DWORD *)v2 + 9) + 43);
  }
  svcFlushProcessDataCache(CTRPluginFramework::ProcessImpl::ProcessHandle);
  return 0;
}
// E58: using guessed type int __fastcall svcFlushProcessDataCache(_DWORD);

//----- (000001E0) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// E68: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// E6C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000258) --------------------------------------------------------
char *__fastcall CTRPluginFramework::Search::GetHeader(CTRPluginFramework::Search *this)
{
  return (char *)this + 152;
}

//----- (00000260) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::GetTotalResults(int a1, int a2)
{
  int v2; // r3
  int v3; // r2
  int result; // r0
  int v5; // r12
  int v6; // lr
  bool v7; // zf

  v2 = a1;
  v3 = a1 + 24 * *(_DWORD *)(a1 + 164);
  v7 = a1 == v3;
  result = 0;
  if ( !v7 )
  {
    do
    {
      v5 = *(_DWORD *)(a2 + 16);
      v6 = *(_DWORD *)(v2 + 168);
      v2 += 24;
      v7 = v6 == v5;
      if ( v6 == v5 )
        v5 = *(_DWORD *)(v2 + 160);
      a2 += 24;
      if ( v7 )
        result += v5;
    }
    while ( v2 != v3 );
  }
  return result;
}

//----- (000002A8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::GetType(CTRPluginFramework::Search *this)
{
  return *((_DWORD *)this + 18) & 0x3F;
}

//----- (000002B4) --------------------------------------------------------
bool __fastcall CTRPluginFramework::Search::IsFirstUnknownSearch(CTRPluginFramework::Search *this)
{
  return (*((_DWORD *)this + 18) & 0xC0) == 192;
}

//----- (000002CC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::WriteHeader(CTRPluginFramework::Search *this, int a2)
{
  CTRPluginFramework::File *v2; // r4
  CTRPluginFramework::Search *v3; // r5
  __int64 v4; // r0
  __int64 v5; // r6
  int result; // r0
  int v7; // r1

  v2 = (CTRPluginFramework::Search *)((char *)this + 88);
  v3 = this;
  LODWORD(v4) = CTRPluginFramework::File::Tell((CTRPluginFramework::Search *)((char *)this + 88));
  v5 = v4;
  CTRPluginFramework::File::Seek(v2, HIDWORD(v4), 0, 0, 1);
  *((_DWORD *)v3 + 40) = *((_DWORD *)v3 + 3);
  result = CTRPluginFramework::File::Write(v2, (char *)v3 + 152, 0x4C0u);
  if ( v5 )
    result = CTRPluginFramework::File::Seek(v2, v7, v5, HIDWORD(v5), 1);
  return result;
}

//----- (0000033C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::WriteResults(int result)
{
  int v1; // r3
  int v2; // r4

  v1 = *(_DWORD *)(result + 64);
  if ( v1 )
  {
    v2 = result;
    result = CTRPluginFramework::File::Write(
               (CTRPluginFramework::File *)(result + 88),
               (const void *)CTRPluginFramework::_pool,
               *(_DWORD *)(result + 68) * v1);
    *(_DWORD *)(v2 + 24 * *(_DWORD *)(v2 + 36) + 184) += *(_DWORD *)(v2 + 64);
    *(_DWORD *)(v2 + 64) = 0;
  }
  return result;
}
// 4: using guessed type int CTRPluginFramework::_pool;

//----- (00000394) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::GetRegionIndex(CTRPluginFramework::Search *this, unsigned int a2)
{
  int v2; // r2
  int v3; // r12
  int v4; // r3
  int result; // r0

  v2 = *((_DWORD *)this + 343);
  v3 = *((_DWORD *)this + 344);
  v4 = v2;
  for ( result = 0; v3 != v4; ++result )
  {
    if ( *(_DWORD *)(v2 + 8 * result) <= a2 && *(_DWORD *)(v4 + 4) >= a2 )
      break;
    v4 += 8;
  }
  return result;
}

//----- (000003E0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::ExtractPreviousHits(int result, void *a2, unsigned int a3, unsigned int a4, unsigned int *a5, bool a6)
{
  unsigned int v6; // r7
  _DWORD *v7; // r4
  void *v8; // r10
  unsigned int v9; // r6
  int v10; // r2
  int v11; // r11
  __int64 v12; // r8
  CTRPluginFramework::File *v13; // r4
  int v14; // r2
  __int64 v15; // r8
  unsigned int v16; // r3
  int v17; // r6
  unsigned int v18; // r7
  int v19; // r0
  int v20; // r1
  int v21; // r0
  int v22; // ST24_4
  CTRPluginFramework::File *v23; // r9
  int v24; // r1
  int v25; // r3
  unsigned int v26; // r2
  unsigned int v27; // r3
  int v28; // r4
  unsigned int v29; // r7
  int v30; // r0
  int v31; // r1
  unsigned int v32; // r3
  int v33; // [sp+14h] [bp-74h]
  __int64 v34; // [sp+18h] [bp-70h]
  char v35; // [sp+2Ch] [bp-5Ch]
  char v36; // [sp+30h] [bp-58h]
  char v37; // [sp+48h] [bp-40h]

  v6 = a4;
  v7 = (_DWORD *)result;
  v8 = a2;
  v9 = a3;
  if ( a6 )
  {
    v22 = CTRPluginFramework::Search::GetRegionIndex((CTRPluginFramework::Search *)result, a3);
    v33 = *(_DWORD *)(v7[343] + 8 * v22);
    v34 = *(_QWORD *)&v7[6 * v22 + 44] + (v9 - v33) * v6;
    v23 = (CTRPluginFramework::File *)(v7 + 22);
    CTRPluginFramework::File::Seek(v7 + 22, v24, v34, HIDWORD(v34), 1);
    v25 = v7[41] - 1;
    v26 = *a5;
    if ( v25 != v22 || (v27 = v7[6 * v25 + 46], v9 - v33 + v26 <= v27) )
    {
      v32 = v7[3];
      if ( v26 > v32 )
        *a5 = v32;
    }
    else
    {
      *a5 = v27 - v9 + v33;
    }
    result = CTRPluginFramework::File::Read((CTRPluginFramework::File *)(v7 + 22), v8, *a5 * v6);
    v28 = result;
    if ( result )
    {
      v29 = *a5 * v6;
      v30 = CTRPluginFramework::File::GetSize(v23);
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
        &v36,
        "Couldn't read previous results !\nError: %08X\nreadSize: 0x%X\nOffset: 0x%llX\nSize: 0x%llX",
        v28,
        v29,
        v34,
        v30,
        v31);
      goto LABEL_8;
    }
  }
  else
  {
    v10 = *(_DWORD *)(result + 36);
    v11 = result + 24 * v10;
    if ( *(_DWORD *)(v11 + 184) >= v9 && *a5 )
    {
      v12 = *(_QWORD *)(result + 24 * v10 + 24 + 152);
      v13 = (CTRPluginFramework::File *)(result + 88);
      v14 = v12 + a4 * v9;
      v15 = v12 + a4 * v9;
      CTRPluginFramework::File::Seek(result + 88, HIDWORD(v15), v14, HIDWORD(v15), 1);
      v16 = *(_DWORD *)(v11 + 184);
      if ( v9 + *a5 > v16 )
        *a5 = v16 - v9;
      result = CTRPluginFramework::File::Read(v13, v8, *a5 * v6);
      v17 = result;
      if ( result )
      {
        v18 = *a5 * v6;
        v19 = CTRPluginFramework::File::GetSize(v13);
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
          &v36,
          "Couldn't read previous results !\nError: %08X\nreadSize: 0x%X\nOffset: 0x%llX\nSize: 0x%llX",
          v17,
          v18,
          v15,
          v19,
          v20);
LABEL_8:
        v21 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v36, 0, "Error\n\n");
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v37, v21);
        CTRPluginFramework::MessageBox::MessageBox(&v35, &v37, 0);
        CTRPluginFramework::MessageBox::operator()(&v35);
        CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v35);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
        return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
      }
    }
  }
  return result;
}
// E7C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// E80: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// E84: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// E88: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD);
// E8C: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// E94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000620) --------------------------------------------------------
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (__fastcall *a2)(int ***, int, int), int a3, int a4, ...)
{
  int *v4; // r4
  unsigned int v5; // r0
  char *v6; // r6
  int v7; // r0
  int v8; // r3
  int *result; // r0
  int v10; // r3
  int v11; // r2
  int **v12; // [sp+0h] [bp-18h]
  int v13; // [sp+4h] [bp-14h]
  va_list va; // [sp+20h] [bp+8h]

  va_start(va, a4);
  v4 = a1;
  va_copy(v12, va);
  v5 = a2(&v12, a3, a4);
  v6 = (char *)&v12 + v5;
  *v4 = (int)(v4 + 2);
  v13 = v5;
  if ( v5 > 0xF )
  {
    v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v4, &v13, 0);
    v8 = v13;
    *v4 = v7;
    v4[2] = v8;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v4, &v12, v6);
  result = v4;
  v10 = v13;
  v11 = *v4;
  v4[1] = v13;
  *(_BYTE *)(v11 + v10) = 0;
  return result;
}
// E68: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// E98: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000006CC) --------------------------------------------------------
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search::Search(CTRPluginFramework::Search *this, CTRPluginFramework::Search *a2)
{
  CTRPluginFramework::Search *v2; // r6
  CTRPluginFramework::Search *v3; // r4
  int v4; // r3
  unsigned int v5; // r3
  unsigned int v6; // r2
  unsigned int v7; // r2
  int v8; // r0
  int v9; // r0
  int v10; // r5
  int v11; // r1
  int v12; // r0
  char v13; // r3
  char v15; // [sp+8h] [bp-B0h]
  char v16; // [sp+20h] [bp-98h]
  char v17; // [sp+38h] [bp-80h]
  int *v18; // [sp+50h] [bp-68h]
  int v19; // [sp+54h] [bp-64h]
  unsigned int v20; // [sp+58h] [bp-60h]
  int *v21; // [sp+68h] [bp-50h]
  int v22; // [sp+6Ch] [bp-4Ch]
  unsigned int v23; // [sp+70h] [bp-48h]

  v2 = a2;
  *(_DWORD *)this = &off_DA4;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  v3 = this;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = 0;
  CTRPluginFramework::Time::Time((CTRPluginFramework::Search *)((char *)this + 24));
  if ( v2 )
    v4 = *((_DWORD *)v2 + 8);
  else
    v4 = 0;
  if ( v2 )
    ++v4;
  *((_DWORD *)v3 + 8) = v4;
  *((_DWORD *)v3 + 9) = 0;
  *((_DWORD *)v3 + 10) = 0;
  *((_DWORD *)v3 + 11) = 0;
  *((_DWORD *)v3 + 12) = 0;
  *((_DWORD *)v3 + 13) = 0;
  *((_DWORD *)v3 + 14) = 0;
  *((_DWORD *)v3 + 15) = 0;
  *((_DWORD *)v3 + 16) = 0;
  *((_DWORD *)v3 + 17) = 0;
  *((_DWORD *)v3 + 18) = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Search *)((char *)v3 + 80));
  CTRPluginFramework::File::File((CTRPluginFramework::Search *)((char *)v3 + 88));
  memset((char *)v3 + 152, 0, 0x4C0u);
  *((_DWORD *)v3 + 342) = v2;
  *((_DWORD *)v3 + 343) = 0;
  *((_DWORD *)v3 + 344) = 0;
  *((_DWORD *)v3 + 345) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v15, "Search/");
  CTRPluginFramework::Process::GetTitleID(&v15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v18, "-Step");
  __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(
    (int *)&v21,
    (int (__fastcall *)(int ***, int, int))&vsnprintf,
    16,
    (int)"%lu",
    *((_DWORD *)v3 + 8));
  v5 = v19 + v22;
  if ( v18 == (int *)&v20 )
    v6 = 15;
  else
    v6 = v20;
  if ( v5 <= v6 || (v21 != (int *)&v23 ? (v7 = v23) : (v7 = 15), v5 > v7) )
    v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v18, &v21);
  else
    v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v21, 0, &v18);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v17, v8);
  v9 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v17, ".bin");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v16, v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v15, &v16);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v16);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v17);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v21);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v18);
  CTRPluginFramework::Directory::Directory((CTRPluginFramework::Directory *)&v21);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v18, "Search");
  v10 = CTRPluginFramework::Directory::Open(&v21, &v18, 1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v18);
  if ( !v10 )
  {
    v12 = CTRPluginFramework::File::Open((char *)v3 + 88, &v15, 23);
    if ( v12 )
    {
      v13 = *((_BYTE *)v3 + 4);
      *((_DWORD *)v3 + 2) = v12;
      *((_BYTE *)v3 + 4) = v13 | 1;
    }
  }
  *((_DWORD *)v3 + 39) = *((_DWORD *)v3 + 8);
  CTRPluginFramework::Search::WriteHeader(v3, v11);
  CTRPluginFramework::Directory::~Directory((CTRPluginFramework::Directory *)&v21);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
  return v3;
}
// DA4: using guessed type _DWORD (*off_DA4)(CTRPluginFramework::Search *__hidden this);
// E84: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// E94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// EAC: using guessed type int __fastcall CTRPluginFramework::Process::GetTitleID(_DWORD);
// EB0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// EB4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// EB8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// EC0: using guessed type int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD);
// EC4: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);
// ECC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);

//----- (0000090C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Search::RegionIndex,std::allocator<CTRPluginFramework::Search::RegionIndex>>::_M_realloc_insert<CTRPluginFramework::Search::RegionIndex const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r6
  _BYTE *v4; // r9
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r7
  _BYTE *v10; // r8
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r10
  int v14; // r1
  char *v15; // r3
  char *v16; // r5
  int v17; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 3;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 3;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x1FFFFFFF )
  {
    v8 = 0x1FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(8 * v8);
LABEL_8:
  v14 = v11[1];
  v15 = &v13[v12];
  *(_DWORD *)v15 = *v11;
  *((_DWORD *)v15 + 1) = v14;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v16 = &v13[v12 + 8];
  if ( v10 != v4 )
    memcpy(v16, v10, v4 - v10);
  v17 = (int)&v16[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v17;
  v9[2] = &v13[8 * v8];
}

//----- (000009D4) --------------------------------------------------------
void __fastcall CTRPluginFramework::Search::CreateIndexTable(CTRPluginFramework::Search *this, int a2)
{
  unsigned int v2; // r5
  CTRPluginFramework::Search *v3; // r4
  int v4; // r6
  char *v5; // r8
  _DWORD *v6; // r7
  int v7; // r3
  int v8; // r2
  int v9; // r3
  int v10; // r1
  CTRPluginFramework::Search *v11; // [sp+0h] [bp-20h]
  int v12; // [sp+4h] [bp-1Ch]

  v11 = this;
  v12 = a2;
  v2 = 0;
  v3 = this;
  v4 = 0;
  v5 = (char *)this + 184;
  v6 = (_DWORD *)((char *)this + 1372);
  while ( *((_DWORD *)v3 + 41) > v2 )
  {
    v7 = *(_DWORD *)&v5[24 * v2];
    v8 = *((_DWORD *)v3 + 345);
    v11 = (CTRPluginFramework::Search *)v4;
    v4 += v7;
    v9 = *((_DWORD *)v3 + 344);
    v12 = v4;
    if ( v9 == v8 )
    {
      std::vector<CTRPluginFramework::Search::RegionIndex,std::allocator<CTRPluginFramework::Search::RegionIndex>>::_M_realloc_insert<CTRPluginFramework::Search::RegionIndex const&>(
        v6,
        (_BYTE *)v9,
        &v11);
    }
    else
    {
      v10 = v12;
      *(_DWORD *)v9 = v11;
      *(_DWORD *)(v9 + 4) = v10;
      *((_DWORD *)v3 + 344) += 8;
    }
    ++v2;
  }
}

//----- (00000A5C) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Search::Search(_DWORD *a1, int a2, int a3)
{
  int v3; // r8
  int v4; // r6
  _DWORD *v5; // r4
  int v6; // r3
  int v7; // r1
  int v8; // r5
  int v9; // r0
  char v10; // r3
  int v12; // r1
  char *v13; // [sp+0h] [bp-88h]
  int v14; // [sp+4h] [bp-84h]
  char v15; // [sp+8h] [bp-80h]
  char v16; // [sp+18h] [bp-70h]
  char v17; // [sp+30h] [bp-58h]

  v3 = a3;
  v4 = a2;
  *a1 = &off_DA4;
  a1[1] = 0;
  a1[2] = 0;
  v5 = a1;
  a1[4] = 0;
  a1[3] = 0;
  CTRPluginFramework::Time::Time((CTRPluginFramework::Time *)(a1 + 6));
  if ( v4 )
    v6 = *(_DWORD *)(v4 + 32);
  else
    v6 = 0;
  if ( v4 )
    ++v6;
  v5[8] = v6;
  v5[9] = 0;
  v5[10] = 0;
  v5[11] = 0;
  v5[12] = 0;
  v5[13] = 0;
  v5[14] = 0;
  v5[15] = 0;
  v5[16] = 0;
  v5[17] = 0;
  v5[18] = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(v5 + 20));
  CTRPluginFramework::File::File((CTRPluginFramework::File *)(v5 + 22));
  memset(v5 + 38, 0, 0x4C0u);
  v5[343] = 0;
  v5[344] = 0;
  v5[345] = 0;
  v5[342] = v4;
  v7 = *(_DWORD *)(v3 + 4) + 7;
  v13 = &v15;
  v14 = 0;
  v15 = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(&v13, v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v13, "Search/", 7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v13, v3);
  CTRPluginFramework::Directory::Directory((CTRPluginFramework::Directory *)&v17);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v16, "Search");
  v8 = CTRPluginFramework::Directory::Open(&v17, &v16, 1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v16);
  if ( !v8 )
  {
    v9 = CTRPluginFramework::File::Open(v5 + 22, &v13, 1);
    if ( v9 )
    {
      v10 = *((_BYTE *)v5 + 4);
      v5[2] = v9;
      *((_BYTE *)v5 + 4) = v10 | 1;
    }
    else
    {
      CTRPluginFramework::File::Read((CTRPluginFramework::File *)(v5 + 22), v5 + 38, 0x4C0u);
      v5[18] = v5[38];
      v5[8] = v5[39];
      v5[3] = v5[40];
      CTRPluginFramework::Search::CreateIndexTable((CTRPluginFramework::Search *)v5, v12);
    }
  }
  CTRPluginFramework::Directory::~Directory((CTRPluginFramework::Directory *)&v17);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
  return v5;
}
// DA4: using guessed type _DWORD (*off_DA4)(CTRPluginFramework::Search *__hidden this);
// E94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// EC0: using guessed type int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD);
// EC4: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);
// ECC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// EE4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// EE8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD);

//----- (00000C04) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::Cancel(__int64 this, int a2)
{
  int v2; // r4
  int v3; // r3
  int v4; // r1
  CTRPluginFramework::Heap *v5; // r0
  void *v6; // r1
  int v7; // r1
  int v8; // r2
  CTRPluginFramework::Preferences *v9; // r0
  __int64 v11; // [sp+0h] [bp-18h]
  int v12; // [sp+8h] [bp-10h]

  v11 = this;
  v12 = a2;
  v2 = this;
  CTRPluginFramework::Search::WriteResults(this);
  v3 = *(_DWORD *)(v2 + 36);
  v4 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 24 * v3 + 172) = v4;
  *(_DWORD *)(v2 + 164) = v3 + 1;
  CTRPluginFramework::Search::WriteHeader((CTRPluginFramework::Search *)v2, v4);
  CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v11);
  v5 = (CTRPluginFramework::Heap *)CTRPluginFramework::_pool;
  *(_QWORD *)(v2 + 24) = v11;
  CTRPluginFramework::Heap::Free(v5, v6);
  v8 = *(_DWORD *)(v2 + 1368);
  *(_DWORD *)(v2 + 36) = 0;
  if ( v8 )
    *(_DWORD *)(v8 + 36) = 0;
  CTRPluginFramework::_pool = 0;
  CTRPluginFramework::Search::CreateIndexTable((CTRPluginFramework::Search *)v2, v7);
  return CTRPluginFramework::Preferences::LoadBackgrounds(v9);
}
// 4: using guessed type int CTRPluginFramework::_pool;

//----- (00000C84) --------------------------------------------------------
int __fastcall CTRPluginFramework::Search::ExecuteSearch(__int64 this)
{
  int v1; // r2
  _DWORD *v2; // r4
  _DWORD *v3; // r3
  int (*v4)(void); // r3
  int v5; // r5
  int v7; // r1
  void *v8; // r1
  int v9; // r1
  int v10; // r2
  CTRPluginFramework::Preferences *v11; // r0
  __int64 v12; // [sp+0h] [bp-18h]

  v12 = this;
  v1 = *(_DWORD *)(this + 72);
  v2 = (_DWORD *)this;
  v3 = *(_DWORD **)this;
  if ( v1 & 0x80 )
  {
    if ( v1 & 0x40 )
      v4 = (int (*)(void))v3[7];
    else
      v4 = (int (*)(void))v3[6];
  }
  else if ( v1 & 0x100 )
  {
    if ( *(_DWORD *)(*(_DWORD *)(this + 1368) + 72) & 0x40 )
      v4 = (int (*)(void))v3[9];
    else
      v4 = (int (*)(void))v3[8];
  }
  else if ( v1 & 0x40 )
  {
    v4 = (int (*)(void))v3[11];
  }
  else
  {
    v4 = (int (*)(void))v3[10];
  }
  v5 = v4();
  (*(void (__fastcall **)(_DWORD *))(*v2 + 16))(v2);
  if ( !v5 )
  {
    if ( v2[16] >= (unsigned int)(v2[15] - 4) )
    {
      CTRPluginFramework::Search::WriteResults((int)v2);
      return v5;
    }
    return 0;
  }
  CTRPluginFramework::Search::WriteResults((int)v2);
  v5 = (*(int (__fastcall **)(_DWORD *))(*v2 + 20))(v2);
  if ( !v5 )
    return 0;
  CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v12);
  *((_QWORD *)v2 + 3) = v12;
  CTRPluginFramework::Search::WriteHeader((CTRPluginFramework::Search *)v2, v7);
  CTRPluginFramework::Heap::Free((CTRPluginFramework::Heap *)CTRPluginFramework::_pool, v8);
  v10 = v2[342];
  v2[9] = 0;
  if ( v10 )
    *(_DWORD *)(v10 + 36) = 0;
  CTRPluginFramework::_pool = 0;
  CTRPluginFramework::Search::CreateIndexTable((CTRPluginFramework::Search *)v2, v9);
  CTRPluginFramework::Preferences::LoadBackgrounds(v11);
  return v5;
}
// 4: using guessed type int CTRPluginFramework::_pool;

// ALL OK, 18 function(s) have been successfully decompiled
