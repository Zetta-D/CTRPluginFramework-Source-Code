/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

signed int __fastcall CTRPluginFramework::Search32::FirstSearchUnknown(CTRPluginFramework::Search32 *this);
signed int __fastcall CTRPluginFramework::Search32::FirstSearchSpecified(CTRPluginFramework::Search32 *this);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
signed int __fastcall CTRPluginFramework::Search32::SecondSearchUnknown(CTRPluginFramework::Search32 *this, unsigned int a2);
signed int __fastcall CTRPluginFramework::Search32::SecondSearchSpecified(CTRPluginFramework::Search32 *this, unsigned int a2);
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search::~Search(CTRPluginFramework::Search *this);
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search32::~Search32(CTRPluginFramework::Search32 *this, void *a2);
CTRPluginFramework::Search32 *__fastcall CTRPluginFramework::Search32::~Search32(CTRPluginFramework::Search32 *this, void *a2);
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search::~Search(CTRPluginFramework::Search *this);
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search32::Search32(CTRPluginFramework::Search *a1, int a2);
_DWORD *__fastcall CTRPluginFramework::Search32::Search32(_DWORD *a1);
_QWORD *__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(_QWORD *result);
_DWORD *__fastcall std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::vector(_DWORD *a1, unsigned int a2);
char *__fastcall std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::_M_default_append(char *result, unsigned int a2);
char *__fastcall std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::resize(char *result, unsigned int a2);
signed int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecified(CTRPluginFramework::Search32 *this);
signed int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknown(CTRPluginFramework::Search32 *this);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(char **a1, char *a2, int a3);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(int a1, int a2);
int __fastcall std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32 *,unsigned int>(int a1, int a2);
void __fastcall std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::_M_default_append(int a1, unsigned int a2);
void __fastcall std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::resize(_DWORD *a1, unsigned int a2);
int __fastcall std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32WithOld *,unsigned int>(int a1, int a2);
void __fastcall std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::_M_default_append(int a1, unsigned int a2);
void __fastcall std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::resize(_DWORD *a1, unsigned int a2);
void __fastcall CTRPluginFramework::Search32::ReadResults(CTRPluginFramework::Search *a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5);
// int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedU8(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedU16(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedU32(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedFloat(_DWORD, _DWORD, _DWORD, _DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Heap::Alloc(CTRPluginFramework::Heap *__hidden this, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Search::ExtractPreviousHits(CTRPluginFramework::Search *__hidden this, void *, unsigned int, unsigned int, unsigned int *, bool); idb
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// _DWORD __cdecl CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *__hidden this, void *); idb
// int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU8(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU16(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU32(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownFloat(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU8(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU16(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU32(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedFloat(_DWORD, _DWORD, _DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Search::Search(CTRPluginFramework::Search *__hidden this, CTRPluginFramework::Search *); idb
// _DWORD CTRPluginFramework::Heap::SpaceFree(CTRPluginFramework::Heap *__hidden this); idb
// _DWORD CTRPluginFramework::Preferences::UnloadBackgrounds(CTRPluginFramework::Preferences *__hidden this); idb
// int __fastcall svcFlushProcessDataCache(_DWORD); weak
// _DWORD CTRPluginFramework::File::Tell(CTRPluginFramework::File *__hidden this); idb
// _DWORD CTRPluginFramework::Search::GetHeader(CTRPluginFramework::Search *__hidden this); idb
// int __fastcall CTRPluginFramework::Search::GetTotalResults(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Process::CheckRegion(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned int *, unsigned int); idb
// int CTRPluginFramework::Search::Search(void); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU8(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU16(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU32(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedFloat(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU8(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU16(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU32(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownFloat(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD CTRPluginFramework::Search::GetType(CTRPluginFramework::Search *__hidden this); idb
// int __fastcall ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(_DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_1; // weak
_DWORD (*off_163C)(CTRPluginFramework::Search *__hidden this) = &CTRPluginFramework::Search::Cancel; // weak
_UNKNOWN unk_16B0; // weak
// extern _UNKNOWN CTRPluginFramework::_pool; weak
// extern _UNKNOWN `vtable for'CTRPluginFramework::Search; weak
// extern _UNKNOWN CTRPluginFramework::ProcessImpl::ProcessHandle; weak


//----- (00000004) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Search32::FirstSearchUnknown(CTRPluginFramework::Search32 *this)
{
  unsigned int v1; // r3
  int v2; // r1
  bool v3; // zf
  unsigned int v4; // r5
  _DWORD *v6; // r6
  _DWORD *v7; // r3

  v1 = *((_DWORD *)this + 10);
  v2 = *((_DWORD *)this + 18) & 0x3F;
  if ( *((_DWORD *)this + 14) < v1 )
    *((_DWORD *)this + 14) = v1;
  if ( v2 == 1 || v2 == 2 )
  {
    v4 = v2;
  }
  else
  {
    v3 = v2 == 16;
    if ( v2 != 16 )
      v3 = v2 == 4;
    if ( !v3 )
      return 1;
    v4 = 4;
  }
  v6 = (_DWORD *)(CTRPluginFramework::_pool + 4 * *((_DWORD *)this + 16));
  while ( 1 )
  {
    v7 = (_DWORD *)*((_DWORD *)this + 14);
    if ( (unsigned int)v7 >= *((_DWORD *)this + 11) )
      break;
    if ( *((_DWORD *)this + 16) >= *((_DWORD *)this + 15) )
      return 0;
    *v6 = *v7;
    ++v6;
    ++*((_DWORD *)this + 16);
    *((_DWORD *)this + 14) += 4;
    *((_DWORD *)this + 3) += 4 / v4;
  }
  return 1;
}

//----- (000000C8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Search32::FirstSearchSpecified(CTRPluginFramework::Search32 *this)
{
  unsigned int v1; // r3
  CTRPluginFramework::Search32 *v2; // r4
  unsigned int v3; // r1
  int v4; // r2
  int v5; // r0
  int v6; // r3
  int v7; // r2
  int v8; // r0

  v1 = *((_DWORD *)this + 10);
  v2 = this;
  if ( *((_DWORD *)this + 14) < v1 )
    *((_DWORD *)this + 14) = v1;
  v3 = *((_DWORD *)this + 14) + 0x40000;
  if ( v3 >= *((_DWORD *)this + 11) )
    v3 = *((_DWORD *)this + 11);
  v4 = *((_DWORD *)this + 16);
  v5 = *((_DWORD *)this + 18);
  v6 = CTRPluginFramework::_pool + 8 * v4;
  v7 = v5 & 0x3FE00;
  v8 = v5 & 0x3F;
  switch ( v8 )
  {
    case 1:
      CTRPluginFramework::Search32::FirstSearchSpecifiedU8(v2, v3, v7, v6);
      return *((_DWORD *)v2 + 14) >= *((_DWORD *)v2 + 11);
    case 2:
      CTRPluginFramework::Search32::FirstSearchSpecifiedU16(v2, v3, v7, v6);
      return *((_DWORD *)v2 + 14) >= *((_DWORD *)v2 + 11);
    case 4:
      CTRPluginFramework::Search32::FirstSearchSpecifiedU32(v2, v3, v7, v6);
      return *((_DWORD *)v2 + 14) >= *((_DWORD *)v2 + 11);
    case 16:
      CTRPluginFramework::Search32::FirstSearchSpecifiedFloat(v2, v3, v7, v6);
      return *((_DWORD *)v2 + 14) >= *((_DWORD *)v2 + 11);
  }
  return 1;
}
// 16C0: using guessed type int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedU8(_DWORD, _DWORD, _DWORD, _DWORD);
// 16C4: using guessed type int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedU16(_DWORD, _DWORD, _DWORD, _DWORD);
// 16C8: using guessed type int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedU32(_DWORD, _DWORD, _DWORD, _DWORD);
// 16CC: using guessed type int __fastcall CTRPluginFramework::Search32::FirstSearchSpecifiedFloat(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000188) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 16D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 16D8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000200) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Search32::SecondSearchUnknown(CTRPluginFramework::Search32 *this, unsigned int a2)
{
  unsigned int v2; // r3
  unsigned int v3; // r5
  unsigned int v4; // r5
  CTRPluginFramework::Search32 *v5; // r6
  CTRPluginFramework::Heap *v6; // r0
  int v7; // r7
  int v8; // r7
  char *v9; // r2
  CTRPluginFramework::Heap *v10; // r1
  unsigned int v11; // r3
  signed int v12; // r0
  unsigned int v13; // r4
  char *v14; // r4
  int v15; // r2
  unsigned __int8 v16; // cf
  unsigned int v17; // r3
  int v18; // r5
  CTRPluginFramework::Heap *v19; // r0
  int v20; // r12
  CTRPluginFramework::Heap *v21; // r8
  CTRPluginFramework::Heap *v22; // r3
  CTRPluginFramework::Heap *v23; // r2
  int v24; // r0
  bool v25; // zf
  _DWORD *v26; // r2
  int v27; // r4
  int v28; // r2
  int v29; // r3
  _BOOL4 v30; // r4
  unsigned int v32; // [sp+8h] [bp-28h]
  CTRPluginFramework::Heap *v33; // [sp+Ch] [bp-24h]
  char *v34; // [sp+10h] [bp-20h]
  CTRPluginFramework::Heap *v35; // [sp+14h] [bp-1Ch]

  v2 = *((_DWORD *)this + 14);
  v3 = *((_DWORD *)this + 11);
  if ( v2 >= v3 )
    return 1;
  v4 = v3 - v2;
  if ( v4 >= 0x10000 )
    v4 = 0x10000;
  v5 = this;
  v32 = v4;
  v34 = 0;
  v6 = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(4 * v4), a2);
  v7 = (int)v6 + 4 * v4;
  v33 = v6;
  v35 = (CTRPluginFramework::Heap *)((char *)v6 + 4 * v4);
  do
  {
    --v4;
    *(_DWORD *)v6 = 0;
    v6 = (CTRPluginFramework::Heap *)((char *)v6 + 4);
  }
  while ( v4 );
  v34 = (char *)v7;
  v8 = CTRPluginFramework::_pool + 12 * *((_DWORD *)v5 + 16);
  CTRPluginFramework::Search::ExtractPreviousHits(
    *((CTRPluginFramework::Search **)v5 + 342),
    (void *)v33,
    *((_DWORD *)v5 + 14),
    4u,
    &v32,
    0);
  v9 = v34;
  v10 = v33;
  v11 = (v34 - (char *)v33) >> 2;
  if ( v32 <= v11 )
  {
    if ( v32 < v11 )
    {
      v14 = (char *)v33 + 4 * v32;
      if ( v34 != v14 )
        goto LABEL_10;
    }
  }
  else
  {
    v12 = 0x3FFFFFFF;
    v13 = v32 - v11;
    v10 = (CTRPluginFramework::Heap *)(v35 - (CTRPluginFramework::Heap *)v34);
    if ( v32 - v11 <= (v35 - (CTRPluginFramework::Heap *)v34) >> 2 )
    {
      v14 = &v34[4 * v13];
      do
      {
        *(_DWORD *)v9 = 0;
        v9 += 4;
      }
      while ( v14 != v9 );
LABEL_10:
      v34 = v14;
      goto LABEL_31;
    }
    if ( v13 > 0x3FFFFFFF - v11 )
      std::__throw_length_error("vector::_M_default_append");
    if ( v11 < v13 )
      v15 = v32 - v11;
    else
      v15 = (v34 - (char *)v33) >> 2;
    v16 = __CFADD__(v11, v15);
    v17 = v11 + v15;
    if ( !v16 && v17 < 0x3FFFFFFF )
      v12 = v17;
    v18 = 4 * v12;
    v19 = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Alloc(
                                        (CTRPluginFramework::Heap *)(4 * v12),
                                        (unsigned int)v10);
    v21 = v19;
    v10 = v33;
    v22 = v19;
    v23 = v33;
    v24 = (int)v34;
    while ( v23 != (CTRPluginFramework::Heap *)v24 )
    {
      v25 = v22 == 0;
      if ( v22 )
        v20 = *(_DWORD *)v23;
      v22 = (CTRPluginFramework::Heap *)((char *)v22 + 4);
      if ( !v25 )
        *((_DWORD *)v22 - 1) = v20;
      v23 = (CTRPluginFramework::Heap *)((char *)v23 + 4);
    }
    v26 = (_DWORD *)((char *)v21 + v23 - v10);
    v27 = (int)&v26[v13];
    do
    {
      *v26 = 0;
      ++v26;
    }
    while ( (_DWORD *)v27 != v26 );
    if ( v33 )
      CTRPluginFramework::Heap::Free(v33, (void *)v10);
    v33 = v21;
    v34 = (char *)v27;
    v35 = (CTRPluginFramework::Heap *)((char *)v21 + v18);
  }
LABEL_31:
  v28 = *((_DWORD *)v5 + 18) & 0x3FE00;
  v29 = *((_DWORD *)v5 + 18) & 0x3F;
  switch ( v29 )
  {
    case 1:
      CTRPluginFramework::Search32::SecondSearchUnknownU8(v5, &v33, v28, v8);
LABEL_33:
      v30 = *((_DWORD *)v5 + 14) >= *((_DWORD *)v5 + 11);
      goto LABEL_34;
    case 2:
      CTRPluginFramework::Search32::SecondSearchUnknownU16(v5, &v33, v28, v8);
      goto LABEL_33;
    case 4:
      CTRPluginFramework::Search32::SecondSearchUnknownU32(v5, &v33, v28, v8);
      goto LABEL_33;
    case 16:
      CTRPluginFramework::Search32::SecondSearchUnknownFloat(v5, &v33, v28, v8);
      goto LABEL_33;
  }
  v30 = 1;
LABEL_34:
  if ( v33 )
    CTRPluginFramework::Heap::Free(v33, (void *)v10);
  return v30;
}
// 16EC: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU8(_DWORD, _DWORD, _DWORD, _DWORD);
// 16F0: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU16(_DWORD, _DWORD, _DWORD, _DWORD);
// 16F4: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownU32(_DWORD, _DWORD, _DWORD, _DWORD);
// 16F8: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchUnknownFloat(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000468) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Search32::SecondSearchSpecified(CTRPluginFramework::Search32 *this, unsigned int a2)
{
  unsigned int v2; // r3
  unsigned int v3; // r5
  unsigned int v4; // r5
  CTRPluginFramework::Search32 *v5; // r6
  CTRPluginFramework::Heap *v6; // r0
  int v7; // r7
  int v8; // r0
  int v9; // r7
  char *v10; // r2
  unsigned int v11; // r1
  unsigned int v12; // r3
  unsigned int v13; // r4
  char *v14; // r4
  int v15; // r2
  unsigned __int8 v16; // cf
  unsigned int v17; // r3
  int v18; // r5
  CTRPluginFramework::Heap *v19; // r0
  int v20; // r3
  CTRPluginFramework::Heap *v21; // r8
  CTRPluginFramework::Heap *v22; // r12
  int v23; // r2
  bool v24; // zf
  CTRPluginFramework::Heap **v25; // lr
  _DWORD *v26; // r2
  int v27; // r4
  int v28; // r2
  int v29; // r3
  _BOOL4 v30; // r4
  unsigned int v32; // [sp+8h] [bp-28h]
  CTRPluginFramework::Heap *v33; // [sp+Ch] [bp-24h]
  char *v34; // [sp+10h] [bp-20h]
  CTRPluginFramework::Heap *v35; // [sp+14h] [bp-1Ch]

  v2 = *((_DWORD *)this + 14);
  v3 = *((_DWORD *)this + 11);
  if ( v2 >= v3 )
    return 1;
  v4 = v3 - v2;
  if ( v4 > 0x61A7 )
    v4 = 25000;
  v5 = this;
  v32 = v4;
  v34 = 0;
  v6 = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(8 * v4), a2);
  v7 = (int)v6 + 8 * v4;
  v33 = v6;
  v35 = (CTRPluginFramework::Heap *)((char *)v6 + 8 * v4);
  v8 = (int)v6 + 8;
  do
  {
    --v4;
    *(_DWORD *)(v8 - 8) = 0;
    *(_DWORD *)(v8 - 4) = 0;
    v8 += 8;
  }
  while ( v4 );
  v34 = (char *)v7;
  v9 = CTRPluginFramework::_pool + 12 * *((_DWORD *)v5 + 16);
  CTRPluginFramework::Search::ExtractPreviousHits(
    *((CTRPluginFramework::Search **)v5 + 342),
    (void *)v33,
    *((_DWORD *)v5 + 14),
    8u,
    &v32,
    0);
  v10 = v34;
  v11 = (unsigned int)v33;
  v12 = (v34 - (char *)v33) >> 3;
  if ( v32 <= v12 )
  {
    if ( v32 < v12 )
    {
      v14 = (char *)v33 + 8 * v32;
      if ( v34 != v14 )
        goto LABEL_10;
    }
  }
  else
  {
    v11 = 0x1FFFFFFF;
    v13 = v32 - v12;
    if ( v32 - v12 <= (v35 - (CTRPluginFramework::Heap *)v34) >> 3 )
    {
      v14 = &v34[8 * v13];
      do
      {
        *(_DWORD *)v10 = 0;
        *((_DWORD *)v10 + 1) = 0;
        v10 += 8;
      }
      while ( v14 != v10 );
LABEL_10:
      v34 = v14;
      goto LABEL_31;
    }
    if ( v13 > 0x1FFFFFFF - v12 )
      std::__throw_length_error("vector::_M_default_append");
    if ( v12 < v13 )
      v15 = v32 - v12;
    else
      v15 = (v34 - (char *)v33) >> 3;
    v16 = __CFADD__(v12, v15);
    v17 = v12 + v15;
    if ( !v16 && v17 < 0x1FFFFFFF )
      v11 = v17;
    v18 = 8 * v11;
    v19 = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(8 * v11), v11);
    v20 = 0;
    v21 = v19;
    v22 = v33;
    v23 = (int)v34;
    while ( 1 )
    {
      v11 = (unsigned int)v22 + v20;
      if ( (CTRPluginFramework::Heap *)v23 == (CTRPluginFramework::Heap *)((char *)v22 + v20) )
        break;
      v25 = (CTRPluginFramework::Heap **)((char *)v21 + v20);
      v24 = (CTRPluginFramework::Heap *)((char *)v21 + v20) == 0;
      if ( (CTRPluginFramework::Heap *)((char *)v21 + v20) )
      {
        v19 = *(CTRPluginFramework::Heap **)v11;
        v11 = *(_DWORD *)(v11 + 4);
      }
      v20 += 8;
      if ( !v24 )
      {
        *v25 = v19;
        v25[1] = (CTRPluginFramework::Heap *)v11;
      }
    }
    v26 = (_DWORD *)((char *)v21 + v23 - (_DWORD)v22);
    v27 = (int)&v26[2 * v13];
    do
    {
      *v26 = 0;
      v26[1] = 0;
      v26 += 2;
    }
    while ( (_DWORD *)v27 != v26 );
    if ( v33 )
      CTRPluginFramework::Heap::Free(v33, (void *)v11);
    v33 = v21;
    v34 = (char *)v27;
    v35 = (CTRPluginFramework::Heap *)((char *)v21 + v18);
  }
LABEL_31:
  v28 = *((_DWORD *)v5 + 18) & 0x3FE00;
  v29 = *((_DWORD *)v5 + 18) & 0x3F;
  switch ( v29 )
  {
    case 1:
      CTRPluginFramework::Search32::SecondSearchSpecifiedU8(v5, &v33, v28, v9);
LABEL_33:
      v30 = *((_DWORD *)v5 + 14) >= *((_DWORD *)v5 + 11);
      goto LABEL_34;
    case 2:
      CTRPluginFramework::Search32::SecondSearchSpecifiedU16(v5, &v33, v28, v9);
      goto LABEL_33;
    case 4:
      CTRPluginFramework::Search32::SecondSearchSpecifiedU32(v5, &v33, v28, v9);
      goto LABEL_33;
    case 16:
      CTRPluginFramework::Search32::SecondSearchSpecifiedFloat(v5, &v33, v28, v9);
      goto LABEL_33;
  }
  v30 = 1;
LABEL_34:
  if ( v33 )
    CTRPluginFramework::Heap::Free(v33, (void *)v11);
  return v30;
}
// 16FC: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU8(_DWORD, _DWORD, _DWORD, _DWORD);
// 1700: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU16(_DWORD, _DWORD, _DWORD, _DWORD);
// 1704: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedU32(_DWORD, _DWORD, _DWORD, _DWORD);
// 1708: using guessed type int __fastcall CTRPluginFramework::Search32::SecondSearchSpecifiedFloat(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000006F8) --------------------------------------------------------
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search::~Search(CTRPluginFramework::Search *this)
{
  CTRPluginFramework::Search *v1; // r4
  void *v2; // r0

  v1 = this;
  *(_DWORD *)this = (char *)&`vtable for'CTRPluginFramework::Search + 8;
  v2 = (void *)*((_DWORD *)this + 343);
  if ( v2 )
    operator delete(v2);
  CTRPluginFramework::File::Close((CTRPluginFramework::Search *)((char *)v1 + 88));
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::Search *)((char *)v1 + 136));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 88);
  return v1;
}
// 1718: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000740) --------------------------------------------------------
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search32::~Search32(CTRPluginFramework::Search32 *this, void *a2)
{
  CTRPluginFramework::Search *v2; // r4

  *(_DWORD *)this = &off_163C;
  v2 = this;
  if ( CTRPluginFramework::_pool )
  {
    CTRPluginFramework::Heap::Free(CTRPluginFramework::_pool, a2);
    CTRPluginFramework::_pool = 0;
  }
  CTRPluginFramework::Search::~Search(v2);
  return v2;
}
// 163C: using guessed type _DWORD (*off_163C)(CTRPluginFramework::Search *__hidden this);

//----- (00000784) --------------------------------------------------------
CTRPluginFramework::Search32 *__fastcall CTRPluginFramework::Search32::~Search32(CTRPluginFramework::Search32 *this, void *a2)
{
  CTRPluginFramework::Search32 *v2; // r4

  v2 = this;
  CTRPluginFramework::Search32::~Search32(this, a2);
  operator delete((void *)v2);
  return v2;
}

//----- (000007A0) --------------------------------------------------------
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search::~Search(CTRPluginFramework::Search *this)
{
  CTRPluginFramework::Search *v1; // r4

  v1 = this;
  CTRPluginFramework::Search::~Search(this);
  operator delete((void *)v1);
  return v1;
}

//----- (000007BC) --------------------------------------------------------
CTRPluginFramework::Search *__fastcall CTRPluginFramework::Search32::Search32(CTRPluginFramework::Search *a1, int a2)
{
  CTRPluginFramework::Search *v2; // r4
  int v3; // r5
  CTRPluginFramework::Heap *v4; // r0
  CTRPluginFramework::Preferences *v5; // r0
  unsigned int v6; // r1
  CTRPluginFramework::Heap *v7; // r0
  int v8; // r6
  bool v9; // zf
  unsigned int v10; // r1
  int v11; // r2
  int v12; // r3
  int v13; // r2
  int v14; // r0
  __int64 v15; // r0
  int v16; // r3
  int v18; // r8
  int i; // r5
  int v20; // r9
  int v21; // r10
  unsigned int v22; // r0
  unsigned int v23; // r9
  int v24; // r3
  int v25; // r1
  int v26; // r12
  int v27; // lr
  _DWORD *v28; // r3
  _DWORD *v29; // r3
  int v30; // r9
  unsigned int v31; // [sp+4h] [bp-24h]

  v31 = a2;
  v2 = a1;
  v3 = a2;
  v4 = (CTRPluginFramework::Heap *)CTRPluginFramework::Search::Search(a1, *(CTRPluginFramework::Search **)(a2 + 24));
  *(_DWORD *)v2 = &off_163C;
  v5 = (CTRPluginFramework::Preferences *)CTRPluginFramework::Heap::SpaceFree(v4);
  if ( (unsigned int)v5 > 0xAFFFF
    || (v7 = (CTRPluginFramework::Heap *)CTRPluginFramework::Preferences::UnloadBackgrounds(v5),
        CTRPluginFramework::Heap::SpaceFree(v7) > 0xAFFFFu) )
  {
    CTRPluginFramework::_pool = CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)0x60000, v6);
    *((_DWORD *)v2 + 346) = *(_DWORD *)(v3 + 4);
    v8 = *(_DWORD *)v3;
    v9 = (*(_DWORD *)v3 & 0x80) == 0;
    *((_DWORD *)v2 + 18) = *(_DWORD *)v3;
    if ( v9 )
    {
      v10 = 12;
    }
    else if ( v8 & 0x40 )
    {
      v10 = 4;
    }
    else
    {
      v10 = 8;
    }
    *((_DWORD *)v2 + 17) = v10;
    *((_DWORD *)v2 + 15) = 0x60000 / v10 - 1;
    *((_DWORD *)v2 + 38) = v8;
    if ( *(_BYTE *)(v3 + 8) )
    {
      *((_DWORD *)v2 + 41) = 0;
      v18 = *(_DWORD *)(v3 + 16);
      for ( i = *(_DWORD *)(v3 + 12) + 8; v18 != i - 8; i += 8 )
      {
        v20 = *(_DWORD *)(i - 8);
        v21 = *(_DWORD *)(i - 4);
        if ( CTRPluginFramework::Process::CheckRegion(
               *(CTRPluginFramework::Process **)(i - 8),
               (unsigned int)&v31,
               (unsigned int *)&unk_1,
               i - 8) )
        {
          v22 = v21 - v20;
          v23 = v31;
          v24 = *((_DWORD *)v2 + 41);
          v25 = *(_DWORD *)(i - 8);
          v26 = v24 + 1;
          v27 = *((_DWORD *)v2 + 13);
          if ( v31 >= v22 )
          {
            v29 = (_DWORD *)((char *)v2 + 24 * v24);
            v30 = *(_DWORD *)(i - 4);
            v29[42] = v25;
            v29[43] = v30;
            *((_QWORD *)v2 + 3 * v26 + 19) = 0LL;
            v29[46] = 0;
            *((_DWORD *)v2 + 41) = v26;
            *((_DWORD *)v2 + 13) = v22 + v27;
          }
          else
          {
            v28 = (_DWORD *)((char *)v2 + 24 * v24);
            v28[42] = v25;
            v28[43] = v23 + v25;
            *((_QWORD *)v2 + 3 * v26 + 19) = 0LL;
            v28[46] = 0;
            *((_DWORD *)v2 + 41) = v26;
            *((_DWORD *)v2 + 13) = v23 + v27;
          }
        }
      }
      v13 = *((_DWORD *)v2 + 43);
      *((_DWORD *)v2 + 10) = *((_DWORD *)v2 + 42);
    }
    else
    {
      *((_DWORD *)v2 + 41) = 1;
      v11 = **(_DWORD **)(v3 + 12);
      *((_DWORD *)v2 + 42) = v11;
      v12 = *(_DWORD *)(*(_DWORD *)(v3 + 12) + 4);
      *((_DWORD *)v2 + 43) = v12;
      *((_DWORD *)v2 + 13) = v12 - v11;
      *((_DWORD *)v2 + 10) = **(_DWORD **)(v3 + 12);
      v13 = *(_DWORD *)(*(_DWORD *)(v3 + 12) + 4);
    }
    v14 = CTRPluginFramework::ProcessImpl::ProcessHandle;
    *((_DWORD *)v2 + 11) = v13 - 1;
    svcFlushProcessDataCache(v14);
    LODWORD(v15) = CTRPluginFramework::File::Tell((CTRPluginFramework::Search *)((char *)v2 + 88));
    v16 = *((_DWORD *)v2 + 18);
    *((_QWORD *)v2 + 22) = v15;
    if ( !(v16 & 0x80) )
    {
      *((_DWORD *)v2 + 11) = *(_DWORD *)(CTRPluginFramework::Search::GetHeader(*((CTRPluginFramework::Search **)v2 + 342))
                                       + 32);
      *((_DWORD *)v2 + 13) = CTRPluginFramework::Search::GetTotalResults(*((_DWORD *)v2 + 342), (char *)v2 + 152);
    }
  }
  else
  {
    *((_BYTE *)v2 + 4) |= 2u;
  }
  return v2;
}
// 163C: using guessed type _DWORD (*off_163C)(CTRPluginFramework::Search *__hidden this);
// 172C: using guessed type int __fastcall svcFlushProcessDataCache(_DWORD);
// 1738: using guessed type int __fastcall CTRPluginFramework::Search::GetTotalResults(_DWORD, _DWORD);

//----- (000009E4) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Search32::Search32(_DWORD *a1)
{
  _DWORD *v1; // r4
  _DWORD *result; // r0

  v1 = a1;
  CTRPluginFramework::Search::Search();
  result = v1;
  *v1 = &off_163C;
  return result;
}
// 163C: using guessed type _DWORD (*off_163C)(CTRPluginFramework::Search *__hidden this);
// 1744: using guessed type int CTRPluginFramework::Search::Search(void);

//----- (00000A04) --------------------------------------------------------
_QWORD *__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(_QWORD *result)
{
  __int64 v1; // r6
  _QWORD *v2; // r4
  int v3; // r5
  int v4; // r0

  v1 = *result;
  if ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = result;
    v3 = v1;
    do
    {
      v4 = v3;
      v3 += 24;
      result = (_QWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4);
    }
    while ( HIDWORD(v1) != v3 );
    *((_DWORD *)v2 + 1) = v1;
  }
  return result;
}
// 1718: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000A38) --------------------------------------------------------
_DWORD *__fastcall std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::vector(_DWORD *a1, unsigned int a2)
{
  _DWORD *v2; // r4
  unsigned int v3; // r6
  int v4; // r5
  int v5; // r0
  int v6; // r5

  v2 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = a2;
  v4 = 12 * a2;
  if ( a2 )
    v5 = CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(12 * a2), a2);
  else
    v5 = 0;
  v6 = v5 + v4;
  *v2 = v5;
  v2[1] = v5;
  v2[2] = v6;
  while ( 1 )
  {
    v5 += 12;
    if ( !v3 )
      break;
    *(_DWORD *)(v5 - 12) = 0;
    *(_DWORD *)(v5 - 8) = 0;
    *(_DWORD *)(v5 - 4) = 0;
    --v3;
  }
  v2[1] = v6;
  return v2;
}

//----- (00000AB0) --------------------------------------------------------
char *__fastcall std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::_M_default_append(char *result, unsigned int a2)
{
  unsigned int v2; // r4
  int v3; // r2
  int v4; // r3
  char **v5; // r5
  unsigned int v6; // r3
  unsigned int v7; // r1
  unsigned int v8; // r3
  int v9; // r7
  char *v10; // r0
  char *v11; // r1
  int v12; // r12
  char *v13; // r6
  char *v14; // r8
  char *v15; // r3
  int *v16; // r2
  bool v17; // zf
  char **v18; // lr
  unsigned int v19; // r2
  char *v20; // r1
  int v21; // r3
  int v22; // r4

  v2 = a2;
  if ( a2 )
  {
    v3 = *((_DWORD *)result + 1);
    if ( a2 > -1431655765 * ((*((_DWORD *)result + 2) - v3) >> 2) )
    {
      v5 = (char **)result;
      v6 = -1431655765 * ((v3 - *(_DWORD *)result) >> 2);
      v7 = 357913941 - v6;
      if ( 357913941 - v6 < v2 )
        std::__throw_length_error("vector::_M_default_append");
      if ( v2 < v6 )
        v8 = 1431655766 * ((v3 - *(_DWORD *)result) >> 2);
      else
        v8 = v6 + v2;
      if ( v8 >= 0x15555555 )
        v8 = 357913941;
      v9 = 12 * v8;
      v10 = (char *)CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(12 * v8), v7);
      v12 = 0;
      v13 = v10;
      v14 = *v5;
      v15 = v5[1];
      while ( 1 )
      {
        v16 = (int *)&v14[v12];
        if ( v15 == &v14[v12] )
          break;
        v18 = (char **)&v13[v12];
        v17 = &v13[v12] == 0;
        if ( &v13[v12] )
        {
          v10 = (char *)*v16;
          v11 = (char *)v16[1];
          v16 = (int *)v16[2];
        }
        v12 += 12;
        if ( !v17 )
        {
          *v18 = v10;
          v18[1] = v11;
          v18[2] = (char *)v16;
        }
      }
      v19 = v2;
      v20 = &v13[12 * (715827883 * ((unsigned int)(v15 - v14) >> 2) & 0x3FFFFFFF)];
      v21 = (int)(v20 + 12);
      do
      {
        --v19;
        *(_DWORD *)(v21 - 12) = 0;
        *(_DWORD *)(v21 - 8) = 0;
        *(_DWORD *)(v21 - 4) = 0;
        v21 += 12;
      }
      while ( v19 );
      result = *v5;
      v22 = (int)&v20[12 * v2];
      if ( *v5 )
        result = (char *)CTRPluginFramework::Heap::Free((CTRPluginFramework::Heap *)result, v20);
      *v5 = v13;
      v5[1] = (char *)v22;
      v5[2] = &v13[v9];
    }
    else
    {
      v4 = v3 + 12;
      do
      {
        --a2;
        *(_DWORD *)(v4 - 12) = 0;
        *(_DWORD *)(v4 - 8) = 0;
        *(_DWORD *)(v4 - 4) = 0;
        v4 += 12;
      }
      while ( a2 );
      *((_DWORD *)result + 1) = v3 + 12 * v2;
    }
  }
  return result;
}

//----- (00000C08) --------------------------------------------------------
char *__fastcall std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::resize(char *result, unsigned int a2)
{
  int v2; // lr
  unsigned int v3; // r3
  int v4; // r1

  v2 = *((_DWORD *)result + 1);
  v3 = -1431655765 * ((v2 - *(_DWORD *)result) >> 2);
  if ( a2 > v3 )
    return std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::_M_default_append(
             result,
             a2 - v3);
  if ( a2 < v3 )
  {
    v4 = *(_DWORD *)result + 12 * a2;
    if ( v4 != v2 )
      *((_DWORD *)result + 1) = v4;
  }
  return result;
}

//----- (00000C54) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecified(CTRPluginFramework::Search32 *this)
{
  unsigned int v1; // r3
  unsigned int v2; // r1
  _BOOL4 v3; // r4
  unsigned int v4; // r1
  CTRPluginFramework::Search32 *v5; // r4
  int v6; // r5
  void *v7; // r1
  int v8; // r2
  int v9; // r3
  unsigned int v11; // [sp+10h] [bp-20h]
  CTRPluginFramework::Heap *v12; // [sp+14h] [bp-1Ch]

  v1 = *((_DWORD *)this + 14);
  v2 = *((_DWORD *)this + 11);
  if ( v1 >= v2 )
    return 1;
  v4 = v2 - v1;
  if ( v4 > 0x61A7 )
    v4 = 25000;
  v5 = this;
  v11 = v4;
  std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::vector(&v12, v4);
  v6 = CTRPluginFramework::_pool + 12 * *((_DWORD *)v5 + 16);
  CTRPluginFramework::Search::ExtractPreviousHits(
    *((CTRPluginFramework::Search **)v5 + 342),
    (void *)v12,
    *((_DWORD *)v5 + 14),
    0xCu,
    &v11,
    0);
  std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::resize(
    (char *)&v12,
    v11);
  v8 = *((_DWORD *)v5 + 18) & 0x3FE00;
  v9 = *((_DWORD *)v5 + 18) & 0x3F;
  switch ( v9 )
  {
    case 1:
      CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU8(v5, &v12, v8, v6);
LABEL_7:
      v3 = *((_DWORD *)v5 + 14) >= *((_DWORD *)v5 + 11);
      goto LABEL_8;
    case 2:
      CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU16(v5, &v12, v8, v6);
      goto LABEL_7;
    case 4:
      CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU32(v5, &v12, v8, v6);
      goto LABEL_7;
    case 16:
      CTRPluginFramework::Search32::SubsidiarySearchSpecifiedFloat(v5, &v12, v8, v6);
      goto LABEL_7;
  }
  v3 = 1;
LABEL_8:
  if ( v12 )
    CTRPluginFramework::Heap::Free(v12, v7);
  return v3;
}
// 1748: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU8(_DWORD, _DWORD, _DWORD, _DWORD);
// 174C: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU16(_DWORD, _DWORD, _DWORD, _DWORD);
// 1750: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedU32(_DWORD, _DWORD, _DWORD, _DWORD);
// 1754: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchSpecifiedFloat(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000D98) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknown(CTRPluginFramework::Search32 *this)
{
  unsigned int v1; // r3
  unsigned int v2; // r1
  _BOOL4 v3; // r4
  unsigned int v4; // r1
  CTRPluginFramework::Search32 *v5; // r4
  int v6; // r5
  void *v7; // r1
  int v8; // r2
  int v9; // r3
  unsigned int v11; // [sp+10h] [bp-20h]
  CTRPluginFramework::Heap *v12; // [sp+14h] [bp-1Ch]

  v1 = *((_DWORD *)this + 14);
  v2 = *((_DWORD *)this + 11);
  if ( v1 >= v2 )
    return 1;
  v4 = v2 - v1;
  if ( v4 > 0x61A7 )
    v4 = 25000;
  v5 = this;
  v11 = v4;
  std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::vector(&v12, v4);
  v6 = CTRPluginFramework::_pool + 12 * *((_DWORD *)v5 + 16);
  CTRPluginFramework::Search::ExtractPreviousHits(
    *((CTRPluginFramework::Search **)v5 + 342),
    (void *)v12,
    *((_DWORD *)v5 + 14),
    0xCu,
    &v11,
    0);
  std::vector<CTRPluginFramework::Results32WithOld,IAllocator<CTRPluginFramework::Results32WithOld>>::resize(
    (char *)&v12,
    v11);
  v8 = *((_DWORD *)v5 + 18) & 0x3FE00;
  v9 = *((_DWORD *)v5 + 18) & 0x3F;
  switch ( v9 )
  {
    case 1:
      CTRPluginFramework::Search32::SubsidiarySearchUnknownU8(v5, &v12, v8, v6);
LABEL_7:
      v3 = *((_DWORD *)v5 + 14) >= *((_DWORD *)v5 + 11);
      goto LABEL_8;
    case 2:
      CTRPluginFramework::Search32::SubsidiarySearchUnknownU16(v5, &v12, v8, v6);
      goto LABEL_7;
    case 4:
      CTRPluginFramework::Search32::SubsidiarySearchUnknownU32(v5, &v12, v8, v6);
      goto LABEL_7;
    case 16:
      CTRPluginFramework::Search32::SubsidiarySearchUnknownFloat(v5, &v12, v8, v6);
      goto LABEL_7;
  }
  v3 = 1;
LABEL_8:
  if ( v12 )
    CTRPluginFramework::Heap::Free(v12, v7);
  return v3;
}
// 1758: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU8(_DWORD, _DWORD, _DWORD, _DWORD);
// 175C: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU16(_DWORD, _DWORD, _DWORD, _DWORD);
// 1760: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownU32(_DWORD, _DWORD, _DWORD, _DWORD);
// 1764: using guessed type int __fastcall CTRPluginFramework::Search32::SubsidiarySearchUnknownFloat(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000EDC) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(char **a1, char *a2, int a3)
{
  char *v3; // r7
  char *v4; // r6
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  char **v9; // r8
  char *v10; // r9
  __int64 v11; // r10
  unsigned int v12; // r5
  char *v13; // r11
  int i; // r0
  int v15; // r5
  int v16; // r5
  int v17; // r11
  int v18; // r3
  int v19; // r2
  int v20; // ST04_4
  int v21; // ST00_4
  unsigned int v22; // r9
  char *v23; // r6
  int v24; // r9
  int v25; // r5
  int v26; // [sp+0h] [bp-30h]

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 3);
  if ( -1431655765 * ((v4 - *a1) >> 3) )
    v6 = -1431655765 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  HIDWORD(v11) = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xAAAAAAA )
  {
    v8 = 178956970;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    LODWORD(v11) = operator new(24 * v8);
    goto LABEL_8;
  }
  LODWORD(v11) = 0;
LABEL_8:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11 + v12, HIDWORD(v11));
  v13 = v3;
  for ( i = v11; ; i = v26 )
  {
    v26 = i + 24;
    if ( v10 == v13 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(i, v13);
    v13 += 24;
  }
  v15 = 178956971 * (v12 >> 3) & 0x1FFFFFFF;
  HIDWORD(v11) = 24 * v15 + 24;
  v16 = (int)&v3[24 * v15];
  v17 = v11 + HIDWORD(v11);
  v18 = v16;
  v19 = v17;
  while ( v4 != (char *)v18 )
  {
    v20 = v18;
    v21 = v19;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v19, v18);
    v19 = v21 + 24;
    v18 = v20 + 24;
  }
  v22 = 178956971 * ((unsigned int)&v4[-v16] >> 3);
  v23 = v3;
  v24 = 24 * (v22 & 0x1FFFFFFF);
  v25 = v16 + v24;
  HIDWORD(v11) = v17 + v24;
  while ( (char *)v25 != v23 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23);
    v23 += 24;
  }
  if ( v3 )
    operator delete(v3);
  *(_QWORD *)v9 = v11;
  v9[2] = (char *)(v11 + 24 * v8);
}
// 1718: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1768: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (0000104C) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(int a1, int a2)
{
  int v2; // r4

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
      (char **)a1,
      *(char **)(a1 + 4),
      a2);
  }
  else
  {
    v2 = a1;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(*(_DWORD *)(a1 + 4), a2);
    *(_DWORD *)(v2 + 4) += 24;
  }
}
// 1768: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00001088) --------------------------------------------------------
int __fastcall std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32 *,unsigned int>(int a1, int a2)
{
  int v2; // r3
  int i; // r2

  v2 = a1;
  for ( i = a2; ; --i )
  {
    v2 += 8;
    if ( !i )
      break;
    *(_DWORD *)(v2 - 8) = 0;
    *(_DWORD *)(v2 - 4) = 0;
  }
  return a1 + 8 * a2;
}

//----- (000010B8) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::_M_default_append(int a1, unsigned int a2)
{
  int v2; // r6
  int v3; // r5
  int v4; // r0
  int v5; // t0
  unsigned int v6; // r3
  unsigned int v7; // r3
  int v8; // r4
  char *v9; // r0
  int v10; // r3
  char *v11; // r7
  int v12; // r8
  int v13; // r6

  v2 = a2;
  if ( a2 )
  {
    v3 = a1;
    v5 = a1 + 4;
    v4 = *(_DWORD *)(a1 + 4);
    if ( a2 > (*(_DWORD *)(v5 + 4) - v4) >> 3 )
    {
      v6 = (v4 - *(_DWORD *)v3) >> 3;
      if ( 0x1FFFFFFF - v6 < a2 )
        std::__throw_length_error("vector::_M_default_append");
      if ( a2 < v6 )
        v7 = 2 * v6;
      else
        v7 = v6 + a2;
      if ( v7 >= 0x1FFFFFFF )
        v7 = 0x1FFFFFFF;
      v8 = 8 * v7;
      v9 = (char *)operator new(8 * v7);
      v10 = *(_DWORD *)(v3 + 4);
      v11 = v9;
      v12 = v10 - *(_DWORD *)v3;
      if ( *(_DWORD *)v3 != v10 )
        memmove(v9, *(const void **)v3, v10 - *(_DWORD *)v3);
      v13 = std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32 *,unsigned int>(
              (int)&v11[v12],
              v2);
      if ( *(_DWORD *)v3 )
        operator delete(*(void **)v3);
      *(_DWORD *)v3 = v11;
      *(_DWORD *)(v3 + 4) = v13;
      *(_DWORD *)(v3 + 8) = &v11[v8];
    }
    else
    {
      *(_DWORD *)(v3 + 4) = std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32 *,unsigned int>(
                              v4,
                              a2);
    }
  }
}

//----- (0000117C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::resize(_DWORD *a1, unsigned int a2)
{
  int v2; // lr
  unsigned int v3; // r2
  int v4; // r3

  v2 = a1[1];
  v3 = (v2 - *a1) >> 3;
  if ( a2 <= v3 )
  {
    if ( a2 < v3 )
    {
      v4 = *a1 + 8 * a2;
      if ( v4 != v2 )
        a1[1] = v4;
    }
  }
  else
  {
    std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::_M_default_append(
      (int)a1,
      a2 - v3);
  }
}

//----- (000011B8) --------------------------------------------------------
int __fastcall std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32WithOld *,unsigned int>(int a1, int a2)
{
  int v2; // r3
  int i; // r2

  v2 = a1;
  for ( i = a2; ; --i )
  {
    v2 += 12;
    if ( !i )
      break;
    *(_DWORD *)(v2 - 12) = 0;
    *(_DWORD *)(v2 - 8) = 0;
    *(_DWORD *)(v2 - 4) = 0;
  }
  return a1 + 12 * a2;
}

//----- (000011F0) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::_M_default_append(int a1, unsigned int a2)
{
  int v2; // r5
  int v3; // r4
  int v4; // r0
  int v5; // t0
  unsigned int v6; // r3
  unsigned int v7; // r3
  int v8; // r7
  char *v9; // r0
  int v10; // r3
  char *v11; // r6
  int v12; // r8
  int v13; // r5

  v2 = a2;
  if ( a2 )
  {
    v3 = a1;
    v5 = a1 + 4;
    v4 = *(_DWORD *)(a1 + 4);
    if ( a2 > -1431655765 * ((*(_DWORD *)(v5 + 4) - v4) >> 2) )
    {
      v6 = -1431655765 * ((v4 - *(_DWORD *)v3) >> 2);
      if ( 357913941 - v6 < a2 )
        std::__throw_length_error("vector::_M_default_append");
      if ( a2 < v6 )
        v7 = 1431655766 * ((v4 - *(_DWORD *)v3) >> 2);
      else
        v7 = v6 + a2;
      if ( v7 >= 0x15555555 )
        v7 = 357913941;
      v8 = 12 * v7;
      v9 = (char *)operator new(12 * v7);
      v10 = *(_DWORD *)(v3 + 4);
      v11 = v9;
      v12 = v10 - *(_DWORD *)v3;
      if ( *(_DWORD *)v3 != v10 )
        memmove(v9, *(const void **)v3, v10 - *(_DWORD *)v3);
      v13 = std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32WithOld *,unsigned int>(
              (int)&v11[v12],
              v2);
      if ( *(_DWORD *)v3 )
        operator delete(*(void **)v3);
      *(_DWORD *)v3 = v11;
      *(_DWORD *)(v3 + 4) = v13;
      *(_DWORD *)(v3 + 8) = &v11[v8];
    }
    else
    {
      *(_DWORD *)(v3 + 4) = std::__uninitialized_default_n_1<true>::__uninit_default_n<CTRPluginFramework::Results32WithOld *,unsigned int>(
                              v4,
                              a2);
    }
  }
}

//----- (000012D0) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::resize(_DWORD *a1, unsigned int a2)
{
  int v2; // lr
  unsigned int v3; // r3
  int v4; // r1

  v2 = a1[1];
  v3 = -1431655765 * ((v2 - *a1) >> 2);
  if ( a2 <= v3 )
  {
    if ( a2 < v3 )
    {
      v4 = *a1 + 12 * a2;
      if ( v4 != v2 )
        a1[1] = v4;
    }
  }
  else
  {
    std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::_M_default_append(
      (int)a1,
      a2 - v3);
  }
}

//----- (0000131C) --------------------------------------------------------
void __fastcall CTRPluginFramework::Search32::ReadResults(CTRPluginFramework::Search *a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5; // r5
  CTRPluginFramework::Search *v6; // r4
  unsigned int v7; // r7
  int v8; // r6
  unsigned int v9; // r3
  int v10; // r3
  int v11; // r0
  int v12; // r7
  _DWORD *v13; // r4
  int v14; // s0
  int v15; // r0
  int v16; // r7
  _DWORD *v17; // r4
  int v18; // s0
  int v19; // s0
  unsigned int v20; // [sp+8h] [bp-40h]
  void *v21; // [sp+Ch] [bp-3Ch]
  int v22; // [sp+10h] [bp-38h]
  int v23; // [sp+14h] [bp-34h]
  char v24; // [sp+18h] [bp-30h]

  v5 = a4;
  v6 = a1;
  v7 = a2;
  v8 = (int)a3;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(a3);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(v5);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(a5);
  v20 = 500;
  v9 = *((_DWORD *)v6 + 3);
  if ( v9 > v7 )
  {
    if ( v9 <= v7 + 500 )
      v20 = v9 - v7;
    v10 = *((_DWORD *)v6 + 18);
    if ( v10 & 0x80 )
    {
      if ( v10 & 0x40 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v24,
          "Start a new search to display the results");
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
          v8,
          (int)&v24);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v24,
          (const char *)&unk_16B0);
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
          (int)v5,
          (int)&v24);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
        return;
      }
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::resize(&v21, v20);
      CTRPluginFramework::Search::ExtractPreviousHits(v6, v21, v7, 8u, &v20, 1);
      std::vector<CTRPluginFramework::Results32,std::allocator<CTRPluginFramework::Results32>>::resize(&v21, v20);
      v11 = CTRPluginFramework::Search::GetType(v6);
      v12 = v22;
      v13 = v21;
      if ( v11 == 16 )
      {
        while ( v13 != (_DWORD *)v12 )
        {
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, *v13);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            v8,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v14 = v13[1];
          ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(&v24, 4);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            (int)v5,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v13 += 2;
        }
      }
      else
      {
        while ( (_DWORD *)v12 != v13 )
        {
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, *v13);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            v8,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, v13[1]);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            (int)v5,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v13 += 2;
        }
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::resize(
        &v21,
        v20);
      CTRPluginFramework::Search::ExtractPreviousHits(v6, v21, v7, 0xCu, &v20, 1);
      std::vector<CTRPluginFramework::Results32WithOld,std::allocator<CTRPluginFramework::Results32WithOld>>::resize(
        &v21,
        v20);
      v15 = CTRPluginFramework::Search::GetType(v6);
      v16 = v22;
      v17 = v21;
      if ( v15 == 16 )
      {
        while ( (_DWORD *)v16 != v17 )
        {
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, *v17);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            v8,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v18 = v17[1];
          ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(&v24, 4);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            (int)v5,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v19 = v17[2];
          ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(&v24, 4);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            (int)a5,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v17 += 3;
        }
      }
      else
      {
        while ( (_DWORD *)v16 != v17 )
        {
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, *v17);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            v8,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, v17[1]);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            (int)v5,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v24, v17[2]);
          std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::emplace_back<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
            (int)a5,
            (int)&v24);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          v17 += 3;
        }
      }
    }
    if ( v21 )
      operator delete(v21);
  }
}
// 1718: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1778: using guessed type int __fastcall ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(_DWORD, _DWORD);
// 177C: using guessed type int __fastcall ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(_DWORD, _DWORD);

// ALL OK, 26 function(s) have been successfully decompiled
