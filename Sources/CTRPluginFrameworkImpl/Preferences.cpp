/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this);
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::RegionFromCenter(CTRPluginFramework *this, CTRPluginFramework::BMPImage *a2, int a3, int a4);
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::UpSampleUntilItsEnough(CTRPluginFramework *this, CTRPluginFramework::BMPImage *a2, int a3, int a4);
void __fastcall CTRPluginFramework::GetRatio(CTRPluginFramework *this, int a2, int a3, int a4, int a5);
CTRPluginFramework *__fastcall CTRPluginFramework::PostProcess(CTRPluginFramework *this, CTRPluginFramework::BMPImage *a2, int a3, int a4);
int __fastcall CTRPluginFramework::Preferences::LoadBackgrounds(void)::{lambda(void *)#1}::_FUN(CTRPluginFramework *a1);
signed int __fastcall CTRPluginFramework::Preferences::OpenConfigFile(CTRPluginFramework::File *a1, unsigned __int8 *a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadSettings(CTRPluginFramework::Preferences *this);
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadSavedEnabledCheats(CTRPluginFramework::Preferences *this);
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadSavedFavorites(CTRPluginFramework::Preferences *this);
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadHotkeysFromFile(CTRPluginFramework::Preferences *this);
int __fastcall CTRPluginFramework::Preferences::LoadBackgrounds(CTRPluginFramework::Preferences *this, int a2);
int __fastcall CTRPluginFramework::Preferences::UnloadBackgrounds(CTRPluginFramework::Preferences *this);
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::WriteSettings(CTRPluginFramework::Preferences *this);
int GLOBAL__sub_I__ZN18CTRPluginFramework11Preferences18topBackgroundImageE();
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::BMPImage::BMPImage(CTRPluginFramework::BMPImage *__hidden this, unsigned int, unsigned int, bool); idb
// _DWORD CTRPluginFramework::BMPImage::Width(CTRPluginFramework::BMPImage *__hidden this); idb
// _DWORD CTRPluginFramework::BMPImage::Height(CTRPluginFramework::BMPImage *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::BMPImage::RoiFromCenter(CTRPluginFramework::BMPImage *__hidden this, unsigned int, unsigned int, const unsigned int *, const unsigned int *, CTRPluginFramework::BMPImage *); idb
// _DWORD __cdecl CTRPluginFramework::BMPImage::~BMPImage(CTRPluginFramework::BMPImage *__hidden this); idb
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl CTRPluginFramework::BMPImage::UpSample(CTRPluginFramework::BMPImage *__hidden this, CTRPluginFramework::BMPImage *); idb
// float ceilf(float x);
// _DWORD __cdecl CTRPluginFramework::BMPImage::Resample(CTRPluginFramework::BMPImage *__hidden this, CTRPluginFramework::BMPImage *, int, int); idb
// _DWORD __cdecl CTRPluginFramework::BMPImage::BMPImage(CTRPluginFramework::BMPImage *__hidden this, const CTRPluginFramework::BMPImage *, unsigned int, unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::Exists(_DWORD); weak
// int __cdecl CTRPluginFramework::BMPImage::BMPImage(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::BMPImage::IsLoaded(CTRPluginFramework::BMPImage *__hidden this); idb
// _DWORD CTRPluginFramework::Window::UpdateBackgrounds(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::GetSize(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::File::Read(CTRPluginFramework::File *__hidden this, void *, unsigned int); idb
// int memcmp(const void *s1, const void *s2, size_t n);
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Pause(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework10ResetColorB5cxx11Ev(_DWORD); weak
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Rename(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Play(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb
// _DWORD CTRPluginFramework::File::Rewind(CTRPluginFramework::File *__hidden this); idb
// _DWORD CTRPluginFramework::File::File(CTRPluginFramework::File *__hidden this); idb
// void *memset(void *s, int c, size_t n);
// int __fastcall CTRPluginFramework::PluginMenuImpl::LoadEnabledCheatsFromFile(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::PluginMenuImpl::LoadFavoritesFromFile(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::PluginMenuImpl::LoadHotkeysFromFile(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Task::Task(CTRPluginFramework::Task *__hidden this, int (__cdecl *)(void *), void *, int); idb
// _DWORD CTRPluginFramework::Task::Start(CTRPluginFramework::Task *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Task::~Task(CTRPluginFramework::Task *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::File::Write(CTRPluginFramework::File *__hidden this, const void *, unsigned int); idb
// int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::WriteEnabledCheatsToFile(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::PluginMenuImpl::WriteFavoritesToFile(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::PluginMenuImpl::WriteHotkeysToFile(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::Tell(CTRPluginFramework::File *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenuActionReplay::SaveCodes(CTRPluginFramework::PluginMenuActionReplay *__hidden this); idb
// _DWORD CTRPluginFramework::Time::Time(CTRPluginFramework::Time *__hidden this); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::Preferences::MenuHotkeys = 4; // weak
char CTRPluginFramework::Preferences::_bmpCanBeLoaded = '\x01'; // weak
char CTRPluginFramework::Preferences::EcoMemoryMode; // weak
int CTRPluginFramework::Preferences::topBackgroundImage; // weak
int CTRPluginFramework::Preferences::bottomBackgroundImage; // weak
char CTRPluginFramework::Preferences::AutoLoadCheats; // weak
char CTRPluginFramework::Preferences::AutoLoadFavorites; // weak
char CTRPluginFramework::Preferences::AutoSaveCheats; // weak
char CTRPluginFramework::Preferences::AutoSaveFavorites; // weak
char CTRPluginFramework::Preferences::DrawTouchCursor; // weak
char CTRPluginFramework::Preferences::ShowBottomFps; // weak
char CTRPluginFramework::Preferences::ShowTopFps; // weak
char CTRPluginFramework::Preferences::UseFloatingBtn; // weak
char CTRPluginFramework::Preferences::_cheatsAlreadyLoaded; // weak
char CTRPluginFramework::Preferences::_favoritesAlreadyLoaded; // weak
_UNKNOWN unk_30; // weak
int dword_38; // weak
int dword_3C; // weak
int dword_40; // weak
int dword_44; // weak
int dword_48; // weak
int dword_4C; // weak
int dword_50; // weak
int dword_58; // weak
int dword_5C; // weak
int dword_60; // weak
int dword_64; // weak
int dword_68; // weak
int dword_6C; // weak
int dword_70; // weak
int dword_74; // weak
int dword_78; // weak
int dword_7C; // weak
int dword_80; // weak
int dword_84; // weak
int dword_88; // weak
int dword_8C; // weak
int dword_90; // weak
int dword_94; // weak
int ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E; // weak
int dword_9C; // weak
char byte_A0; // weak
int ZN18CTRPluginFramework11Preferences14ScreenshotPathB5cxx11E; // weak
int dword_B4; // weak
char byte_B8; // weak
int ZN18CTRPluginFramework11Preferences16ScreenshotPrefixB5cxx11E; // weak
int dword_CC; // weak
char byte_D0; // weak
_UNKNOWN loc_118; // weak
_UNKNOWN loc_154; // weak
// extern _UNKNOWN CTRPluginFramework::FwkSettings::Header; weak
// extern _UNKNOWN CTRPluginFramework::Color::Yellow; weak
// extern _UNKNOWN CTRPluginFramework::OSDImpl::DrawSaveIcon; weak
// extern _UNKNOWN _dso_handle; weak
// extern _UNKNOWN std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string; weak


//----- (000000E4) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 1000: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1004: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (0000015C) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this)
{
  CTRPluginFramework::File *v1; // r4

  v1 = this;
  CTRPluginFramework::File::Close(this);
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::File *)((char *)v1 + 48));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// 1010: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000180) --------------------------------------------------------
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::RegionFromCenter(CTRPluginFramework *this, CTRPluginFramework::BMPImage *a2, int a3, int a4)
{
  CTRPluginFramework *v4; // r4
  CTRPluginFramework::BMPImage *v5; // r7
  int v6; // r6
  CTRPluginFramework::BMPImage *v7; // r5
  unsigned int v8; // r8
  unsigned int v9; // r0
  unsigned int v11; // [sp+8h] [bp-20h]
  unsigned int v12; // [sp+Ch] [bp-1Ch]

  v4 = this;
  v5 = a2;
  v6 = a3;
  v7 = (CTRPluginFramework::BMPImage *)operator new(0x34u);
  CTRPluginFramework::BMPImage::BMPImage(v7, (unsigned int)v5, v6, 1);
  v8 = CTRPluginFramework::BMPImage::Width(v4);
  v9 = CTRPluginFramework::BMPImage::Height(v4);
  v11 = (unsigned int)v5;
  v12 = v6;
  CTRPluginFramework::BMPImage::RoiFromCenter(v4, v8 >> 1, v9 >> 1, &v11, &v12, v7);
  if ( v4 )
  {
    CTRPluginFramework::BMPImage::~BMPImage(v4);
    operator delete((void *)v4);
  }
  return v7;
}

//----- (0000020C) --------------------------------------------------------
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::UpSampleUntilItsEnough(CTRPluginFramework *this, CTRPluginFramework::BMPImage *a2, int a3, int a4)
{
  CTRPluginFramework *v4; // r4
  CTRPluginFramework::BMPImage *v5; // r7
  unsigned int v6; // r6
  int v7; // r8
  int v8; // r9
  CTRPluginFramework::BMPImage *v9; // r5

  v4 = this;
  v5 = a2;
  v6 = a3;
  while ( 1 )
  {
    v7 = CTRPluginFramework::BMPImage::Width(v4);
    v8 = CTRPluginFramework::BMPImage::Height(v4);
    v9 = (CTRPluginFramework::BMPImage *)operator new(0x34u);
    CTRPluginFramework::BMPImage::BMPImage(v9, 2 * v7, 2 * v8, 1);
    CTRPluginFramework::BMPImage::UpSample(v4, v9);
    if ( v4 )
    {
      CTRPluginFramework::BMPImage::~BMPImage(v4);
      operator delete((void *)v4);
    }
    if ( CTRPluginFramework::BMPImage::Width(v9) >= (unsigned int)v5 && CTRPluginFramework::BMPImage::Height(v9) >= v6 )
      break;
    v4 = v9;
  }
  return v9;
}

//----- (000002A4) --------------------------------------------------------
void __fastcall CTRPluginFramework::GetRatio(CTRPluginFramework *this, int a2, int a3, int a4, int a5)
{
  ;
}

//----- (000002D4) --------------------------------------------------------
CTRPluginFramework *__fastcall CTRPluginFramework::PostProcess(CTRPluginFramework *this, CTRPluginFramework::BMPImage *a2, int a3, int a4)
{
  float v4; // s0
  CTRPluginFramework::BMPImage *v5; // r7
  int v6; // r8
  CTRPluginFramework *v7; // r4
  CTRPluginFramework *v8; // r6
  int v9; // r0
  bool v10; // zf
  signed int v11; // r5
  float v12; // r0
  float v13; // r0
  signed int v14; // r9
  signed int v15; // r6
  CTRPluginFramework::BMPImage *v16; // r5
  bool v17; // zf
  int v19; // [sp+0h] [bp-28h]

  v5 = a2;
  v6 = a3;
  v7 = this;
  v8 = (CTRPluginFramework *)CTRPluginFramework::BMPImage::Width(this);
  v9 = CTRPluginFramework::BMPImage::Height(v7);
  v10 = v8 == v5;
  if ( v8 == v5 )
    v10 = v9 == v6;
  if ( !v10 )
  {
    v11 = v9;
    CTRPluginFramework::GetRatio(v8, v9, (int)v5, v6, v19);
    v13 = ceilf(v12);
    v14 = (signed int)(float)((float)(signed int)v8 / v4);
    ceilf(v13);
    v15 = (signed int)(float)((float)v11 / v4);
    v16 = (CTRPluginFramework::BMPImage *)operator new(0x34u);
    CTRPluginFramework::BMPImage::BMPImage(v16, v14, v15, 1);
    CTRPluginFramework::BMPImage::Resample(v7, v16, v14, v15);
    if ( v7 )
    {
      CTRPluginFramework::BMPImage::~BMPImage(v7);
      operator delete((void *)v7);
    }
    v17 = v6 == v15;
    if ( v6 == v15 )
      v17 = v5 == (CTRPluginFramework::BMPImage *)v14;
    if ( v17 )
    {
      v7 = v16;
    }
    else
    {
      v7 = (CTRPluginFramework *)operator new(0x34u);
      CTRPluginFramework::BMPImage::BMPImage(v7, v16, (unsigned int)v5, v6);
      CTRPluginFramework::BMPImage::~BMPImage(v16);
      operator delete((void *)v16);
    }
  }
  return v7;
}

//----- (000003E0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Preferences::LoadBackgrounds(void)::{lambda(void *)#1}::_FUN(CTRPluginFramework *a1)
{
  int v1; // r5
  CTRPluginFramework *v2; // r6
  int v3; // r2
  int v4; // r3
  int v5; // r5
  CTRPluginFramework *v6; // r6
  int v7; // r2
  int v8; // r3
  char *v10; // [sp+0h] [bp-40h]
  int v11; // [sp+4h] [bp-3Ch]
  char v12; // [sp+8h] [bp-38h]
  char v13; // [sp+18h] [bp-28h]

  v10 = &v12;
  v11 = 0;
  v12 = 0;
  if ( *(_DWORD *)(CTRPluginFramework::FwkSettings::Header + 24) )
    a1 = (CTRPluginFramework *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
                                 &v10,
                                 "/luma/plugins/ActionReplay/");
  if ( !CTRPluginFramework::Preferences::EcoMemoryMode )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v13, &v10);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v13, "TopBackground.bmp");
    v1 = CTRPluginFramework::File::Exists(&v13);
    a1 = (CTRPluginFramework *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
    if ( v1 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v13, &v10);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v13, "TopBackground.bmp");
      v2 = (CTRPluginFramework *)operator new(0x34u);
      CTRPluginFramework::BMPImage::BMPImage(v2, &v13, v3);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
      if ( CTRPluginFramework::BMPImage::IsLoaded(v2) )
      {
        a1 = CTRPluginFramework::PostProcess(v2, (CTRPluginFramework::BMPImage *)&loc_154, 200, v4);
      }
      else
      {
        CTRPluginFramework::BMPImage::~BMPImage(v2);
        operator delete((void *)v2);
        a1 = 0;
      }
      CTRPluginFramework::Preferences::topBackgroundImage = (int)a1;
    }
    if ( !CTRPluginFramework::Preferences::EcoMemoryMode )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v13, &v10);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v13, "BottomBackground.bmp");
      v5 = CTRPluginFramework::File::Exists(&v13);
      a1 = (CTRPluginFramework *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
      if ( v5 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v13, &v10);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
          &v13,
          "BottomBackground.bmp");
        v6 = (CTRPluginFramework *)operator new(0x34u);
        CTRPluginFramework::BMPImage::BMPImage(v6, &v13, v7);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
        if ( CTRPluginFramework::BMPImage::IsLoaded(v6) )
        {
          a1 = CTRPluginFramework::PostProcess(v6, (CTRPluginFramework::BMPImage *)&loc_118, 200, v8);
        }
        else
        {
          CTRPluginFramework::BMPImage::~BMPImage(v6);
          operator delete((void *)v6);
          a1 = 0;
        }
        CTRPluginFramework::Preferences::bottomBackgroundImage = (int)a1;
      }
    }
  }
  CTRPluginFramework::Window::UpdateBackgrounds(a1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  return 0;
}
// 10: using guessed type char CTRPluginFramework::Preferences::EcoMemoryMode;
// 14: using guessed type int CTRPluginFramework::Preferences::topBackgroundImage;
// 18: using guessed type int CTRPluginFramework::Preferences::bottomBackgroundImage;
// 1010: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1040: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 1044: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 1048: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 104C: using guessed type int __fastcall CTRPluginFramework::File::Exists(_DWORD);
// 1050: using guessed type int __cdecl CTRPluginFramework::BMPImage::BMPImage(_DWORD, _DWORD, _DWORD);

//----- (000005AC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Preferences::OpenConfigFile(CTRPluginFramework::File *a1, unsigned __int8 *a2)
{
  CTRPluginFramework::File *v2; // r5
  unsigned __int8 *v3; // r4
  _BOOL4 v4; // r6
  __int64 v5; // r0
  __int64 v7; // r6
  __int64 v8; // r0
  bool v9; // r1
  int v10; // r6
  char v11; // r3
  unsigned int v12; // r3
  unsigned int v13; // r3
  bool v14; // r1
  int v15; // r4
  int v16; // r3
  char v17; // [sp+4h] [bp-ACh]
  char v18; // [sp+8h] [bp-A8h]
  char v19; // [sp+20h] [bp-90h]
  char v20; // [sp+38h] [bp-78h]
  char v21; // [sp+50h] [bp-60h]
  int v22[6]; // [sp+68h] [bp-48h]
  char v23; // [sp+80h] [bp-30h]
  char v24; // [sp+81h] [bp-2Fh]
  char v25; // [sp+82h] [bp-2Eh]
  char v26; // [sp+83h] [bp-2Dh]
  char v27; // [sp+84h] [bp-2Ch]

  v2 = a1;
  v3 = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v23,
    "CTRPFData.bin");
  if ( CTRPluginFramework::File::Open(v2, &v23, 35) )
  {
    v4 = 0;
  }
  else
  {
    LODWORD(v5) = CTRPluginFramework::File::GetSize(v2);
    v4 = v5 != 0;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
  if ( !v4 )
    return -1;
  if ( CTRPluginFramework::File::Read(v2, v3, 0x18u) )
    return -2;
  LODWORD(v7) = v3[16] | (v3[17] << 8) | (v3[18] << 16) | (v3[19] << 24);
  HIDWORD(v7) = v3[20] | (v3[21] << 8) | (v3[22] << 16) | (v3[23] << 24);
  LODWORD(v8) = CTRPluginFramework::File::GetSize(v2);
  if ( v7 != v8 )
    return -1;
  v10 = memcmp("CTRPF", v3, 8u);
  if ( v10 )
    return -1;
  if ( (v3[8] | (v3[9] << 8) | (v3[10] << 16) | (v3[11] << 24)) != 0x1000000 )
  {
    CTRPluginFramework::ProcessImpl::Pause(0, v9);
    v23 = 27;
    v11 = CTRPluginFramework::Color::Yellow;
    if ( CTRPluginFramework::Color::Yellow < 1u )
      v11 = 1;
    v24 = v11;
    v12 = *((unsigned __int8 *)&CTRPluginFramework::Color::Yellow + 1);
    if ( v12 < 1 )
      LOBYTE(v12) = 1;
    v25 = v12;
    v13 = *((unsigned __int8 *)&CTRPluginFramework::Color::Yellow + 2);
    v27 = v10;
    if ( v13 < 1 )
      LOBYTE(v13) = 1;
    v26 = v13;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v18, &v23);
    CTRPluginFramework::operator<<(&v19, &v18, "Warning\n\n");
    ZN18CTRPluginFramework10ResetColorB5cxx11Ev(&v20);
    CTRPluginFramework::operator<<(&v21, &v19, &v20);
    CTRPluginFramework::operator<<(v22, &v21, "CTRPFData.bin version mismatch.\n");
    CTRPluginFramework::operator<<(&v23, v22, "Do you want to save it as CTRPFData.bin.bak to retrieve some data ?");
    CTRPluginFramework::MessageBox::MessageBox(&v17, &v23, 2, v10);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v22);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v21);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v20);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v19);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v18);
    if ( CTRPluginFramework::MessageBox::operator()(&v17) )
    {
      CTRPluginFramework::File::Close(v2);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v22, "CTRPFData.bin");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v23,
        "CTRPFData.bin.bak");
      v15 = CTRPluginFramework::File::Rename(v22, &v23);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v22);
      if ( v15 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v23,
          "Operation failed");
        v16 = v10;
      }
      else
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v23,
          "Operation succeeded");
        v16 = 0;
      }
      CTRPluginFramework::MessageBox::MessageBox(v22, &v23, v16, v16);
      CTRPluginFramework::MessageBox::operator()(v22);
      CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)v22);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
    }
    CTRPluginFramework::ProcessImpl::Play(0, v14);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v17);
    return -1;
  }
  CTRPluginFramework::File::Rewind(v2);
  return CTRPluginFramework::File::Read(v2, v3, 0x54u);
}
// 1010: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1060: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);
// 1074: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 1078: using guessed type int __fastcall ZN18CTRPluginFramework10ResetColorB5cxx11Ev(_DWORD);
// 107C: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 1080: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 1084: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 1088: using guessed type int __fastcall CTRPluginFramework::File::Rename(_DWORD, _DWORD);

//----- (0000088C) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadSettings(CTRPluginFramework::Preferences *this)
{
  int v2; // [sp+0h] [bp-A0h]
  char s; // [sp+44h] [bp-5Ch]
  unsigned int v4; // [sp+5Ch] [bp-44h]
  int v5; // [sp+64h] [bp-3Ch]

  CTRPluginFramework::File::File((CTRPluginFramework::File *)&v2);
  memset(&s, 0, 0x54u);
  if ( !CTRPluginFramework::Preferences::OpenConfigFile((CTRPluginFramework::File *)&v2, (unsigned __int8 *)&s) )
  {
    CTRPluginFramework::Preferences::MenuHotkeys = v5;
    CTRPluginFramework::Preferences::AutoLoadCheats = (v4 >> 2) & 1;
    CTRPluginFramework::Preferences::AutoLoadFavorites = (v4 >> 3) & 1;
    CTRPluginFramework::Preferences::AutoSaveCheats = v4 & 1;
    CTRPluginFramework::Preferences::AutoSaveFavorites = (v4 >> 1) & 1;
    CTRPluginFramework::Preferences::DrawTouchCursor = (v4 >> 4) & 1;
    CTRPluginFramework::Preferences::ShowBottomFps = (v4 >> 6) & 1;
    CTRPluginFramework::Preferences::ShowTopFps = (v4 >> 5) & 1;
    CTRPluginFramework::Preferences::UseFloatingBtn = (v4 >> 7) & 1;
  }
  if ( !CTRPluginFramework::Preferences::MenuHotkeys )
    CTRPluginFramework::Preferences::MenuHotkeys = 4;
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v2);
}
// 4: using guessed type int CTRPluginFramework::Preferences::MenuHotkeys;
// 1C: using guessed type char CTRPluginFramework::Preferences::AutoLoadCheats;
// 1D: using guessed type char CTRPluginFramework::Preferences::AutoLoadFavorites;
// 1E: using guessed type char CTRPluginFramework::Preferences::AutoSaveCheats;
// 1F: using guessed type char CTRPluginFramework::Preferences::AutoSaveFavorites;
// 20: using guessed type char CTRPluginFramework::Preferences::DrawTouchCursor;
// 21: using guessed type char CTRPluginFramework::Preferences::ShowBottomFps;
// 22: using guessed type char CTRPluginFramework::Preferences::ShowTopFps;
// 23: using guessed type char CTRPluginFramework::Preferences::UseFloatingBtn;

//----- (00000958) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadSavedEnabledCheats(CTRPluginFramework::Preferences *this)
{
  char v2; // [sp+4h] [bp-BCh]
  char v3; // [sp+8h] [bp-B8h]
  char v4; // [sp+20h] [bp-A0h]
  char s; // [sp+64h] [bp-5Ch]
  int v6; // [sp+94h] [bp-2Ch]

  CTRPluginFramework::File::File((CTRPluginFramework::File *)&v4);
  memset(&s, 0, 0x54u);
  if ( CTRPluginFramework::Preferences::_cheatsAlreadyLoaded )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v3,
      "Error\nCheats already loaded");
    CTRPluginFramework::MessageBox::MessageBox(&v2, &v3, 0, 0);
    CTRPluginFramework::MessageBox::operator()(&v2);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v2);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v3);
  }
  else if ( !CTRPluginFramework::Preferences::OpenConfigFile((CTRPluginFramework::File *)&v4, (unsigned __int8 *)&s) )
  {
    if ( v6 )
      CTRPluginFramework::PluginMenuImpl::LoadEnabledCheatsFromFile(&s, &v4);
    CTRPluginFramework::Preferences::_cheatsAlreadyLoaded = 1;
  }
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v4);
}
// 24: using guessed type char CTRPluginFramework::Preferences::_cheatsAlreadyLoaded;
// 1010: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1080: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 1084: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 10A4: using guessed type int __fastcall CTRPluginFramework::PluginMenuImpl::LoadEnabledCheatsFromFile(_DWORD, _DWORD);

//----- (00000A14) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadSavedFavorites(CTRPluginFramework::Preferences *this)
{
  char v2; // [sp+4h] [bp-BCh]
  char v3; // [sp+8h] [bp-B8h]
  char v4; // [sp+20h] [bp-A0h]
  char s; // [sp+64h] [bp-5Ch]
  int v6; // [sp+A0h] [bp-20h]

  CTRPluginFramework::File::File((CTRPluginFramework::File *)&v4);
  memset(&s, 0, 0x54u);
  if ( CTRPluginFramework::Preferences::_favoritesAlreadyLoaded )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v3,
      "Error\nFavorites already loaded");
    CTRPluginFramework::MessageBox::MessageBox(&v2, &v3, 0, 0);
    CTRPluginFramework::MessageBox::operator()(&v2);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v2);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v3);
  }
  else if ( !CTRPluginFramework::Preferences::OpenConfigFile((CTRPluginFramework::File *)&v4, (unsigned __int8 *)&s) )
  {
    if ( v6 )
      CTRPluginFramework::PluginMenuImpl::LoadFavoritesFromFile(&s, &v4);
    CTRPluginFramework::Preferences::_favoritesAlreadyLoaded = 1;
  }
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v4);
}
// 14: using guessed type int CTRPluginFramework::Preferences::topBackgroundImage;
// 25: using guessed type char CTRPluginFramework::Preferences::_favoritesAlreadyLoaded;
// 1010: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1080: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 1084: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 10A8: using guessed type int __fastcall CTRPluginFramework::PluginMenuImpl::LoadFavoritesFromFile(_DWORD, _DWORD);

//----- (00000AD0) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::LoadHotkeysFromFile(CTRPluginFramework::Preferences *this)
{
  int v2; // [sp+0h] [bp-A0h]
  char s; // [sp+44h] [bp-5Ch]
  int v4; // [sp+8Ch] [bp-14h]

  CTRPluginFramework::File::File((CTRPluginFramework::File *)&v2);
  memset(&s, 0, 0x54u);
  if ( !CTRPluginFramework::Preferences::OpenConfigFile((CTRPluginFramework::File *)&v2, (unsigned __int8 *)&s) && v4 )
    CTRPluginFramework::PluginMenuImpl::LoadHotkeysFromFile(&s, &v2);
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v2);
}
// 10AC: using guessed type int __fastcall CTRPluginFramework::PluginMenuImpl::LoadHotkeysFromFile(_DWORD, _DWORD);

//----- (00000B2C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Preferences::LoadBackgrounds(CTRPluginFramework::Preferences *this, int a2)
{
  int result; // r0
  int v3; // [sp+4h] [bp-Ch]

  v3 = a2;
  if ( CTRPluginFramework::Preferences::_bmpCanBeLoaded )
  {
    CTRPluginFramework::Task::Task(
      (CTRPluginFramework::Task *)&v3,
      (int (__cdecl *)(void *))CTRPluginFramework::Preferences::LoadBackgrounds(void)::{lambda(void *)#1}::_FUN,
      0,
      -1);
    CTRPluginFramework::Task::Start((CTRPluginFramework::Task *)&v3);
    CTRPluginFramework::Preferences::_bmpCanBeLoaded = 0;
    result = CTRPluginFramework::Task::~Task((CTRPluginFramework::Task *)&v3);
  }
  return result;
}
// 8: using guessed type char CTRPluginFramework::Preferences::_bmpCanBeLoaded;

//----- (00000B7C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Preferences::UnloadBackgrounds(CTRPluginFramework::Preferences *this)
{
  void *v1; // r5
  void *v2; // r5

  v1 = (void *)CTRPluginFramework::Preferences::bottomBackgroundImage;
  if ( CTRPluginFramework::Preferences::bottomBackgroundImage || CTRPluginFramework::Preferences::topBackgroundImage )
  {
    CTRPluginFramework::Preferences::_bmpCanBeLoaded = 1;
    if ( CTRPluginFramework::Preferences::bottomBackgroundImage )
    {
      CTRPluginFramework::BMPImage::~BMPImage((CTRPluginFramework::BMPImage *)CTRPluginFramework::Preferences::bottomBackgroundImage);
      operator delete(v1);
      CTRPluginFramework::Preferences::bottomBackgroundImage = 0;
    }
  }
  v2 = (void *)CTRPluginFramework::Preferences::topBackgroundImage;
  if ( CTRPluginFramework::Preferences::topBackgroundImage )
  {
    CTRPluginFramework::BMPImage::~BMPImage((CTRPluginFramework::BMPImage *)CTRPluginFramework::Preferences::topBackgroundImage);
    operator delete(v2);
    CTRPluginFramework::Preferences::topBackgroundImage = 0;
  }
  return CTRPluginFramework::Window::UpdateBackgrounds(this);
}
// 8: using guessed type char CTRPluginFramework::Preferences::_bmpCanBeLoaded;
// 14: using guessed type int CTRPluginFramework::Preferences::topBackgroundImage;
// 18: using guessed type int CTRPluginFramework::Preferences::bottomBackgroundImage;

//----- (00000BFC) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::Preferences::WriteSettings(CTRPluginFramework::Preferences *this)
{
  int v1; // r3
  int v2; // r6
  CTRPluginFramework::PluginMenuActionReplay *v3; // r0
  __int64 v4; // r0
  int v6; // [sp+0h] [bp-C0h]
  char v7; // [sp+18h] [bp-A8h]
  char v8; // [sp+5Ch] [bp-64h]
  int v9; // [sp+64h] [bp-5Ch]
  char s; // [sp+68h] [bp-58h]
  __int64 v11; // [sp+6Ch] [bp-54h]
  int v12; // [sp+74h] [bp-4Ch]
  int v13; // [sp+78h] [bp-48h]
  int v14; // [sp+7Ch] [bp-44h]

  CTRPluginFramework::OSDImpl::DrawSaveIcon = 1;
  CTRPluginFramework::File::File((CTRPluginFramework::File *)&v7);
  memset(&s, 0, 0x48u);
  strcpy(&v8, "CTRPF");
  v9 = 0x1000000;
  if ( CTRPluginFramework::Preferences::AutoSaveCheats )
    v13 = 0;
  v1 = (unsigned __int8)CTRPluginFramework::Preferences::AutoLoadCheats;
  if ( CTRPluginFramework::Preferences::AutoSaveCheats )
    v12 = 1;
  if ( CTRPluginFramework::Preferences::AutoLoadCheats )
    v1 = v12;
  if ( CTRPluginFramework::Preferences::AutoLoadCheats )
    v12 = v1 | 4;
  if ( CTRPluginFramework::Preferences::AutoSaveFavorites )
    v12 |= 2u;
  if ( CTRPluginFramework::Preferences::AutoLoadFavorites )
    v12 |= 8u;
  if ( CTRPluginFramework::Preferences::DrawTouchCursor )
    v12 |= 0x10u;
  if ( CTRPluginFramework::Preferences::ShowBottomFps )
    v12 |= 0x40u;
  if ( CTRPluginFramework::Preferences::ShowTopFps )
    v12 |= 0x20u;
  if ( CTRPluginFramework::Preferences::UseFloatingBtn )
    v12 |= 0x80u;
  v14 = CTRPluginFramework::Preferences::MenuHotkeys;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v6, "CTRPFData.bin");
  v2 = CTRPluginFramework::File::Open(&v7, &v6, 55);
  v3 = (CTRPluginFramework::PluginMenuActionReplay *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  if ( !v2 )
  {
    v3 = (CTRPluginFramework::PluginMenuActionReplay *)CTRPluginFramework::File::Write(
                                                         (CTRPluginFramework::File *)&v7,
                                                         &v8,
                                                         0x54u);
    if ( !v3 )
    {
      if ( CTRPluginFramework::Preferences::AutoSaveCheats )
        CTRPluginFramework::PluginMenuExecuteLoop::WriteEnabledCheatsToFile(&v8, &v7);
      if ( CTRPluginFramework::Preferences::AutoSaveFavorites )
        CTRPluginFramework::PluginMenuImpl::WriteFavoritesToFile(&v8, &v7);
      CTRPluginFramework::PluginMenuImpl::WriteHotkeysToFile(&v8, &v7);
      LODWORD(v4) = CTRPluginFramework::File::Tell((CTRPluginFramework::File *)&v7);
      v11 = v4;
      CTRPluginFramework::File::Rewind((CTRPluginFramework::File *)&v7);
      v3 = (CTRPluginFramework::PluginMenuActionReplay *)CTRPluginFramework::File::Write(
                                                           (CTRPluginFramework::File *)&v7,
                                                           &v8,
                                                           0x54u);
    }
  }
  CTRPluginFramework::PluginMenuActionReplay::SaveCodes(v3);
  CTRPluginFramework::OSDImpl::DrawSaveIcon = 0;
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v7);
}
// 4: using guessed type int CTRPluginFramework::Preferences::MenuHotkeys;
// 1C: using guessed type char CTRPluginFramework::Preferences::AutoLoadCheats;
// 1D: using guessed type char CTRPluginFramework::Preferences::AutoLoadFavorites;
// 1E: using guessed type char CTRPluginFramework::Preferences::AutoSaveCheats;
// 1F: using guessed type char CTRPluginFramework::Preferences::AutoSaveFavorites;
// 20: using guessed type char CTRPluginFramework::Preferences::DrawTouchCursor;
// 21: using guessed type char CTRPluginFramework::Preferences::ShowBottomFps;
// 22: using guessed type char CTRPluginFramework::Preferences::ShowTopFps;
// 23: using guessed type char CTRPluginFramework::Preferences::UseFloatingBtn;
// 1010: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1060: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);
// 10C0: using guessed type int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::WriteEnabledCheatsToFile(_DWORD, _DWORD);
// 10C4: using guessed type int __fastcall CTRPluginFramework::PluginMenuImpl::WriteFavoritesToFile(_DWORD, _DWORD);
// 10C8: using guessed type int __fastcall CTRPluginFramework::PluginMenuImpl::WriteHotkeysToFile(_DWORD, _DWORD);

//----- (00000DD0) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework11Preferences18topBackgroundImageE()
{
  CTRPluginFramework::Time::Time((CTRPluginFramework::Time *)&unk_30);
  dword_38 = -16777216;
  dword_3C = -16777216;
  dword_40 = -16777216;
  dword_44 = -16777216;
  dword_48 = -16777216;
  dword_4C = -16777216;
  dword_50 = -16777216;
  dword_58 = -16777216;
  dword_5C = -16777216;
  dword_60 = -16777216;
  dword_64 = -16777216;
  dword_68 = -16777216;
  dword_6C = -16777216;
  dword_70 = -16777216;
  dword_74 = -16777216;
  dword_78 = -16777216;
  dword_7C = -16777216;
  dword_80 = -16777216;
  dword_84 = -16777216;
  dword_88 = -16777216;
  dword_8C = -16777216;
  dword_90 = -16777216;
  dword_94 = -16777216;
  ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E = (int)&byte_A0;
  dword_9C = 0;
  byte_A0 = 0;
  _aeabi_atexit(
    &ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E,
    &std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string,
    &_dso_handle);
  ZN18CTRPluginFramework11Preferences14ScreenshotPathB5cxx11E = (int)&byte_B8;
  dword_B4 = 0;
  byte_B8 = 0;
  _aeabi_atexit(
    &ZN18CTRPluginFramework11Preferences14ScreenshotPathB5cxx11E,
    &std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string,
    &_dso_handle);
  ZN18CTRPluginFramework11Preferences16ScreenshotPrefixB5cxx11E = (int)&byte_D0;
  dword_CC = 0;
  byte_D0 = 0;
  return _aeabi_atexit(
           &ZN18CTRPluginFramework11Preferences16ScreenshotPrefixB5cxx11E,
           &std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string,
           &_dso_handle);
}
// 38: using guessed type int dword_38;
// 3C: using guessed type int dword_3C;
// 40: using guessed type int dword_40;
// 44: using guessed type int dword_44;
// 48: using guessed type int dword_48;
// 4C: using guessed type int dword_4C;
// 50: using guessed type int dword_50;
// 58: using guessed type int dword_58;
// 5C: using guessed type int dword_5C;
// 60: using guessed type int dword_60;
// 64: using guessed type int dword_64;
// 68: using guessed type int dword_68;
// 6C: using guessed type int dword_6C;
// 70: using guessed type int dword_70;
// 74: using guessed type int dword_74;
// 78: using guessed type int dword_78;
// 7C: using guessed type int dword_7C;
// 80: using guessed type int dword_80;
// 84: using guessed type int dword_84;
// 88: using guessed type int dword_88;
// 8C: using guessed type int dword_8C;
// 90: using guessed type int dword_90;
// 94: using guessed type int dword_94;
// 98: using guessed type int ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E;
// 9C: using guessed type int dword_9C;
// A0: using guessed type char byte_A0;
// B0: using guessed type int ZN18CTRPluginFramework11Preferences14ScreenshotPathB5cxx11E;
// B4: using guessed type int dword_B4;
// B8: using guessed type char byte_B8;
// C8: using guessed type int ZN18CTRPluginFramework11Preferences16ScreenshotPrefixB5cxx11E;
// CC: using guessed type int dword_CC;
// D0: using guessed type char byte_D0;
// 10DC: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);

// ALL OK, 16 function(s) have been successfully decompiled
