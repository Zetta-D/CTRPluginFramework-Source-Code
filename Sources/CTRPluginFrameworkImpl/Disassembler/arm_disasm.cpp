/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall std::__uninitialized_move_if_noexcept_a<RegBlock *,RegBlock *,std::allocator<RegBlock>>(int a1, int a2, int a3);
int __fastcall ZN10ARM_Disasm14DisassembleALUB5cxx11E6Opcodem(int a1, unsigned int a2, unsigned int a3);
int __fastcall ZN10ARM_Disasm17DisassembleBranchB5cxx11Em6Opcodem(int a1, int a2, int a3, unsigned int a4);
int __fastcall ZN10ARM_Disasm13DisassembleBXB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm15DisassembleBKPTB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm14DisassembleCLZB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm14DisassembleMemB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm18DisassembleMemHalfB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm14DisassembleMCRB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
int __fastcall ZN10ARM_Disasm14DisassembleMLAB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
int __fastcall ZN10ARM_Disasm16DisassembleUMLALB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
int __fastcall ZN10ARM_Disasm14DisassembleMULB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
int __fastcall ZN10ARM_Disasm14DisassembleMRSB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm14DisassembleMSRB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm21DisassemblePackUnpackB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
int __fastcall ZN10ARM_Disasm14DisassemblePLDB5cxx11Em(int a1, int a2);
int __fastcall ZN10ARM_Disasm14DisassembleSWIB5cxx11Em(int a1, unsigned int a2);
int __fastcall ZN10ARM_Disasm14DisassembleSWPB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
signed int __fastcall ARM_Disasm::Decode01(ARM_Disasm *this, unsigned int a2);
signed int __fastcall ARM_Disasm::Decode10(ARM_Disasm *this, unsigned int a2);
signed int __fastcall ARM_Disasm::Decode11(ARM_Disasm *this, unsigned int a2);
signed int __fastcall ARM_Disasm::DecodeMUL(ARM_Disasm *this, unsigned int a2);
signed int __fastcall ARM_Disasm::DecodeLDRH(ARM_Disasm *this, unsigned int a2);
signed int __fastcall ARM_Disasm::DecodeALU(ARM_Disasm *this, unsigned int a2);
char *__fastcall ARM_Disasm::Decode00(ARM_Disasm *this, unsigned int a2);
char *__fastcall ARM_Disasm::Decode(ARM_Disasm *this, unsigned int a2);
void __fastcall std::vector<RegBlock,std::allocator<RegBlock>>::emplace_back<int &,int &>(int a1, _DWORD *a2, int *a3);
int __fastcall ZN10ARM_Disasm19DisassembleMemblockB5cxx11E6Opcodem(int a1, int a2, unsigned int a3);
int *__fastcall ZN10ARM_Disasm11DisassembleB5cxx11Emm(int *a1, unsigned int a2, ARM_Disasm *a3);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_logic_error(const char *); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

char *opcode_names[5] = { "invalid", "undefined", "adc", "add", "and" }; // weak
char *off_8[4] = { "undefined", "adc", "add", "and" }; // weak
char *off_C[3] = { "adc", "add", "and" }; // weak
char *off_40[76] =
{
  "cmp",
  "dmb",
  "dsb",
  "eor",
  "isb",
  "it",
  "ldc",
  "ldm",
  "ldr",
  "ldrb",
  "ldrbt",
  "ldrh",
  "ldrd",
  "ldrsb",
  "ldrsh",
  "ldrt",
  "ldrex",
  "ldrexb",
  "ldrexh",
  "ldrexd",
  "mcr",
  "mla",
  "mov",
  "mrc",
  "mrs",
  "msr",
  "mul",
  "mvn",
  "nop",
  "orr",
  "pld",
  "pli",
  "rsb",
  "rsc",
  "sbc",
  "sev",
  "smlal",
  "smull",
  "stc",
  "stm",
  "str",
  "strb",
  "strbt",
  "strh",
  "strd",
  "strt",
  "strex",
  "strexb",
  "strebh",
  "strexd",
  "sub",
  "svc",
  "swp",
  "swpb",
  "sxtab",
  "sxtab16",
  "sxtah",
  "sxtb",
  "sxtb16",
  "sxth",
  "uxtab",
  "uxtab16",
  "uxtah",
  "uxtb",
  "uxtb16",
  "uxth",
  "teq",
  "tst",
  "umlal",
  "umull",
  "wfe",
  "wfiundefined",
  "adc",
  "add",
  "and",
  "asr"
}; // weak
char *off_44[75] =
{
  "dmb",
  "dsb",
  "eor",
  "isb",
  "it",
  "ldc",
  "ldm",
  "ldr",
  "ldrb",
  "ldrbt",
  "ldrh",
  "ldrd",
  "ldrsb",
  "ldrsh",
  "ldrt",
  "ldrex",
  "ldrexb",
  "ldrexh",
  "ldrexd",
  "mcr",
  "mla",
  "mov",
  "mrc",
  "mrs",
  "msr",
  "mul",
  "mvn",
  "nop",
  "orr",
  "pld",
  "pli",
  "rsb",
  "rsc",
  "sbc",
  "sev",
  "smlal",
  "smull",
  "stc",
  "stm",
  "str",
  "strb",
  "strbt",
  "strh",
  "strd",
  "strt",
  "strex",
  "strexb",
  "strebh",
  "strexd",
  "sub",
  "svc",
  "swp",
  "swpb",
  "sxtab",
  "sxtab16",
  "sxtah",
  "sxtb",
  "sxtb16",
  "sxth",
  "uxtab",
  "uxtab16",
  "uxtah",
  "uxtb",
  "uxtb16",
  "uxth",
  "teq",
  "tst",
  "umlal",
  "umull",
  "wfe",
  "wfiundefined",
  "adc",
  "add",
  "and",
  "asr"
}; // weak
char *RegNames[30] =
{
  "r0",
  "r1",
  "r2",
  "r3",
  "r4",
  "r5",
  "r6",
  "r7",
  "r8",
  "r9",
  "r10",
  "r11",
  "r12",
  "sp",
  "lr",
  "pc",
  "eq",
  "ne",
  "cs",
  "cc",
  "mi",
  "pl",
  "vs",
  "vc",
  "hi",
  "ls",
  "ge",
  "lt",
  "gt",
  "le"
}; // weak
_UNKNOWN unk_20FA; // weak
wchar_t aBt[4] = L"!-bt"; // weak


//----- (000001FC) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  const char *v2; // r5
  int *v3; // r4
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  const char *v11; // [sp+4h] [bp-14h]

  v11 = a2;
  v2 = a2;
  *a1 = (int)(a1 + 2);
  if ( !a2 )
    std::__throw_logic_error("basic_string::_M_construct null not valid");
  v3 = a1;
  v4 = strlen(a2);
  v5 = (int)&v2[v4];
  v11 = (const char *)v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v3, &v11, 0);
    v7 = (int)v11;
    *v3 = v6;
    v3[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v3, v2, v5);
  result = v3;
  v9 = (int)v11;
  v10 = *v3;
  v3[1] = (int)v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 25C0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 25C4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000284) --------------------------------------------------------
int __fastcall std::__uninitialized_move_if_noexcept_a<RegBlock *,RegBlock *,std::allocator<RegBlock>>(int a1, int a2, int a3)
{
  int v3; // r3
  int v4; // lr
  int i; // r12
  int *v6; // r1
  int v7; // r0
  int v8; // r1
  _DWORD *v9; // r4

  v3 = a2;
  v4 = a1;
  for ( i = 0; ; i += 8 )
  {
    v6 = (int *)(i + v4);
    if ( v3 == i + v4 )
      break;
    v7 = *v6;
    v8 = v6[1];
    v9 = (_DWORD *)(a3 + i);
    *v9 = v7;
    v9[1] = v8;
  }
  return a3 + v3 - v4;
}

//----- (000002C0) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleALUB5cxx11E6Opcodem(int a1, unsigned int a2, unsigned int a3)
{
  char v3; // r5
  int v4; // r6
  unsigned int v5; // r4
  unsigned int v6; // r9
  int v7; // r8
  int v8; // r10
  const char *v9; // r11
  unsigned int v10; // r1
  bool v11; // cf
  bool v12; // zf
  int v13; // r0
  int v14; // r0
  const char *v15; // r5
  char *v16; // r10
  int v17; // r0
  _DWORD *v18; // r0
  unsigned int v20; // r1
  int v21; // r1
  int v22; // r3
  int v23; // r2
  char *v24; // r8
  int v25; // r0
  int v26; // r4
  int v27; // r0
  _DWORD *v28; // r0
  char *v29; // r9
  int v30; // r0
  _DWORD *v31; // r0
  int v32; // r0
  _DWORD *v33; // r0
  int v34; // ST14_4
  int v35; // r0
  _DWORD *v36; // r0
  char *v37; // [sp+18h] [bp-70h]
  int v38; // [sp+1Ch] [bp-6Ch]
  char v39; // [sp+20h] [bp-68h]
  char *v40; // [sp+30h] [bp-58h]
  int v41; // [sp+34h] [bp-54h]
  char v42; // [sp+38h] [bp-50h]
  char v43; // [sp+48h] [bp-40h]

  v3 = 0;
  v37 = &v39;
  v40 = &v42;
  v4 = a1;
  v5 = a3;
  v38 = 0;
  v39 = 0;
  v41 = 0;
  v42 = 0;
  v6 = a3 >> 28;
  v7 = (a3 >> 25) & 1;
  v8 = (a3 >> 20) & 1;
  v9 = opcode_names[a2];
  if ( a2 == 37 )
    goto LABEL_22;
  if ( a2 > 0x25 )
  {
    if ( a2 != 42 )
    {
      if ( a2 < 0x2A )
        goto LABEL_6;
      v20 = a2 - 81;
      v11 = v20 >= 1;
      v12 = v20 == 1;
      if ( v20 > 1 )
        v3 = 0;
      goto LABEL_4;
    }
LABEL_22:
    v3 = 1;
    goto LABEL_6;
  }
  v10 = a2 - 14;
  v11 = v10 >= 1;
  v12 = v10 == 1;
LABEL_4:
  if ( v12 || !v11 )
    v3 = 6;
LABEL_6:
  if ( !(v3 & 1) )
  {
    v13 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
            &v37,
            RegNames[BYTE2(a3) & 0xF]);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v13, ", ");
  }
  *v40 = 0;
  if ( !(v3 & 2) )
  {
    v14 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
            &v40,
            RegNames[(unsigned __int16)v5 >> 12]);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v14, ", ");
  }
  if ( v8 )
  {
    v12 = (v3 & 4) == 0;
    v15 = (const char *)&unk_20FA;
    if ( v12 )
      v15 = "s";
  }
  else
  {
    v15 = (const char *)&unk_20FA;
  }
  v16 = RegNames[v6 + 16];
  if ( v7 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v43, v9);
    v17 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v43, v16);
    v18 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v17, v15);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
      v4,
      "%-8s%s%s#%u  ; 0x%X",
      *v18,
      v40,
      v37,
      (unsigned __int8)v5,
      (unsigned __int8)v5);
  }
  else
  {
    v21 = (v5 >> 4) & 1;
    v22 = (v5 >> 5) & 3;
    v23 = (v5 >> 7) & 0x1F;
    v24 = RegNames[v5 & 0xF];
    if ( v23 | v21 | v22 )
    {
      v29 = RegNames[v22 + 32];
      if ( v21 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v43, v9);
        v30 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v43, v16);
        v31 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v30, v15);
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
          v4,
          "%-8s%s%s%s, %s %s",
          *v31,
          v40,
          v37,
          v24,
          v29,
          RegNames[BYTE1(v5) & 0xF]);
        goto LABEL_16;
      }
      if ( !v23 )
      {
        if ( v22 == 3 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v43, v9);
          v32 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v43, v16);
          v33 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v32, v15);
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, "%-8s%s%s%s, RRX", *v33, v40, v37, v24);
          goto LABEL_16;
        }
        v23 = 32;
      }
      v34 = v23;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v43, v9);
      v35 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v43, v16);
      v36 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v35, v15);
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, "%-8s%s%s%s, %s #%u", *v36, v40, v37, v24, v29, v34);
      goto LABEL_16;
    }
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v43, v9);
    v25 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v43, v16);
    v26 = *(_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v25, v15);
    v27 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v40, &v37);
    v28 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v27, v24);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, "%-8s%s", v26, *v28);
  }
LABEL_16:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v43);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v40);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  return v4;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 25D8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);

//----- (000005E4) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm17DisassembleBranchB5cxx11Em6Opcodem(int a1, int a2, int a3, unsigned int a4)
{
  unsigned int v4; // r6
  int v5; // r4
  int v6; // r5
  int v7; // r4
  _DWORD *v8; // r0
  int v10; // [sp+0h] [bp-28h]

  v4 = a4 >> 28;
  v5 = a4 & 0xFFFFFF;
  if ( a4 & 0x800000 )
    v5 |= 0xFF000000;
  v6 = a1;
  v7 = a2 + 8 + 4 * v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v10, opcode_names[a3]);
  v8 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                   &v10,
                   RegNames[v4 + 16]);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v6, "%-8s0x%X", *v8, v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  return v6;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000660) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm13DisassembleBXB5cxx11Em(int a1, unsigned int a2)
{
  unsigned int v2; // r4
  int v3; // r5
  _DWORD *v4; // r0
  int v6; // [sp+0h] [bp-28h]

  v2 = a2;
  v3 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v6, "bx");
  v4 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                   &v6,
                   RegNames[(v2 >> 28) + 16]);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s", *v4, RegNames[v2 & 0xF]);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  return v3;
}
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000006CC) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm15DisassembleBKPTB5cxx11Em(int a1, unsigned int a2)
{
  int v2; // r4

  v2 = a1;
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(a1, "%-8s#%d", "bkpt", (unsigned __int16)(16 * (a2 >> 8)) | a2 & 0xF);
  return v2;
}
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);

//----- (00000704) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleCLZB5cxx11Em(int a1, unsigned int a2)
{
  unsigned int v2; // r4
  int v3; // r6
  _DWORD *v4; // r0
  char v6; // [sp+8h] [bp-28h]

  v2 = a2;
  v3 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v6, "clz");
  v4 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                   &v6,
                   RegNames[(v2 >> 28) + 16]);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
    v3,
    "%-8s%s, %s",
    *v4,
    RegNames[(unsigned __int16)v2 >> 12],
    RegNames[v2 & 0xF]);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  return v3;
}
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000780) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleMemB5cxx11Em(int a1, unsigned int a2)
{
  unsigned int v2; // r3
  unsigned int v3; // r2
  unsigned int v4; // r9
  const char *v5; // r1
  bool v6; // zf
  const wchar_t *v7; // r9
  int v8; // r5
  wchar_t *v9; // r6
  wchar_t *v10; // r4
  char **v11; // r2
  char *v12; // r7
  char *v13; // r8
  char *v14; // r10
  int v15; // r11
  int v16; // r0
  _DWORD *v17; // r0
  int v19; // r0
  _DWORD *v20; // r0
  wchar_t *v21; // r9
  int v22; // r0
  int v23; // r0
  _DWORD *v24; // r0
  int v25; // r0
  char *v26; // r11
  int v27; // r2
  int v28; // r0
  _DWORD *v29; // r0
  int v30; // r0
  _DWORD *v31; // r0
  int v32; // ST1C_4
  int v33; // r0
  _DWORD *v34; // r0
  wchar_t *v35; // r9
  int v36; // r0
  _DWORD *v37; // r0
  int v38; // r0
  int v39; // r0
  _DWORD *v40; // r0
  int v41; // ST1C_4
  int v42; // r0
  int v43; // r0
  _DWORD *v44; // r0
  int v45; // [sp+1Ch] [bp-4Ch]
  int v46; // [sp+20h] [bp-48h]
  char *v47; // [sp+24h] [bp-44h]
  char v48; // [sp+28h] [bp-40h]

  v2 = a2;
  v3 = a2 >> 28;
  v4 = a2 >> 21;
  v46 = HIBYTE(a2) & 1;
  v5 = "str";
  if ( v2 & 0x100000 )
    v5 = "ldr";
  v6 = (v4 & 1) == 0;
  v45 = v4 & 1;
  v7 = aBt;
  if ( v6 )
    v7 = (const wchar_t *)&unk_20FA;
  v8 = a1;
  v9 = &aBt[1];
  if ( v2 & 0x800000 )
    v9 = (wchar_t *)&unk_20FA;
  v10 = &aBt[2];
  v11 = &RegNames[v3];
  if ( !(v2 & 0x400000) )
    v10 = (wchar_t *)&unk_20FA;
  v12 = RegNames[(unsigned __int16)v2 >> 12];
  v13 = RegNames[(v2 >> 16) & 0xF];
  v14 = v11[16];
  if ( v2 & 0x2000000 )
  {
    v25 = (v2 >> 5) & 3;
    v47 = RegNames[v25 + 32];
    v26 = RegNames[v2 & 0xF];
    v27 = (v2 >> 7) & 0x1F;
    if ( v46 )
    {
      if ( !v27 )
      {
        if ( !v25 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
          v28 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
          v29 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v28, v10);
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s, %s%s]%s", *v29, v12, v13, v9, v26, v7);
          goto LABEL_13;
        }
        if ( v25 == 3 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
          v30 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
          v31 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v30, v10);
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s, %s%s, RRX]%s", *v31, v12, v13, v9, v26, v7);
          goto LABEL_13;
        }
        v27 = 32;
      }
      v32 = v27;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
      v33 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
      v34 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v33, v10);
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
        v8,
        "%-8s%s, [%s, %s%s, %s #%u]%s",
        *v34,
        v12,
        v13,
        v9,
        v26,
        v47,
        v32,
        v7);
    }
    else
    {
      v35 = &aBt[3];
      if ( !v45 )
        v35 = (wchar_t *)&unk_20FA;
      if ( !v27 )
      {
        if ( !v25 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
          v36 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
          v37 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v36, v10);
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s], %s%s", *v37, v35, v12, v13, v9, v26);
          goto LABEL_13;
        }
        if ( v25 == 3 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
          v38 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
          v39 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v38, v10);
          v40 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v39, v35);
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s], %s%s, RRX", *v40, v12, v13, v9, v26);
          goto LABEL_13;
        }
        v27 = 32;
      }
      v41 = v27;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
      v42 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
      v43 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v42, v10);
      v44 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v43, v35);
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
        v8,
        "%-8s%s, [%s], %s%s, %s #%u",
        *v44,
        v12,
        v13,
        v9,
        v26,
        v47,
        v41);
    }
  }
  else
  {
    v15 = v2 & 0xFFF;
    if ( v46 )
    {
      if ( v2 & 0xFFF )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
        v19 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
        v20 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v19, v10);
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s, #%s%u]%s", *v20, v12, v13, v9, v15, v7);
      }
      else
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
        v16 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
        v17 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v16, v10);
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s]", *v17, v12, v13);
      }
    }
    else
    {
      v21 = &aBt[3];
      if ( !v45 )
        v21 = (wchar_t *)&unk_20FA;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v48, v5);
      v22 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v48, v14);
      v23 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v22, v10);
      v24 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v23, v21);
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v8, "%-8s%s, [%s], #%s%u", *v24, v12, v13, v9, v15);
    }
  }
LABEL_13:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v48);
  return v8;
}
// 2040: using guessed type char *RegNames[30];
// 2180: using guessed type wchar_t aBt[4];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000B4C) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm18DisassembleMemHalfB5cxx11Em(int a1, unsigned int a2)
{
  unsigned int v2; // r3
  int v3; // r6
  bool v4; // zf
  wchar_t *v5; // r5
  unsigned int v6; // r12
  unsigned int v7; // r2
  unsigned int v8; // r4
  unsigned int v9; // r7
  int v10; // lr
  const char *v11; // r1
  const wchar_t *v12; // r10
  int v13; // r2
  char *v14; // r7
  char *v15; // r8
  char *v16; // r9
  int v17; // r4
  int v18; // r0
  _DWORD *v19; // r0
  int v21; // r0
  _DWORD *v22; // r0
  int v23; // r0
  _DWORD *v24; // r0
  char *v25; // r4
  int v26; // r0
  _DWORD *v27; // r0
  int v28; // r0
  _DWORD *v29; // r0
  char v30; // [sp+10h] [bp-38h]

  v2 = a2;
  v3 = a1;
  v4 = (a2 & 0x100000) == 0;
  v5 = (wchar_t *)&unk_20FA;
  v6 = a2 >> 28;
  v7 = a2 >> 24;
  v8 = a2 >> 16;
  v9 = a2 >> 12;
  v10 = a2 & 0xF;
  v11 = "str";
  if ( !v4 )
    v11 = "ldr";
  v12 = aBt;
  if ( !(v2 & 0x200000) )
    v12 = (const wchar_t *)&unk_20FA;
  if ( !(v2 & 0x800000) )
    v5 = &aBt[1];
  v13 = v7 & 1;
  v14 = RegNames[v9 & 0xF];
  v15 = RegNames[v8 & 0xF];
  v16 = RegNames[v6 + 16];
  if ( v2 & 0x400000 )
  {
    v17 = (unsigned __int8)(v10 | 16 * BYTE1(v2));
    if ( v13 )
    {
      if ( (unsigned __int8)v10 | (unsigned __int8)(16 * BYTE1(v2)) )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v30, v11);
        v21 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v30, v16);
        v22 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v21, "h");
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s, [%s, #%s%u]%s", *v22, v14, v15, v5, v17, v12);
      }
      else
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v30, v11);
        v18 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v30, v16);
        v19 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v18, "h");
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s, [%s]", *v19, v14, v15);
      }
    }
    else
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v30, v11);
      v23 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v30, v16);
      v24 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v23, "h");
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s, [%s], #%s%u", *v24, v14, v15, v5, v17);
    }
  }
  else
  {
    v25 = RegNames[v10];
    if ( v13 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v30, v11);
      v26 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v30, v16);
      v27 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v26, "h");
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s, [%s, %s%s]%s", *v27, v14, v15, v5, v25, v12);
    }
    else
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v30, v11);
      v28 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v30, v16);
      v29 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v28, "h");
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s, [%s], %s%s", *v29, v14, v15, v5, v25);
    }
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
  return v3;
}
// 2040: using guessed type char *RegNames[30];
// 2180: using guessed type wchar_t aBt[4];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000D50) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleMCRB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  unsigned int v3; // r4
  int v4; // r5
  _DWORD *v5; // r0
  char v7; // [sp+10h] [bp-28h]

  v3 = a3;
  v4 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    opcode_names[a2]);
  v5 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                   &v7,
                   RegNames[(v3 >> 28) + 16]);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
    v4,
    "%-8s%d, 0, %s, cr%d, cr%d, {%d}",
    *v5,
    BYTE1(v3) & 0xF,
    RegNames[(unsigned __int16)v3 >> 12],
    BYTE2(v3) & 0xF,
    v3 & 0xF,
    (unsigned __int8)v3 >> 5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  return v4;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000DF0) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleMLAB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  unsigned int v3; // r4
  int v4; // r9
  int v5; // r10
  unsigned int v6; // r6
  unsigned int v7; // r8
  unsigned int v8; // r7
  int v9; // r0
  const char *v10; // r1
  _DWORD *v11; // r0
  char v13; // [sp+10h] [bp-38h]

  v3 = a3;
  v4 = a1;
  v5 = a3 & 0xF;
  v6 = a3 >> 16;
  v7 = a3 >> 12;
  v8 = a3 >> 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v13,
    opcode_names[a2]);
  v9 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
         &v13,
         RegNames[(v3 >> 28) + 16]);
  v10 = "s";
  if ( !(v3 & 0x100000) )
    v10 = (const char *)&unk_20FA;
  v11 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v9, v10);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
    v4,
    "%-8s%s, %s, %s, %s",
    *v11,
    RegNames[v6 & 0xF],
    RegNames[v5],
    RegNames[v8 & 0xF],
    RegNames[v7 & 0xF]);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
  return v4;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000EAC) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm16DisassembleUMLALB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  unsigned int v3; // r4
  int v4; // r9
  int v5; // r10
  unsigned int v6; // r7
  unsigned int v7; // r6
  unsigned int v8; // r8
  int v9; // r0
  const char *v10; // r1
  _DWORD *v11; // r0
  char v13; // [sp+10h] [bp-38h]

  v3 = a3;
  v4 = a1;
  v5 = a3 & 0xF;
  v6 = a3 >> 16;
  v7 = a3 >> 12;
  v8 = a3 >> 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v13,
    opcode_names[a2]);
  v9 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
         &v13,
         RegNames[(v3 >> 28) + 16]);
  v10 = "s";
  if ( !(v3 & 0x100000) )
    v10 = (const char *)&unk_20FA;
  v11 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v9, v10);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
    v4,
    "%-8s%s, %s, %s, %s",
    *v11,
    RegNames[v7 & 0xF],
    RegNames[v6 & 0xF],
    RegNames[v5],
    RegNames[v8 & 0xF]);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
  return v4;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000F68) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleMULB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  unsigned int v3; // r4
  int v4; // r8
  int v5; // r9
  unsigned int v6; // r6
  unsigned int v7; // r7
  int v8; // r0
  const char *v9; // r1
  _DWORD *v10; // r0
  char v12; // [sp+8h] [bp-38h]

  v3 = a3;
  v4 = a1;
  v5 = a3 & 0xF;
  v6 = a3 >> 16;
  v7 = a3 >> 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v12,
    opcode_names[a2]);
  v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
         &v12,
         RegNames[(v3 >> 28) + 16]);
  v9 = "s";
  if ( !(v3 & 0x100000) )
    v9 = (const char *)&unk_20FA;
  v10 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v8, v9);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
    v4,
    "%-8s%s, %s, %s",
    *v10,
    RegNames[v6 & 0xF],
    RegNames[v5],
    RegNames[v7 & 0xF]);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  return v4;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001014) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleMRSB5cxx11Em(int a1, unsigned int a2)
{
  unsigned int v2; // r4
  int v3; // r5
  int v4; // r2
  const char *v5; // r1
  char v7; // [sp+8h] [bp-28h]

  v2 = a2;
  v3 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v7, "mrs");
  v4 = *(_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                    &v7,
                    RegNames[(v2 >> 28) + 16]);
  v5 = "spsr";
  if ( !(v2 & 0x400000) )
    v5 = "cpsr";
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s%s, %s", v4, RegNames[(unsigned __int16)v2 >> 12], v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  return v3;
}
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000010A0) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleMSRB5cxx11Em(int a1, unsigned int a2)
{
  int v2; // r3
  int v3; // r6
  unsigned int v4; // r5
  int v5; // r5
  char *v6; // r8
  char *v7; // r4
  int *v8; // r0
  const char *v9; // r3
  const char *v10; // r1
  int v11; // r2
  int v13; // r4
  char *v14; // [sp+4h] [bp-44h]
  char v15; // [sp+8h] [bp-40h]
  char v16; // [sp+10h] [bp-38h]
  char v17; // [sp+28h] [bp-20h]

  v2 = BYTE2(a2) & 1;
  if ( a2 & 0x10000 )
    v2 = 99;
  if ( a2 & 0x10000 )
    v15 = v2;
  v3 = a1;
  v4 = a2 >> 22;
  if ( a2 & 0x10000 )
    v2 = 1;
  v5 = v4 & 1;
  if ( a2 & 0x20000 )
    *(&v17 + v2++ - 32) = 120;
  if ( a2 & 0x40000 )
    *(&v17 + v2++ - 32) = 115;
  if ( a2 & 0x80000 )
    *(&v17 + v2++ - 32) = 102;
  *(&v17 + v2 - 32) = 0;
  v6 = RegNames[(a2 >> 28) + 16];
  if ( (a2 >> 25) & 1 )
  {
    v7 = (char *)__ROR4__((unsigned __int8)a2, (a2 >> 7) & 0x1E);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v16, "msr");
    v8 = (int *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v16, v6);
    v9 = "cpsr";
    if ( v5 )
      v9 = "spsr";
    v10 = "%-8s%s_%s, #0x%X";
    v11 = *v8;
    v14 = v7;
  }
  else
  {
    v13 = a2 & 0xF;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v16, "mrs");
    v11 = *(_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v16, v6);
    v14 = RegNames[v13];
    v9 = "cpsr";
    if ( v5 )
      v9 = "spsr";
    v10 = "%-8s%s_%s, %s";
  }
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, v10, v11, v9, &v15, v14, *(_DWORD *)&v15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v16);
  return v3;
}
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001218) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm21DisassemblePackUnpackB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  char v3; // r3
  char v4; // r6
  int v5; // r7
  int v6; // r12
  unsigned int v7; // r0
  int v8; // r2
  int v9; // r6
  int v10; // r3
  const char *v11; // r4
  char *v12; // r10
  const char *v13; // r1
  char *v14; // r8
  char *v15; // r9
  _DWORD *v16; // r0
  _DWORD *v18; // r0
  char v19; // [sp+10h] [bp-38h]

  v3 = a3 >> 12;
  v4 = BYTE2(a3);
  v5 = a1;
  v6 = a3 & 0xF;
  v7 = a3 >> 28;
  v8 = (a3 >> 10) & 3;
  v9 = v4 & 0xF;
  v10 = v3 & 0xF;
  if ( v8 == 1 )
  {
    v11 = ", ror #8";
  }
  else if ( v8 == 2 )
  {
    v11 = ", ror #16";
  }
  else
  {
    v11 = (const char *)&unk_20FA;
    if ( v8 == 3 )
      v11 = ", ror #24";
  }
  v12 = RegNames[v7 + 16];
  v13 = opcode_names[a2];
  v14 = RegNames[v10];
  v15 = RegNames[v6];
  if ( v9 == 15 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v19, v13);
    v16 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v19, v12);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v5, "%-8s%s, %s%s", *v16, v14, v15, v11);
  }
  else
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v19, v13);
    v18 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v19, v12);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v5, "%-8s%s, %s, %s%s", *v18, v14, RegNames[v9], v15, v11);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v19);
  return v5;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000132C) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassemblePLDB5cxx11Em(int a1, int a2)
{
  wchar_t *v2; // r2
  char *v3; // r3
  int v4; // r4
  int v5; // r1

  v2 = (wchar_t *)&unk_20FA;
  if ( !(a2 & 0x800000) )
    v2 = &aBt[1];
  v3 = RegNames[BYTE2(a2) & 0xF];
  v4 = a1;
  if ( a2 & 0x2000000 )
  {
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(a1, "%-8s[%s, %s%s]", "pld", v3, v2, RegNames[a2 & 0xF]);
  }
  else
  {
    v5 = a2 & 0xFFF;
    if ( v5 )
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(a1, "%-8s[%s, #%s%u]", "pld", v3, v2, v5);
    else
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(a1, "%-8s[%s]");
  }
  return v4;
}
// 2040: using guessed type char *RegNames[30];
// 2180: using guessed type wchar_t aBt[4];
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);

//----- (000013D4) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleSWIB5cxx11Em(int a1, unsigned int a2)
{
  unsigned int v2; // r5
  int v3; // r4
  _DWORD *v4; // r0
  int v6; // [sp+0h] [bp-28h]

  v2 = a2;
  v3 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v6, "svc");
  v4 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                   &v6,
                   RegNames[(v2 >> 28) + 16]);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v3, "%-8s0x%X", *v4, v2 & 0xFFFFFF);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  return v3;
}
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000143C) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm14DisassembleSWPB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  unsigned int v3; // r4
  int v4; // r6
  _DWORD *v5; // r0
  char v7; // [sp+8h] [bp-28h]

  v3 = a3;
  v4 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    opcode_names[a2]);
  v5 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                   &v7,
                   RegNames[(v3 >> 28) + 16]);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
    v4,
    "%-8s%s, %s, [%s]",
    *v5,
    RegNames[(unsigned __int16)v3 >> 12],
    RegNames[v3 & 0xF],
    RegNames[BYTE2(v3) & 0xF]);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  return v4;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000014CC) --------------------------------------------------------
signed int __fastcall ARM_Disasm::Decode01(ARM_Disasm *this, unsigned int a2)
{
  unsigned int v2; // r2
  bool v3; // zf
  unsigned int v4; // r3
  signed int result; // r0
  unsigned int v6; // r3

  v2 = ((unsigned int)this >> 23) & 7;
  v3 = v2 == 5;
  if ( v2 == 5 )
    v3 = (unsigned __int8)this >> 4 == 7;
  if ( v3 )
  {
    v4 = ((unsigned int)this >> 20) & 7;
    if ( ((unsigned int)this ^ 0xF0000) & 0xF0000 )
    {
      if ( v4 == 2 )
      {
        result = 69;
      }
      else if ( v4 )
      {
        switch ( v4 )
        {
          case 3u:
            result = 71;
            break;
          case 6u:
            result = 75;
            break;
          case 4u:
            result = 76;
            break;
          case 7u:
            result = 77;
            break;
          default:
            result = 1;
            break;
        }
      }
      else
      {
        result = 70;
      }
    }
    else if ( v4 == 2 )
    {
      result = 72;
    }
    else if ( v4 )
    {
      switch ( v4 )
      {
        case 3u:
          result = 74;
          break;
        case 6u:
          result = 78;
          break;
        case 4u:
          result = 79;
          break;
        case 7u:
          result = 80;
          break;
        default:
          result = 1;
          break;
      }
    }
    else
    {
      result = 73;
    }
  }
  else if ( ((unsigned int)this >> 4) & ((unsigned int)this >> 25) & 1 )
  {
    result = 1;
  }
  else
  {
    v6 = ((unsigned int)this >> 22) & 1;
    if ( ((unsigned int)this & 0xFD70F000) == -179245056 )
    {
      result = 45;
    }
    else if ( ((unsigned int)this >> 20) & 1 )
    {
      if ( v6 )
        result = 24;
      else
        result = 23;
    }
    else if ( v6 )
    {
      result = 56;
    }
    else
    {
      result = 55;
    }
  }
  return result;
}

//----- (0000162C) --------------------------------------------------------
signed int __fastcall ARM_Disasm::Decode10(ARM_Disasm *this, unsigned int a2)
{
  signed int result; // r0

  if ( (unsigned int)this & 0x2000000 )
  {
    if ( (unsigned int)this & 0x1000000 )
      result = 6;
    else
      result = 5;
  }
  else if ( (unsigned int)this & 0x100000 )
  {
    result = 22;
  }
  else
  {
    result = 54;
  }
  return result;
}

//----- (00001654) --------------------------------------------------------
signed int __fastcall ARM_Disasm::Decode11(ARM_Disasm *this, unsigned int a2)
{
  signed int result; // r0
  unsigned int v3; // r2

  if ( (unsigned int)this & 0x2000000 )
  {
    if ( (unsigned int)this & 0x1000000 )
      return 66;
    if ( ((unsigned int)this ^ 0xF00) & 0xF00 )
    {
      if ( !(((unsigned int)this >> 4) & 1) )
        return 11;
    }
    else
    {
      v3 = (unsigned int)this & 0xE00000;
      if ( (unsigned int)this & 0xE00000 )
        v3 = 1;
      if ( v3 | ~(unsigned __int8)((unsigned int)this >> 4) & 1 )
        return 1;
    }
    if ( (unsigned int)this & 0x100000 )
      result = 38;
    else
      result = 35;
  }
  else if ( (unsigned int)this & 0x100000 )
  {
    result = 21;
  }
  else
  {
    result = 53;
  }
  return result;
}

//----- (000016D0) --------------------------------------------------------
signed int __fastcall ARM_Disasm::DecodeMUL(ARM_Disasm *this, unsigned int a2)
{
  unsigned int v2; // r2
  unsigned int v3; // r3
  signed int result; // r0

  if ( (unsigned int)this & 0x1000000 )
    return 1;
  v2 = ((unsigned int)this >> 22) & 1;
  v3 = ((unsigned int)this >> 21) & 1;
  if ( !((unsigned int)this & 0x800000) )
  {
    if ( !v2 )
    {
      if ( v3 )
        result = 36;
      else
        result = 41;
      return result;
    }
    return 1;
  }
  if ( v2 )
  {
    if ( v3 )
      result = 51;
    else
      result = 52;
  }
  else if ( v3 )
  {
    result = 83;
  }
  else
  {
    result = 84;
  }
  return result;
}

//----- (00001738) --------------------------------------------------------
signed int __fastcall ARM_Disasm::DecodeLDRH(ARM_Disasm *this, unsigned int a2)
{
  unsigned int v2; // r3
  signed int result; // r0

  v2 = ((unsigned int)this >> 5) & 3;
  if ( (unsigned int)this & 0x100000 )
  {
    switch ( v2 )
    {
      case 1u:
        result = 26;
        break;
      case 2u:
        result = 28;
        break;
      case 3u:
        result = 29;
        break;
      default:
        result = 1;
        break;
    }
  }
  else if ( v2 == 1 )
  {
    result = 58;
  }
  else
  {
    result = 1;
  }
  return result;
}

//----- (00001788) --------------------------------------------------------
signed int __fastcall ARM_Disasm::DecodeALU(ARM_Disasm *this, unsigned int a2)
{
  unsigned int v2; // r3
  signed int result; // r0

  v2 = ((unsigned int)this >> 20) & 1;
  if ( ((unsigned int)this >> 7) & 1 & ~((unsigned int)this >> 25) & ((unsigned int)this >> 4) )
    return 1;
  switch ( ((unsigned int)this >> 21) & 0xF )
  {
    case 1u:
      result = 18;
      break;
    case 2u:
      result = 65;
      break;
    case 3u:
      result = 47;
      break;
    case 4u:
      result = 3;
      break;
    case 5u:
      result = 2;
      break;
    case 6u:
      result = 49;
      break;
    case 7u:
      result = 48;
      break;
    case 8u:
      if ( v2 )
        result = 82;
      else
        result = 39;
      break;
    case 9u:
      if ( v2 )
        result = 81;
      else
        result = 40;
      break;
    case 0xAu:
      if ( v2 )
        result = 15;
      else
        result = 39;
      break;
    case 0xBu:
      if ( v2 )
        result = 14;
      else
        result = 40;
      break;
    case 0xCu:
      result = 44;
      break;
    case 0xDu:
      result = 37;
      break;
    case 0xEu:
      result = 7;
      break;
    case 0xFu:
      result = 42;
      break;
    default:
      result = 4;
      break;
  }
  return result;
}

//----- (000018A0) --------------------------------------------------------
char *__fastcall ARM_Disasm::Decode00(ARM_Disasm *this, unsigned int a2)
{
  unsigned int v2; // r1

  v2 = ((unsigned int)this >> 4) & 1 & ~((unsigned int)this >> 25);
  if ( !v2 )
    return (char *)ARM_Disasm::DecodeALU(this, v2);
  if ( ((unsigned int)this & 0xFFFFFF0) == 19922704 )
    return (_BYTE *)(off_8 + 2);
  if ( ((unsigned int)this & 0xFF000F0) == 23068688 )
    return (_BYTE *)(off_C + 1);
  v2 = (unsigned int)this & 0xFFF000F0;
  if ( ((unsigned int)this & 0xFFF000F0) == -517996432 )
    return (_BYTE *)off_8;
  if ( (unsigned __int8)this >> 4 != 9 )
  {
    if ( (unsigned __int8)this & 0x80 )
      return (char *)ARM_Disasm::DecodeLDRH(this, v2);
    return (char *)ARM_Disasm::DecodeALU(this, v2);
  }
  if ( ((unsigned int)this & 0xFF00FF0) != 16777360 )
    return (char *)ARM_Disasm::DecodeMUL(this, 0x1000090u);
  if ( (unsigned int)this & 0x400000 )
    return (_BYTE *)off_44;
  return (char *)off_40 + 3;
}
// 8: using guessed type char *[4];
// C: using guessed type char *[3];
// 40: using guessed type char *[76];
// 44: using guessed type char *[75];

//----- (00001964) --------------------------------------------------------
char *__fastcall ARM_Disasm::Decode(ARM_Disasm *this, unsigned int a2)
{
  unsigned int v2; // r3

  v2 = ((unsigned int)this >> 26) & 3;
  switch ( v2 )
  {
    case 2u:
      return (char *)ARM_Disasm::Decode10(this, a2);
    case 3u:
      return (char *)ARM_Disasm::Decode11(this, a2);
    case 1u:
      return (char *)ARM_Disasm::Decode01(this, a2);
  }
  return ARM_Disasm::Decode00(this, a2);
}

//----- (00001994) --------------------------------------------------------
void __fastcall std::vector<RegBlock,std::allocator<RegBlock>>::emplace_back<int &,int &>(int a1, _DWORD *a2, int *a3)
{
  _QWORD *v3; // r7
  __int64 v4; // r2
  void *v5; // r8
  int *v6; // r9
  int v7; // r11
  int v8; // r4
  signed int v9; // r3
  unsigned __int8 v10; // cf
  unsigned int v11; // r4
  _DWORD *v12; // r10
  int *v13; // r6
  int v14; // r5
  int v15; // r2
  int v16; // r0
  int v17; // r7

  v3 = *(_QWORD **)(a1 + 4);
  if ( v3 != *(_QWORD **)(a1 + 8) )
  {
    HIDWORD(v4) = *a3;
    LODWORD(v4) = *a2;
    *v3 = v4;
    *(_DWORD *)(a1 + 4) += 8;
    return;
  }
  v5 = *(void **)a1;
  v6 = a3;
  v7 = (int)v3 - *(_DWORD *)a1;
  v8 = v7 >> 3;
  if ( v7 >> 3 )
    v9 = v7 >> 3;
  else
    v9 = 1;
  v10 = __CFADD__(v8, v9);
  v11 = v8 + v9;
  v12 = a2;
  v13 = (int *)a1;
  if ( v10 || v11 > 0x1FFFFFFF )
  {
    v11 = 0x1FFFFFFF;
    goto LABEL_14;
  }
  if ( v11 )
  {
LABEL_14:
    v14 = operator new(8 * v11);
    goto LABEL_10;
  }
  v14 = 0;
LABEL_10:
  v15 = *v6;
  *(_DWORD *)(v14 + v7) = *v12;
  *(_DWORD *)(v14 + v7 + 4) = v15;
  v16 = std::__uninitialized_move_if_noexcept_a<RegBlock *,RegBlock *,std::allocator<RegBlock>>((int)v5, (int)v3, v14);
  v17 = std::__uninitialized_move_if_noexcept_a<RegBlock *,RegBlock *,std::allocator<RegBlock>>(
          (int)v3,
          (int)v3,
          v16 + 8);
  if ( v5 )
    operator delete(v5);
  *v13 = v14;
  v13[1] = v17;
  v13[2] = v14 + 8 * v11;
}

//----- (00001A6C) --------------------------------------------------------
int __fastcall ZN10ARM_Disasm19DisassembleMemblockB5cxx11E6Opcodem(int a1, int a2, unsigned int a3)
{
  int v3; // r4
  const char *v4; // r9
  const char *v5; // r1
  int v6; // r8
  const wchar_t *v7; // r0
  int v8; // r5
  int v9; // r7
  int v10; // r3
  __int64 *v11; // r5
  const char *v12; // r2
  __int64 v13; // r0
  char *v14; // r3
  const char *v15; // r4
  const char *v16; // r3
  bool v17; // zf
  int v18; // r0
  _DWORD *v19; // r0
  unsigned int v21; // [sp+10h] [bp-B0h]
  const wchar_t *v22; // [sp+14h] [bp-ACh]
  const char *v23; // [sp+18h] [bp-A8h]
  int v24; // [sp+1Ch] [bp-A4h]
  int v25; // [sp+20h] [bp-A0h]
  __int64 *v26; // [sp+24h] [bp-9Ch]
  void *v27; // [sp+2Ch] [bp-94h]
  __int64 *v28; // [sp+30h] [bp-90h]
  int v29; // [sp+34h] [bp-8Ch]
  char *v30; // [sp+38h] [bp-88h]
  int v31; // [sp+3Ch] [bp-84h]
  char v32; // [sp+40h] [bp-80h]
  char *v33; // [sp+50h] [bp-70h]
  int v34; // [sp+54h] [bp-6Ch]
  char v35; // [sp+58h] [bp-68h]
  __int64 v36; // [sp+68h] [bp-58h]
  char v37; // [sp+70h] [bp-50h]
  int i; // [sp+80h] [bp-40h]

  v3 = a2;
  v33 = &v35;
  v21 = a3 >> 28;
  v24 = HIBYTE(a3) & 1;
  v25 = BYTE2(a3) & 0xF;
  v4 = opcode_names[a2];
  v5 = (const char *)&unk_20FA;
  v6 = a1;
  v7 = aBt;
  if ( !(a3 & 0x200000) )
    v7 = (const wchar_t *)&unk_20FA;
  v30 = &v32;
  v22 = v7;
  if ( a3 & 0x400000 )
    v5 = "^";
  v8 = (unsigned __int16)a3;
  v36 = (unsigned int)&v37;
  v31 = 0;
  v32 = 0;
  v34 = 0;
  v35 = 0;
  v9 = (a3 >> 23) & 1;
  v23 = v5;
  v37 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  for ( i = 0; i <= 12; ++i )
  {
    if ( v8 & (1 << i) )
    {
      if ( v27 == v28 || (v10 = *((_DWORD *)v28 - 1) + 1, v10 != i) )
        std::vector<RegBlock,std::allocator<RegBlock>>::emplace_back<int &,int &>((int)&v27, &i, &i);
      else
        *((_DWORD *)v28 - 1) = v10;
    }
  }
  for ( i = 13; i <= 15; ++i )
  {
    if ( v8 & (1 << i) )
      std::vector<RegBlock,std::allocator<RegBlock>>::emplace_back<int &,int &>((int)&v27, &i, &i);
  }
  v11 = (__int64 *)v27;
  v12 = (const char *)&unk_20FA;
  v26 = v28;
  while ( v26 != v11 )
  {
    v13 = *v11;
    v14 = RegNames[(unsigned int)*v11];
    if ( (_DWORD)v13 == HIDWORD(v13) )
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&i, "%s%s", v12, v14);
    else
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&i, "%s%s-%s", v12, v14, RegNames[HIDWORD(v13)]);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v36, &i);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&i);
    ++v11;
    v12 = ",";
  }
  if ( v27 )
    operator delete(v27);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v33, &v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  if ( v24 )
  {
    if ( v9 )
    {
      v15 = "ib";
      goto LABEL_33;
    }
    v16 = "db";
    v17 = v3 == 54;
  }
  else
  {
    if ( !v9 )
    {
      v15 = "da";
      goto LABEL_33;
    }
    v16 = "ia";
    v17 = v3 == 22;
  }
  if ( v17 )
    v15 = "fd";
  else
    v15 = v16;
LABEL_33:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&i, v4);
  v18 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&i, RegNames[v21 + 16]);
  v19 = (_DWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v18, v15);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v6, "%-8s%s%s, {%s}%s", *v19, RegNames[v25], v22, v33, v23);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&i);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v33);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
  return v6;
}
// 4: using guessed type char *opcode_names[5];
// 2040: using guessed type char *RegNames[30];
// 2180: using guessed type wchar_t aBt[4];
// 25CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 25D0: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 25D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 25E4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 25E8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (00001D50) --------------------------------------------------------
int *__fastcall ZN10ARM_Disasm11DisassembleB5cxx11Emm(int *a1, unsigned int a2, ARM_Disasm *a3)
{
  int *v3; // r4
  int v4; // r5
  char *v5; // r0
  const char *v6; // r1
  unsigned int v8; // [sp+4h] [bp-14h]

  v3 = a1;
  v4 = a2;
  v8 = (unsigned int)a3;
  v5 = ARM_Disasm::Decode(a3, a2);
  switch ( (unsigned int)v5 )
  {
    case 0u:
      v6 = "Invalid";
      goto LABEL_3;
    case 1u:
      v6 = "Undefined";
      goto LABEL_3;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 0xEu:
    case 0xFu:
    case 0x12u:
    case 0x25u:
    case 0x2Au:
    case 0x2Cu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x41u:
    case 0x51u:
    case 0x52u:
      ZN10ARM_Disasm14DisassembleALUB5cxx11E6Opcodem((int)v3, (unsigned int)v5, v8);
      return v3;
    case 5u:
    case 6u:
      ZN10ARM_Disasm17DisassembleBranchB5cxx11Em6Opcodem((int)v3, v4, (int)v5, v8);
      return v3;
    case 8u:
      ZN10ARM_Disasm15DisassembleBKPTB5cxx11Em((int)v3, v8);
      return v3;
    case 9u:
      v6 = 0;
      goto LABEL_3;
    case 0xAu:
      ZN10ARM_Disasm13DisassembleBXB5cxx11Em((int)v3, v8);
      return v3;
    case 0xBu:
      v6 = "cdp";
      goto LABEL_3;
    case 0xDu:
      ZN10ARM_Disasm14DisassembleCLZB5cxx11Em((int)v3, v8);
      return v3;
    case 0x15u:
      v6 = "ldc";
      goto LABEL_3;
    case 0x16u:
    case 0x36u:
      ZN10ARM_Disasm19DisassembleMemblockB5cxx11E6Opcodem((int)v3, (int)v5, v8);
      return v3;
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Eu:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Cu:
      ZN10ARM_Disasm14DisassembleMemB5cxx11Em((int)v3, v8);
      return v3;
    case 0x1Au:
    case 0x1Cu:
    case 0x1Du:
    case 0x3Au:
      ZN10ARM_Disasm18DisassembleMemHalfB5cxx11Em((int)v3, v8);
      return v3;
    case 0x23u:
    case 0x26u:
      ZN10ARM_Disasm14DisassembleMCRB5cxx11E6Opcodem((int)v3, (int)v5, v8);
      return v3;
    case 0x24u:
      ZN10ARM_Disasm14DisassembleMLAB5cxx11E6Opcodem((int)v3, 36, v8);
      return v3;
    case 0x27u:
      ZN10ARM_Disasm14DisassembleMRSB5cxx11Em((int)v3, v8);
      return v3;
    case 0x28u:
      ZN10ARM_Disasm14DisassembleMSRB5cxx11Em((int)v3, v8);
      return v3;
    case 0x29u:
      ZN10ARM_Disasm14DisassembleMULB5cxx11E6Opcodem((int)v3, 41, v8);
      return v3;
    case 0x2Du:
      ZN10ARM_Disasm14DisassemblePLDB5cxx11Em((int)v3, v8);
      return v3;
    case 0x33u:
    case 0x34u:
    case 0x53u:
    case 0x54u:
      ZN10ARM_Disasm16DisassembleUMLALB5cxx11E6Opcodem((int)v3, (int)v5, v8);
      return v3;
    case 0x35u:
      v6 = "stc";
      goto LABEL_3;
    case 0x42u:
      ZN10ARM_Disasm14DisassembleSWIB5cxx11Em((int)v3, v8);
      break;
    case 0x43u:
    case 0x44u:
      ZN10ARM_Disasm14DisassembleSWPB5cxx11E6Opcodem((int)v3, (int)v5, v8);
      break;
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
      ZN10ARM_Disasm21DisassemblePackUnpackB5cxx11E6Opcodem((int)v3, (int)v5, v8);
      break;
    default:
      v6 = "Error";
LABEL_3:
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v3, v6);
      break;
  }
  return v3;
}

// ALL OK, 30 function(s) have been successfully decompiled
