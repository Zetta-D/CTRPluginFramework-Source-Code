/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::HotkeysModifier::_DrawTop(CTRPluginFramework::HotkeysModifier *this);
int __fastcall CTRPluginFramework::HotkeysModifier::_DrawBottom(CTRPluginFramework::HotkeysModifier *this);
int __fastcall CTRPluginFramework::HotkeysModifier::_Update(CTRPluginFramework::HotkeysModifier *this, int a2, int a3, int a4);
CTRPluginFramework::Controller *__fastcall CTRPluginFramework::HotkeysModifier::operator()(CTRPluginFramework::HotkeysModifier *a1);
int __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::Button *>(int result, int (__fastcall ***a2)(_DWORD));
CTRPluginFramework::HotkeysModifier *__fastcall CTRPluginFramework::HotkeysModifier::~HotkeysModifier(CTRPluginFramework::HotkeysModifier *this);
CTRPluginFramework::Button *__fastcall CTRPluginFramework::Button::Button(CTRPluginFramework::Button *this, const CTRPluginFramework::Button *a2);
void __fastcall std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::_M_realloc_insert<CTRPluginFramework::Button>(const CTRPluginFramework::Button **a1, const CTRPluginFramework::Button *a2, const CTRPluginFramework::Button *a3);
void __fastcall std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::emplace_back<CTRPluginFramework::Button>(int a1, const CTRPluginFramework::Button *a2);
_DWORD *__fastcall CTRPluginFramework::HotkeysModifier::HotkeysModifier(_DWORD *a1, _DWORD *a2, int a3);
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void); weak
// int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// _DWORD CTRPluginFramework::System::IsNew3DS(CTRPluginFramework::System *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::MustClose(CTRPluginFramework::Window *__hidden this); idb
// _DWORD CTRPluginFramework::Controller::Update(CTRPluginFramework::Controller *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb
// _DWORD CTRPluginFramework::Button::GetState(CTRPluginFramework::Button *__hidden this); idb
// void __cdecl operator delete(void *); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Button::~Button(CTRPluginFramework::Button *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Button::SetState(CTRPluginFramework::Button *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Button::Enable(CTRPluginFramework::Button *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawCheckBox(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak

//-------------------------------------------------------------------------
// Data declarations

void *CTRPluginFramework::stable = &unk_708; // weak
int CTRPluginFramework::ktable[14] = { 16384, 512, 64, 32, 16, 128, 8, 32768, 256, 1024, 2048, 1, 2, 4 }; // idb
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN `vtable for'CTRPluginFramework::Button; weak


//----- (00000004) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeysModifier::_DrawTop(CTRPluginFramework::HotkeysModifier *this)
{
  CTRPluginFramework::HotkeysModifier *v1; // r4
  signed __int64 v3; // [sp+4h] [bp-24h]
  int v4; // [sp+Ch] [bp-1Ch]
  char v5; // [sp+10h] [bp-18h]
  char v6; // [sp+1Fh] [bp-9h]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(1);
  HIDWORD(v3) = &v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
  v4 = 15;
  v6 = 0;
  CTRPluginFramework::Window::Draw(&CTRPluginFramework::Window::TopWindow, (char *)&v3 + 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)&v3 + 4);
  v3 = 261993005256LL;
  return ((int (__fastcall *)(_DWORD, signed int, char *, signed int, _DWORD))CTRPluginFramework::Renderer::DrawSysStringReturn)(
           *((_DWORD *)v1 + 4),
           40,
           (char *)&v3 + 4,
           300,
           CTRPluginFramework::Preferences::Settings[4]);
}
// 748: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 74C: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void);
// 750: using guessed type int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD);
// 754: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 758: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000094) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeysModifier::_DrawBottom(CTRPluginFramework::HotkeysModifier *this)
{
  CTRPluginFramework::HotkeysModifier *v1; // r4
  CTRPluginFramework::System *v2; // r0
  __int64 i; // r4
  int v4; // r4
  int v5; // r7
  int v6; // r4
  int result; // r0
  int v8; // [sp+Ch] [bp-2Ch]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(0);
  v2 = (CTRPluginFramework::System *)CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  for ( i = *(_QWORD *)((char *)v1 + 4); (_DWORD)i != HIDWORD(i); LODWORD(i) = i + 72 )
    v2 = (CTRPluginFramework::System *)(*(int (__fastcall **)(_DWORD))(*(_DWORD *)i + 8))(i);
  v4 = (unsigned __int8)(CTRPluginFramework::System::IsNew3DS(v2) ^ 1);
  v5 = v4;
  v8 = 25 * v4 + 32;
  do
  {
    CTRPluginFramework::Renderer::DrawSysString(
      *(&CTRPluginFramework::stable + v5++),
      50,
      &v8,
      290,
      CTRPluginFramework::Preferences::Settings[4],
      0);
    v8 += 9;
  }
  while ( v5 != 7 );
  v8 = 25 * v4 + 32;
  v6 = v4 + 7;
  do
  {
    result = CTRPluginFramework::Renderer::DrawSysString(
               *(&CTRPluginFramework::stable + v6++),
               220,
               &v8,
               290,
               CTRPluginFramework::Preferences::Settings[4],
               0);
    v8 += 9;
  }
  while ( v6 != 14 );
  return result;
}
// 688: using guessed type void *CTRPluginFramework::stable;
// 748: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 76C: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000001B0) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeysModifier::_Update(CTRPluginFramework::HotkeysModifier *this, int a2, int a3, int a4)
{
  CTRPluginFramework::HotkeysModifier *v4; // r4
  int v5; // r5
  int v6; // r4
  int v7; // r6
  int v8; // t0
  CTRPluginFramework::HotkeysModifier *v10; // [sp+0h] [bp-20h]
  int v11; // [sp+4h] [bp-1Ch]
  CTRPluginFramework::HotkeysModifier *v12; // [sp+8h] [bp-18h]
  int v13; // [sp+Ch] [bp-14h]

  v10 = this;
  v11 = a2;
  v12 = (CTRPluginFramework::HotkeysModifier *)a3;
  v13 = a4;
  v4 = this;
  v5 = CTRPluginFramework::Touch::IsDown(this);
  CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v12);
  v8 = (int)v4 + 4;
  v6 = *((_DWORD *)v4 + 1);
  v7 = *(_DWORD *)(v8 + 4);
  v10 = v12;
  v11 = v13;
  while ( v6 != v7 )
  {
    (*(void (__fastcall **)(int, int, CTRPluginFramework::HotkeysModifier **))(*(_DWORD *)v6 + 16))(v6, v5, &v10);
    v6 += 72;
  }
  return CTRPluginFramework::Window::Update(&CTRPluginFramework::Window::BottomWindow, v5, &v10);
}
// 77C: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);

//----- (00000220) --------------------------------------------------------
CTRPluginFramework::Controller *__fastcall CTRPluginFramework::HotkeysModifier::operator()(CTRPluginFramework::HotkeysModifier *a1)
{
  CTRPluginFramework::HotkeysModifier *v1; // r5
  CTRPluginFramework::Controller *result; // r0
  int v3; // r4
  bool v4; // r1
  int v5; // r1
  int v6; // r2
  int v7; // r3

  v1 = a1;
  while ( 1 )
  {
    result = (CTRPluginFramework::Controller *)CTRPluginFramework::Window::MustClose((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
    if ( result )
    {
      if ( **(_DWORD **)v1 )
        break;
    }
    v3 = 0;
    CTRPluginFramework::Controller::Update(result);
    CTRPluginFramework::HotkeysModifier::_DrawTop(v1);
    CTRPluginFramework::HotkeysModifier::_DrawBottom(v1);
    CTRPluginFramework::Renderer::EndFrame(0, v4);
    CTRPluginFramework::HotkeysModifier::_Update(v1, v5, v6, v7);
    **(_DWORD **)v1 = 0;
    do
    {
      if ( CTRPluginFramework::Button::GetState((CTRPluginFramework::Button *)(*((_DWORD *)v1 + 1) + 72 * v3)) )
        **(_DWORD **)v1 |= CTRPluginFramework::ktable[v3];
      ++v3;
    }
    while ( v3 != 14 );
  }
  return result;
}

//----- (000002C4) --------------------------------------------------------
int __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::Button *>(int result, int (__fastcall ***a2)(_DWORD))
{
  int (__fastcall ***v2)(_DWORD); // r4
  int (__fastcall ***v3)(_DWORD); // r5

  v2 = (int (__fastcall ***)(_DWORD))result;
  v3 = a2;
  while ( v2 != v3 )
  {
    result = (**v2)(v2);
    v2 += 18;
  }
  return result;
}

//----- (000002F0) --------------------------------------------------------
CTRPluginFramework::HotkeysModifier *__fastcall CTRPluginFramework::HotkeysModifier::~HotkeysModifier(CTRPluginFramework::HotkeysModifier *this)
{
  CTRPluginFramework::HotkeysModifier *v1; // r4
  void *v2; // r0

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 16);
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::Button *>(
    *(_QWORD *)((char *)v1 + 4),
    (int (__fastcall ***)(_DWORD))(*(_QWORD *)((char *)v1 + 4) >> 32));
  v2 = (void *)*((_DWORD *)v1 + 1);
  if ( v2 )
    operator delete(v2);
  return v1;
}
// 754: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000320) --------------------------------------------------------
CTRPluginFramework::Button *__fastcall CTRPluginFramework::Button::Button(CTRPluginFramework::Button *this, const CTRPluginFramework::Button *a2)
{
  CTRPluginFramework::Button *v2; // r4
  const CTRPluginFramework::Button *v3; // r5
  char *v4; // r1
  char *v5; // r0
  _DWORD *v6; // r12
  int v7; // r1
  int v8; // r2
  int v9; // r3
  CTRPluginFramework::Button *result; // r0

  v2 = this;
  v3 = a2;
  v4 = (char *)a2 + 16;
  *(_DWORD *)this = (char *)&`vtable for'CTRPluginFramework::Button + 8;
  v5 = (char *)this + 16;
  *((_WORD *)v5 - 6) = *((_WORD *)v4 - 6);
  *((_WORD *)v5 - 5) = *((_WORD *)v4 - 5);
  *((_WORD *)v5 - 4) = *((_WORD *)v4 - 4);
  *((_DWORD *)v5 - 1) = *((_DWORD *)v4 - 1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v5, v4);
  v6 = (_DWORD *)((char *)v2 + 40);
  v7 = *((_DWORD *)v3 + 11);
  v8 = *((_DWORD *)v3 + 12);
  v9 = *((_DWORD *)v3 + 13);
  *v6 = *((_DWORD *)v3 + 10);
  v6[1] = v7;
  v6[2] = v8;
  v6[3] = v9;
  *((_QWORD *)v2 + 7) = *((_QWORD *)v3 + 7);
  result = v2;
  *((_DWORD *)v2 + 16) = *((_DWORD *)v3 + 16);
  return result;
}
// 794: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (0000038C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::_M_realloc_insert<CTRPluginFramework::Button>(const CTRPluginFramework::Button **a1, const CTRPluginFramework::Button *a2, const CTRPluginFramework::Button *a3)
{
  const CTRPluginFramework::Button *v3; // r6
  const CTRPluginFramework::Button *v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  CTRPluginFramework::Button **v9; // r7
  const CTRPluginFramework::Button *v10; // r9
  const CTRPluginFramework::Button *v11; // r11
  unsigned int v12; // r5
  CTRPluginFramework::Button *v13; // r10
  const CTRPluginFramework::Button *v14; // r11
  CTRPluginFramework::Button *v15; // r0
  int v16; // r3
  int v17; // r11
  int v18; // r5
  CTRPluginFramework::Button *v19; // r3
  const CTRPluginFramework::Button *v20; // r9
  CTRPluginFramework::Button *v21; // ST04_4
  int v22; // ST04_4
  unsigned int v23; // r5

  v3 = *a1;
  v4 = a1[1];
  v5 = 954437177 * ((v4 - *a1) >> 3);
  if ( 954437177 * ((v4 - *a1) >> 3) )
    v6 = 954437177 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x38E38E3 )
  {
    v8 = 59652323;
    goto LABEL_18;
  }
  if ( v8 )
  {
LABEL_18:
    v13 = (CTRPluginFramework::Button *)operator new(72 * v8);
    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:
  CTRPluginFramework::Button::Button((CTRPluginFramework::Button *)((char *)v13 + v12), v11);
  v14 = v3;
  v15 = v13;
  while ( v10 != v14 )
  {
    v22 = (int)v15 + 72;
    CTRPluginFramework::Button::Button(v15, v14);
    v14 = (const CTRPluginFramework::Button *)((char *)v14 + 72);
    v15 = (CTRPluginFramework::Button *)v22;
  }
  v16 = 417566265 * (v12 >> 3) & 0x1FFFFFFF;
  v17 = (int)v13 + 72 * v16 + 72;
  v18 = (int)v3 + 72 * v16;
  v19 = (CTRPluginFramework::Button *)((char *)v13 + 72 * v16 + 72);
  v20 = (const CTRPluginFramework::Button *)v18;
  while ( v20 != v4 )
  {
    v21 = v19;
    CTRPluginFramework::Button::Button(v19, v20);
    v20 = (const CTRPluginFramework::Button *)((char *)v20 + 72);
    v19 = (CTRPluginFramework::Button *)((char *)v21 + 72);
  }
  v23 = v17 + 72 * (417566265 * (((unsigned int)v20 - v18) >> 3) & 0x1FFFFFFF);
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::Button *>((int)v3, (int (__fastcall ***)(_DWORD))v20);
  if ( v3 )
    operator delete((void *)v3);
  *v9 = v13;
  v9[1] = (CTRPluginFramework::Button *)v23;
  v9[2] = (CTRPluginFramework::Button *)((char *)v13 + 72 * v8);
}

//----- (000004E0) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::emplace_back<CTRPluginFramework::Button>(int a1, const CTRPluginFramework::Button *a2)
{
  int v2; // r4

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::_M_realloc_insert<CTRPluginFramework::Button>(
      (const CTRPluginFramework::Button **)a1,
      *(const CTRPluginFramework::Button **)(a1 + 4),
      a2);
  }
  else
  {
    v2 = a1;
    CTRPluginFramework::Button::Button(*(CTRPluginFramework::Button **)(a1 + 4), a2);
    *(_DWORD *)(v2 + 4) += 72;
  }
}

//----- (0000051C) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::HotkeysModifier::HotkeysModifier(_DWORD *a1, _DWORD *a2, int a3)
{
  int v3; // r6
  _DWORD *v4; // r4
  _DWORD *v5; // r7
  signed int v6; // r5
  signed int v7; // r5
  CTRPluginFramework::System *v8; // r0
  int v9; // r5
  int v10; // r3
  int *v11; // r1
  int v12; // t1
  int v13; // r0
  bool v14; // r5
  int v16; // [sp+0h] [bp-78h]
  char v17; // [sp+10h] [bp-68h]

  *a1 = a2;
  v3 = (int)(a1 + 1);
  v4 = a1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1 + 4, a3);
  v6 = 32;
  do
  {
    CTRPluginFramework::Button::Button(&v17, 8, &v16, &CTRPluginFramework::Icon::DrawCheckBox, 30, v6, 20, 20);
    std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::emplace_back<CTRPluginFramework::Button>(
      v3,
      (const CTRPluginFramework::Button *)&v17);
    v6 += 25;
    CTRPluginFramework::Button::~Button((CTRPluginFramework::Button *)&v17);
  }
  while ( v6 != 207 );
  v7 = 32;
  do
  {
    CTRPluginFramework::Button::Button(&v17, 8, &v16, &CTRPluginFramework::Icon::DrawCheckBox, 200, v7, 20, 20);
    std::vector<CTRPluginFramework::Button,std::allocator<CTRPluginFramework::Button>>::emplace_back<CTRPluginFramework::Button>(
      v3,
      (const CTRPluginFramework::Button *)&v17);
    v7 += 25;
    v8 = (CTRPluginFramework::System *)CTRPluginFramework::Button::~Button((CTRPluginFramework::Button *)&v17);
  }
  while ( v7 != 207 );
  v9 = 0;
  do
  {
    if ( (1 << v9) & *v5 )
    {
      v10 = 0;
      v11 = CTRPluginFramework::ktable;
      while ( 1 )
      {
        v12 = *v11;
        ++v11;
        if ( 1 << v9 == v12 )
          break;
        if ( ++v10 == 14 )
        {
          v10 = 0;
          break;
        }
      }
      v8 = (CTRPluginFramework::System *)CTRPluginFramework::Button::SetState(
                                           (CTRPluginFramework::Button *)(v4[1] + 72 * v10),
                                           1);
    }
    ++v9;
  }
  while ( v9 != 16 );
  v13 = CTRPluginFramework::System::IsNew3DS(v8);
  v14 = v13;
  if ( !v13 )
  {
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)v4[1], 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v4[1] + 504), v14);
  }
  return v4;
}
// 794: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 7A0: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 7B0: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawCheckBox(CTRPluginFramework::Icon *__hidden this, int, int, bool);

// ALL OK, 10 function(s) have been successfully decompiled
