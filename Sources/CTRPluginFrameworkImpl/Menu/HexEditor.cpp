/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::HexEditor::ByteView::Draw(CTRPluginFramework::HexEditor::ByteView *this);
int __fastcall CTRPluginFramework::HexEditor::IntegerView::Draw(CTRPluginFramework::HexEditor::IntegerView *this);
int __fastcall CTRPluginFramework::HexEditor::AsmView::Draw(CTRPluginFramework::HexEditor::AsmView *this);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall CTRPluginFramework::HexEditor::_RenderTop(CTRPluginFramework::HexEditor *this, void *a2);
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2);
int __fastcall CTRPluginFramework::HexEditor::ByteView::UpdateView(int result);
int __fastcall CTRPluginFramework::HexEditor::IntegerView::UpdateView(int result);
int __fastcall CTRPluginFramework::HexEditor::AsmView::UpdateView(int result);
int __fastcall CTRPluginFramework::HexEditor::_RenderBottom(CTRPluginFramework::HexEditor *this);
int __fastcall CTRPluginFramework::HexEditor::_CreateCheat(int result);
int __fastcall CTRPluginFramework::HexEditor::_ClearHistory(int result);
CTRPluginFramework::HexEditor *__fastcall CTRPluginFramework::HexEditor::Goto(CTRPluginFramework::HexEditor *this, unsigned int a2, int a3, int a4);
int __fastcall CTRPluginFramework::HexEditor::_MoveBackward(int result);
int __fastcall CTRPluginFramework::HexEditor::_MoveForward(int result);
int __fastcall CTRPluginFramework::HexEditor::_ApplyChanges(int result);
int __fastcall CTRPluginFramework::HexEditor::_DiscardChanges(int result);
int __fastcall CTRPluginFramework::HexEditor::_GotoPreviousRegion(int result);
int __fastcall CTRPluginFramework::HexEditor::_GotoNextRegion(int result);
int __fastcall CTRPluginFramework::HexEditor::_GetSelectedItem(CTRPluginFramework::HexEditor *this);
signed int __fastcall CTRPluginFramework::HexEditor::Context::ScrollUp(CTRPluginFramework::HexEditor::Context *this, unsigned int a2, int a3);
int __fastcall CTRPluginFramework::HexEditor::Context::ScrollDown(CTRPluginFramework::HexEditor::Context *this, unsigned int a2, int a3);
CTRPluginFramework::HexEditor::Context *__fastcall CTRPluginFramework::HexEditor::ByteView::EditValueAtCursor(CTRPluginFramework::HexEditor::ByteView *this, unsigned int a2);
CTRPluginFramework::HexEditor::Context *__fastcall CTRPluginFramework::HexEditor::IntegerView::EditValueAtCursor(CTRPluginFramework::HexEditor::IntegerView *this, unsigned int a2);
CTRPluginFramework::HexEditor::Context *__fastcall CTRPluginFramework::HexEditor::AsmView::EditValueAtCursor(CTRPluginFramework::HexEditor::AsmView *this, unsigned int a2);
int __fastcall CTRPluginFramework::HexEditor::IView::ProcessEventsCommon(int result, CTRPluginFramework::HexEditor::Context *a2, Event *a3, int a4);
int __fastcall CTRPluginFramework::HexEditor::ByteView::ProcessEvent(CTRPluginFramework::HexEditor::ByteView *this, Event *a2);
int __fastcall CTRPluginFramework::HexEditor::IntegerView::ProcessEvent(CTRPluginFramework::HexEditor::IntegerView *this, Event *a2);
int __fastcall CTRPluginFramework::HexEditor::AsmView::ProcessEvent(CTRPluginFramework::HexEditor::AsmView *this, Event *a2);
_DWORD *__fastcall CTRPluginFramework::HexEditor::ByteView::ByteView(_DWORD *result, int a2);
_DWORD *__fastcall CTRPluginFramework::HexEditor::IntegerView::IntegerView(_DWORD *result, int a2);
_DWORD *__fastcall CTRPluginFramework::HexEditor::FloatView::FloatView(_DWORD *result, int a2);
_DWORD *__fastcall CTRPluginFramework::HexEditor::AsmView::AsmView(_DWORD *result, int a2);
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1);
CTRPluginFramework::HexEditor *__fastcall CTRPluginFramework::HexEditor::HexEditor(CTRPluginFramework::HexEditor *this, unsigned int a2);
int __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(int *a1, unsigned int a2);
unsigned int __fastcall CTRPluginFramework::HexEditor::_PromptForAddress(CTRPluginFramework::HexEditor *this, int a2);
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::_M_realloc_insert<unsigned long const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::push_back(_DWORD *a1, _DWORD *a2);
void __fastcall CTRPluginFramework::HexEditor::_SaveThisAddress(CTRPluginFramework::HexEditor *this, int a2);
void __fastcall CTRPluginFramework::HexEditor::_JumpTo(CTRPluginFramework::HexEditor *this, int a2);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(char **a1, char *a2, int a3);
int __fastcall CTRPluginFramework::HexEditor::_BrowseHistory(CTRPluginFramework::HexEditor *this);
int __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::HexEditor::Item *>(int result, int a2);
CTRPluginFramework::HexEditor *__fastcall CTRPluginFramework::HexEditor::~HexEditor(CTRPluginFramework::HexEditor *this);
int *__fastcall std::vector<CTRPluginFramework::HexEditor::Item,std::allocator<CTRPluginFramework::HexEditor::Item>>::clear(int *result);
int *__fastcall CTRPluginFramework::HexEditor::_ProcessEvent(CTRPluginFramework::HexEditor *this, Event *a2);
char *__fastcall std::__uninitialized_default_n_1<false>::__uninit_default_n<CTRPluginFramework::HexEditor::Item *,unsigned int>(void *s, int a2);
char *__fastcall std::vector<CTRPluginFramework::HexEditor::Item,std::allocator<CTRPluginFramework::HexEditor::Item>>::resize(int *a1, unsigned int a2);
int __fastcall CTRPluginFramework::HexEditor::_Update(CTRPluginFramework::HexEditor *this);
int __fastcall CTRPluginFramework::HexEditor::operator()(int a1, _DWORD *a2);
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::SubMenu::Draw(CTRPluginFramework::SubMenu *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD); weak
// int __fastcall ZN10ARM_Disasm11DisassembleB5cxx11Emm(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::KeyboardImpl::_RenderBottom(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::DrawButton(_DWORD); weak
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::PluginMenuActionReplay::NewARCode(CTRPluginFramework::PluginMenuActionReplay *__hidden this, unsigned __int8, unsigned int, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::GetMemRegion(CTRPluginFramework::ProcessImpl *__hidden this, unsigned int); idb
// int __fastcall svcConvertVAToPA(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::SubMenu::IsOpen(CTRPluginFramework::SubMenu *__hidden this); idb
// int __fastcall CTRPluginFramework::ProcessImpl::GetPreviousRegion(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::ProcessImpl::GetNextRegion(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// void __cdecl operator delete(void *); idb
// void *memset(void *s, int c, size_t n);
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Milliseconds(CTRPluginFramework *__hidden this, int); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::SubMenu::SubMenu(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Task::Task(CTRPluginFramework::Task *__hidden this, int (__cdecl *)(void *), void *, int); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::ProcessImpl::UpdateMemRegions(CTRPluginFramework::ProcessImpl *__hidden this); idb
// _DWORD std::__throw_out_of_range_fmt(const char *, ...); idb
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD); weak
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::TouchKey::Enable(CTRPluginFramework::TouchKey *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned int *, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *__hidden this); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Populate(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Task::~Task(CTRPluginFramework::Task *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::KeyboardImpl::~KeyboardImpl(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::SubMenu::~SubMenu(CTRPluginFramework::SubMenu *__hidden this); idb
// _DWORD CTRPluginFramework::Window::Close(CTRPluginFramework::Window *__hidden this); idb
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// int snprintf(char *s, size_t maxlen, const char *format, ...);
// _DWORD __cdecl CTRPluginFramework::SubMenu::ProcessEvent(CTRPluginFramework::SubMenu *__hidden this, const Event *); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::operator()(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Task::Start(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::Task::Wait(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::Window::MustClose(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::SubMenu::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::Converter::Instance(CTRPluginFramework::Converter *__hidden this); idb
// int __fastcall CTRPluginFramework::Converter::operator()(_DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_0; // weak
char algn_1; // weak
int CTRPluginFramework::__g_hexEditor; // weak
char `guard variable for'CTRPluginFramework::HexEditor::_PromptForAddress(int)::background; // weak
_UNKNOWN CTRPluginFramework::HexEditor::_PromptForAddress(int)::background; // weak
_UNKNOWN unk_14; // weak
char CTRPluginFramework::HexEditor::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &)::keysAreDisabled; // weak
_UNKNOWN `vtable for'CTRPluginFramework::HexEditor::ByteView; // weak
_DWORD (*off_2898)(CTRPluginFramework::HexEditor::ByteView *__hidden this) = &CTRPluginFramework::HexEditor::ByteView::Draw; // weak
_DWORD (*off_28B0)(CTRPluginFramework::HexEditor::IntegerView *__hidden this) = &CTRPluginFramework::HexEditor::IntegerView::Draw; // weak
_DWORD (*off_28C8)(CTRPluginFramework::HexEditor::FloatView *__hidden this) = &CTRPluginFramework::HexEditor::FloatView::Draw; // weak
_DWORD (*off_28E0)(CTRPluginFramework::HexEditor::AsmView *__hidden this) = &CTRPluginFramework::HexEditor::AsmView::Draw; // weak
_UNKNOWN unk_2990; // weak
_UNKNOWN unk_29A6; // weak
_UNKNOWN unk_29B4; // weak
_UNKNOWN unk_2A62; // weak
// extern _UNKNOWN CTRPluginFramework::Color::DeepSkyBlue; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN CTRPluginFramework::Color::SkyBlue; weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb
// extern _UNKNOWN CTRPluginFramework::Color::Red; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::Orange; weak


//----- (0000002C) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::ByteView::Draw(CTRPluginFramework::HexEditor::ByteView *this)
{
  CTRPluginFramework::HexEditor::ByteView *v1; // r7
  char v2; // r6
  int result; // r0
  int v4; // r3
  int v5; // r8
  int i; // r4
  signed int v7; // r7
  int *v8; // r5
  signed int v9; // r1
  int v10; // [sp+14h] [bp-2Ch]
  int v11; // [sp+18h] [bp-28h]
  int v12; // [sp+1Ch] [bp-24h]

  v1 = this;
  CTRPluginFramework::Renderer::DrawRect(111, 61, 178, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  v10 = 66;
  CTRPluginFramework::Renderer::DrawString("00 01 02 03   04 05 06 07", 125, &v10, CTRPluginFramework::Color::Black);
  v10 += 6;
  CTRPluginFramework::Renderer::DrawRect(111, v10, 178, 100, &CTRPluginFramework::Color::White, 1, 1);
  v10 -= 21;
  CTRPluginFramework::Renderer::DrawRect(290, v10, 66, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  v10 += 21;
  CTRPluginFramework::Renderer::DrawRect(290, v10, 66, 100, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  v2 = 0;
  result = CTRPluginFramework::Renderer::DrawRect(
             *(unsigned __int16 *)(*((_DWORD *)v1 + 2) + 16),
             *(unsigned __int16 *)(*((_DWORD *)v1 + 2) + 18),
             7,
             10,
             &CTRPluginFramework::Color::DeepSkyBlue,
             1,
             1);
  v11 = v10;
  v12 = v10;
  v4 = *((_DWORD *)v1 + 2);
  v5 = *(_DWORD *)(v4 + 52);
  for ( i = *(_DWORD *)(v4 + 48); v5 != i; i += 72 )
  {
    if ( v2 & 1 )
      v7 = 209;
    else
      v7 = 125;
    if ( v2 & 1 )
      v8 = &v12;
    else
      v8 = &v11;
    CTRPluginFramework::Renderer::DrawString(*(_DWORD *)(i + 24), v7, v8, CTRPluginFramework::Color::Black);
    if ( v2 & 1 )
      v9 = 115;
    else
      v9 = 175;
    *v8 -= 10;
    result = CTRPluginFramework::Renderer::DrawString(
               *(_DWORD *)(i + 48),
               v9 + v7,
               v8,
               CTRPluginFramework::Color::Black);
    ++v2;
  }
  return result;
}
// 2AD8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 2ADC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000001C8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::IntegerView::Draw(CTRPluginFramework::HexEditor::IntegerView *this)
{
  CTRPluginFramework::HexEditor::IntegerView *v1; // r7
  signed int v2; // r6
  int result; // r0
  int i; // r4
  signed int v5; // r5
  int v6; // r8
  signed int v7; // r1
  int v8; // [sp+14h] [bp-2Ch]
  int v9; // [sp+1Ch] [bp-24h]

  v1 = this;
  v2 = 82;
  CTRPluginFramework::Renderer::DrawRect(111, 61, 245, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(111, 82, 245, 100, &CTRPluginFramework::Color::White, 1, 1);
  result = CTRPluginFramework::Renderer::DrawRect(
             *(unsigned __int16 *)(*((_DWORD *)v1 + 2) + 16),
             *(unsigned __int16 *)(*((_DWORD *)v1 + 2) + 18),
             7,
             10,
             &CTRPluginFramework::Color::DeepSkyBlue,
             1,
             1);
  for ( i = *(_DWORD *)(*((_DWORD *)v1 + 2) + 48); *(_DWORD *)(*((_DWORD *)v1 + 2) + 52) != i; i += 288 )
  {
    v5 = 121;
    v6 = i + 72;
    v8 = CTRPluginFramework::Color::Black;
    do
    {
      v9 = v2;
      v7 = v5;
      v5 += 58;
      result = CTRPluginFramework::Renderer::DrawString(*(_DWORD *)(v6 - 48), v7, &v9, v8);
      v6 += 72;
    }
    while ( v5 != 353 );
    v2 += 10;
  }
  return result;
}
// 2AD8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 2ADC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000002C4) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::AsmView::Draw(CTRPluginFramework::HexEditor::AsmView *this)
{
  CTRPluginFramework::HexEditor::AsmView *v1; // r6
  int result; // r0
  int v3; // r3
  int v4; // r6
  int i; // r4
  int v6; // [sp+10h] [bp-18h]
  int v7; // [sp+14h] [bp-14h]

  v1 = this;
  CTRPluginFramework::Renderer::DrawRect(111, 61, 58, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(111, 82, 58, 100, &CTRPluginFramework::Color::White, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(170, 61, 186, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  v6 = 82;
  CTRPluginFramework::Renderer::DrawRect(170, 82, 186, 100, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  result = CTRPluginFramework::Renderer::DrawRect(
             *(unsigned __int16 *)(*((_DWORD *)v1 + 2) + 16),
             *(unsigned __int16 *)(*((_DWORD *)v1 + 2) + 18),
             7,
             10,
             &CTRPluginFramework::Color::DeepSkyBlue,
             1,
             1);
  v3 = *((_DWORD *)v1 + 2);
  v4 = *(_DWORD *)(v3 + 52);
  for ( i = *(_DWORD *)(v3 + 48); v4 != i; i += 72 )
  {
    v7 = v6;
    CTRPluginFramework::Renderer::DrawString(*(_DWORD *)(i + 24), 116, &v6, CTRPluginFramework::Color::Black);
    result = CTRPluginFramework::Renderer::DrawString(*(_DWORD *)(i + 48), 175, &v7, CTRPluginFramework::Color::Black);
  }
  return result;
}
// 2AD8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 2ADC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000400) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 2AF0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 2AF4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000478) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_RenderTop(CTRPluginFramework::HexEditor *this, void *a2)
{
  _DWORD *v2; // r4
  unsigned int v3; // r5
  int v4; // r0
  bool v5; // zf
  int v6; // r6
  int v7; // r3
  int v9; // [sp+14h] [bp-34h]
  char v10; // [sp+18h] [bp-30h]

  v2 = (_DWORD *)CTRPluginFramework::__g_hexEditor;
  CTRPluginFramework::Renderer::SetTarget(1, a2);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v10, "HexEditor");
  CTRPluginFramework::Window::Draw(&CTRPluginFramework::Window::TopWindow, &v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  CTRPluginFramework::Renderer::DrawRect(44, 61, 66, 20, &CTRPluginFramework::Color::SkyBlue, 1, 1);
  v9 = 66;
  CTRPluginFramework::Renderer::DrawString(v2 + 11, 54, &v9, CTRPluginFramework::Color::Black);
  v9 += 6;
  v3 = 0;
  CTRPluginFramework::Renderer::DrawRect(44, v9, 66, 100, &CTRPluginFramework::Color::SkyBlue, 1, 1);
  while ( 1 )
  {
    v4 = v2[18];
    if ( v3 >= 954437177 * ((v2[19] - v4) >> 3) )
      break;
    CTRPluginFramework::Renderer::DrawString(v4 + 72 * v3 + 12, 54, &v9, CTRPluginFramework::Color::Black);
    v3 += *(unsigned __int8 *)(v2[1] + 4);
  }
  (**(void (***)(void))v2[1])();
  v6 = v2[6] & 2;
  v5 = v6 == 0;
  v9 += 5;
  v7 = CTRPluginFramework::Preferences::Settings[4];
  if ( v5 )
  {
    CTRPluginFramework::Renderer::DrawString("Options: ", 44, &v9, v7);
    v9 -= 14;
    CTRPluginFramework::Renderer::DrawSysString(
      &unk_29B4,
      99,
      &v9,
      330,
      CTRPluginFramework::Preferences::Settings[4],
      v6);
  }
  else
  {
    CTRPluginFramework::Renderer::DrawString("Apply changes: ", 44, &v9, v7);
    v9 -= 14;
    CTRPluginFramework::Renderer::DrawSysString(
      &unk_2990,
      149,
      &v9,
      330,
      CTRPluginFramework::Preferences::Settings[4],
      0);
    v9 += 2;
    CTRPluginFramework::Renderer::DrawString("Discard changes: ", 44, &v9, CTRPluginFramework::Preferences::Settings[4]);
    v9 -= 14;
    CTRPluginFramework::Renderer::DrawSysString(
      &unk_29A6,
      149,
      &v9,
      330,
      CTRPluginFramework::Preferences::Settings[4],
      0);
  }
  CTRPluginFramework::SubMenu::Draw((CTRPluginFramework::SubMenu *)(v2 + 22));
  return 0;
}
// 4: using guessed type int CTRPluginFramework::__g_hexEditor;
// 2AD8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 2ADC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);
// 2AF8: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD, _DWORD);
// 2AFC: using guessed type int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD);
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B04: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 2B24: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD);

//----- (000006C8) --------------------------------------------------------
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2)
{
  unsigned int v2; // r3
  int *v3; // r4
  unsigned int v4; // r3
  unsigned int v5; // r3
  int *v7; // [sp+0h] [bp-10h]
  unsigned __int8 *v8; // [sp+4h] [bp-Ch]

  v7 = a1;
  v8 = a2;
  LOBYTE(v8) = 0;
  LOBYTE(v7) = 27;
  v2 = *a2;
  v3 = a1;
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  BYTE1(v7) = v2;
  v4 = a2[1];
  if ( v4 < 1 )
    LOBYTE(v4) = 1;
  BYTE2(v7) = v4;
  v5 = a2[2];
  if ( v5 < 1 )
    LOBYTE(v5) = 1;
  HIBYTE(v7) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, (const char *)&v7);
  return v3;
}

//----- (00000724) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::ByteView::UpdateView(int result)
{
  unsigned int *v1; // r6
  int v2; // r5
  int v3; // r8
  unsigned int v4; // r1
  int v5; // r3
  unsigned int v6; // r4
  char v7; // r7
  unsigned int v8; // r0
  int v9; // r1
  int v10; // t0
  int v11; // r3
  int i; // r4
  _BYTE *v13; // r3
  _BYTE *v14; // r3
  signed int v15; // r3
  int v16; // r7
  signed int v17; // r1
  signed int v18; // t1
  int v19; // r3
  int v20; // r1
  signed int v21; // r2
  signed int v22; // r3
  signed __int16 v23; // r2
  int v24; // [sp+4h] [bp-4Ch]
  signed int v25; // [sp+Ch] [bp-44h]
  char v26; // [sp+10h] [bp-40h]

  v1 = *(unsigned int **)(result + 8);
  v2 = result;
  if ( *v1 & 4 )
  {
    *v1 = *v1 & 0xFFFFFFFB | 0x60;
    v3 = *(_DWORD *)(result + 8);
    v4 = *(unsigned __int8 *)(result + 7);
    v5 = *(_DWORD *)(v3 + 4);
    v6 = *(_DWORD *)(v3 + 8) - v5;
    v7 = __clz(v4);
    v8 = *(_DWORD *)(v3 + 8) - v5;
    v10 = v8 / v4;
    v9 = v8 % v4;
    result = v10;
    *(_WORD *)(v3 + 12) = 2 * v9;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 14) = v6 >> (31 - v7);
  }
  if ( *v1 & 8 )
  {
    *v1 &= 0xFFFFFFF7;
    v11 = *(_DWORD *)(v2 + 8);
    v24 = *(_DWORD *)(v11 + 52);
    for ( i = *(_DWORD *)(v11 + 48) + 7; ; i += 72 )
    {
      if ( v24 == i - 7 )
        break;
      v13 = *(_BYTE **)(i + 17);
      *(_DWORD *)(i + 21) = 0;
      *v13 = 0;
      v14 = *(_BYTE **)(i + 41);
      *(_DWORD *)(i + 45) = 0;
      *v14 = 0;
      v15 = 0;
      v16 = i - 4;
      do
      {
        if ( *(unsigned __int8 *)(v16 + 1) == *(unsigned __int8 *)(v16 + 5) )
        {
          if ( !v15 )
            goto LABEL_10;
        }
        else if ( !v15 )
        {
          CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
            (int *)&v26,
            (unsigned __int8 *)&CTRPluginFramework::Color::Red);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(i + 17, &v26);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
          v15 = 1;
          goto LABEL_10;
        }
        CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          (int *)&v26,
          (unsigned __int8 *)&CTRPluginFramework::Color::Black);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(i + 17, &v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        v15 = 0;
LABEL_10:
        v25 = v15;
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v26, "%02X ", *(unsigned __int8 *)(v16 + 1));
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(i + 17, &v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        v18 = *(unsigned __int8 *)(v16++ + 1);
        v17 = v18;
        if ( (unsigned int)(v18 - 32) > 0x5E )
          v17 = 46;
        result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(i + 41, v17);
        v15 = v25;
      }
      while ( i != v16 );
    }
  }
  if ( *v1 & 0x10 )
  {
    *v1 = *v1 & 0xFFFFFFEF | 0x40;
    v19 = *(_DWORD *)(v2 + 8);
    result = *(_DWORD *)(v19 + 48);
    *(_DWORD *)(v19 + 8) = *(_DWORD *)(result + 144 * *(signed __int16 *)(v19 + 14));
    *(_DWORD *)(*(_DWORD *)(v2 + 8) + 8) += *(signed __int16 *)(*(_DWORD *)(v2 + 8) + 12) >> 1;
  }
  if ( *v1 & 0x20 )
  {
    *v1 &= 0xFFFFFFDF;
    v20 = *(_DWORD *)(v2 + 8);
    v21 = *(signed __int16 *)(v20 + 12);
    if ( v21 & 1 )
      result = 6;
    else
      result = 0;
    v22 = v21 >> 1;
    if ( v21 <= 7 )
      v23 = 0;
    else
      v23 = 12;
    *(_WORD *)(v20 + 16) = v23 + result + 18 * v22 + 125;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 18) = 10 * *(_WORD *)(*(_DWORD *)(v2 + 8) + 14) + 82;
  }
  return result;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 2B20: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 2B24: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD);

//----- (00000978) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::IntegerView::UpdateView(int result)
{
  unsigned int *v1; // r6
  int v2; // r4
  int v3; // r1
  unsigned int v4; // r3
  char v5; // r2
  int v6; // r3
  int v7; // r10
  int i; // r5
  _BYTE *v9; // r3
  _BYTE *v10; // r3
  int v11; // r3
  unsigned int v12; // r2
  int v13; // r3
  signed __int16 v14; // r2
  int v15; // [sp+0h] [bp-40h]

  v1 = *(unsigned int **)(result + 8);
  v2 = result;
  if ( *v1 & 4 )
  {
    *v1 = *v1 & 0xFFFFFFFB | 0x60;
    v3 = *(_DWORD *)(result + 8);
    v4 = *(_DWORD *)(v3 + 8) - *(_DWORD *)(v3 + 4);
    v5 = 31 - __clz(*(unsigned __int8 *)(result + 7));
    result = v4 >> v5;
    LOWORD(v4) = 2 * (v4 - (v4 >> v5 << v5));
    *(_WORD *)(v3 + 12) = v4 & 0xFFF8;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 12) = 2 * *(_WORD *)(*(_DWORD *)(v2 + 8) + 12) - v4 + 6;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 14) = result;
  }
  if ( *v1 & 8 )
  {
    *v1 &= 0xFFFFFFF7;
    v6 = *(_DWORD *)(v2 + 8);
    v7 = *(_DWORD *)(v6 + 52);
    for ( i = *(_DWORD *)(v6 + 48); i != v7; i += 72 )
    {
      v9 = *(_BYTE **)(i + 24);
      *(_DWORD *)(i + 28) = 0;
      *v9 = 0;
      v10 = *(_BYTE **)(i + 48);
      *(_DWORD *)(i + 52) = 0;
      *v10 = 0;
      if ( (unsigned int)*(_QWORD *)(i + 4) != *(_QWORD *)(i + 4) >> 32 )
      {
        CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          &v15,
          (unsigned __int8 *)&CTRPluginFramework::Color::Red);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(i + 24, &v15);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
      }
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v15, "%08X", *(_DWORD *)(i + 4));
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(i + 24, &v15);
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
    }
  }
  if ( *v1 & 0x10 )
  {
    *v1 = *v1 & 0xFFFFFFEF | 0x40;
    v11 = *(_DWORD *)(v2 + 8);
    v12 = *(signed __int16 *)(v11 + 12) & 0xFFFFFFF8;
    *(_DWORD *)(v11 + 8) = v12 >> 1;
    *(_DWORD *)(*(_DWORD *)(v2 + 8) + 8) = *(_DWORD *)(*(_DWORD *)(v2 + 8) + 8)
                                         + 3
                                         - ((*(signed __int16 *)(*(_DWORD *)(v2 + 8) + 12) - v12) >> 1);
    v13 = *(_DWORD *)(v2 + 8);
    result = *(_DWORD *)(v13 + 48);
    *(_DWORD *)(v13 + 8) += *(_DWORD *)(result + 288 * *(signed __int16 *)(v13 + 14));
  }
  if ( *v1 & 0x20 )
  {
    *v1 &= 0xFFFFFFDF;
    result = *(_DWORD *)(v2 + 8);
    if ( *(_WORD *)(result + 12) & 1 )
      v14 = 6;
    else
      v14 = 0;
    *(_WORD *)(result + 16) = 10 * (*(_WORD *)(result + 12) >> 3) + 12 * (*(_WORD *)(result + 12) >> 1) + 120 + v14;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 18) = 10 * *(_WORD *)(*(_DWORD *)(v2 + 8) + 14) + 82;
  }
  return result;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 2B20: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);

//----- (00000B74) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::AsmView::UpdateView(int result)
{
  unsigned int *v1; // r6
  int v2; // r5
  int v3; // r8
  unsigned int v4; // r1
  int v5; // r3
  unsigned int v6; // r4
  char v7; // r7
  unsigned int v8; // r0
  int v9; // r1
  int v10; // t0
  int v11; // r3
  int *v12; // r10
  int *v13; // r4
  _BYTE *v14; // r2
  _BYTE *v15; // r2
  int v16; // r2
  int v17; // t1
  int v18; // r2
  int v19; // r1
  int v20; // r3
  signed __int16 v21; // r1
  int v22; // [sp+4h] [bp-44h]
  char v23; // [sp+8h] [bp-40h]

  v1 = *(unsigned int **)(result + 8);
  v2 = result;
  if ( *v1 & 4 )
  {
    *v1 = *v1 & 0xFFFFFFFB | 0x60;
    v3 = *(_DWORD *)(result + 8);
    v4 = *(unsigned __int8 *)(result + 7);
    v5 = *(_DWORD *)(v3 + 4);
    v6 = *(_DWORD *)(v3 + 8) - v5;
    v7 = __clz(v4);
    v8 = *(_DWORD *)(v3 + 8) - v5;
    v10 = v8 / v4;
    v9 = v8 % v4;
    result = v10;
    *(_WORD *)(v3 + 12) = 6 - 2 * v9;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 14) = v6 >> (31 - v7);
  }
  if ( *v1 & 8 )
  {
    *v1 &= 0xFFFFFFF7;
    v11 = *(_DWORD *)(v2 + 8);
    v12 = *(int **)(v11 + 52);
    v13 = *(int **)(v11 + 48);
    while ( v12 != v13 )
    {
      v14 = (_BYTE *)v13[6];
      v13[7] = 0;
      *v14 = 0;
      v15 = (_BYTE *)v13[12];
      v13[13] = 0;
      *v15 = 0;
      v22 = (int)(v13 + 12);
      if ( v13[1] != v13[2] )
      {
        CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          (int *)&v23,
          (unsigned __int8 *)&CTRPluginFramework::Color::Red);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v13 + 6, &v23);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
      }
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v23, "%08X", v13[1]);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v13 + 6, &v23);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
      v16 = v13[1];
      v17 = *v13;
      v13 += 18;
      ZN10ARM_Disasm11DisassembleB5cxx11Emm(&v23, v17, v16);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v22, &v23);
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
    }
  }
  if ( *v1 & 0x10 )
  {
    *v1 = *v1 & 0xFFFFFFEF | 0x40;
    *(_DWORD *)(*(_DWORD *)(v2 + 8) + 8) = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v2 + 8) + 48)
                                                     + 72 * *(signed __int16 *)(*(_DWORD *)(v2 + 8) + 14));
    *(_DWORD *)(*(_DWORD *)(v2 + 8) + 8) = *(_DWORD *)(*(_DWORD *)(v2 + 8) + 8)
                                         + 3
                                         - (*(signed __int16 *)(*(_DWORD *)(v2 + 8) + 12) >> 1);
  }
  if ( *v1 & 0x20 )
  {
    *v1 &= 0xFFFFFFDF;
    v18 = *(_DWORD *)(v2 + 8);
    v19 = *(signed __int16 *)(v18 + 12);
    v20 = v19 >> 1;
    if ( v19 & 1 )
      v21 = 6;
    else
      v21 = 0;
    *(_WORD *)(v18 + 16) = v21 + 12 * v20 + 115;
    *(_WORD *)(*(_DWORD *)(v2 + 8) + 18) = 10 * *(_WORD *)(*(_DWORD *)(v2 + 8) + 14) + 82;
  }
  return result;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 2B20: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 2B2C: using guessed type int __fastcall ZN10ARM_Disasm11DisassembleB5cxx11Emm(_DWORD, _DWORD, _DWORD);
// 2B30: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (00000D54) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_RenderBottom(CTRPluginFramework::HexEditor *this)
{
  CTRPluginFramework::KeyboardImpl::_RenderBottom((CTRPluginFramework::HexEditor *)((char *)this + 120));
  return CTRPluginFramework::Window::DrawButton(&CTRPluginFramework::Window::BottomWindow);
}
// 2B38: using guessed type int __fastcall CTRPluginFramework::Window::DrawButton(_DWORD);

//----- (00000D70) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_CreateCheat(int result)
{
  int v1; // lr
  unsigned int v2; // r3
  char v3; // [sp+Ch] [bp-54h]
  char v4; // [sp+10h] [bp-50h]
  char v5; // [sp+28h] [bp-38h]
  char v6; // [sp+40h] [bp-20h]
  int v7; // [sp+5Ch] [bp-4h]

  if ( LOBYTE(CTRPluginFramework::Preferences::Settings[1]) )
  {
    v7 = v1;
    v2 = *(_DWORD *)(result + 24);
    if ( v2 & 0x100 )
    {
      CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
        (int *)&v5,
        (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
      CTRPluginFramework::operator<<(&v4, &v5, "Error");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v6,
        "Invalid address, abort");
      CTRPluginFramework::MessageBox::MessageBox(&v3, &v4, &v6);
      CTRPluginFramework::MessageBox::operator()(&v3);
      CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v3);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
    }
    else
    {
      result = CTRPluginFramework::PluginMenuActionReplay::NewARCode(
                 0,
                 *(_BYTE *)(result + 32) & 0xFC,
                 *(_DWORD *)(*(_DWORD *)(result + 32) & 0xFFFFFFFC),
                 v2);
    }
  }
  return result;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B40: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 2B44: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD);
// 2B48: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (00000E2C) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_ClearHistory(int result)
{
  int v1; // r3

  v1 = *(_DWORD *)(result + 352);
  if ( v1 != *(_DWORD *)(result + 356) )
    *(_DWORD *)(result + 356) = v1;
  *(_DWORD *)(result + 348) = -1;
  return result;
}

//----- (00000E48) --------------------------------------------------------
CTRPluginFramework::HexEditor *__fastcall CTRPluginFramework::HexEditor::Goto(CTRPluginFramework::HexEditor *this, unsigned int a2, int a3, int a4)
{
  CTRPluginFramework::HexEditor *v4; // r4
  unsigned int v5; // r5
  int v6; // r6
  CTRPluginFramework::HexEditor *result; // r0
  int v8; // r3
  int v9; // r3
  int v10; // r3
  char v11; // r3
  unsigned int v12; // r5
  int v13; // r3
  CTRPluginFramework::HexEditor *v14; // [sp+0h] [bp-20h]
  unsigned int v15; // [sp+4h] [bp-1Ch]
  int v16; // [sp+8h] [bp-18h]
  int v17; // [sp+Ch] [bp-14h]

  v14 = this;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v4 = this;
  v5 = a2;
  v6 = a3;
  CTRPluginFramework::ProcessImpl::GetMemRegion((CTRPluginFramework::ProcessImpl *)&v14, a2);
  result = v14;
  if ( v14 )
  {
    v8 = *((_DWORD *)v4 + 6);
    if ( v6 )
      v9 = v8 | 4;
    else
      v9 = v8 | 0x10;
    *((_DWORD *)v4 + 6) = v9;
    v10 = *((_DWORD *)v4 + 1);
    if ( v6 )
      *((_DWORD *)v4 + 8) = v5;
    result = (CTRPluginFramework::HexEditor *)&algn_1;
    v11 = __clz(*(unsigned __int8 *)(v10 + 7));
    v12 = v5 >> (31 - v11) << (31 - v11);
    v13 = *((_DWORD *)v4 + 6);
    *((_DWORD *)v4 + 7) = v12;
    *((_DWORD *)v4 + 6) = v13 | 1;
  }
  return result;
}
// 1: using guessed type char;

//----- (00000EB8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_MoveBackward(int result)
{
  int v1; // r1
  int v2; // r3

  v1 = *(_DWORD *)(result + 352);
  if ( v1 != *(_DWORD *)(result + 356) )
  {
    v2 = *(_DWORD *)(result + 348) - 1;
    if ( v2 < 0 )
      v2 = 0;
    *(_DWORD *)(result + 348) = v2;
    result = (int)CTRPluginFramework::HexEditor::Goto(
                    (CTRPluginFramework::HexEditor *)result,
                    *(_DWORD *)(v1 + 4 * *(_DWORD *)(result + 348)),
                    1,
                    *(_DWORD *)(result + 348));
  }
  return result;
}

//----- (00000EE8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_MoveForward(int result)
{
  int v1; // r3
  int v2; // r12
  unsigned int v3; // r2
  unsigned int v4; // r3

  v1 = *(_DWORD *)(result + 356);
  v2 = *(_DWORD *)(result + 352);
  if ( v2 != v1 )
  {
    v3 = ((v1 - v2) >> 2) - 1;
    v4 = *(_DWORD *)(result + 348) + 1;
    if ( v4 >= v3 )
      v4 = v3;
    *(_DWORD *)(result + 348) = v4;
    result = (int)CTRPluginFramework::HexEditor::Goto(
                    (CTRPluginFramework::HexEditor *)result,
                    *(_DWORD *)(v2 + 4 * v4),
                    1,
                    v4);
  }
  return result;
}

//----- (00000F24) --------------------------------------------------------
// write access to const memory has been detected, the output may be wrong!
int __fastcall CTRPluginFramework::HexEditor::_ApplyChanges(int result)
{
  int v1; // r5
  int v2; // r6
  int i; // r4
  int v4; // r0
  unsigned __int8 v5; // cf
  bool v6; // zf
  int v7; // r0

  if ( (*(_DWORD *)(result + 24) & 0x102) == 2 )
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 76);
    for ( i = *(_DWORD *)(result + 72); ; *(_DWORD *)result = *(_DWORD *)(i - 64) )
    {
      i += 72;
      if ( v2 == i - 72 )
        break;
      *(_DWORD *)(i - 64) = *(_DWORD *)(i - 68);
      if ( !svcConvertVAToPA(*(_DWORD *)(i - 72), 0) )
      {
        unk_0 = 0;
        __und(0);
      }
      v4 = svcConvertVAToPA(*(_DWORD *)(i - 72), 0);
      v5 = __CFADD__(v4, -805306367);
      v6 = v4 == 805306367;
      v7 = *(_DWORD *)(i - 72);
      if ( !v6 & v5 )
        result = svcConvertVAToPA(v7, 0);
      else
        result = svcConvertVAToPA(v7, 0) | 0x80000000;
    }
    *(_DWORD *)(v1 + 24) = *(_DWORD *)(v1 + 24) & 0xFFFFFFFD | 8;
  }
  return result;
}
// FC0: write access to const memory at 0 has been detected
// 2B5C: using guessed type int __fastcall svcConvertVAToPA(_DWORD, _DWORD);

//----- (00000FCC) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_DiscardChanges(int result)
{
  int v1; // r1
  int i; // r3
  int v3; // r2

  v1 = *(_DWORD *)(result + 76);
  for ( i = *(_DWORD *)(result + 72); v1 != i; *(_DWORD *)(i - 68) = v3 )
  {
    v3 = *(_DWORD *)(i + 8);
    i += 72;
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFFD | 8;
  return result;
}

//----- (00001000) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_GotoPreviousRegion(int result)
{
  unsigned int **v1; // r4
  int v2; // r3
  int v3; // [sp+0h] [bp-28h]
  unsigned int v4; // [sp+10h] [bp-18h]

  if ( !(*(_DWORD *)(result + 24) & 2) )
  {
    v1 = (unsigned int **)result;
    result = CTRPluginFramework::SubMenu::IsOpen((CTRPluginFramework::SubMenu *)(result + 88));
    if ( !result )
    {
      CTRPluginFramework::ProcessImpl::GetMemRegion((CTRPluginFramework::ProcessImpl *)&v3, *v1[18]);
      CTRPluginFramework::ProcessImpl::GetPreviousRegion(&v4, &v3);
      result = (int)CTRPluginFramework::HexEditor::Goto((CTRPluginFramework::HexEditor *)v1, v4, 1, v2);
    }
  }
  return result;
}
// 2B64: using guessed type int __fastcall CTRPluginFramework::ProcessImpl::GetPreviousRegion(_DWORD, _DWORD);

//----- (0000105C) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_GotoNextRegion(int result)
{
  unsigned int **v1; // r4
  int v2; // r3
  int v3; // [sp+0h] [bp-28h]
  unsigned int v4; // [sp+10h] [bp-18h]

  if ( !(*(_DWORD *)(result + 24) & 2) )
  {
    v1 = (unsigned int **)result;
    result = CTRPluginFramework::SubMenu::IsOpen((CTRPluginFramework::SubMenu *)(result + 88));
    if ( !result )
    {
      CTRPluginFramework::ProcessImpl::GetMemRegion((CTRPluginFramework::ProcessImpl *)&v3, *v1[18]);
      CTRPluginFramework::ProcessImpl::GetNextRegion(&v4, &v3);
      result = (int)CTRPluginFramework::HexEditor::Goto((CTRPluginFramework::HexEditor *)v1, v4, 1, v2);
    }
  }
  return result;
}
// 2B68: using guessed type int __fastcall CTRPluginFramework::ProcessImpl::GetNextRegion(_DWORD, _DWORD);

//----- (000010B8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_GetSelectedItem(CTRPluginFramework::HexEditor *this)
{
  __int16 v1; // r1
  unsigned int v2; // r2
  int v3; // r3

  v1 = *((_WORD *)this + 19);
  v2 = *(unsigned __int8 *)(*((_DWORD *)this + 1) + 4);
  v3 = v2 * v1;
  if ( v2 > 1 )
    v3 = v1 * (signed __int16)v2 + (*((signed __int16 *)this + 18) >> 3);
  return *((_DWORD *)this + 18) + 72 * v3;
}

//----- (000010E8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::HexEditor::Context::ScrollUp(CTRPluginFramework::HexEditor::Context *this, unsigned int a2, int a3)
{
  unsigned int v3; // r3
  unsigned int v4; // r4
  unsigned int v6; // r7
  int v7; // r6
  unsigned int v8; // [sp+0h] [bp-38h]
  int v9; // [sp+4h] [bp-34h]
  int v10; // [sp+8h] [bp-30h]
  int v11; // [sp+Ch] [bp-2Ch]
  unsigned int v12; // [sp+10h] [bp-28h]
  int v13; // [sp+14h] [bp-24h]
  int v14; // [sp+18h] [bp-20h]
  int v15; // [sp+1Ch] [bp-1Ch]

  v3 = *((_DWORD *)this + 1);
  v4 = v3 - a2;
  if ( v3 - a2 < 0x100000 )
    return 0;
  v6 = a2;
  v7 = a3;
  CTRPluginFramework::ProcessImpl::GetMemRegion((CTRPluginFramework::ProcessImpl *)&v12, v3);
  if ( v12 > v4 )
  {
    CTRPluginFramework::ProcessImpl::GetPreviousRegion(&v8, &v12);
    v12 = v8;
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v4 = v8 + v9 - v6;
  }
  CTRPluginFramework::HexEditor::Goto(
    (CTRPluginFramework::HexEditor *)CTRPluginFramework::__g_hexEditor,
    v4,
    v7,
    (int)&CTRPluginFramework::__g_hexEditor);
  return 1;
}
// 4: using guessed type int CTRPluginFramework::__g_hexEditor;
// 2B64: using guessed type int __fastcall CTRPluginFramework::ProcessImpl::GetPreviousRegion(_DWORD, _DWORD);

//----- (00001174) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::Context::ScrollDown(CTRPluginFramework::HexEditor::Context *this, unsigned int a2, int a3)
{
  unsigned int v3; // r5
  unsigned int v4; // r1
  int v5; // r6
  unsigned int v6; // r4
  unsigned int v7; // lr
  int v9; // [sp+0h] [bp-30h]
  int v10; // [sp+4h] [bp-2Ch]
  unsigned int v11; // [sp+10h] [bp-20h]
  int v12; // [sp+14h] [bp-1Ch]

  v3 = a2;
  v4 = *((_DWORD *)this + 1);
  v5 = a3;
  v6 = v4 + v3;
  CTRPluginFramework::ProcessImpl::GetMemRegion((CTRPluginFramework::ProcessImpl *)&v9, v4);
  CTRPluginFramework::ProcessImpl::GetNextRegion(&v11, &v9);
  if ( v9 != v11 || (v7 = v9 + v10, v10 != v12) || v7 > 10 * v3 + v6 )
  {
    if ( v9 + v10 <= v6 )
      v6 = v11;
  }
  else
  {
    v6 = v7 - 10 * v3;
  }
  CTRPluginFramework::HexEditor::Goto(
    (CTRPluginFramework::HexEditor *)CTRPluginFramework::__g_hexEditor,
    v6,
    v5,
    (int)&CTRPluginFramework::__g_hexEditor);
  return 0;
}
// 4: using guessed type int CTRPluginFramework::__g_hexEditor;
// 2B68: using guessed type int __fastcall CTRPluginFramework::ProcessImpl::GetNextRegion(_DWORD, _DWORD);

//----- (0000120C) --------------------------------------------------------
CTRPluginFramework::HexEditor::Context *__fastcall CTRPluginFramework::HexEditor::ByteView::EditValueAtCursor(CTRPluginFramework::HexEditor::ByteView *this, unsigned int a2)
{
  int v2; // r12
  CTRPluginFramework::HexEditor::ByteView *v3; // r4
  signed int v4; // r3
  int v5; // r2
  char v6; // r3
  char v7; // r3
  CTRPluginFramework::HexEditor::Context *result; // r0
  int v9; // r5
  int v10; // r6
  int v11; // r3
  int v12; // r3

  v2 = *((_DWORD *)this + 2);
  v3 = this;
  v4 = *(signed __int16 *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 48) + 72 * ((v4 > 7) + 2 * *(signed __int16 *)(v2 + 14));
  if ( v4 > 7 )
    LOBYTE(v4) = v4 - 8;
  if ( v4 & 1 )
    v6 = v4 - 1;
  else
    v6 = v4 + 1;
  v7 = 4 * v6;
  result = (CTRPluginFramework::HexEditor::Context *)(*(_DWORD *)(v5 + 4) & ~(15 << v7));
  *(_DWORD *)(v5 + 4) = (unsigned int)result | (a2 << v7);
  v9 = *((_DWORD *)v3 + 2);
  v10 = *(signed __int16 *)(v9 + 12);
  if ( v10 == 15 )
    v11 = 0;
  else
    v11 = (signed __int16)(v10 + 1);
  *(_WORD *)(v9 + 12) = v11;
  if ( v10 > v11 )
  {
    v12 = *(signed __int16 *)(v9 + 14);
    if ( v12 == 9 )
    {
      result = (CTRPluginFramework::HexEditor::Context *)*((_DWORD *)v3 + 2);
      if ( *(_DWORD *)result & 2
        || (result = (CTRPluginFramework::HexEditor::Context *)CTRPluginFramework::HexEditor::Context::ScrollDown(
                                                                 result,
                                                                 *((unsigned __int8 *)v3 + 7),
                                                                 0)) == 0 )
      {
        *(_WORD *)(v9 + 12) = v10;
      }
    }
    else
    {
      *(_WORD *)(v9 + 14) = v12 + 1;
    }
  }
  **((_DWORD **)v3 + 2) |= 0x3Au;
  return result;
}

//----- (000012D8) --------------------------------------------------------
CTRPluginFramework::HexEditor::Context *__fastcall CTRPluginFramework::HexEditor::IntegerView::EditValueAtCursor(CTRPluginFramework::HexEditor::IntegerView *this, unsigned int a2)
{
  int v2; // r12
  CTRPluginFramework::HexEditor::IntegerView *v3; // r4
  int v4; // r2
  CTRPluginFramework::HexEditor::Context *result; // r0
  int v6; // r3
  int v7; // r5
  int v8; // r6
  int v9; // r3
  int v10; // r3

  v2 = *((_DWORD *)this + 2);
  v3 = this;
  v4 = *(signed __int16 *)(v2 + 12);
  result = (CTRPluginFramework::HexEditor::Context *)(*(_DWORD *)(v2 + 48)
                                                    + 72 * ((v4 >> 3) + 4 * *(signed __int16 *)(v2 + 14)));
  v6 = 4 * (7 - v4 + 8 * (v4 >> 3));
  *((_DWORD *)result + 1) = *((_DWORD *)result + 1) & ~(15 << v6) | (a2 << v6);
  v7 = *((_DWORD *)v3 + 2);
  v8 = *(signed __int16 *)(v7 + 12);
  if ( v8 == 31 )
    v9 = 0;
  else
    v9 = (signed __int16)(v8 + 1);
  *(_WORD *)(v7 + 12) = v9;
  if ( v8 > v9 )
  {
    v10 = *(signed __int16 *)(v7 + 14);
    if ( v10 == 9 )
    {
      result = (CTRPluginFramework::HexEditor::Context *)*((_DWORD *)v3 + 2);
      if ( *(_DWORD *)result & 2
        || (result = (CTRPluginFramework::HexEditor::Context *)CTRPluginFramework::HexEditor::Context::ScrollDown(
                                                                 result,
                                                                 *((unsigned __int8 *)v3 + 7),
                                                                 0)) == 0 )
      {
        *(_WORD *)(v7 + 12) = v8;
      }
    }
    else
    {
      *(_WORD *)(v7 + 14) = v10 + 1;
    }
  }
  **((_DWORD **)v3 + 2) |= 0x3Au;
  return result;
}

//----- (00001394) --------------------------------------------------------
CTRPluginFramework::HexEditor::Context *__fastcall CTRPluginFramework::HexEditor::AsmView::EditValueAtCursor(CTRPluginFramework::HexEditor::AsmView *this, unsigned int a2)
{
  CTRPluginFramework::HexEditor::AsmView *v2; // r4
  int v3; // r2
  CTRPluginFramework::HexEditor::Context *result; // r0
  int v5; // r3
  int v6; // r5
  int v7; // r6
  int v8; // r3
  int v9; // r3

  v2 = this;
  v3 = *((_DWORD *)this + 2);
  result = (CTRPluginFramework::HexEditor::Context *)(*(_DWORD *)(v3 + 48) + 72 * *(signed __int16 *)(v3 + 14));
  v5 = 4 * (7 - *(signed __int16 *)(v3 + 12));
  *((_DWORD *)result + 1) = *((_DWORD *)result + 1) & ~(15 << v5) | (a2 << v5);
  v6 = *((_DWORD *)v2 + 2);
  v7 = *(signed __int16 *)(v6 + 12);
  if ( v7 == 7 )
    v8 = 0;
  else
    v8 = (signed __int16)(v7 + 1);
  *(_WORD *)(v6 + 12) = v8;
  if ( v7 > v8 )
  {
    v9 = *(signed __int16 *)(v6 + 14);
    if ( v9 == 9 )
    {
      result = (CTRPluginFramework::HexEditor::Context *)*((_DWORD *)v2 + 2);
      if ( *(_DWORD *)result & 2
        || (result = (CTRPluginFramework::HexEditor::Context *)CTRPluginFramework::HexEditor::Context::ScrollDown(
                                                                 result,
                                                                 *((unsigned __int8 *)v2 + 7),
                                                                 0)) == 0 )
      {
        *(_WORD *)(v6 + 12) = v7;
      }
    }
    else
    {
      *(_WORD *)(v6 + 14) = v9 + 1;
    }
  }
  **((_DWORD **)v2 + 2) |= 0x3Au;
  return result;
}

//----- (00001444) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::IView::ProcessEventsCommon(int result, CTRPluginFramework::HexEditor::Context *a2, Event *a3, int a4)
{
  int v4; // r5
  int v5; // r6
  signed __int16 *v6; // r4
  Event *v7; // r7
  TMLongCard v8; // r1
  int v9; // r3
  int v10; // r2
  __int64 v11; // r2
  signed __int16 v12; // r1
  int v13; // r1
  int v14; // r7
  signed __int16 v15; // r3
  int v16; // r3
  int v17; // r3
  int v18; // [sp+0h] [bp-20h]
  CTRPluginFramework::HexEditor::Context *v19; // [sp+4h] [bp-1Ch]
  Event *v20; // [sp+8h] [bp-18h]

  v18 = result;
  v19 = a2;
  v20 = a3;
  v4 = a4;
  v5 = result;
  v6 = (signed __int16 *)a2;
  v7 = a3;
  if ( LOBYTE(a3->modifiers) )
  {
    if ( LOBYTE(a3->modifiers) != 1 )
      return result;
    v11 = *((_QWORD *)a2 + 5);
    result = CTRPluginFramework::Clock::HasTimePassed(
               (CTRPluginFramework::HexEditor::Context *)((char *)a2 + 32),
               (Time)a2);
    if ( !result )
      return result;
  }
  result = CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v18);
  v8 = v7->modifierMask;
  v9 = *(_DWORD *)v6;
  v10 = *(_DWORD *)v6 & 2;
  if ( v8 == 64 )
  {
    if ( !v6[7] )
    {
      if ( !v10 )
        result = CTRPluginFramework::HexEditor::Context::ScrollUp(
                   (CTRPluginFramework::HexEditor::Context *)v6,
                   *(unsigned __int8 *)(v5 + 7),
                   1);
      return result;
    }
    v12 = v6[7] - 1;
    goto LABEL_10;
  }
  if ( v8 != 128 )
  {
    if ( v8 == 32 )
    {
      v14 = v6[6];
      if ( v6[6] )
        v4 = (signed __int16)(v14 - 1);
      v6[6] = v4;
      if ( v14 >= v4 )
        goto LABEL_24;
      if ( !v6[7] )
      {
        if ( v10 )
        {
LABEL_23:
          v6[6] = v14;
LABEL_24:
          v9 = *(_DWORD *)v6;
          goto LABEL_11;
        }
        result = CTRPluginFramework::HexEditor::Context::ScrollUp(
                   (CTRPluginFramework::HexEditor::Context *)v6,
                   *(unsigned __int8 *)(v5 + 7),
                   1);
LABEL_26:
        if ( result )
          goto LABEL_24;
        goto LABEL_23;
      }
      v15 = v6[7] - 1;
    }
    else
    {
      if ( v8 != 16 )
        return result;
      v14 = v6[6];
      if ( v4 == v14 )
        v16 = 0;
      else
        v16 = (signed __int16)(v14 + 1);
      v6[6] = v16;
      if ( v14 <= v16 )
        goto LABEL_24;
      v17 = v6[7];
      if ( v17 == 9 )
      {
        if ( v10 )
          goto LABEL_23;
        result = CTRPluginFramework::HexEditor::Context::ScrollDown(
                   (CTRPluginFramework::HexEditor::Context *)v6,
                   *(unsigned __int8 *)(v5 + 7),
                   0);
        goto LABEL_26;
      }
      v15 = v17 + 1;
    }
    v6[7] = v15;
    goto LABEL_24;
  }
  v13 = v6[7];
  if ( v13 != 9 )
  {
    v12 = v13 + 1;
LABEL_10:
    v6[7] = v12;
LABEL_11:
    *(_DWORD *)v6 = v9 | 0x30;
    return result;
  }
  if ( !v10 )
    result = CTRPluginFramework::HexEditor::Context::ScrollDown(
               (CTRPluginFramework::HexEditor::Context *)v6,
               *(unsigned __int8 *)(v5 + 7),
               0);
  return result;
}

//----- (000015D8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::ByteView::ProcessEvent(CTRPluginFramework::HexEditor::ByteView *this, Event *a2)
{
  return CTRPluginFramework::HexEditor::IView::ProcessEventsCommon(
           (int)this,
           *((CTRPluginFramework::HexEditor::Context **)this + 2),
           a2,
           15);
}

//----- (000015E8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::IntegerView::ProcessEvent(CTRPluginFramework::HexEditor::IntegerView *this, Event *a2)
{
  return CTRPluginFramework::HexEditor::IView::ProcessEventsCommon(
           (int)this,
           *((CTRPluginFramework::HexEditor::Context **)this + 2),
           a2,
           31);
}

//----- (000015F8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::AsmView::ProcessEvent(CTRPluginFramework::HexEditor::AsmView *this, Event *a2)
{
  return CTRPluginFramework::HexEditor::IView::ProcessEventsCommon(
           (int)this,
           *((CTRPluginFramework::HexEditor::Context **)this + 2),
           a2,
           7);
}

//----- (00001608) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::HexEditor::ByteView::ByteView(_DWORD *result, int a2)
{
  result[2] = a2;
  *result = &off_2898;
  result[1] = 135532546;
  return result;
}
// 2898: using guessed type _DWORD (*off_2898)(CTRPluginFramework::HexEditor::ByteView *__hidden this);

//----- (00001628) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::HexEditor::IntegerView::IntegerView(_DWORD *result, int a2)
{
  result[2] = a2;
  *result = &off_28B0;
  result[1] = 271065092;
  return result;
}
// 28B0: using guessed type _DWORD (*off_28B0)(CTRPluginFramework::HexEditor::IntegerView *__hidden this);

//----- (00001648) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::HexEditor::FloatView::FloatView(_DWORD *result, int a2)
{
  result[2] = a2;
  *result = &off_28C8;
  result[1] = 135532546;
  return result;
}
// 28C8: using guessed type _DWORD (*off_28C8)(CTRPluginFramework::HexEditor::FloatView *__hidden this);

//----- (00001668) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::HexEditor::AsmView::AsmView(_DWORD *result, int a2)
{
  result[2] = a2;
  *result = &off_28E0;
  result[1] = 67766273;
  return result;
}
// 28E0: using guessed type _DWORD (*off_28E0)(CTRPluginFramework::HexEditor::AsmView *__hidden this);

//----- (00001688) --------------------------------------------------------
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000016C4) --------------------------------------------------------
CTRPluginFramework::HexEditor *__fastcall CTRPluginFramework::HexEditor::HexEditor(CTRPluginFramework::HexEditor *this, unsigned int a2)
{
  int v2; // r5
  CTRPluginFramework::HexEditor *v3; // r4
  unsigned int v4; // r7
  int v5; // r8
  int v6; // r6
  char *v7; // r1
  int v8; // r0
  unsigned int v9; // r5
  bool v10; // cf
  _DWORD *v11; // r0
  _DWORD *v12; // r0
  CTRPluginFramework::ProcessImpl *v13; // r0
  int v14; // r3
  int v15; // r3
  int v17; // [sp+4h] [bp-11Ch]
  int v18; // [sp+8h] [bp-118h]
  int v19; // [sp+Ch] [bp-114h]
  char v20[24]; // [sp+10h] [bp-110h]
  char v21; // [sp+28h] [bp-F8h]
  char v22; // [sp+40h] [bp-E0h]
  char v23; // [sp+58h] [bp-C8h]
  char v24; // [sp+70h] [bp-B0h]
  char v25; // [sp+88h] [bp-98h]
  char v26; // [sp+A0h] [bp-80h]
  char v27; // [sp+B8h] [bp-68h]
  char v28; // [sp+D0h] [bp-50h]
  char v29; // [sp+E8h] [bp-38h]

  v2 = 0;
  v3 = this;
  v4 = a2;
  *(_DWORD *)this = 0;
  memset((char *)this + 8, 0, 0x10u);
  *((_DWORD *)v3 + 11) = 0;
  *((_DWORD *)v3 + 12) = 0;
  *((_BYTE *)v3 + 52) = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::HexEditor *)((char *)v3 + 56));
  CTRPluginFramework::Milliseconds((CTRPluginFramework::HexEditor *)((char *)v3 + 64), 200);
  *((_DWORD *)v3 + 18) = 0;
  *((_DWORD *)v3 + 19) = 0;
  *((_DWORD *)v3 + 20) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)v20, "New cheat");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v21, "Jump to");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v22,
    "Jump relative");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v23,
    "Jump to value");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v24, "Converter");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v25,
    "Move backward");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v26,
    "Move forward");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v27,
    "Save this address");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v28,
    "Browse history");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v29,
    "Clear history");
  v18 = 0;
  v5 = operator new(0xF0u);
  v6 = (int)v3 + 24;
  v17 = v5;
  v19 = v5 + 240;
  do
  {
    v7 = &v20[v2];
    v8 = v5 + v2;
    v2 += 24;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v8, v7);
  }
  while ( v2 != 240 );
  v18 = v5 + 240;
  CTRPluginFramework::SubMenu::SubMenu((char *)v3 + 88, &v17);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v17);
  v9 = 9;
  do
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v20[24 * v9]);
    v10 = v9-- >= 1;
  }
  while ( v10 );
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)v20,
    (const char *)&unk_2A62);
  CTRPluginFramework::KeyboardImpl::KeyboardImpl((char *)v3 + 120, v20);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v20);
  CTRPluginFramework::Task::Task(
    (CTRPluginFramework::HexEditor *)((char *)v3 + 344),
    (int (__cdecl *)(void *))CTRPluginFramework::HexEditor::_RenderTop,
    (void *)v3,
    5);
  *((_DWORD *)v3 + 87) = v9;
  *((_DWORD *)v3 + 88) = 0;
  *((_DWORD *)v3 + 89) = 0;
  *((_DWORD *)v3 + 90) = 0;
  CTRPluginFramework::KeyboardImpl::SetLayout((char *)v3 + 120, 2);
  *((_BYTE *)v3 + 240) = 0;
  CTRPluginFramework::__g_hexEditor = (int)v3;
  v11 = (_DWORD *)operator new(0xCu);
  *v11 = &off_2898;
  v11[2] = v6;
  v11[1] = 135532546;
  *((_DWORD *)v3 + 2) = v11;
  v12 = (_DWORD *)operator new(0xCu);
  *v12 = &off_28B0;
  v12[2] = v6;
  v12[1] = 271065092;
  *((_DWORD *)v3 + 3) = v12;
  v13 = (CTRPluginFramework::ProcessImpl *)operator new(0xCu);
  *((_DWORD *)v13 + 1) = 67766273;
  v14 = *((_DWORD *)v3 + 2);
  *(_DWORD *)v13 = &off_28E0;
  *((_DWORD *)v13 + 2) = v6;
  *((_DWORD *)v3 + 4) = v13;
  *((_DWORD *)v3 + 1) = v14;
  CTRPluginFramework::ProcessImpl::UpdateMemRegions(v13);
  CTRPluginFramework::HexEditor::Goto(v3, v4, 1, v15);
  return v3;
}
// 4: using guessed type int CTRPluginFramework::__g_hexEditor;
// 2898: using guessed type _DWORD (*off_2898)(CTRPluginFramework::HexEditor::ByteView *__hidden this);
// 28B0: using guessed type _DWORD (*off_28B0)(CTRPluginFramework::HexEditor::IntegerView *__hidden this);
// 28E0: using guessed type _DWORD (*off_28E0)(CTRPluginFramework::HexEditor::AsmView *__hidden this);
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B88: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 2B8C: using guessed type int __fastcall CTRPluginFramework::SubMenu::SubMenu(_DWORD, _DWORD);
// 2B90: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(_DWORD, _DWORD);
// 2B98: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 16C4: using guessed type char var_110[24];

//----- (00001938) --------------------------------------------------------
int __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(int *a1, unsigned int a2)
{
  int v2; // r12

  v2 = *a1;
  if ( a2 >= -1171354717 * ((a1[1] - *a1) >> 2) )
    std::__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)");
  return v2 + 44 * a2;
}

//----- (0000197C) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::HexEditor::_PromptForAddress(CTRPluginFramework::HexEditor *this, int a2)
{
  CTRPluginFramework::HexEditor *v2; // r4
  int v3; // r6
  int v4; // r1
  int v5; // r5
  int v6; // r0
  bool v7; // r1
  int v8; // r1
  unsigned int v9; // r3
  int *v10; // r0
  CTRPluginFramework::TouchKey *v11; // r0
  CTRPluginFramework::TouchKey *v12; // r0
  unsigned int v13; // r2
  unsigned int v14; // r3
  CTRPluginFramework::TouchKey *v15; // r0
  CTRPluginFramework::TouchKey *v16; // r0
  unsigned int v17; // r4
  int v19; // [sp+0h] [bp-40h]
  char v20; // [sp+4h] [bp-3Ch]
  unsigned int v21; // [sp+10h] [bp-30h]

  v2 = this;
  v3 = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v21,
    (const char *)&unk_2A62);
  CTRPluginFramework::Keyboard::Keyboard(&v20, &v21);
  __mcr(15, 0, std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v21), 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::HexEditor::_PromptForAddress(int)::background & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::HexEditor::_PromptForAddress(int)::background) )
  {
    CTRPluginFramework::HexEditor::_PromptForAddress(int)::background = 408021893213LL;
    unk_14 = 214748365013LL;
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::HexEditor::_PromptForAddress(int)::background, 50);
  }
  CTRPluginFramework::Renderer::SetTarget(1, v4);
  CTRPluginFramework::Renderer::DrawRect2(
    &CTRPluginFramework::HexEditor::_PromptForAddress(int)::background,
    &CTRPluginFramework::Preferences::Settings[8]);
  v5 = *((_DWORD *)&`vtable for'CTRPluginFramework::HexEditor::ByteView + v3 + 24);
  v6 = *((_DWORD *)&`vtable for'CTRPluginFramework::HexEditor::ByteView + v3 + 24);
  v19 = 115;
  CTRPluginFramework::Renderer::DrawString(v6, 98, &v19, CTRPluginFramework::Color::SkyBlue);
  CTRPluginFramework::Renderer::EndFrame(0, v7);
  CTRPluginFramework::Renderer::SetTarget(1, v8);
  CTRPluginFramework::Renderer::DrawRect2(
    &CTRPluginFramework::HexEditor::_PromptForAddress(int)::background,
    &CTRPluginFramework::Preferences::Settings[8]);
  v19 = 115;
  CTRPluginFramework::Renderer::DrawString(v5, 98, &v19, CTRPluginFramework::Color::SkyBlue);
  v9 = 0;
  v20 = 0;
  if ( !v3 )
    v9 = *((_DWORD *)v2 + 7);
  v10 = (int *)*((_DWORD *)v2 + 66);
  v21 = v9;
  v11 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                          v10,
                                          0xFu);
  CTRPluginFramework::TouchKey::Enable(v11, 1);
  v12 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                          *((int **)v2 + 66),
                                          0x10u);
  CTRPluginFramework::TouchKey::Enable(v12, 1);
  v13 = v21;
  *((_BYTE *)v2 + 240) = 1;
  if ( CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v20, &v21, v13) == -1 )
  {
    v14 = 0;
LABEL_10:
    v21 = v14;
    goto LABEL_11;
  }
  if ( v3 == 1 )
  {
    v14 = v21 + *((_DWORD *)v2 + 8);
    goto LABEL_10;
  }
LABEL_11:
  v15 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                          *((int **)v2 + 66),
                                          0xFu);
  CTRPluginFramework::TouchKey::Enable(v15, 0);
  v16 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                          *((int **)v2 + 66),
                                          0x10u);
  CTRPluginFramework::TouchKey::Enable(v16, 0);
  *((_BYTE *)v2 + 240) = 0;
  v17 = v21;
  CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v20);
  return v17;
}
// 8: using guessed type char `guard variable for'CTRPluginFramework::HexEditor::_PromptForAddress(int)::background;
// 2ADC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);
// 2AF8: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD, _DWORD);
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2BA4: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);
// 2BA8: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 2BAC: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);
// 2BB0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD);

//----- (00001B44) --------------------------------------------------------
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::_M_realloc_insert<unsigned long const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00001C08) --------------------------------------------------------
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::push_back(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // r2
  _BYTE *v3; // r1

  v2 = a2;
  v3 = (_BYTE *)a1[1];
  if ( v3 == (_BYTE *)a1[2] )
  {
    std::vector<unsigned long,std::allocator<unsigned long>>::_M_realloc_insert<unsigned long const&>(a1, v3, v2);
  }
  else
  {
    *(_DWORD *)v3 = *v2;
    a1[1] += 4;
  }
}

//----- (00001C3C) --------------------------------------------------------
void __fastcall CTRPluginFramework::HexEditor::_SaveThisAddress(CTRPluginFramework::HexEditor *this, int a2)
{
  int v2; // r2
  int v3; // r1
  int v4; // r3
  CTRPluginFramework::HexEditor *v5; // r4
  int v6; // [sp+4h] [bp-Ch]

  v6 = a2;
  v2 = *((_DWORD *)this + 89);
  v3 = *((_DWORD *)this + 88);
  v4 = *((_DWORD *)this + 8);
  v6 = *((_DWORD *)this + 8);
  if ( v3 == v2 || v4 != *(_DWORD *)(v2 - 4) )
  {
    v5 = this;
    std::vector<unsigned long,std::allocator<unsigned long>>::push_back((_DWORD *)this + 88, &v6);
    *((_DWORD *)v5 + 87) = ((*((_DWORD *)v5 + 89) - *((_DWORD *)v5 + 88)) >> 2) - 1;
  }
}

//----- (00001C94) --------------------------------------------------------
void __fastcall CTRPluginFramework::HexEditor::_JumpTo(CTRPluginFramework::HexEditor *this, int a2)
{
  CTRPluginFramework::HexEditor *v2; // r4
  int v3; // r5
  int v4; // r3
  bool v5; // zf
  unsigned int v6; // [sp+8h] [bp-48h]
  char v7; // [sp+Ch] [bp-44h]
  char v8; // [sp+10h] [bp-40h]
  char v9; // [sp+28h] [bp-28h]

  v2 = this;
  if ( a2 == 2 )
  {
    v6 = *(_DWORD *)(CTRPluginFramework::HexEditor::_GetSelectedItem(this) + 4);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Confirm");
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v8, "Do you want to jump to: 0x%08X ?", v6);
    CTRPluginFramework::MessageBox::MessageBox(&v7, &v9, &v8);
    v3 = CTRPluginFramework::MessageBox::operator()(&v7);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v7);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
    v5 = v3 == 0;
  }
  else
  {
    v6 = CTRPluginFramework::HexEditor::_PromptForAddress(this, a2);
    v5 = v6 == 0;
  }
  if ( !v5 )
  {
    if ( CTRPluginFramework::HexEditor::Goto(v2, v6, 1, v4) )
    {
      std::vector<unsigned long,std::allocator<unsigned long>>::push_back((_DWORD *)v2 + 88, &v6);
      *((_DWORD *)v2 + 87) = ((*((_DWORD *)v2 + 89) - *((_DWORD *)v2 + 88)) >> 2) - 1;
    }
  }
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B20: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 2B44: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD);
// 2B48: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (00001D78) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(char **a1, char *a2, int a3)
{
  char *v3; // r7
  char *v4; // r6
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  char **v9; // r8
  char *v10; // r9
  __int64 v11; // r10
  unsigned int v12; // r5
  char *v13; // r11
  int i; // r0
  int v15; // r5
  int v16; // r5
  int v17; // r11
  int v18; // r3
  int v19; // r2
  int v20; // ST04_4
  int v21; // ST00_4
  unsigned int v22; // r9
  char *v23; // r6
  int v24; // r9
  int v25; // r5
  int v26; // [sp+0h] [bp-30h]

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 3);
  if ( -1431655765 * ((v4 - *a1) >> 3) )
    v6 = -1431655765 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  HIDWORD(v11) = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xAAAAAAA )
  {
    v8 = 178956970;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    LODWORD(v11) = operator new(24 * v8);
    goto LABEL_8;
  }
  LODWORD(v11) = 0;
LABEL_8:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11 + v12, HIDWORD(v11));
  v13 = v3;
  for ( i = v11; ; i = v26 )
  {
    v26 = i + 24;
    if ( v10 == v13 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(i, v13);
    v13 += 24;
  }
  v15 = 178956971 * (v12 >> 3) & 0x1FFFFFFF;
  HIDWORD(v11) = 24 * v15 + 24;
  v16 = (int)&v3[24 * v15];
  v17 = v11 + HIDWORD(v11);
  v18 = v16;
  v19 = v17;
  while ( v4 != (char *)v18 )
  {
    v20 = v18;
    v21 = v19;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v19, v18);
    v19 = v21 + 24;
    v18 = v20 + 24;
  }
  v22 = 178956971 * ((unsigned int)&v4[-v16] >> 3);
  v23 = v3;
  v24 = 24 * (v22 & 0x1FFFFFFF);
  v25 = v16 + v24;
  HIDWORD(v11) = v17 + v24;
  while ( (char *)v25 != v23 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23);
    v23 += 24;
  }
  if ( v3 )
    operator delete(v3);
  *(_QWORD *)v9 = v11;
  v9[2] = (char *)(v11 + 24 * v8);
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2BCC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00001EE8) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_BrowseHistory(CTRPluginFramework::HexEditor *this)
{
  int result; // r0
  CTRPluginFramework::HexEditor *v2; // r4
  _DWORD *v3; // r6
  _DWORD *v4; // r5
  int v5; // r0
  int v6; // r3
  char v7; // [sp+Ch] [bp-5Ch]
  int v8[6]; // [sp+10h] [bp-58h]
  int v9; // [sp+28h] [bp-40h]
  char *v10; // [sp+2Ch] [bp-3Ch]
  char *v11; // [sp+30h] [bp-38h]
  char v12; // [sp+40h] [bp-28h]

  if ( *((_DWORD *)this + 89) == *((_DWORD *)this + 88) )
  {
    CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
      v8,
      (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
    CTRPluginFramework::operator<<(&v9, v8, "Error");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v12,
      "History is empty");
    CTRPluginFramework::MessageBox::MessageBox(&v7, &v9, &v12);
    CTRPluginFramework::MessageBox::operator()(&v7);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v7);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v8);
  }
  else
  {
    v2 = this;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v12,
      (const char *)&unk_2A62);
    CTRPluginFramework::Keyboard::Keyboard(v8, &v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
    v3 = (_DWORD *)*((_DWORD *)v2 + 89);
    v4 = (_DWORD *)*((_DWORD *)v2 + 88);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while ( v3 != v4 )
    {
      ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(&v12, *v4);
      ++v4;
      if ( v10 == v11 )
      {
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
          (char **)&v9,
          v10,
          (int)&v12);
      }
      else
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v10, &v12);
        v10 += 24;
      }
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
    }
    LOBYTE(v8[0]) = 0;
    CTRPluginFramework::Keyboard::Populate(v8, &v9);
    v5 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)v8);
    if ( v5 != -1 )
    {
      v6 = *((_DWORD *)v2 + 88);
      *((_DWORD *)v2 + 87) = v5;
      CTRPluginFramework::HexEditor::Goto(v2, *(_DWORD *)(v6 + 4 * v5), 1, v6);
    }
    std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v9);
    result = CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)v8);
  }
  return result;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2B40: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 2B44: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD);
// 2B48: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 2BA4: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);
// 2BCC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 2BD0: using guessed type int __fastcall ZN18CTRPluginFramework5Utils5ToHexB5cxx11Em(_DWORD, _DWORD);
// 2BD4: using guessed type int __fastcall CTRPluginFramework::Keyboard::Populate(_DWORD, _DWORD);

//----- (0000206C) --------------------------------------------------------
int __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::HexEditor::Item *>(int result, int a2)
{
  int v2; // r4
  int v3; // r5

  v2 = result;
  v3 = a2;
  while ( v2 != v3 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2 + 48);
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2 + 24);
    v2 += 72;
  }
  return result;
}
// 2B00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00002098) --------------------------------------------------------
CTRPluginFramework::HexEditor *__fastcall CTRPluginFramework::HexEditor::~HexEditor(CTRPluginFramework::HexEditor *this)
{
  CTRPluginFramework::HexEditor *v1; // r4
  void *v2; // r0
  void *v3; // r0

  v1 = this;
  operator delete(*((void **)this + 2));
  operator delete(*((void **)v1 + 3));
  operator delete(*((void **)v1 + 4));
  v2 = (void *)*((_DWORD *)v1 + 88);
  if ( v2 )
    operator delete(v2);
  CTRPluginFramework::Task::~Task((CTRPluginFramework::HexEditor *)((char *)v1 + 344));
  CTRPluginFramework::KeyboardImpl::~KeyboardImpl((CTRPluginFramework::HexEditor *)((char *)v1 + 120));
  CTRPluginFramework::SubMenu::~SubMenu((CTRPluginFramework::HexEditor *)((char *)v1 + 88));
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::HexEditor::Item *>(
    *((_QWORD *)v1 + 9),
    *((_QWORD *)v1 + 9) >> 32);
  v3 = (void *)*((_DWORD *)v1 + 18);
  if ( v3 )
    operator delete(v3);
  return v1;
}

//----- (00002100) --------------------------------------------------------
int *__fastcall std::vector<CTRPluginFramework::HexEditor::Item,std::allocator<CTRPluginFramework::HexEditor::Item>>::clear(int *result)
{
  int v1; // r5
  int v2; // r1
  int *v3; // r4

  v1 = *result;
  v2 = result[1];
  if ( *result != v2 )
  {
    v3 = result;
    result = (int *)std::_Destroy_aux<false>::__destroy<CTRPluginFramework::HexEditor::Item *>(*result, v2);
    v3[1] = v1;
  }
  return result;
}

//----- (00002128) --------------------------------------------------------
int *__fastcall CTRPluginFramework::HexEditor::_ProcessEvent(CTRPluginFramework::HexEditor *this, Event *a2)
{
  Event *v2; // r5
  CTRPluginFramework::HexEditor *v3; // r4
  int *result; // r0
  signed int v5; // r3
  unsigned int v6; // r12
  int v7; // r3
  int v8; // r2
  int v9; // r1
  int v10; // r0
  int v11; // r3
  unsigned int v12; // r12
  int v13; // r2
  int v14; // r1
  int v15; // r0

  v2 = a2;
  v3 = this;
  result = (int *)(*(int (**)(void))(**((_DWORD **)this + 1) + 4))();
  if ( !LOBYTE(v2->modifiers) )
  {
    v5 = v2->modifierMask;
    if ( v5 == 2 )
    {
      if ( *((_DWORD *)v3 + 6) & 2 )
        result = (int *)CTRPluginFramework::HexEditor::_DiscardChanges((int)v3);
      else
        result = (int *)CTRPluginFramework::Window::Close((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
    }
    else
    {
      if ( v5 > 2 )
      {
        if ( v5 == 256 )
        {
          v11 = *((_DWORD *)v3 + 6) & 2;
          if ( v11 )
            return result;
          v12 = *((_DWORD *)v3 + 8);
          if ( *(_DWORD *)v3 != 2 )
            v11 = *(_DWORD *)v3 + 1;
          *(_DWORD *)v3 = v11;
          v13 = *((_DWORD *)v3 + v11 + 2);
          *((_DWORD *)v3 + 1) = v13;
          v14 = 4 * *(unsigned __int8 *)(v13 + 6);
          while ( 1 )
          {
            v15 = *((_DWORD *)v3 + 7);
            if ( v12 < v14 + v15 )
              break;
            *((_DWORD *)v3 + 7) = *(unsigned __int8 *)(v13 + 7) + v15;
          }
        }
        else
        {
          if ( v5 != 512 || *((_DWORD *)v3 + 6) & 2 )
            return result;
          v6 = *((_DWORD *)v3 + 8);
          if ( *(_DWORD *)v3 )
            v7 = *(_DWORD *)v3 - 1;
          else
            v7 = 2;
          *(_DWORD *)v3 = v7;
          v8 = *((_DWORD *)v3 + v7 + 2);
          *((_DWORD *)v3 + 1) = v8;
          v9 = 4 * *(unsigned __int8 *)(v8 + 6);
          while ( 1 )
          {
            v10 = *((_DWORD *)v3 + 7);
            if ( v6 < v9 + v10 )
              break;
            *((_DWORD *)v3 + 7) = *(unsigned __int8 *)(v8 + 7) + v10;
          }
        }
        result = std::vector<CTRPluginFramework::HexEditor::Item,std::allocator<CTRPluginFramework::HexEditor::Item>>::clear((int *)v3 + 18);
        *((_DWORD *)v3 + 6) |= 5u;
        return result;
      }
      if ( v5 == 1 )
      {
        if ( *((_DWORD *)v3 + 6) & 2 )
          result = (int *)CTRPluginFramework::HexEditor::_ApplyChanges((int)v3);
      }
    }
  }
  return result;
}

//----- (0000227C) --------------------------------------------------------
char *__fastcall std::__uninitialized_default_n_1<false>::__uninit_default_n<CTRPluginFramework::HexEditor::Item *,unsigned int>(void *s, int a2)
{
  void *v2; // r3
  char *v3; // r6
  int v4; // r7
  int v5; // r5
  _DWORD *v6; // r0

  v2 = s;
  v3 = (char *)s;
  v4 = a2;
  v5 = a2;
  while ( v5 )
  {
    v6 = memset(v2, 0, 0x48u);
    v6[6] = v6 + 8;
    v6[3] = 0;
    v6[4] = 0;
    *((_BYTE *)v6 + 20) = 0;
    v6[7] = 0;
    *((_BYTE *)v6 + 32) = 0;
    v6[12] = v6 + 14;
    v6[13] = 0;
    *((_BYTE *)v6 + 56) = 0;
    --v5;
    v2 = v6 + 18;
  }
  return &v3[72 * v4];
}

//----- (000022F0) --------------------------------------------------------
char *__fastcall std::vector<CTRPluginFramework::HexEditor::Item,std::allocator<CTRPluginFramework::HexEditor::Item>>::resize(int *a1, unsigned int a2)
{
  int *v2; // r5
  char *result; // r0
  unsigned int v4; // r3
  unsigned int v5; // r4
  signed int v6; // r0
  int v7; // r2
  unsigned __int8 v8; // cf
  unsigned int v9; // r3
  int v10; // r10
  int v11; // r8
  int v12; // r9
  int v13; // r7
  int v14; // r3
  int v15; // r6
  _DWORD *v16; // r12
  int v17; // ST04_4
  int v18; // r1
  int v19; // r2
  char *v20; // r4
  int v21; // r4

  v2 = a1;
  result = (char *)a1[1];
  v4 = 954437177 * ((signed int)&result[-*v2] >> 3);
  if ( a2 <= v4 )
  {
    if ( a2 < v4 )
    {
      v21 = *v2 + 72 * a2;
      if ( (char *)v21 != result )
      {
        result = (char *)std::_Destroy_aux<false>::__destroy<CTRPluginFramework::HexEditor::Item *>(v21, (int)result);
        v2[1] = v21;
      }
    }
  }
  else
  {
    v5 = a2 - v4;
    if ( a2 - v4 > 954437177 * ((v2[2] - (signed int)result) >> 3) )
    {
      v6 = 59652323;
      if ( v5 > 59652323 - v4 )
        std::__throw_length_error("vector::_M_default_append");
      if ( v5 < v4 )
        v7 = v4;
      else
        v7 = a2 - v4;
      v8 = __CFADD__(v4, v7);
      v9 = v4 + v7;
      if ( !v8 && v9 < 0x38E38E3 )
        v6 = v9;
      v10 = 72 * v6;
      v11 = operator new(72 * v6);
      v12 = v11;
      v13 = *v2;
      v14 = v2[1];
      v15 = *v2 + 24;
      while ( v14 != v15 - 24 )
      {
        v16 = (_DWORD *)(v12 + 12);
        *(_DWORD *)v12 = *(_DWORD *)(v15 - 24);
        v17 = v14;
        *(_DWORD *)(v12 + 4) = *(_DWORD *)(v15 - 20);
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(v15 - 16);
        v18 = *(_DWORD *)(v15 - 8);
        v19 = *(_DWORD *)(v15 - 4);
        *v16 = *(_DWORD *)(v15 - 12);
        v16[1] = v18;
        *(_BYTE *)(v12 + 20) = v19;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v12 + 24, v15);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v12 + 48, v15 + 24);
        v15 += 72;
        v12 += 72;
        v14 = v17;
      }
      v20 = std::__uninitialized_default_n_1<false>::__uninit_default_n<CTRPluginFramework::HexEditor::Item *,unsigned int>(
              (void *)(v11 + 72 * (417566265 * ((unsigned int)(v14 - v13) >> 3) & 0x1FFFFFFF)),
              v5);
      std::_Destroy_aux<false>::__destroy<CTRPluginFramework::HexEditor::Item *>(*(_QWORD *)v2, *(_QWORD *)v2 >> 32);
      if ( *v2 )
        operator delete((void *)*v2);
      result = (char *)(v11 + v10);
      *v2 = v11;
      v2[1] = (int)v20;
      v2[2] = v11 + v10;
    }
    else
    {
      result = std::__uninitialized_default_n_1<false>::__uninit_default_n<CTRPluginFramework::HexEditor::Item *,unsigned int>(
                 result,
                 a2 - v4);
      v2[1] = (int)result;
    }
  }
  return result;
}
// 2BCC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00002490) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::_Update(CTRPluginFramework::HexEditor *this)
{
  CTRPluginFramework::HexEditor *v1; // r4
  int v2; // r5
  int v3; // r7
  int v4; // r3
  unsigned int v5; // r7
  int *v6; // r6
  char *v7; // r11
  char *i; // r5
  int v9; // r3
  int result; // r0
  int v11; // r3
  __int64 v12; // [sp+0h] [bp-50h]
  int v13; // [sp+8h] [bp-48h]
  int v14; // [sp+Ch] [bp-44h]
  __int64 v15; // [sp+10h] [bp-40h]
  __int64 v16; // [sp+18h] [bp-38h]
  int v17; // [sp+20h] [bp-30h]
  int v18; // [sp+24h] [bp-2Ch]

  v1 = this;
  v2 = CTRPluginFramework::Touch::IsDown(this);
  CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v16);
  v15 = v16;
  CTRPluginFramework::Window::Update(&CTRPluginFramework::Window::BottomWindow, v2, &v15);
  if ( *((_DWORD *)v1 + 6) & 1 )
  {
    CTRPluginFramework::ProcessImpl::GetMemRegion((CTRPluginFramework::ProcessImpl *)&v16, *((_DWORD *)v1 + 7));
    v3 = v16;
    v4 = *((_DWORD *)v1 + 6);
    if ( (_DWORD)v16 )
    {
      *((_DWORD *)v1 + 6) = v4 & 0xFFFFFEFF;
      v5 = v3 + HIDWORD(v16);
      v6 = (int *)*((_DWORD *)v1 + 7);
      std::vector<CTRPluginFramework::HexEditor::Item,std::allocator<CTRPluginFramework::HexEditor::Item>>::resize(
        (int *)v1 + 18,
        *(unsigned __int8 *)(*((_DWORD *)v1 + 1) + 6));
      v7 = (char *)*((_DWORD *)v1 + 19);
      for ( i = (char *)(*((_DWORD *)v1 + 18) + 12); v7 != i - 12; i += 72 )
      {
        if ( v5 <= (unsigned int)v6 )
        {
          CTRPluginFramework::ProcessImpl::GetNextRegion(&v12, &v16);
          v16 = v12;
          v17 = v13;
          v18 = v14;
          v6 = (int *)v12;
          v5 = v12 + HIDWORD(v12);
        }
        *((_DWORD *)i - 3) = v6;
        v9 = *v6;
        *((_DWORD *)i - 1) = *v6;
        *((_DWORD *)i - 2) = v9;
        snprintf(i, 9u, "%08X", v6);
        ++v6;
      }
    }
    else
    {
      *((_DWORD *)v1 + 6) = v4 | 0x100;
    }
    *((_DWORD *)v1 + 6) = *((_DWORD *)v1 + 6) & 0xFFFFFFFE | 8;
  }
  result = (*(int (**)(void))(**((_DWORD **)v1 + 1) + 8))();
  v11 = *((_DWORD *)v1 + 6);
  if ( v11 & 0x40 )
  {
    *((_DWORD *)v1 + 6) = v11 & 0xFFFFFFBF;
    result = snprintf((char *)v1 + 44, 9u, "%08X", *((_DWORD *)v1 + 8));
  }
  return result;
}
// 2B68: using guessed type int __fastcall CTRPluginFramework::ProcessImpl::GetNextRegion(_DWORD, _DWORD);
// 2BF8: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);

//----- (000025F0) --------------------------------------------------------
int __fastcall CTRPluginFramework::HexEditor::operator()(int a1, _DWORD *a2)
{
  char v2; // r6
  int v3; // r4
  _DWORD *v4; // r7
  CTRPluginFramework::TouchKey *v5; // r0
  CTRPluginFramework::TouchKey *v6; // r0
  unsigned int v7; // r11
  int v8; // r8
  int v9; // r6
  CTRPluginFramework::TouchKey *v10; // r0
  CTRPluginFramework::TouchKey *v11; // r0
  int v13; // r0
  int v14; // r1
  int v15; // r1
  CTRPluginFramework::TouchKey *v16; // r0
  CTRPluginFramework::TouchKey *v17; // r0
  CTRPluginFramework::Converter *v18; // r0
  int v19; // r6
  int v20; // r0
  CTRPluginFramework::TouchKey *v21; // r0
  CTRPluginFramework::TouchKey *v22; // r0
  int v23; // [sp+Ch] [bp-2Ch]

  v2 = CTRPluginFramework::HexEditor::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &)::keysAreDisabled;
  v3 = a1;
  v4 = a2;
  if ( !CTRPluginFramework::HexEditor::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &)::keysAreDisabled )
  {
    v5 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                           *(int **)(a1 + 264),
                                           0xFu);
    CTRPluginFramework::TouchKey::Enable(v5, v2);
    v6 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                           *(int **)(v3 + 264),
                                           0x10u);
    CTRPluginFramework::TouchKey::Enable(v6, v2);
    CTRPluginFramework::HexEditor::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &)::keysAreDisabled = 1;
  }
  v7 = 0;
  v8 = CTRPluginFramework::SubMenu::IsOpen((CTRPluginFramework::SubMenu *)(v3 + 88));
  while ( -1431655765 * ((v4[1] - *v4) >> 2) > v7 )
  {
    CTRPluginFramework::SubMenu::ProcessEvent((CTRPluginFramework::SubMenu *)(v3 + 88), (const Event *)(*v4 + 12 * v7));
    if ( !v8 )
      CTRPluginFramework::HexEditor::_ProcessEvent((CTRPluginFramework::HexEditor *)v3, (Event *)(*v4 + 12 * v7));
    ++v7;
  }
  if ( !v8 )
  {
    if ( !(*(_DWORD *)(v3 + 24) & 0x100) && CTRPluginFramework::KeyboardImpl::operator()(v3 + 120, &v23) )
      (*(void (**)(void))(**(_DWORD **)(v3 + 4) + 12))();
    goto LABEL_12;
  }
  v13 = CTRPluginFramework::SubMenu::operator()(v3 + 88);
  switch ( v13 )
  {
    case 0:
      CTRPluginFramework::HexEditor::_CreateCheat(v3);
      break;
    case 1:
      v15 = 0;
LABEL_21:
      CTRPluginFramework::HexEditor::_JumpTo((CTRPluginFramework::HexEditor *)v3, v15);
      break;
    case 2:
      v15 = 1;
      goto LABEL_21;
    case 3:
      v15 = 2;
      goto LABEL_21;
    case 4:
      v16 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                              *(int **)(v3 + 264),
                                              0xFu);
      CTRPluginFramework::TouchKey::Enable(v16, 1);
      v17 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                              *(int **)(v3 + 264),
                                              0x10u);
      v18 = (CTRPluginFramework::Converter *)CTRPluginFramework::TouchKey::Enable(v17, 1);
      v19 = CTRPluginFramework::Converter::Instance(v18);
      if ( v19 )
      {
        v20 = CTRPluginFramework::HexEditor::_GetSelectedItem((CTRPluginFramework::HexEditor *)v3);
        CTRPluginFramework::Converter::operator()(v19, *(_DWORD *)(v20 + 4));
      }
      v21 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                              *(int **)(v3 + 264),
                                              0xFu);
      CTRPluginFramework::TouchKey::Enable(v21, 0);
      v22 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                              *(int **)(v3 + 264),
                                              0x10u);
      CTRPluginFramework::TouchKey::Enable(v22, 0);
      break;
    case 5:
      CTRPluginFramework::HexEditor::_MoveBackward(v3);
      break;
    case 6:
      CTRPluginFramework::HexEditor::_MoveForward(v3);
      break;
    case 7:
      CTRPluginFramework::HexEditor::_SaveThisAddress((CTRPluginFramework::HexEditor *)v3, v14);
      break;
    case 8:
      CTRPluginFramework::HexEditor::_BrowseHistory((CTRPluginFramework::HexEditor *)v3);
      break;
    case 9:
      CTRPluginFramework::HexEditor::_ClearHistory(v3);
      break;
  }
LABEL_12:
  CTRPluginFramework::HexEditor::_Update((CTRPluginFramework::HexEditor *)v3);
  CTRPluginFramework::Task::Start((CTRPluginFramework::Task *)(v3 + 344));
  CTRPluginFramework::HexEditor::_RenderBottom((CTRPluginFramework::HexEditor *)v3);
  CTRPluginFramework::Task::Wait((CTRPluginFramework::Task *)(v3 + 344));
  v9 = CTRPluginFramework::Window::MustClose((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  if ( v9 )
  {
    v10 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                            *(int **)(v3 + 264),
                                            0xFu);
    CTRPluginFramework::TouchKey::Enable(v10, 1);
    v11 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                            *(int **)(v3 + 264),
                                            0x10u);
    CTRPluginFramework::TouchKey::Enable(v11, 1);
    CTRPluginFramework::HexEditor::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &)::keysAreDisabled = 0;
  }
  return v9;
}
// 1C: using guessed type char CTRPluginFramework::HexEditor::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &)::keysAreDisabled;
// 2C04: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::operator()(_DWORD, _DWORD);
// 2C14: using guessed type int __fastcall CTRPluginFramework::SubMenu::operator()(_DWORD);
// 2C1C: using guessed type int __fastcall CTRPluginFramework::Converter::operator()(_DWORD, _DWORD);

// ALL OK, 51 function(s) have been successfully decompiled
