/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

signed int __fastcall CTRPluginFramework::UnitsToNextChar(_BYTE *a1, int a2);
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char,CTRPluginFramework::Rect<int> &>(int a1, int a2, _DWORD *a3);
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(int a1, int a2, int a3, _DWORD *a4);
void __fastcall std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(void *a1);
unsigned int __fastcall std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(unsigned int result);
unsigned int __fastcall std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(int a1, int a2, int a3);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &,int>(int a1, const char *a2, _DWORD *a3, _DWORD *a4);
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &>(int a1, const char *a2, _DWORD *a3);
int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(int a1, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(int a1, int a2, int a3);
CTRPluginFramework::KeyboardImpl *__fastcall CTRPluginFramework::KeyboardImpl::~KeyboardImpl(CTRPluginFramework::KeyboardImpl *this);
int __fastcall CTRPluginFramework::KeyboardImpl::SetHexadecimal(int result, bool a2);
int __fastcall CTRPluginFramework::KeyboardImpl::IsHexadecimal(CTRPluginFramework::KeyboardImpl *this);
int __fastcall CTRPluginFramework::KeyboardImpl::SetMaxInput(int result, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::CanAbort(int result, bool a2);
int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(int a1);
int __fastcall ZN18CTRPluginFramework12KeyboardImpl10GetMessageB5cxx11Ev(int a1);
int __fastcall CTRPluginFramework::KeyboardImpl::SetError(int a1, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(int result, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::SetCompareCallback(int result, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::OnInputChange(int result, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::Close(int result);
int __fastcall CTRPluginFramework::KeyboardImpl::_RenderTop(CTRPluginFramework::KeyboardImpl *this);
int __fastcall CTRPluginFramework::KeyboardImpl::_RenderBottom(CTRPluginFramework::KeyboardImpl *this);
signed int __fastcall CTRPluginFramework::UnitsToPreviousChar(CTRPluginFramework *this, const char *a2, int a3);
int __fastcall CTRPluginFramework::KeyboardImpl::_ScrollUp(int result, int a2, int a3);
int __fastcall CTRPluginFramework::KeyboardImpl::_ScrollDown(int result, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::_UpdateScrollInfos(CTRPluginFramework::KeyboardImpl *this, const char *a2);
int CTRPluginFramework::KeyboardImpl::_Update(CTRPluginFramework::KeyboardImpl *this, float a2, int a3, int a4, int a5, int a6, ...);
signed int __fastcall CTRPluginFramework::KeyboardImpl::_CheckKeys(CTRPluginFramework::KeyboardImpl *this, int a2);
int __fastcall CTRPluginFramework::KeyboardImpl::_CheckInput(CTRPluginFramework::KeyboardImpl *this);
signed int __fastcall CTRPluginFramework::KeyboardImpl::_CheckButtons(CTRPluginFramework::KeyboardImpl *this, int *a2);
signed int __fastcall CTRPluginFramework::KeyboardImpl::operator()(CTRPluginFramework::KeyboardImpl *a1, float a2, int a3, int a4);
int __fastcall CTRPluginFramework::KeyboardImpl::CanChangeLayout(int result, bool a2);
bool __fastcall CTRPluginFramework::Rect<int>::Contains(int *a1, int a2, int a3);
int __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(int *a1, unsigned int a2);
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1);
void __fastcall std::vector<CTRPluginFramework::TouchKeyString *,std::allocator<CTRPluginFramework::TouchKeyString *>>::_M_realloc_insert<CTRPluginFramework::TouchKeyString *>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::KeyboardImpl::Populate(int a1, int *a2);
signed int __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(_DWORD *a1, unsigned int a2, const char *a3);
int __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>(int result, int (__fastcall ***a2)(_DWORD));
void **__fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::~vector(void **a1);
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(int *a1, int *a2, int a3, _DWORD *a4);
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(int *a1, unsigned __int8 *a2, _DWORD *a3);
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(int *a1, const char *a2, _DWORD *a3, _DWORD *a4);
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertyLowCase(CTRPluginFramework::KeyboardImpl *this);
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertyUpCase(CTRPluginFramework::KeyboardImpl *this);
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(int *a1, const char *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertyNintendo(CTRPluginFramework::KeyboardImpl *this);
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(int *a1, const char *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertySymbols(CTRPluginFramework::KeyboardImpl *this);
void __fastcall CTRPluginFramework::KeyboardImpl::_Qwerty(CTRPluginFramework::KeyboardImpl *this);
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char &,CTRPluginFramework::Rect<int> &>(int *a1, unsigned __int8 *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::KeyboardImpl::_DigitKeyboard(int *a1);
void __fastcall CTRPluginFramework::KeyboardImpl::_Decimal(CTRPluginFramework::KeyboardImpl *this);
int __fastcall CTRPluginFramework::KeyboardImpl::_Hexadecimal(int result);
void __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(CTRPluginFramework::KeyboardImpl *this, char a2);
void CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::KeyboardImpl *this, Event *a2, int a3, int a4, ...);
int __fastcall CTRPluginFramework::KeyboardImpl::Run(CTRPluginFramework::KeyboardImpl *this);
int GLOBAL__sub_I__ZN18CTRPluginFramework12KeyboardImpl12_DecimalKeysE();
// int __fastcall decode_utf8(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// void __noreturn std::__throw_bad_alloc(void); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_logic_error(const char *); idb
// int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::GetElapsedTime(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// int __fastcall CTRPluginFramework::operator<(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawLine(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::PrivColor::UseClamp(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::PrivColor::UseClamp(CTRPluginFramework::PrivColor *__hidden this, bool); idb
// _DWORD CTRPluginFramework::TouchKeyString::Draw(CTRPluginFramework::TouchKeyString *__hidden this); idb
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::GetTextSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// _DWORD __cdecl CTRPluginFramework::TouchKeyString::Scroll(CTRPluginFramework::TouchKeyString *__hidden this, float); idb
// int __fastcall CTRPluginFramework::TouchKeyString::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::TouchKey::operator()(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Utils::RemoveLastChar(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Utils::GetSize(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::TouchKeyString::operator()(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(_DWORD); weak
// _DWORD std::__throw_out_of_range_fmt(const char *, ...); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// int __fastcall CTRPluginFramework::TouchKeyString::TouchKeyString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawClearSymbol(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawEnterKey(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawCapsLockOn(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::TouchKey::Enable(CTRPluginFramework::TouchKey *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Milliseconds(CTRPluginFramework *__hidden this, int); idb
// _DWORD CTRPluginFramework::Time::AsSeconds(CTRPluginFramework::Time *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Pause(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb
// _DWORD CTRPluginFramework::EventManager::EventManager(CTRPluginFramework::EventManager *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::EventManager::PollEvent(CTRPluginFramework::EventManager *__hidden this, Event *); idb
// _DWORD CTRPluginFramework::PluginMenu::GetRunningInstance(CTRPluginFramework::PluginMenu *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenu::IsOpen(CTRPluginFramework::PluginMenu *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::Clean(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Play(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2; // weak
_UNKNOWN unk_C; // weak
_UNKNOWN unk_10; // weak
int CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1; // weak
int dword_20; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background; // weak
int CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background; // weak
int dword_38; // weak
_UNKNOWN unk_3C; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2; // weak
int CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2; // weak
int dword_4C; // weak
_UNKNOWN unk_50; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea; // weak
_UNKNOWN CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea; // weak
int dword_64; // weak
int dword_68; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer; // weak
_UNKNOWN CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime; // weak
_UNKNOWN CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame; // weak
_UNKNOWN CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame; // weak
int CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode; // weak
int CTRPluginFramework::KeyboardImpl::_QwertyKeys; // weak
int dword_A0; // weak
int dword_A4; // weak
int CTRPluginFramework::KeyboardImpl::_DecimalKeys; // weak
int dword_AC; // weak
int dword_B0; // weak
int CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys; // weak
int dword_B8; // weak
int dword_BC; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock; // weak
_UNKNOWN CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock; // weak
char `guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons; // weak
int CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons[2]; // idb
int dword_DC; // weak
int dword_E0; // weak
_UNKNOWN unk_4D6E; // weak
_UNKNOWN unk_4D78; // weak
_UNKNOWN unk_4D7C; // weak
_UNKNOWN unk_4D80; // weak
_UNKNOWN unk_4D84; // weak
_UNKNOWN unk_4D88; // weak
_UNKNOWN unk_4D8C; // weak
_UNKNOWN unk_4D90; // weak
_UNKNOWN unk_4D94; // weak
_UNKNOWN unk_4D98; // weak
_UNKNOWN unk_4D9C; // weak
_UNKNOWN unk_4DA0; // weak
_UNKNOWN unk_4DA4; // weak
_UNKNOWN unk_4DA8; // weak
_UNKNOWN unk_4DAC; // weak
_UNKNOWN unk_4DB0; // weak
_UNKNOWN unk_4DB4; // weak
_UNKNOWN unk_4DB8; // weak
_UNKNOWN unk_4DBC; // weak
_UNKNOWN unk_4DC0; // weak
_UNKNOWN unk_4DC4; // weak
_UNKNOWN unk_4DC8; // weak
_UNKNOWN unk_4DCC; // weak
_UNKNOWN unk_4DD0; // weak
_UNKNOWN unk_4DD4; // weak
_UNKNOWN unk_4DD8; // weak
_UNKNOWN unk_4DDC; // weak
_UNKNOWN unk_4DE0; // weak
_UNKNOWN unk_4DE4; // weak
_UNKNOWN unk_4DE8; // weak
_UNKNOWN unk_4DEC; // weak
_UNKNOWN unk_4DF0; // weak
_UNKNOWN unk_4DF4; // weak
_UNKNOWN unk_4DF8; // weak
_UNKNOWN unk_4DFC; // weak
_UNKNOWN unk_4E00; // weak
_UNKNOWN unk_4E04; // weak
_UNKNOWN unk_4E08; // weak
_UNKNOWN unk_4E0C; // weak
_UNKNOWN unk_4E10; // weak
_UNKNOWN unk_4E14; // weak
_UNKNOWN unk_4E18; // weak
_UNKNOWN unk_4E1C; // weak
_UNKNOWN unk_4E20; // weak
_UNKNOWN unk_4E24; // weak
_UNKNOWN unk_4E28; // weak
_UNKNOWN unk_4E2C; // weak
_UNKNOWN unk_4E30; // weak
_UNKNOWN unk_4E34; // weak
_UNKNOWN unk_4E38; // weak
_UNKNOWN unk_4E3C; // weak
_UNKNOWN unk_4E40; // weak
_UNKNOWN unk_4E44; // weak
_UNKNOWN unk_4E48; // weak
_UNKNOWN unk_4E4C; // weak
_UNKNOWN unk_4E50; // weak
_UNKNOWN unk_4E54; // weak
_UNKNOWN unk_4E58; // weak
_UNKNOWN unk_4E5C; // weak
_UNKNOWN unk_4E60; // weak
_UNKNOWN unk_4E64; // weak
_UNKNOWN unk_4E68; // weak
_UNKNOWN unk_4E6B; // weak
_UNKNOWN unk_4E6F; // weak
_UNKNOWN unk_4E72; // weak
_UNKNOWN unk_4E76; // weak
_UNKNOWN unk_4E79; // weak
_UNKNOWN unk_4E7C; // weak
_UNKNOWN unk_4E7F; // weak
_UNKNOWN unk_4E82; // weak
_UNKNOWN unk_4E86; // weak
_UNKNOWN unk_4E89; // weak
_UNKNOWN unk_4E8C; // weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[19]; idb
// extern _UNKNOWN CTRPluginFramework::Color::Red; weak
// extern _UNKNOWN CTRPluginFramework::ProcessImpl::IsPaused; weak
// extern _UNKNOWN _dso_handle; weak


//----- (000000E4) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::UnitsToNextChar(_BYTE *a1, int a2)
{
  int v2; // r4
  int v3; // r3
  bool v4; // zf
  bool v5; // nf
  int v6; // r0
  int v8; // [sp+4h] [bp-Ch]

  v8 = a2;
  v2 = 0;
  while ( 1 )
  {
    v3 = (unsigned __int8)*a1;
    v4 = v3 == 0;
    v5 = v3 < 0;
    if ( *a1 )
    {
      v4 = a2 == 0;
      v5 = a2 < 0;
    }
    if ( v5 || v4 )
      break;
    if ( v3 == 27 )
    {
      v2 += 4;
      a2 -= 4;
      a1 += 4;
    }
    else
    {
      if ( v3 != 24 )
      {
        v6 = decode_utf8(&v8, a1);
        if ( v6 == -1 )
          return -1;
        v2 += v6;
        return v2;
      }
      ++v2;
      --a2;
      ++a1;
    }
  }
  return v2;
}
// 4E90: using guessed type int __fastcall decode_utf8(_DWORD, _DWORD);

//----- (0000014C) --------------------------------------------------------
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char,CTRPluginFramework::Rect<int> &>(int a1, int a2, _DWORD *a3)
{
  return ((int (__fastcall *)(int, int, _DWORD, _DWORD, _DWORD, _DWORD, signed int))CTRPluginFramework::TouchKey::TouchKey)(
           a1,
           a2,
           *a3,
           a3[1],
           a3[2],
           a3[3],
           1);
}
// 4E94: using guessed type int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000194) --------------------------------------------------------
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(int a1, int a2, int a3, _DWORD *a4)
{
  return CTRPluginFramework::TouchKey::TouchKey(a1, a2, a3, *a4, a4[1], a4[2], a4[3], 1, *a4, a4[1], a4[2], a4[3]);
}
// 4E98: using guessed type int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000001E0) --------------------------------------------------------
void __fastcall std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(void *a1)
{
  if ( a1 )
    operator delete(a1);
}

//----- (000001EC) --------------------------------------------------------
unsigned int __fastcall std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(unsigned int result)
{
  if ( result )
  {
    if ( result > 0x5D1745D )
      std::__throw_bad_alloc();
    result = operator new(44 * result);
  }
  return result;
}

//----- (00000218) --------------------------------------------------------
unsigned int __fastcall std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(int a1, int a2, int a3)
{
  int v3; // r8
  int v4; // r4
  int v5; // r7
  int v6; // r5
  int v7; // r6

  v3 = a1;
  v4 = a2;
  v5 = a3;
  v6 = a1;
  v7 = a3;
  while ( v4 != v6 )
  {
    CTRPluginFramework::TouchKey::TouchKey(v7, v6);
    v7 += 44;
    v6 += 44;
  }
  return v5 + 44 * (976128931 * ((unsigned int)(v4 - v3) >> 2) & 0x3FFFFFFF);
}
// 4EA8: using guessed type int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD);

//----- (00000274) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  const char *v2; // r5
  int *v3; // r4
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  const char *v11; // [sp+4h] [bp-14h]

  v11 = a2;
  v2 = a2;
  *a1 = (int)(a1 + 2);
  if ( !a2 )
    std::__throw_logic_error("basic_string::_M_construct null not valid");
  v3 = a1;
  v4 = strlen(a2);
  v5 = (int)&v2[v4];
  v11 = (const char *)v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v3, &v11, 0);
    v7 = (int)v11;
    *v3 = v6;
    v3[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v3, v2, v5);
  result = v3;
  v9 = (int)v11;
  v10 = *v3;
  v3[1] = (int)v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 4EB0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 4EB4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000002FC) --------------------------------------------------------
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &,int>(int a1, const char *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4; // r4
  int v5; // r5
  _DWORD *v6; // r6
  char v8; // [sp+20h] [bp-28h]

  v4 = a3;
  v5 = a1;
  v6 = a4;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v8, a2);
  CTRPluginFramework::TouchKey::TouchKey(v5, &v8, *v4, v4[1], v4[2], v4[3], *v6, 1, *v4, v4[1], v4[2], v4[3]);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
}
// 4EBC: using guessed type int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4EC0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000360) --------------------------------------------------------
int __fastcall __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &>(int a1, const char *a2, _DWORD *a3)
{
  _DWORD *v3; // r4
  int v4; // r5
  char v6; // [sp+20h] [bp-28h]

  v3 = a3;
  v4 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v6, a2);
  CTRPluginFramework::TouchKey::TouchKey(v4, &v6, *v3, v3[1], v3[2], v3[3], 305419896, 1, *v3, v3[1], v3[2], v3[3]);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
}
// 4EBC: using guessed type int __fastcall CTRPluginFramework::TouchKey::TouchKey(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4EC0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000003C0) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(int a1, int a2)
{
  int v2; // r4
  int v3; // r10
  int v4; // r11
  int v5; // ST00_4
  int v6; // ST04_4
  int result; // r0

  *(_DWORD *)(a1 + 32) = a1 + 40;
  *(_DWORD *)(a1 + 56) = a1 + 64;
  v2 = a1;
  *(_DWORD *)(a1 + 84) = 0x10000;
  *(_DWORD *)(a1 + 4) = 0;
  v3 = a1 + 8;
  *(_DWORD *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v4 = a1 + 56;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 256;
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 102) = 2;
  v5 = a1 + 32;
  v6 = a2;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(a1 + 104));
  *(_DWORD *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 116) = 0;
  *(_BYTE *)(v2 + 120) = 1;
  *(_DWORD *)(v2 + 124) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 132) = 0;
  *(_BYTE *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 140) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 156) = 0;
  *(_DWORD *)(v2 + 160) = 0;
  *(_DWORD *)(v2 + 164) = 0;
  *(_DWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 172) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_DWORD *)(v2 + 180) = 0;
  *(_DWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 188) = 0;
  *(_DWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 196) = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(v2 + 200));
  *(_DWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 212) = 0;
  *(_DWORD *)(v2 + 216) = 0;
  *(_DWORD *)(v2 + 4) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v3, v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v5, &unk_4D6E);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v4, &unk_4D6E);
  result = v2;
  *(_DWORD *)(v2 + 80) = 256;
  *(_DWORD *)(v2 + 84) = 0;
  *(_WORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 90) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 116) = 0;
  *(_BYTE *)(v2 + 120) = 1;
  *(_DWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 124) = 0;
  *(_DWORD *)(v2 + 132) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 156) = 0;
  *(_DWORD *)(v2 + 160) = 10;
  *(_DWORD *)(v2 + 172) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_DWORD *)(v2 + 164) = 0;
  *(_DWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 180) = 0;
  *(_DWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 188) = 0;
  *(_DWORD *)(v2 + 92) = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_WORD *)(v2 + 100) = 0;
  *(_BYTE *)(v2 + 102) = 2;
  *(_BYTE *)v2 = 1;
  return result;
}
// 4EC8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 4ECC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (0000056C) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(int a1, int a2, int a3)
{
  int v3; // r4
  int v4; // r10
  int v5; // ST04_4
  int v6; // ST0C_4
  int v7; // ST08_4
  int result; // r0

  v3 = a1;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v4 = a1 + 8;
  *(_DWORD *)(a1 + 32) = a1 + 40;
  *(_DWORD *)(a1 + 56) = a1 + 64;
  *(_DWORD *)(a1 + 84) = 0x10000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 256;
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 102) = 2;
  v5 = a1 + 32;
  v6 = a2;
  v7 = a3;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(a1 + 104));
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 116) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_DWORD *)(v3 + 124) = 0;
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 132) = 0;
  *(_BYTE *)(v3 + 136) = 0;
  *(_DWORD *)(v3 + 140) = 0;
  *(_DWORD *)(v3 + 144) = 0;
  *(_WORD *)(v3 + 148) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 156) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(_DWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 172) = 0;
  *(_DWORD *)(v3 + 176) = 0;
  *(_DWORD *)(v3 + 180) = 0;
  *(_DWORD *)(v3 + 184) = 0;
  *(_DWORD *)(v3 + 188) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 196) = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(v3 + 200));
  *(_DWORD *)(v3 + 4) = v6;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 212) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v4, v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v5, &unk_4D6E);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v3 + 56, &unk_4D6E);
  result = v3;
  *(_DWORD *)(v3 + 80) = 256;
  *(_DWORD *)(v3 + 84) = 0;
  *(_WORD *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 90) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 116) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 124) = 0;
  *(_DWORD *)(v3 + 132) = 0;
  *(_DWORD *)(v3 + 144) = 0;
  *(_WORD *)(v3 + 148) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 156) = 0;
  *(_DWORD *)(v3 + 160) = 10;
  *(_DWORD *)(v3 + 172) = 0;
  *(_DWORD *)(v3 + 176) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(_DWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 180) = 0;
  *(_DWORD *)(v3 + 184) = 0;
  *(_DWORD *)(v3 + 188) = 0;
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_WORD *)(v3 + 100) = 0;
  *(_BYTE *)(v3 + 102) = 2;
  *(_BYTE *)v3 = 1;
  return result;
}
// 4EC8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 4ECC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (00000728) --------------------------------------------------------
CTRPluginFramework::KeyboardImpl *__fastcall CTRPluginFramework::KeyboardImpl::~KeyboardImpl(CTRPluginFramework::KeyboardImpl *this)
{
  CTRPluginFramework::KeyboardImpl *v1; // r4
  __int64 v2; // r6
  void *v3; // r5
  void *v4; // t1
  void *v5; // r0

  v1 = this;
  v2 = *((_QWORD *)this + 26);
  while ( HIDWORD(v2) != (_DWORD)v2 )
  {
    v4 = *(void **)v2;
    LODWORD(v2) = v2 + 4;
    v3 = v4;
    if ( v4 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v3);
      operator delete(v3);
    }
  }
  v5 = (void *)*((_DWORD *)v1 + 52);
  if ( v5 )
    operator delete(v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 56);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 32);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 8);
  return v1;
}
// 4EC0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000078C) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::SetHexadecimal(int result, bool a2)
{
  *(_BYTE *)(result + 86) = a2;
  return result;
}

//----- (00000794) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::IsHexadecimal(CTRPluginFramework::KeyboardImpl *this)
{
  return *((unsigned __int8 *)this + 86);
}

//----- (0000079C) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::SetMaxInput(int result, int a2)
{
  *(_DWORD *)(result + 96) = a2;
  return result;
}

//----- (000007A4) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::CanAbort(int result, bool a2)
{
  *(_BYTE *)(result + 81) = a2;
  return result;
}

//----- (000007AC) --------------------------------------------------------
int __fastcall ZN18CTRPluginFramework12KeyboardImpl8GetInputB5cxx11Ev(int a1)
{
  return a1 + 56;
}

//----- (000007B4) --------------------------------------------------------
int __fastcall ZN18CTRPluginFramework12KeyboardImpl10GetMessageB5cxx11Ev(int a1)
{
  return a1 + 8;
}

//----- (000007BC) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::SetError(int a1, int a2)
{
  int v2; // r0

  v2 = a1 + 32;
  *(_BYTE *)(v2 + 52) = 1;
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v2, a2);
}
// 4EC8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);

//----- (000007CC) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::SetConvertCallback(int result, int a2)
{
  *(_DWORD *)(result + 128) = a2;
  return result;
}

//----- (000007D4) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::SetCompareCallback(int result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  return result;
}

//----- (000007DC) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::OnInputChange(int result, int a2)
{
  *(_DWORD *)(result + 132) = a2;
  return result;
}

//----- (000007E4) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::Close(int result)
{
  *(_BYTE *)(result + 82) = 0;
  return result;
}

//----- (000007F0) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_RenderTop(CTRPluginFramework::KeyboardImpl *this)
{
  CTRPluginFramework::KeyboardImpl *v1; // r5
  int *v2; // r2
  int v3; // r3
  int v4; // r7
  int v5; // r4
  int v6; // r6
  int v7; // r6
  int v8; // r4
  int result; // r0
  int v10; // [sp+Ch] [bp-1Ch]

  v1 = this;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1 & 1) )
  {
    this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1);
    if ( this )
    {
      *(_QWORD *)&CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1 = 85899345950LL;
      *(_QWORD *)&dword_20 = 858993459540LL;
      this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_release(
                                                   &`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1,
                                                   20);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2 & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2) )
  {
    CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2 = 128849018930LL;
    unk_10 = 773094113580LL;
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2, 30);
  }
  v2 = (int *)&CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2;
  if ( !*((_BYTE *)v1 + 87) )
    v2 = &CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1;
  v3 = v2[1];
  v4 = v3 + *(_DWORD *)((char *)&unk_C + (_DWORD)v2);
  v5 = *v2;
  v6 = *(_DWORD *)((char *)&CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2 + (_DWORD)v2);
  v10 = v3 + 5;
  CTRPluginFramework::Renderer::SetTarget(1);
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::TopWindow);
  v7 = v5 + v6;
  v8 = v5 + 5;
  result = CTRPluginFramework::Renderer::DrawSysStringReturn(
             *((_DWORD *)v1 + 2),
             v8,
             &v10,
             v7,
             CTRPluginFramework::Preferences::Settings[4],
             v4);
  if ( *((_BYTE *)v1 + 84) && *((_DWORD *)v1 + 9) )
  {
    if ( v10 <= 119 )
      v10 += 48;
    result = CTRPluginFramework::Renderer::DrawSysStringReturn(
               *((_DWORD *)v1 + 8),
               v8,
               &v10,
               v7,
               CTRPluginFramework::Color::Red,
               v4);
  }
  return result;
}
// 18: using guessed type int CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1;
// 20: using guessed type int dword_20;
// 28: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background1;
// 2C: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderTop(void)::background2;
// 4ED0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 4ED4: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);
// 4ED8: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 4EE0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000954) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_RenderBottom(CTRPluginFramework::KeyboardImpl *this)
{
  CTRPluginFramework::KeyboardImpl *v1; // r4
  int v2; // r1
  int v3; // r5
  int v4; // s0
  int result; // r0
  __int64 v6; // r6
  float v7; // r1
  __int64 j; // r4
  signed int v9; // r7
  signed int v10; // r5
  int v11; // r3
  signed int v12; // r7
  signed int v13; // r5
  int v14; // r3
  int v15; // r5
  signed int v16; // r5
  int v17; // r0
  int v18; // r3
  int v19; // r0
  int v20; // r0
  int v21; // r3
  int v22; // r0
  int v23; // r5
  bool v24; // r1
  unsigned int i; // r6
  __int64 v26; // r2
  signed int v27; // r5
  __int64 v28; // [sp+8h] [bp-28h]
  int v29; // [sp+14h] [bp-1Ch]

  v1 = this;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background & 1) )
  {
    this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background);
    if ( this )
    {
      unk_3C = 858993459480LL;
      CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background = 20;
      dword_38 = 20;
      this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_release(
                                                   &`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background,
                                                   200);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2 & 1) )
  {
    this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2);
    if ( this )
    {
      unk_50 = 841813590292LL;
      CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2 = 22;
      dword_4C = 22;
      this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_release(
                                                   &`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2,
                                                   196);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea) )
  {
    CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea = 107374182422LL;
    dword_64 = 270;
    dword_68 = 190;
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea, v2);
  }
  CTRPluginFramework::Renderer::SetTarget(0);
  v3 = *((unsigned __int8 *)v1 + 148);
  if ( *((_BYTE *)v1 + 148) )
  {
    CTRPluginFramework::Renderer::DrawRect2(
      &CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background,
      &CTRPluginFramework::Preferences::Settings[19]);
    CTRPluginFramework::Renderer::DrawRect(
      &CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2,
      &CTRPluginFramework::Preferences::Settings[21],
      0);
    v23 = *((_DWORD *)v1 + 38) + 6;
    if ( (signed int)((*((_QWORD *)v1 + 26) >> 32) - *((_QWORD *)v1 + 26)) >> 2 < v23 )
      v23 = (signed int)((*((_QWORD *)v1 + 26) >> 32) - *((_QWORD *)v1 + 26)) >> 2;
    CTRPluginFramework::PrivColor::UseClamp(1, &CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea);
    for ( i = *((_DWORD *)v1 + 38); (signed int)i < v23; ++i )
    {
      v26 = *((_QWORD *)v1 + 26);
      if ( i >= (HIDWORD(v26) - (signed int)v26) >> 2 )
        break;
      CTRPluginFramework::TouchKeyString::Draw(*(CTRPluginFramework::TouchKeyString **)(v26 + 4 * i));
    }
    result = CTRPluginFramework::PrivColor::UseClamp(0, v24);
    if ( *((_BYTE *)v1 + 149) )
    {
      CTRPluginFramework::Renderer::DrawLine(
        292,
        26,
        1,
        &CTRPluginFramework::Preferences::Settings[26],
        *((_DWORD *)v1 + 39) - 2);
      CTRPluginFramework::Renderer::DrawLine(
        293,
        25,
        1,
        &CTRPluginFramework::Preferences::Settings[26],
        *((_DWORD *)v1 + 39));
      CTRPluginFramework::Renderer::DrawLine(
        294,
        26,
        1,
        &CTRPluginFramework::Preferences::Settings[26],
        *((_DWORD *)v1 + 39) - 2);
      v27 = (signed int)*((float *)v1 + 42);
      CTRPluginFramework::Renderer::DrawLine(
        292,
        v27 + 26,
        1,
        &CTRPluginFramework::Preferences::Settings[27],
        *((_DWORD *)v1 + 40) - 2);
      CTRPluginFramework::Renderer::DrawLine(
        293,
        v27 + 25,
        1,
        &CTRPluginFramework::Preferences::Settings[27],
        *((_DWORD *)v1 + 40));
      result = CTRPluginFramework::Renderer::DrawLine(
                 294,
                 v27 + 26,
                 1,
                 &CTRPluginFramework::Preferences::Settings[27],
                 *((_DWORD *)v1 + 40) - 2);
    }
  }
  else
  {
    v29 = 20;
    CTRPluginFramework::Renderer::DrawRect(
      &CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background,
      &CTRPluginFramework::Preferences::Settings[12],
      1);
    v4 = *((_DWORD *)v1 + 23);
    result = CTRPluginFramework::Renderer::DrawSysString(
               *((_DWORD *)v1 + 14),
               25,
               &v29,
               300,
               CTRPluginFramework::Preferences::Settings[18],
               v3);
    if ( *((_BYTE *)v1 + 120) )
    {
      CTRPluginFramework::Clock::GetElapsedTime((CTRPluginFramework::Clock *)&v28);
      v6 = v28;
      CTRPluginFramework::Seconds((CTRPluginFramework *)&v28, v7);
      result = CTRPluginFramework::operator<(v6, HIDWORD(v6), v28, HIDWORD(v28));
      if ( result )
        result = CTRPluginFramework::Renderer::DrawLine(
                   *((_DWORD *)v1 + 29) + 25,
                   21,
                   1,
                   &CTRPluginFramework::Preferences::Settings[17],
                   16);
    }
    if ( *((_BYTE *)v1 + 102) )
    {
      for ( j = *(_QWORD *)*((_DWORD *)v1 + 36); (_DWORD)j != HIDWORD(j); LODWORD(j) = j + 44 )
        result = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)j + 8))(j);
    }
    else if ( *((_BYTE *)v1 + 89) )
    {
      if ( *((_BYTE *)v1 + 100) )
        v9 = 147;
      else
        v9 = 109;
      if ( *((_BYTE *)v1 + 100) )
        v10 = 109;
      else
        v10 = 72;
      while ( v10 != v9 )
      {
        v11 = 44 * v10++;
        result = (*(int (__fastcall **)(int))(*(_DWORD *)(**((_DWORD **)v1 + 36) + v11) + 8))(**((_DWORD **)v1 + 36) + v11);
      }
    }
    else if ( *((_BYTE *)v1 + 90) )
    {
      if ( *((_BYTE *)v1 + 101) )
        v12 = 217;
      else
        v12 = 182;
      if ( *((_BYTE *)v1 + 101) )
        v13 = 182;
      else
        v13 = 147;
      while ( v13 != v12 )
      {
        v14 = 44 * v13++;
        result = (*(int (__fastcall **)(int))(*(_DWORD *)(**((_DWORD **)v1 + 36) + v14) + 8))(**((_DWORD **)v1 + 36) + v14);
      }
    }
    else
    {
      v15 = *((unsigned __int8 *)v1 + 88);
      if ( *((_BYTE *)v1 + 88) )
      {
        v16 = 1584;
        do
        {
          v17 = **((_DWORD **)v1 + 36);
          v18 = *(_DWORD *)(v17 + v16);
          v19 = v17 + v16;
          v16 += 44;
          result = (*(int (__fastcall **)(int))(v18 + 8))(v19);
        }
        while ( v16 != 3168 );
      }
      else
      {
        do
        {
          v20 = **((_DWORD **)v1 + 36);
          v21 = *(_DWORD *)(v20 + v15);
          v22 = v20 + v15;
          v15 += 44;
          result = (*(int (__fastcall **)(int))(v21 + 8))(v22);
        }
        while ( v15 != 1584 );
      }
    }
  }
  return result;
}
// 30: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background;
// 34: using guessed type int CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background;
// 38: using guessed type int dword_38;
// 44: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2;
// 48: using guessed type int CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::background2;
// 4C: using guessed type int dword_4C;
// 58: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_RenderBottom(void)::clampArea;
// 64: using guessed type int dword_64;
// 68: using guessed type int dword_68;
// 4ED0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 4ED4: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);
// 4ED8: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 4EF0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD);
// 4EF4: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4F00: using guessed type int __fastcall CTRPluginFramework::operator<(_DWORD, _DWORD, _DWORD, _DWORD);
// 4F04: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawLine(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4F08: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD);
// 4F0C: using guessed type int __fastcall CTRPluginFramework::PrivColor::UseClamp(_DWORD, _DWORD);
// 4F30: using guessed type int __fastcall CTRPluginFramework::TouchKeyString::Update(_DWORD, _DWORD, _DWORD);

//----- (00000DB0) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::UnitsToPreviousChar(CTRPluginFramework *this, const char *a2, int a3)
{
  int v3; // r5
  _BYTE *v4; // r4
  int v5; // r3
  bool v6; // zf
  bool v7; // nf
  const char *v8; // r6
  int v9; // r0
  bool v10; // zf
  const char *v12; // [sp+4h] [bp-14h]

  v12 = a2;
  v3 = 0;
  v4 = (char *)this - 1;
  while ( 1 )
  {
    v5 = (unsigned __int8)*v4;
    v6 = v5 == 0;
    v7 = v5 < 0;
    if ( *v4 )
    {
      v6 = a2 == 0;
      v7 = (signed int)a2 < 0;
    }
    if ( v7 || v6 )
      break;
    v8 = a2 - 1;
    if ( (signed int)(a2 - 1) <= 4 || *(v4 - 3) != 27 )
    {
      if ( v5 == 24 )
      {
        ++v3;
        v8 = a2 - 2;
      }
      else
      {
        v9 = decode_utf8(&v12, v4);
        v10 = v8 == 0;
        if ( !v8 )
          v10 = v9 == -1;
        if ( v10 )
          return -1;
        if ( v9 != -1 )
        {
          v3 += v9;
          return v3;
        }
      }
      --v4;
    }
    else
    {
      v3 += 4;
      v8 = a2 - 5;
      v4 -= 3;
    }
    a2 = v8;
  }
  return v3;
}
// 4E90: using guessed type int __fastcall decode_utf8(_DWORD, _DWORD);

//----- (00000E40) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_ScrollUp(int result, int a2, int a3)
{
  unsigned int v3; // r5
  _DWORD *v4; // r4
  _BYTE *v5; // r2
  unsigned int v6; // r0
  int v7; // [sp+0h] [bp-18h]
  int v8; // [sp+4h] [bp-14h]
  int v9; // [sp+8h] [bp-10h]

  v7 = result;
  v8 = a2;
  v9 = a3;
  v3 = *(_DWORD *)(result + 60);
  v4 = (_DWORD *)result;
  if ( !v3 )
    goto LABEL_4;
  result = CTRPluginFramework::UnitsToNextChar(
             (_BYTE *)(*(_DWORD *)(result + 56) + *(_DWORD *)(result + 112)),
             v3 - *(_DWORD *)(result + 112));
  if ( result < 0 )
  {
    v5 = (_BYTE *)v4[14];
    v4[15] = 0;
    *v5 = 0;
LABEL_4:
    v4[23] = 0;
    v4[29] = 0;
    v4[28] = 0;
    return result;
  }
  v6 = result + v4[28];
  if ( v6 > v3 )
    v4[28] = v3;
  else
    v4[28] = v6;
  return CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v7);
}

//----- (00000EC0) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_ScrollDown(int result, int a2)
{
  unsigned int v2; // r3
  int v3; // r4
  unsigned int v4; // r2
  int v5; // r0
  _BYTE *v6; // r2
  int v7; // r3
  int v8; // [sp+0h] [bp-10h]
  int v9; // [sp+4h] [bp-Ch]

  v8 = result;
  v9 = a2;
  v2 = *(_DWORD *)(result + 60);
  v3 = result;
  if ( !v2 )
    goto LABEL_6;
  v4 = *(_DWORD *)(result + 112);
  v5 = *(_DWORD *)(result + 56);
  if ( v4 > v2 )
    *(_DWORD *)(v3 + 112) = v2;
  result = CTRPluginFramework::UnitsToPreviousChar(
             (CTRPluginFramework *)(v5 + *(_DWORD *)(v3 + 112)),
             *(const char **)(v3 + 112),
             v4);
  if ( result < 0 )
  {
    v6 = *(_BYTE **)(v3 + 56);
    *(_DWORD *)(v3 + 60) = 0;
    *v6 = 0;
LABEL_6:
    *(_DWORD *)(v3 + 92) = 0;
    *(_DWORD *)(v3 + 116) = 0;
    *(_DWORD *)(v3 + 112) = 0;
    return result;
  }
  v7 = *(_DWORD *)(v3 + 112) - result;
  if ( v7 < 0 )
    v7 = 0;
  *(_DWORD *)(v3 + 112) = v7;
  return CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v8);
}

//----- (00000F44) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_UpdateScrollInfos(CTRPluginFramework::KeyboardImpl *this, const char *a2)
{
  float v2; // s0
  unsigned __int8 *v3; // r6
  CTRPluginFramework::KeyboardImpl *v4; // r4
  int result; // r0
  const char *v6; // r1
  int v7; // r8
  _BYTE *v8; // r5
  int v9; // r7
  int v10; // r3
  bool v11; // zf
  _BYTE *v12; // r2
  int v13; // r3
  float v14; // s15
  int v15; // [sp+4h] [bp-24h]

  v3 = (unsigned __int8 *)*((_DWORD *)this + 14);
  v4 = this;
  result = CTRPluginFramework::Renderer::GetTextSize(*((CTRPluginFramework::Renderer **)this + 14), a2);
  v7 = *((_DWORD *)v4 + 28);
  if ( *v3 != 239 || v3[1] != 187 || v3[2] != 191 )
    v8 = v3;
  else
    v8 = v3 + 3;
  v9 = 0;
  while ( 1 )
  {
    v10 = (unsigned __int8)*v8;
    v11 = v10 == 0;
    if ( *v8 )
      v11 = v7 == 0;
    if ( v11 )
      break;
    if ( v10 == 24 )
    {
      ++v8;
      ++v9;
      --v7;
    }
    else if ( v10 == 27 )
    {
      v8 += 4;
      v9 += 4;
      v7 -= 4;
    }
    else
    {
      result = decode_utf8(&v15, v8);
      if ( !v15 )
        break;
      if ( result == -1 )
        goto LABEL_18;
      v8 += result;
      v9 += result;
      v7 -= result;
    }
  }
  if ( v9 < 0 )
  {
LABEL_18:
    *((_DWORD *)v4 + 23) = 0;
    v12 = (_BYTE *)*((_DWORD *)v4 + 14);
    *((_DWORD *)v4 + 29) = 0;
    *((_DWORD *)v4 + 28) = 0;
    *((_DWORD *)v4 + 15) = 0;
    *v12 = 0;
    return result;
  }
  result = CTRPluginFramework::Renderer::GetTextSize((CTRPluginFramework::Renderer *)&v3[v9], v6);
  if ( v2 <= 260.0 )
    v13 = 0;
  v14 = v2 - v2;
  if ( v2 > 260.0 )
  {
    if ( v14 > 140.0 )
    {
      if ( v2 > 140.0 )
        v2 = 140.0;
      *((float *)v4 + 23) = (float)(v2 + v14) - 260.0;
    }
    else
    {
      *((_DWORD *)v4 + 23) = 0;
    }
    v14 = v14 - *((float *)v4 + 23);
  }
  else
  {
    *((_DWORD *)v4 + 23) = v13;
  }
  *((_DWORD *)v4 + 29) = (signed int)v14;
  return result;
}
// 4E90: using guessed type int __fastcall decode_utf8(_DWORD, _DWORD);

//----- (000010A4) --------------------------------------------------------
int CTRPluginFramework::KeyboardImpl::_Update(CTRPluginFramework::KeyboardImpl *this, float a2, int a3, int a4, int a5, int a6, ...)
{
  float v6; // s0
  CTRPluginFramework::KeyboardImpl *v7; // r4
  int v8; // r6
  int result; // r0
  float v10; // r1
  signed int v11; // r5
  float v12; // r1
  int v13; // r7
  Time v14; // r1
  CTRPluginFramework::TouchKeyString **v15; // r7
  CTRPluginFramework::TouchKeyString **v16; // r5
  float v17; // s15
  float v18; // s14
  float v19; // s12
  float v20; // s11
  float v21; // s15
  float v22; // s16
  CTRPluginFramework::TouchKeyString *v23; // t1
  CTRPluginFramework::TouchKeyString *v24; // t1
  __int64 v25; // [sp+0h] [bp-38h]
  int v26; // [sp+8h] [bp-30h]
  int v27; // [sp+Ch] [bp-2Ch]
  int v28; // [sp+10h] [bp-28h]
  int v29; // [sp+14h] [bp-24h]
  va_list va; // [sp+40h] [bp+8h]

  va_start(va, a6);
  v7 = this;
  v8 = CTRPluginFramework::Touch::IsDown(this);
  result = CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v28);
  v11 = *((unsigned __int8 *)v7 + 148);
  v26 = v28;
  v27 = v29;
  if ( !v11 )
  {
    LODWORD(v12) = *((unsigned __int8 *)v7 + 102);
    if ( *((_BYTE *)v7 + 102) )
    {
      v13 = -1171354717 * ((signed int)((*(_QWORD *)*((_DWORD *)v7 + 36) >> 32) - *(_QWORD *)*((_DWORD *)v7 + 36)) >> 2);
    }
    else if ( *((_BYTE *)v7 + 89) )
    {
      if ( *((_BYTE *)v7 + 100) )
        v13 = 147;
      else
        v13 = 109;
      if ( *((_BYTE *)v7 + 100) )
        v11 = 109;
      else
        v11 = 72;
    }
    else if ( *((_BYTE *)v7 + 90) )
    {
      if ( *((_BYTE *)v7 + 101) )
        v13 = 217;
      else
        v13 = 182;
      if ( *((_BYTE *)v7 + 101) )
        v11 = 182;
      else
        v11 = 147;
    }
    else
    {
      if ( *((_BYTE *)v7 + 88) )
        v13 = 72;
      else
        v13 = 36;
      if ( *((_BYTE *)v7 + 88) )
        v11 = 36;
      else
        v11 = 0;
    }
    while ( v13 > v11 )
    {
      (*(void (__fastcall **)(int, int, int *))(*(_DWORD *)(**((_DWORD **)v7 + 36) + 44 * v11) + 16))(
        **((_DWORD **)v7 + 36) + 44 * v11,
        v8,
        &v26);
      ++v11;
    }
    if ( *((_BYTE *)v7 + 120) )
    {
      CTRPluginFramework::Seconds((CTRPluginFramework *)&v25, v12);
      if ( CTRPluginFramework::Clock::HasTimePassed((CTRPluginFramework::KeyboardImpl *)((char *)v7 + 104), v14) )
        CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v25);
    }
    return CTRPluginFramework::KeyboardImpl::_UpdateScrollInfos(v7, (const char *)LODWORD(v12));
  }
  v15 = (CTRPluginFramework::TouchKeyString **)*((_DWORD *)v7 + 53);
  v16 = (CTRPluginFramework::TouchKeyString **)*((_DWORD *)v7 + 52);
  if ( !*((_BYTE *)v7 + 149) )
  {
    while ( v16 != v15 )
    {
      v24 = *v16;
      ++v16;
      result = CTRPluginFramework::TouchKeyString::Update(v24, v8, (char *)va);
    }
    return result;
  }
  v17 = (float)(*((float *)v7 + 45) * 0.9) * v6;
  v18 = v17 + *((float *)v7 + 42);
  *((float *)v7 + 41) = v17;
  if ( v18 <= 0.0 )
    v17 = v17 - v18;
  *((float *)v7 + 42) = v18;
  if ( v18 <= 0.0 )
  {
    *((float *)v7 + 41) = v17;
    *((_DWORD *)v7 + 42) = 0;
LABEL_41:
    *((_DWORD *)v7 + 45) = 0;
    goto LABEL_42;
  }
  v19 = *((float *)v7 + 47);
  if ( v18 >= v19 )
  {
    *((float *)v7 + 42) = v19;
    *((float *)v7 + 41) = v17 - (float)(v18 - v19);
    goto LABEL_41;
  }
LABEL_42:
  v20 = *((float *)v7 + 44);
  v21 = (float)(*((float *)v7 + 45) + (float)(v6 * 0.98)) * 0.75;
  *((_DWORD *)v7 + 38) = (signed int)(float)((float)(v20 * *((float *)v7 + 42)) / 36.0);
  if ( fabsf(v21) < 1.0 )
    v21 = 0.0;
  v22 = -(float)(*((float *)v7 + 41) * v20);
  *((float *)v7 + 45) = v21;
  while ( v16 != v15 )
  {
    v23 = *v16;
    ++v16;
    CTRPluginFramework::TouchKeyString::Scroll(v23, v10);
    result = CTRPluginFramework::TouchKeyString::Update(v23, v8, (char *)va);
  }
  return result;
}
// 4F30: using guessed type int __fastcall CTRPluginFramework::TouchKeyString::Update(_DWORD, _DWORD, _DWORD);

//----- (00001324) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::KeyboardImpl::_CheckKeys(CTRPluginFramework::KeyboardImpl *this, int a2)
{
  CTRPluginFramework::KeyboardImpl *v2; // r4
  int v3; // r1
  int v4; // r1
  int v5; // r1
  signed int v6; // r8
  int v7; // r9
  unsigned int v8; // r2
  _DWORD *v9; // r3
  int v10; // r0
  Time v11; // r1
  int v12; // r7
  int v13; // r1
  signed int v14; // r5
  int v15; // r1
  int v16; // r1
  int v17; // r2
  _BYTE *v18; // r1
  int v19; // r1
  int v20; // r2
  int v21; // r1
  int v22; // r2
  int v23; // r3
  int v24; // r3
  int v26; // [sp+0h] [bp-40h]
  char *v27; // [sp+8h] [bp-38h]
  int v28; // [sp+Ch] [bp-34h]
  char v29; // [sp+10h] [bp-30h]

  v2 = this;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer & 1) )
  {
    this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer);
    if ( this )
    {
      CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer);
      this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_release(
                                                   &`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer,
                                                   v3);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime & 1) )
  {
    this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime);
    if ( this )
    {
      CTRPluginFramework::Seconds(
        (CTRPluginFramework *)&CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime,
        *(float *)&a2);
      this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_release(
                                                   &`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime,
                                                   v4);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame) )
  {
    CTRPluginFramework::Seconds(
      (CTRPluginFramework *)&CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame,
      *(float *)&a2);
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame, v5);
  }
  if ( *((_BYTE *)v2 + 102) )
  {
    v6 = 0;
    v7 = -1171354717 * ((*(_DWORD *)(*((_DWORD *)v2 + 36) + 4) - **((_DWORD **)v2 + 36)) >> 2);
  }
  else if ( *((_BYTE *)v2 + 89) )
  {
    if ( *((_BYTE *)v2 + 100) )
      v7 = 147;
    else
      v7 = 109;
    if ( *((_BYTE *)v2 + 100) )
      v6 = 109;
    else
      v6 = 72;
  }
  else if ( *((_BYTE *)v2 + 90) )
  {
    if ( *((_BYTE *)v2 + 101) )
      v7 = 217;
    else
      v7 = 182;
    if ( *((_BYTE *)v2 + 101) )
      v6 = 182;
    else
      v6 = 147;
  }
  else
  {
    if ( *((_BYTE *)v2 + 88) )
      v7 = 72;
    else
      v7 = 36;
    if ( *((_BYTE *)v2 + 88) )
      v6 = 36;
    else
      v6 = 0;
  }
  v8 = *((_DWORD *)v2 + 28);
  if ( v8 > *((_DWORD *)v2 + 15) )
    CTRPluginFramework::KeyboardImpl::_ScrollUp((int)v2, a2, v8);
  while ( v7 > v6 )
  {
    v27 = &v29;
    v9 = (_DWORD *)*((_DWORD *)v2 + 36);
    v28 = 0;
    v29 = 0;
    v10 = CTRPluginFramework::TouchKey::operator()(*v9 + 44 * v6, &v27);
    v12 = v10;
    if ( v10 != -1 )
    {
      if ( v10 == -9 )
      {
        CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode = 0;
        goto LABEL_18;
      }
      if ( v10 == 8 )
      {
        v14 = CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode;
        switch ( CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode )
        {
          case 0:
            CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode = 1;
            CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v26);
            goto LABEL_47;
          case 1:
            if ( !CTRPluginFramework::Clock::HasTimePassed(
                    (CTRPluginFramework::Clock *)&CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer,
                    v11) )
              goto LABEL_51;
            CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode = 2;
            goto LABEL_54;
          case 2:
LABEL_54:
            if ( !CTRPluginFramework::Clock::HasTimePassed(
                    (CTRPluginFramework::Clock *)&CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer,
                    v11) )
              goto LABEL_51;
            break;
        }
        CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v26);
LABEL_18:
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(
          &v27,
          (char *)v2 + 56,
          *((_DWORD *)v2 + 28),
          -1);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(
          (char *)v2 + 56,
          *((_DWORD *)v2 + 28),
          -1);
        CTRPluginFramework::KeyboardImpl::_ScrollDown((int)v2, v13);
        *((_DWORD *)v2 + 35) = CTRPluginFramework::Utils::RemoveLastChar((char *)v2 + 56);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=((char *)v2 + 56, &v27);
        v14 = *((_DWORD *)v2 + 35);
        if ( v14 )
        {
          v14 = 1;
          *((_BYTE *)v2 + 136) = 1;
        }
        goto LABEL_47;
      }
      CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode = 0;
      switch ( v10 )
      {
        case 305419896:
          if ( *((_BYTE *)v2 + 102) == 1 )
          {
            if ( *((_DWORD *)v2 + 15) > 0x11u )
              goto LABEL_51;
          }
          else if ( !*((_BYTE *)v2 + 102)
                 && *((_DWORD *)v2 + 24)
                 && (unsigned int)CTRPluginFramework::Utils::GetSize((char *)v2 + 56) >= *((_DWORD *)v2 + 24) )
          {
            goto LABEL_51;
          }
          v15 = (int)v27;
          *((_BYTE *)v2 + 136) = 0;
          decode_utf8((char *)v2 + 140, v15);
          if ( *((_DWORD *)v2 + 35) == 177 )
          {
            v18 = (_BYTE *)*((_DWORD *)v2 + 14);
            if ( *v18 == 45 )
            {
              CTRPluginFramework::KeyboardImpl::_ScrollDown((int)v2, (int)v18);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase((char *)v2 + 56, 0, 1);
              goto LABEL_67;
            }
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert((char *)v2 + 56);
          }
          else
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(
              (char *)v2 + 56,
              *((_DWORD *)v2 + 28),
              &v27);
          }
          goto LABEL_69;
        case 10:
          *((_BYTE *)v2 + 83) = 1;
          goto LABEL_51;
        case -5:
          if ( *((_DWORD *)v2 + 24)
            && (unsigned int)CTRPluginFramework::Utils::GetSize((char *)v2 + 56) >= *((_DWORD *)v2 + 24) )
          {
LABEL_76:
            if ( *((_BYTE *)v2 + 102) == 1 )
            {
              if ( *((_DWORD *)v2 + 15) <= 0x11u )
                goto LABEL_78;
LABEL_51:
              v14 = 0;
LABEL_47:
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
              return v14;
            }
            if ( *((_BYTE *)v2 + 102) )
            {
LABEL_78:
              v14 = v12 == 46;
              if ( *((_DWORD *)v2 + 28) )
                v14 = 0;
              if ( v14 )
              {
                std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(
                  (char *)v2 + 56,
                  0,
                  "0.");
                CTRPluginFramework::KeyboardImpl::_ScrollUp((int)v2, v19, v20);
                CTRPluginFramework::KeyboardImpl::_ScrollUp((int)v2, v21, v22);
                goto LABEL_47;
              }
            }
            if ( *((_DWORD *)v2 + 24)
              && (unsigned int)CTRPluginFramework::Utils::GetSize((char *)v2 + 56) >= *((_DWORD *)v2 + 24) )
            {
LABEL_67:
              v14 = 1;
              goto LABEL_47;
            }
            v28 = 0;
            *v27 = 0;
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(
              &v27,
              (unsigned __int8)v12);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(
              (char *)v2 + 56,
              *((_DWORD *)v2 + 28),
              &v27);
            *((_BYTE *)v2 + 136) = 0;
            *((_DWORD *)v2 + 35) = v12;
          }
          else
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(
              (char *)v2 + 56,
              *((_DWORD *)v2 + 28),
              " ");
          }
LABEL_69:
          CTRPluginFramework::KeyboardImpl::_ScrollUp((int)v2, v16, v17);
          goto LABEL_67;
        case -3:
          *((_BYTE *)v2 + 88) ^= 1u;
          break;
        case -4:
          v23 = *((unsigned __int8 *)v2 + 90);
          *((_WORD *)v2 + 44) = 0;
          v23 ^= 1u;
          *((_BYTE *)v2 + 90) = v23;
          if ( !v23 )
            *((_BYTE *)v2 + 101) = 0;
          *((_BYTE *)v2 + 100) = 0;
          break;
        case -2:
          v24 = *((unsigned __int8 *)v2 + 89);
          *((_BYTE *)v2 + 90) = 0;
          v24 ^= 1u;
          *((_BYTE *)v2 + 89) = v24;
          *((_BYTE *)v2 + 88) = 0;
          if ( !v24 )
            *((_BYTE *)v2 + 100) = 0;
          *((_BYTE *)v2 + 101) = 0;
          break;
        case -6:
          *((_BYTE *)v2 + 100) = *((_BYTE *)v2 + 100) == 0;
          break;
        case -7:
          *((_BYTE *)v2 + 101) = *((_BYTE *)v2 + 101) == 0;
          break;
        default:
          goto LABEL_76;
      }
    }
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
    ++v6;
  }
  CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode = 0;
  return 0;
}
// 6C: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspacetimer;
// 78: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastModeWaitTime;
// 88: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::FastClearingFrame;
// 98: using guessed type int CTRPluginFramework::KeyboardImpl::_CheckKeys(void)::backspaceFastMode;
// 4E90: using guessed type int __fastcall decode_utf8(_DWORD, _DWORD);
// 4EC0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4ED0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 4ED4: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);
// 4F34: using guessed type int __fastcall CTRPluginFramework::TouchKey::operator()(_DWORD, _DWORD);
// 4F38: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD);
// 4F3C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD);
// 4F40: using guessed type int __fastcall CTRPluginFramework::Utils::RemoveLastChar(_DWORD);
// 4F44: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 4F48: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 4F4C: using guessed type int __fastcall CTRPluginFramework::Utils::GetSize(_DWORD);
// 4F50: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD);
// 4F54: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 4F58: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD);

//----- (00001890) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_CheckInput(CTRPluginFramework::KeyboardImpl *this)
{
  int (__fastcall *v1)(char *, char *); // r3
  char *v2; // r1
  char *v3; // r0
  int (__fastcall *v5)(char *, _DWORD); // r3
  CTRPluginFramework::KeyboardImpl *v6; // r4

  if ( !*((_BYTE *)this + 102) )
  {
    v1 = (int (__fastcall *)(char *, char *))*((_DWORD *)this + 31);
    if ( v1 )
    {
      v2 = (char *)this + 32;
      v3 = (char *)this + 56;
      return v1(v3, v2);
    }
    return 1;
  }
  v5 = (int (__fastcall *)(char *, _DWORD))*((_DWORD *)this + 32);
  if ( !v5 )
    return 1;
  v6 = this;
  v3 = (char *)v5((char *)this + 56, *((unsigned __int8 *)this + 86));
  v1 = (int (__fastcall *)(char *, char *))*((_DWORD *)v6 + 31);
  if ( v1 )
  {
    v2 = (char *)v6 + 32;
    return v1(v3, v2);
  }
  return 1;
}

//----- (000018F8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::KeyboardImpl::_CheckButtons(CTRPluginFramework::KeyboardImpl *this, int *a2)
{
  CTRPluginFramework::KeyboardImpl *v2; // r5
  int *v3; // r6
  unsigned int i; // r4
  __int64 v5; // r2
  int v6; // r0

  v2 = this;
  v3 = a2;
  for ( i = 0; ; ++i )
  {
    v5 = *((_QWORD *)v2 + 26);
    if ( i >= (HIDWORD(v5) - (signed int)v5) >> 2 )
      break;
    v6 = CTRPluginFramework::TouchKeyString::operator()(*(_DWORD *)(v5 + 4 * i));
    *v3 = v6;
    if ( v6 != -1 )
    {
      *v3 = i;
      return 1;
    }
  }
  return 0;
}
// 4F5C: using guessed type int __fastcall CTRPluginFramework::TouchKeyString::operator()(_DWORD);

//----- (00001948) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::KeyboardImpl::operator()(CTRPluginFramework::KeyboardImpl *a1, float a2, int a3, int a4)
{
  CTRPluginFramework::KeyboardImpl *v4; // r4
  float v5; // r6
  int v6; // r1
  signed int v7; // r5
  unsigned int v8; // r3
  int v10; // [sp+0h] [bp-10h]
  int v11; // [sp+4h] [bp-Ch]

  v4 = a1;
  v5 = a2;
  CTRPluginFramework::KeyboardImpl::_Update(a1, a2, a3, a4, v10, v11);
  v7 = CTRPluginFramework::KeyboardImpl::_CheckKeys(v4, v6);
  if ( v7 )
  {
    if ( *((_DWORD *)v4 + 15) )
    {
      v8 = **((unsigned __int8 **)v4 + 14) - 48;
      if ( v8 > 9 )
        v8 = **((unsigned __int8 **)v4 + 14);
      *(_DWORD *)LODWORD(v5) = v8;
      if ( v8 - 65 <= 5 )
        *(_DWORD *)LODWORD(v5) = v8 - 55;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back((char *)v4 + 56);
    }
    else
    {
      v7 = 0;
    }
  }
  return v7;
}
// 4F60: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(_DWORD);

//----- (000019B8) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::CanChangeLayout(int result, bool a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

//----- (000019C0) --------------------------------------------------------
bool __fastcall CTRPluginFramework::Rect<int>::Contains(int *a1, int a2, int a3)
{
  int v3; // r12
  int v4; // r3
  int v5; // r4
  int v6; // lr
  int v7; // r0
  _BOOL4 v8; // r4
  int v9; // r0
  bool v10; // zf
  bool v11; // nf
  unsigned __int8 v12; // vf

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1 + a1[2];
  v6 = a1[3];
  if ( *a1 < v5 )
  {
    v7 = *a1;
    v3 = v5;
  }
  else
  {
    v7 = *a1 + a1[2];
  }
  v8 = a2 >= v7;
  if ( a2 >= v3 )
    v8 = 0;
  if ( v8 )
  {
    if ( v4 >= v4 + v6 )
      v9 = v4 + v6;
    else
      v9 = v4;
    if ( v4 < v4 + v6 )
      v4 += v6;
    v12 = __OFSUB__(a3, v9);
    v10 = a3 == v9;
    v11 = a3 - v9 < 0;
    if ( a3 >= v9 )
    {
      v12 = __OFSUB__(v4, a3);
      v10 = v4 == a3;
      v11 = v4 - a3 < 0;
    }
    if ( (unsigned __int8)(v11 ^ v12) | v10 )
      v8 = 0;
    else
      v8 = 1;
  }
  return v8;
}

//----- (00001A30) --------------------------------------------------------
int __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(int *a1, unsigned int a2)
{
  int v2; // r12

  v2 = *a1;
  if ( a2 >= -1171354717 * ((a1[1] - *a1) >> 2) )
    std::__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)");
  return v2 + 44 * a2;
}

//----- (00001A74) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (00001AB8) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKeyString *,std::allocator<CTRPluginFramework::TouchKeyString *>>::_M_realloc_insert<CTRPluginFramework::TouchKeyString *>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00001B7C) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::Populate(int a1, int *a2)
{
  int v2; // r4
  int *v3; // r7
  void **v4; // r8
  void **v5; // r6
  void *v6; // r5
  void *v7; // t1
  int v8; // r3
  int v9; // r2
  int v10; // r5
  int v11; // r6
  int v12; // r8
  int v13; // r7
  _BYTE *v14; // r1
  _BYTE *v15; // r3
  float v16; // s14
  signed int v17; // r3
  int v18; // s15
  int v19; // [sp+1Ch] [bp-3Ch]
  int v20; // [sp+20h] [bp-38h]
  int v21; // [sp+24h] [bp-34h]
  __int64 v22; // [sp+28h] [bp-30h]

  *(_BYTE *)(a1 + 148) = 1;
  v2 = a1;
  v3 = a2;
  v4 = *(void ***)(a1 + 212);
  v5 = *(void ***)(a1 + 208);
  *(_DWORD *)(a1 + 152) = 0;
  while ( v4 != v5 )
  {
    v7 = *v5;
    ++v5;
    v6 = v7;
    if ( v7 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v6);
      operator delete(v6);
    }
  }
  v8 = *(_DWORD *)(v2 + 208);
  if ( v8 != *(_DWORD *)(v2 + 212) )
    *(_DWORD *)(v2 + 212) = v8;
  v9 = v3[1] - *v3;
  if ( v9 > 120 )
  {
    v16 = (float)((float)(-1431655765 * (v9 >> 3)) * 36.0) + 1.0;
    v17 = (signed int)(float)((float)(190.0 / v16) * 190.0);
    v18 = 190 - v17;
    if ( v17 < 5 )
      v17 = 5;
    *(_DWORD *)(v2 + 160) = v17;
    *(_DWORD *)(v2 + 156) = 190;
    *(float *)(v2 + 176) = (float)(v16 - 190.0) / (float)v18;
    *(float *)(v2 + 172) = 190.0 / v16;
    *(_DWORD *)(v2 + 168) = 0;
    *(float *)(v2 + 188) = (float)(unsigned int)(190 - v17);
    *(_BYTE *)(v2 + 149) = 1;
    v10 = 30;
  }
  else
  {
    v10 = ((200 - (10 * (v9 >> 3) + 6 * (-1431655765 * (v9 >> 3) - 1))) >> 1) + 20;
    *(_BYTE *)(v2 + 149) = 0;
  }
  v11 = *v3;
  v12 = v3[1];
  while ( v11 != v12 )
  {
    v20 = 60;
    v21 = v10;
    v22 = 128849019080LL;
    v13 = operator new(0x38u);
    CTRPluginFramework::TouchKeyString::TouchKeyString(v13, v11, v20, v21, v22, HIDWORD(v22), 1);
    v14 = *(_BYTE **)(v2 + 212);
    v15 = *(_BYTE **)(v2 + 216);
    v19 = v13;
    if ( v14 == v15 )
    {
      std::vector<CTRPluginFramework::TouchKeyString *,std::allocator<CTRPluginFramework::TouchKeyString *>>::_M_realloc_insert<CTRPluginFramework::TouchKeyString *>(
        (_DWORD *)(v2 + 208),
        v14,
        &v19);
    }
    else
    {
      *(_DWORD *)v14 = v13;
      *(_DWORD *)(v2 + 212) += 4;
    }
    v10 += 36;
    v11 += 24;
  }
}
// 4EC0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4F70: using guessed type int __fastcall CTRPluginFramework::TouchKeyString::TouchKeyString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001D58) --------------------------------------------------------
signed int __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(_DWORD *a1, unsigned int a2, const char *a3)
{
  unsigned int v3; // r3
  unsigned __int8 v4; // cf
  unsigned int v5; // r3
  signed int v6; // r0
  signed int result; // r0

  v3 = -1171354717 * ((a1[1] - *a1) >> 2);
  if ( 97612893 - v3 < a2 )
    std::__throw_length_error(a3);
  if ( a2 < v3 )
    a2 = -1171354717 * ((a1[1] - *a1) >> 2);
  v4 = __CFADD__(v3, a2);
  v5 = v3 + a2;
  if ( v4 )
    v6 = 1;
  else
    v6 = 0;
  if ( v5 > 0x5D1745D )
    v6 |= 1u;
  if ( v6 )
    result = 97612893;
  else
    result = v5;
  return result;
}

//----- (00001DBC) --------------------------------------------------------
int __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>(int result, int (__fastcall ***a2)(_DWORD))
{
  int (__fastcall ***v2)(_DWORD); // r4
  int (__fastcall ***v3)(_DWORD); // r5

  v2 = (int (__fastcall ***)(_DWORD))result;
  v3 = a2;
  while ( v2 != v3 )
  {
    result = (**v2)(v2);
    v2 += 11;
  }
  return result;
}

//----- (00001DE8) --------------------------------------------------------
void **__fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::~vector(void **a1)
{
  void **v1; // r4

  v1 = a1;
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>(
    *(_QWORD *)a1,
    (int (__fastcall ***)(_DWORD))(*(_QWORD *)a1 >> 32));
  std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(*v1);
  return v1;
}

//----- (00001E08) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(int *a1, int *a2, int a3, _DWORD *a4)
{
  int *v4; // r8
  char *v5; // r5
  int *v6; // r4
  int v7; // r10
  _DWORD *v8; // r11
  signed int v9; // r0
  _BYTE *v10; // r7
  signed int v11; // ST04_4
  int v12; // r6
  unsigned int v13; // r0
  unsigned int v14; // r8

  v4 = a2;
  v5 = (char *)a1[1];
  v6 = a1;
  if ( v5 == (char *)a1[2] )
  {
    v7 = a3;
    v8 = a4;
    v9 = std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(
           a1,
           1u,
           "vector::_M_realloc_insert");
    v10 = (_BYTE *)*v6;
    v11 = v9;
    v12 = std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(v9);
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
      v12 + v5 - v10,
      *v4,
      v7,
      v8);
    v13 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v10,
            (int)v5,
            v12);
    v14 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v5,
            (int)v5,
            v13 + 44);
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>((int)v10, (int (__fastcall ***)(_DWORD))v5);
    std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(v10);
    *v6 = v12;
    v6[1] = v14;
    v6[2] = v12 + 44 * v11;
  }
  else
  {
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
      a1[1],
      *a2,
      a3,
      a4);
    v6[1] += 44;
  }
}

//----- (00001ED4) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(int *a1, unsigned __int8 *a2, _DWORD *a3)
{
  char *v3; // r5
  int *v4; // r4
  unsigned __int8 *v5; // r9
  _DWORD *v6; // r11
  signed int v7; // r0
  _BYTE *v8; // r7
  signed int v9; // r8
  int v10; // r6
  unsigned int v11; // r0
  unsigned int v12; // r9

  v3 = (char *)a1[1];
  v4 = a1;
  v5 = a2;
  if ( v3 == (char *)a1[2] )
  {
    v6 = a3;
    v7 = std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(
           a1,
           1u,
           "vector::_M_realloc_insert");
    v8 = (_BYTE *)*v4;
    v9 = v7;
    v10 = std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(v7);
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char,CTRPluginFramework::Rect<int> &>(
      v10 + v3 - v8,
      *v5,
      v6);
    v11 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v8,
            (int)v3,
            v10);
    v12 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v3,
            (int)v3,
            v11 + 44);
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>((int)v8, (int (__fastcall ***)(_DWORD))v3);
    std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(v8);
    *v4 = v10;
    v4[1] = v12;
    v4[2] = v10 + 44 * v9;
  }
  else
  {
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char,CTRPluginFramework::Rect<int> &>(
      a1[1],
      *a2,
      a3);
    v4[1] += 44;
  }
}

//----- (00001F90) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(int *a1, const char *a2, _DWORD *a3, _DWORD *a4)
{
  char *v4; // r5
  int *v5; // r4
  const char *v6; // r9
  _DWORD *v7; // r10
  _DWORD *v8; // r11
  signed int v9; // r0
  _BYTE *v10; // r7
  signed int v11; // ST04_4
  int v12; // r6
  unsigned int v13; // r0
  unsigned int v14; // r8

  v4 = (char *)a1[1];
  v5 = a1;
  if ( v4 == (char *)a1[2] )
  {
    v6 = a2;
    v7 = a3;
    v8 = a4;
    v9 = std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(
           a1,
           1u,
           "vector::_M_realloc_insert");
    v10 = (_BYTE *)*v5;
    v11 = v9;
    v12 = std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(v9);
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
      v12 + v4 - v10,
      v6,
      v7,
      v8);
    v13 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v10,
            (int)v4,
            v12);
    v14 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v4,
            (int)v4,
            v13 + 44);
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>((int)v10, (int (__fastcall ***)(_DWORD))v4);
    std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(v10);
    *v5 = v12;
    v5[1] = v14;
    v5[2] = v12 + 44 * v11;
  }
  else
  {
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
      a1[1],
      a2,
      a3,
      a4);
    v5[1] += 44;
  }
}

//----- (00002054) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertyLowCase(CTRPluginFramework::KeyboardImpl *this)
{
  int v1; // [sp+4h] [bp-2Ch]
  int v2; // [sp+8h] [bp-28h]
  __int64 v3; // [sp+Ch] [bp-24h]
  int v4; // [sp+14h] [bp-1Ch]

  v3 = 107374182436LL;
  LOBYTE(v1) = 113;
  v2 = 20;
  v4 = 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 119;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 101;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 114;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 116;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 121;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 117;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 105;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 111;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 112;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 8;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v2);
  LODWORD(v3) = 76;
  LOBYTE(v1) = 97;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 115;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 100;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 102;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 103;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 104;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 106;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 107;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 108;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 39;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v2);
  v1 = -3;
  LODWORD(v3) = 116;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawCapsLockOn,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 122;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 120;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 99;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 118;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 98;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 110;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 109;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 44;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 46;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 63;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v3 = 171798691996LL;
  v1 = -2;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    "+=@",
    &v2,
    &v1);
  v2 += 40;
  v1 = -4;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2,
    &v1);
  v2 += 40;
  v1 = -5;
  HIDWORD(v3) = 120;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2,
    &v1);
}
// 9C: using guessed type int CTRPluginFramework::KeyboardImpl::_QwertyKeys;
// 4F78: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawClearSymbol(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F7C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawEnterKey(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F80: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawCapsLockOn(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (000025C0) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertyUpCase(CTRPluginFramework::KeyboardImpl *this)
{
  int v1; // [sp+4h] [bp-2Ch]
  int v2; // [sp+8h] [bp-28h]
  __int64 v3; // [sp+Ch] [bp-24h]
  int v4; // [sp+14h] [bp-1Ch]

  v3 = 107374182436LL;
  LOBYTE(v1) = 81;
  v2 = 20;
  v4 = 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 87;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 69;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 82;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 84;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 89;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 85;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 73;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 79;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 80;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 8;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v2);
  LOBYTE(v1) = 65;
  v2 = 20;
  LODWORD(v3) = 76;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 83;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 68;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 70;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 71;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 72;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 74;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 75;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 76;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 34;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v2);
  LODWORD(v3) = 116;
  v1 = -3;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawCapsLockOn,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 90;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 88;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 67;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 86;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 66;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 78;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 77;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 59;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 58;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 33;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v3 = 171798691996LL;
  v1 = -2;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    "+=@",
    &v2,
    &v1);
  v2 += 40;
  v1 = -4;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2,
    &v1);
  v2 += 40;
  HIDWORD(v3) = 120;
  v1 = -5;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2,
    &v1);
}
// 9C: using guessed type int CTRPluginFramework::KeyboardImpl::_QwertyKeys;
// 4F78: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawClearSymbol(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F7C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawEnterKey(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F80: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawCapsLockOn(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (00002B30) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(int *a1, const char *a2, _DWORD *a3)
{
  char *v3; // r5
  int *v4; // r4
  const char *v5; // r10
  _DWORD *v6; // r11
  signed int v7; // r0
  _BYTE *v8; // r7
  signed int v9; // r8
  int v10; // r6
  unsigned int v11; // r0
  unsigned int v12; // r9

  v3 = (char *)a1[1];
  v4 = a1;
  if ( v3 == (char *)a1[2] )
  {
    v5 = a2;
    v6 = a3;
    v7 = std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(
           a1,
           1u,
           "vector::_M_realloc_insert");
    v8 = (_BYTE *)*v4;
    v9 = v7;
    v10 = std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(v7);
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &>(
      v10 + v3 - v8,
      v5,
      v6);
    v11 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v8,
            (int)v3,
            v10);
    v12 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v3,
            (int)v3,
            v11 + 44);
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>((int)v8, (int (__fastcall ***)(_DWORD))v3);
    std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(v8);
    *v4 = v10;
    v4[1] = v12;
    v4[2] = v10 + 44 * v9;
  }
  else
  {
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &>(
      a1[1],
      a2,
      a3);
    v4[1] += 44;
  }
}

//----- (00002BE8) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertyNintendo(CTRPluginFramework::KeyboardImpl *this)
{
  int v1; // [sp+4h] [bp-3Ch]
  int v2; // [sp+8h] [bp-38h]
  __int64 v3; // [sp+Ch] [bp-34h]
  int v4; // [sp+14h] [bp-2Ch]

  v3 = 107374182436LL;
  v2 = 20;
  v4 = 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D80,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D84,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D88,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D8C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D90,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D94,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D98,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D9C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DA0,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DA4,
    &v2);
  v2 += 25;
  v1 = 8;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v2);
  LODWORD(v3) = 76;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DA8,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DAC,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DB0,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DB4,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DB8,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DBC,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DC0,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DC4,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DC8,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DCC,
    &v2);
  v2 += 25;
  v1 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v2);
  LODWORD(v3) = 116;
  v1 = -7;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DD0,
    &v2,
    &v1);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DD4,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DD8,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DDC,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DE0,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DE4,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DE8,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DEC,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DF0,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DF4,
    &v2);
  v3 = 171798691996LL;
  v1 = -2;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    "+=@",
    &v2,
    &v1);
  v1 = -4;
  v2 += 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2,
    &v1);
  HIDWORD(v3) = 120;
  v2 += 40;
  v1 = -5;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2,
    &v1);
  v3 = 107374182436LL;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DF8,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DFC,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E00,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E04,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E08,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E0C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E10,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E14,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E18,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2);
  v1 = 8;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v2);
  LODWORD(v3) = 76;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E1C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E20,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E24,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E28,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E2C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E30,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E34,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E38,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E3C,
    &v2);
  v2 += 25;
  v1 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v2);
  LODWORD(v3) = 116;
  v1 = -7;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E40,
    &v2,
    &v1);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E44,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E48,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E4C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E50,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E54,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E58,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E5C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E60,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E64,
    &v2);
  v3 = 171798691996LL;
  v1 = -2;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    "+=@",
    &v2,
    &v1);
  v2 += 40;
  v1 = -4;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2,
    &v1);
  v2 += 40;
  v1 = -5;
  HIDWORD(v3) = 120;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2,
    &v1);
}
// 9C: using guessed type int CTRPluginFramework::KeyboardImpl::_QwertyKeys;
// 4F78: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawClearSymbol(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F7C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawEnterKey(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (0000363C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(int *a1, const char *a2, _DWORD *a3)
{
  char *v3; // r5
  int *v4; // r4
  const char *v5; // r10
  _DWORD *v6; // r11
  signed int v7; // r0
  _BYTE *v8; // r7
  signed int v9; // r8
  int v10; // r6
  unsigned int v11; // r0
  unsigned int v12; // r9

  v3 = (char *)a1[1];
  v4 = a1;
  if ( v3 == (char *)a1[2] )
  {
    v5 = a2;
    v6 = a3;
    v7 = std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(
           a1,
           1u,
           "vector::_M_realloc_insert");
    v8 = (_BYTE *)*v4;
    v9 = v7;
    v10 = std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(v7);
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &>(
      v10 + v3 - v8,
      v5,
      v6);
    v11 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v8,
            (int)v3,
            v10);
    v12 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v3,
            (int)v3,
            v11 + 44);
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>((int)v8, (int (__fastcall ***)(_DWORD))v3);
    std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(v8);
    *v4 = v10;
    v4[1] = v12;
    v4[2] = v10 + 44 * v9;
  }
  else
  {
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char const(&)[4],CTRPluginFramework::Rect<int> &>(
      a1[1],
      a2,
      a3);
    v4[1] += 44;
  }
}

//----- (000036F4) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_QwertySymbols(CTRPluginFramework::KeyboardImpl *this)
{
  int v1; // [sp+4h] [bp-3Ch]
  int v2; // [sp+8h] [bp-38h]
  __int64 v3; // [sp+Ch] [bp-34h]
  int v4; // [sp+14h] [bp-2Ch]

  v2 = 20;
  v3 = 107374182436LL;
  LOBYTE(v1) = 63;
  v4 = 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 33;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 64;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 35;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 36;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 37;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 38;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 49;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 50;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 51;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 8;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v2);
  LODWORD(v3) = 76;
  v2 = 20;
  LOBYTE(v1) = 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 41;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 45;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 95;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 61;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E68,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 43;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 52;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 53;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 54;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v2);
  LODWORD(v3) = 116;
  v1 = -6;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4DD0,
    &v2,
    &v1);
  v2 += 25;
  LOBYTE(v1) = 92;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 59;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 58;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 34;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 42;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 47;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 55;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 56;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 57;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v1 = -2;
  v3 = 171798691996LL;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    "+=@",
    &v2,
    &v1);
  v2 += 40;
  v1 = -4;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2,
    &v1);
  v2 += 40;
  HIDWORD(v3) = 120;
  v1 = -5;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2,
    &v1);
  LOBYTE(v1) = 48;
  v2 += 120;
  HIDWORD(v3) = 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 46;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LODWORD(v3) = 36;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E6B,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E6F,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E72,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E76,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E79,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E7C,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E7F,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 49;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 50;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 51;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 8;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v2);
  LODWORD(v3) = 76;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E82,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 60;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 62;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 91;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 93;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 123;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 125;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 52;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 53;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 54;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  v1 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    &v1,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v2);
  LODWORD(v3) = 116;
  v1 = -6;
  v2 = 20;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E40,
    &v2,
    &v1);
  v2 += 25;
  LOBYTE(v1) = 124;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E86,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 96;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E89,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 126;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 94;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 55;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 56;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  LOBYTE(v1) = 57;
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4E8C,
    &v2);
  v2 = 20;
  v1 = -2;
  v3 = 171798691996LL;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    "+=@",
    &v2,
    &v1);
  v1 = -4;
  v2 += 40;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D78,
    &v2,
    &v1);
  HIDWORD(v3) = 120;
  v2 += 40;
  v1 = -5;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[4],CTRPluginFramework::Rect<int> &,int>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (const char *)&unk_4D7C,
    &v2,
    &v1);
  v2 += 120;
  LOBYTE(v1) = 48;
  HIDWORD(v3) = 25;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
  v2 += 25;
  LOBYTE(v1) = 46;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
    (unsigned __int8 *)&v1,
    &v2);
}
// 9C: using guessed type int CTRPluginFramework::KeyboardImpl::_QwertyKeys;
// 4F78: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawClearSymbol(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F7C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawEnterKey(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (00004338) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_Qwerty(CTRPluginFramework::KeyboardImpl *this)
{
  CTRPluginFramework::KeyboardImpl *v1; // r4

  *((_DWORD *)this + 36) = &CTRPluginFramework::KeyboardImpl::_QwertyKeys;
  if ( CTRPluginFramework::KeyboardImpl::_QwertyKeys == dword_A0 )
  {
    v1 = this;
    CTRPluginFramework::KeyboardImpl::_QwertyLowCase(this);
    CTRPluginFramework::KeyboardImpl::_QwertyUpCase(v1);
    CTRPluginFramework::KeyboardImpl::_QwertySymbols(v1);
    CTRPluginFramework::KeyboardImpl::_QwertyNintendo(v1);
  }
}
// 9C: using guessed type int CTRPluginFramework::KeyboardImpl::_QwertyKeys;
// A0: using guessed type int dword_A0;

//----- (0000437C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char &,CTRPluginFramework::Rect<int> &>(int *a1, unsigned __int8 *a2, _DWORD *a3)
{
  char *v3; // r5
  int *v4; // r4
  unsigned __int8 *v5; // r9
  _DWORD *v6; // r11
  signed int v7; // r0
  _BYTE *v8; // r7
  signed int v9; // r8
  int v10; // r6
  unsigned int v11; // r0
  unsigned int v12; // r9

  v3 = (char *)a1[1];
  v4 = a1;
  v5 = a2;
  if ( v3 == (char *)a1[2] )
  {
    v6 = a3;
    v7 = std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_check_len(
           a1,
           1u,
           "vector::_M_realloc_insert");
    v8 = (_BYTE *)*v4;
    v9 = v7;
    v10 = std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_allocate(v7);
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char,CTRPluginFramework::Rect<int> &>(
      v10 + v3 - v8,
      *v5,
      v6);
    v11 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v8,
            (int)v3,
            v10);
    v12 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::TouchKey *,CTRPluginFramework::TouchKey *,std::allocator<CTRPluginFramework::TouchKey>>(
            (int)v3,
            (int)v3,
            v11 + 44);
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::TouchKey *>((int)v8, (int (__fastcall ***)(_DWORD))v3);
    std::_Vector_base<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::_M_deallocate(v8);
    *v4 = v10;
    v4[1] = v12;
    v4[2] = v10 + 44 * v9;
  }
  else
  {
    __gnu_cxx::new_allocator<CTRPluginFramework::TouchKey>::construct<CTRPluginFramework::TouchKey,char,CTRPluginFramework::Rect<int> &>(
      a1[1],
      *a2,
      a3);
    v4[1] += 44;
  }
}

//----- (00004438) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_DigitKeyboard(int *a1)
{
  int *v1; // r4
  int v2; // r5
  bool v3; // zf
  int v4; // r3
  int v5; // r3
  int v6; // r5
  int v7; // r1
  int v8; // r3
  int v9; // r3
  char v10; // [sp+3h] [bp-25h]
  int v11; // [sp+4h] [bp-24h]
  __int64 v12; // [sp+8h] [bp-20h]
  int v13; // [sp+10h] [bp-18h]
  int v14; // [sp+14h] [bp-14h]

  v13 = 46;
  v14 = 46;
  v1 = a1;
  v2 = 0;
  v12 = 154618822676LL;
  v10 = 65;
  do
  {
    std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char &,CTRPluginFramework::Rect<int> &>(
      v1,
      (unsigned __int8 *)&v10,
      &v12);
    v3 = (v2 & 1) == 0;
    if ( v2 & 1 )
      v4 = HIDWORD(v12);
    else
      v4 = v12;
    v5 = v4 + 46;
    if ( v2 & 1 )
      HIDWORD(v12) = v5;
    else
      LODWORD(v12) = v5;
    ++v2;
    if ( !v3 )
      LODWORD(v12) = 20;
    ++v10;
  }
  while ( v2 != 6 );
  v6 = 0;
  v12 = 154618822768LL;
  v10 = 49;
  do
  {
    std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char &,CTRPluginFramework::Rect<int> &>(
      v1,
      (unsigned __int8 *)&v10,
      &v12);
    v7 = v6 % 3;
    if ( v6 % 3 == 2 )
      v8 = HIDWORD(v12);
    else
      v8 = v12;
    v9 = v8 + 46;
    if ( v7 == 2 )
      HIDWORD(v12) = v9;
    else
      LODWORD(v12) = v9;
    ++v6;
    if ( v7 == 2 )
      LODWORD(v12) = 112;
    ++v10;
  }
  while ( v6 != 9 );
  v12 = 154618822906LL;
  v11 = 8;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    v1,
    &v11,
    (int)&CTRPluginFramework::Icon::DrawClearSymbol,
    &v12);
  HIDWORD(v12) += 46;
  v11 = 10;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<int,int (&)(int,int,bool),CTRPluginFramework::Rect<int> &>(
    v1,
    &v11,
    (int)&CTRPluginFramework::Icon::DrawEnterKey,
    &v12);
  HIDWORD(v12) += 46;
  LOBYTE(v11) = 46;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    v1,
    (unsigned __int8 *)&v11,
    &v12);
  HIDWORD(v12) += 46;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char const(&)[3],CTRPluginFramework::Rect<int> &>(
    v1,
    (const char *)&unk_4E8C,
    &v12);
  v13 = 138;
  v12 = 747324309616LL;
  LOBYTE(v11) = 48;
  std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::emplace_back<char,CTRPluginFramework::Rect<int> &>(
    v1,
    (unsigned __int8 *)&v11,
    &v12);
}
// 4F78: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawClearSymbol(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 4F7C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawEnterKey(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (000045FC) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::_Decimal(CTRPluginFramework::KeyboardImpl *this)
{
  bool v1; // zf
  CTRPluginFramework::TouchKey *v2; // r4
  int v3; // r5

  v1 = dword_AC == CTRPluginFramework::KeyboardImpl::_DecimalKeys;
  *((_DWORD *)this + 36) = &CTRPluginFramework::KeyboardImpl::_DecimalKeys;
  if ( v1 )
  {
    CTRPluginFramework::KeyboardImpl::_DigitKeyboard(&CTRPluginFramework::KeyboardImpl::_DecimalKeys);
    v2 = (CTRPluginFramework::TouchKey *)CTRPluginFramework::KeyboardImpl::_DecimalKeys;
    v3 = CTRPluginFramework::KeyboardImpl::_DecimalKeys + 264;
    while ( v2 != (CTRPluginFramework::TouchKey *)v3 )
    {
      CTRPluginFramework::TouchKey::Enable(v2, 0);
      v2 = (CTRPluginFramework::TouchKey *)((char *)v2 + 44);
    }
  }
}
// A8: using guessed type int CTRPluginFramework::KeyboardImpl::_DecimalKeys;
// AC: using guessed type int dword_AC;

//----- (0000464C) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::_Hexadecimal(int result)
{
  int v1; // r2
  int v2; // r3
  CTRPluginFramework::TouchKey *v3; // r0
  CTRPluginFramework::TouchKey *v4; // r0

  v1 = dword_B8;
  v2 = CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys;
  *(_DWORD *)(result + 144) = &CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys;
  if ( v1 == v2 )
  {
    CTRPluginFramework::KeyboardImpl::_DigitKeyboard(&CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys);
    v3 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                           &CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys,
                                           0x11u);
    CTRPluginFramework::TouchKey::Enable(v3, 0);
    v4 = (CTRPluginFramework::TouchKey *)std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::at(
                                           &CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys,
                                           0x12u);
    result = CTRPluginFramework::TouchKey::Enable(v4, 0);
  }
  return result;
}
// B4: using guessed type int CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys;
// B8: using guessed type int dword_B8;

//----- (000046A4) --------------------------------------------------------
void __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(CTRPluginFramework::KeyboardImpl *this, char a2)
{
  _BYTE *v2; // r1
  int v3; // r2

  *((_BYTE *)this + 102) = a2;
  v2 = (_BYTE *)*((_DWORD *)this + 14);
  *((_BYTE *)this + 86) = 0;
  *((_DWORD *)this + 15) = 0;
  *v2 = 0;
  v3 = *((unsigned __int8 *)this + 102);
  if ( *((_BYTE *)this + 102) )
  {
    if ( v3 == 1 )
    {
      CTRPluginFramework::KeyboardImpl::_Decimal(this);
    }
    else if ( v3 == 2 )
    {
      *((_BYTE *)this + 86) = 1;
      CTRPluginFramework::KeyboardImpl::_Hexadecimal((int)this);
    }
  }
  else
  {
    CTRPluginFramework::KeyboardImpl::_Qwerty(this);
  }
}

//----- (000046EC) --------------------------------------------------------
void CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::KeyboardImpl *this, Event *a2, int a3, int a4, ...)
{
  float v4; // s0
  int v5; // r2
  CTRPluginFramework::KeyboardImpl *v6; // r4
  Event *v7; // r5
  TMLongCard v8; // r1
  int v9; // r3
  _BYTE *v10; // r3
  int v11; // r0
  int (*v12)(void); // r3
  int v13; // r3
  _BYTE *v14; // r2
  char v15; // r0
  void (*v16)(void); // r3
  char v17; // r1
  int v18; // r1
  Time v19; // r1
  int v20; // r1
  int v21; // r2
  TMLongCard v22; // r3
  float v23; // s16
  int v24; // [sp+28h] [bp+0h]
  va_list va; // [sp+28h] [bp+0h]
  int v26; // [sp+2Ch] [bp+4h]
  va_list va1; // [sp+30h] [bp+8h]

  va_start(va1, a4);
  va_start(va, a4);
  v24 = va_arg(va1, _DWORD);
  v26 = va_arg(va1, _DWORD);
  v5 = LOBYTE(a2->modifiers);
  v6 = this;
  v7 = a2;
  if ( LOBYTE(a2->modifiers) )
  {
LABEL_25:
    if ( LOBYTE(v7->modifiers) == 1 )
    {
      __mcr(15, 0, (unsigned int)this, 7, 10, 5);
      if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock & 1) )
      {
        this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock);
        if ( this )
        {
          CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock);
          this = (CTRPluginFramework::KeyboardImpl *)_cxa_guard_release(
                                                       &`guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock,
                                                       v18);
        }
      }
      if ( *((_BYTE *)v6 + 120) )
      {
        CTRPluginFramework::Milliseconds((CTRPluginFramework *)va, 200);
        this = (CTRPluginFramework::KeyboardImpl *)CTRPluginFramework::Clock::HasTimePassed(
                                                     (CTRPluginFramework::Clock *)&CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock,
                                                     v19);
        if ( this )
        {
          v22 = v7->modifierMask;
          if ( v22 == 32 )
          {
            CTRPluginFramework::KeyboardImpl::_ScrollDown((int)v6, v20);
          }
          else if ( v22 == 16 )
          {
            CTRPluginFramework::KeyboardImpl::_ScrollUp((int)v6, v20, v21);
          }
          this = (CTRPluginFramework::KeyboardImpl *)CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)va);
        }
      }
    }
    goto LABEL_34;
  }
  v8 = a2->modifierMask;
  if ( v8 == 2 )
  {
    if ( *((_BYTE *)this + 81) )
      *((_BYTE *)this + 85) = 1;
    return;
  }
  if ( v8 == 2048 )
    v9 = (*((_BYTE *)this + 148) ^ 1) & 1;
  else
    v9 = 0;
  if ( !v9 )
  {
LABEL_14:
    if ( v7->modifierMask == 1024 )
    {
      v13 = *((unsigned __int8 *)v6 + 148);
      if ( !*((_BYTE *)v6 + 148) && *((_BYTE *)v6 + 102) && *((_BYTE *)v6 + 80) )
      {
        v14 = (_BYTE *)*((_DWORD *)v6 + 14);
        *((_DWORD *)v6 + 15) = v13;
        *v14 = v13;
        *((_DWORD *)v6 + 35) = v13;
        *((_BYTE *)v6 + 136) = 2;
        v15 = CTRPluginFramework::KeyboardImpl::_CheckInput(v6);
        v16 = (void (*)(void))*((_DWORD *)v6 + 33);
        *((_BYTE *)v6 + 84) = v15 ^ 1;
        if ( v16 && *((_DWORD *)v6 + 1) )
          v16();
        if ( *((_BYTE *)v6 + 102) == 1 )
          v17 = 2;
        else
          v17 = 1;
        CTRPluginFramework::KeyboardImpl::SetLayout(v6, v17);
      }
    }
    goto LABEL_25;
  }
  if ( *((_DWORD *)this + 15) )
  {
    v10 = (_BYTE *)*((_DWORD *)this + 14);
    *((_DWORD *)this + 15) = v5;
    *v10 = v5;
    *((_DWORD *)this + 35) = v5;
    *((_BYTE *)this + 136) = 2;
    v11 = CTRPluginFramework::KeyboardImpl::_CheckInput(this);
    v12 = (int (*)(void))*((_DWORD *)v6 + 33);
    this = (CTRPluginFramework::KeyboardImpl *)(v11 ^ 1);
    *((_BYTE *)v6 + 84) = (_BYTE)this;
    if ( v12 )
    {
      this = (CTRPluginFramework::KeyboardImpl *)*((_DWORD *)v6 + 1);
      if ( this )
        this = (CTRPluginFramework::KeyboardImpl *)v12();
    }
    goto LABEL_14;
  }
LABEL_34:
  if ( !*((_BYTE *)v6 + 149) )
    return;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons) )
  {
    *(_QWORD *)CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons = 111669149756LL;
    dword_DC = 200;
    dword_E0 = 200;
    _cxa_guard_release(
      &`guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons,
      26);
  }
  if ( LOBYTE(v7->modifiers) == 5 )
  {
    if ( CTRPluginFramework::Rect<int>::Contains(
           CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons,
           v7->modifierMask,
           (int)v7->lateModifiers) )
    {
      return;
    }
    *((_DWORD *)v6 + 45) = 0;
    *((_QWORD *)v6 + 24) = *(_QWORD *)&v7->modifierMask;
    CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)va);
  }
  if ( LOBYTE(v7->modifiers) == 6 )
  {
    if ( CTRPluginFramework::Rect<int>::Contains(
           CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons,
           v7->modifierMask,
           (int)v7->lateModifiers) )
    {
      return;
    }
    CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)va1);
    v23 = (float)(*((_DWORD *)v6 + 49) - (unsigned int)v7->lateModifiers);
    CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)va1);
    v4 = v23 / v4;
    *((float *)v6 + 45) = v4;
    *((_QWORD *)v6 + 24) = *(_QWORD *)&v7->modifierMask;
  }
  if ( LOBYTE(v7->modifiers) == 7
    && !CTRPluginFramework::Rect<int>::Contains(
          CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons,
          v7->modifierMask,
          (int)v7->lateModifiers) )
  {
    CTRPluginFramework::Clock::GetElapsedTime((CTRPluginFramework::Clock *)va1);
    CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)va1);
    if ( v4 > 0.3 )
      *((_DWORD *)v6 + 45) = 0;
  }
}
// C0: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::inputClock;
// D0: using guessed type char `guard variable for'CTRPluginFramework::KeyboardImpl::_ProcessEvent(CTRPluginFramework::Event &)::buttons;
// DC: using guessed type int dword_DC;
// E0: using guessed type int dword_E0;
// 4ED0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 4ED4: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);

//----- (00004A10) --------------------------------------------------------
int __fastcall CTRPluginFramework::KeyboardImpl::Run(CTRPluginFramework::KeyboardImpl *this)
{
  CTRPluginFramework::KeyboardImpl *v1; // r4
  CTRPluginFramework::ProcessImpl *v2; // r0
  int v3; // r3
  int v4; // r0
  int v5; // r1
  int v6; // r2
  int v7; // r3
  int v8; // r0
  int v9; // r5
  int v10; // r2
  int v11; // r3
  CTRPluginFramework::PluginMenu *v12; // r0
  bool v13; // r1
  float v15; // r1
  int v16; // r2
  int v17; // r3
  bool v18; // r1
  int v19; // r1
  int v20; // r0
  int (*v21)(void); // r3
  int v22; // [sp+0h] [bp-68h]
  int v23; // [sp+4h] [bp-64h]
  int v24; // [sp+8h] [bp-60h]
  Event v25; // [sp+10h] [bp-58h]

  v1 = this;
  *((_BYTE *)this + 85) = 0;
  *((_WORD *)this + 41) = 1;
  v2 = (CTRPluginFramework::ProcessImpl *)CTRPluginFramework::ProcessImpl::IsPaused;
  if ( CTRPluginFramework::ProcessImpl::IsPaused )
  {
    *((_BYTE *)v1 + 87) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 87) = 1;
    CTRPluginFramework::ProcessImpl::Pause(v2, (unsigned int)&CTRPluginFramework::ProcessImpl::IsPaused);
  }
  CTRPluginFramework::EventManager::EventManager((CTRPluginFramework::EventManager *)&v25.eventType);
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&v22);
  if ( !*((_BYTE *)v1 + 148) )
  {
    v3 = *((unsigned __int8 *)v1 + 102);
    if ( *((_BYTE *)v1 + 102) )
    {
      if ( v3 == 1 )
      {
        CTRPluginFramework::KeyboardImpl::_Decimal(v1);
      }
      else if ( v3 == 2 )
      {
        CTRPluginFramework::KeyboardImpl::_Hexadecimal((int)v1);
      }
    }
    else
    {
      CTRPluginFramework::KeyboardImpl::_Qwerty(v1);
    }
  }
  v4 = CTRPluginFramework::KeyboardImpl::_CheckInput(v1);
  v7 = *((unsigned __int8 *)v1 + 120);
  v8 = v4 ^ 1;
  *((_BYTE *)v1 + 84) = v8;
  if ( v7 )
  {
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 15);
    v8 = CTRPluginFramework::KeyboardImpl::_ScrollUp((int)v1, v5, v6);
  }
  v9 = -2;
  while ( *((_BYTE *)v1 + 82) )
  {
    while ( CTRPluginFramework::EventManager::PollEvent((CTRPluginFramework::EventManager *)&v25.eventType, &v25) )
    {
      CTRPluginFramework::KeyboardImpl::_ProcessEvent(v1, &v25, v10, v11);
      if ( *((_BYTE *)v1 + 85) )
      {
        v9 = -1;
        goto LABEL_14;
      }
    }
    CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v24);
    CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)&v24);
    CTRPluginFramework::KeyboardImpl::_Update(v1, v15, v16, v17, v22, v23);
    if ( *(_BYTE *)v1 )
      CTRPluginFramework::KeyboardImpl::_RenderTop(v1);
    CTRPluginFramework::KeyboardImpl::_RenderBottom(v1);
    CTRPluginFramework::Renderer::EndFrame(0, v18);
    if ( *((_BYTE *)v1 + 148) )
    {
      v24 = -1;
      v8 = CTRPluginFramework::KeyboardImpl::_CheckButtons(v1, &v24);
      if ( v8 )
      {
        v9 = v24;
        *((_BYTE *)v1 + 82) = 0;
      }
    }
    else
    {
      v8 = CTRPluginFramework::KeyboardImpl::_CheckKeys(v1, v19);
      if ( *((_BYTE *)v1 + 84) )
      {
        if ( !v8 )
          goto LABEL_30;
        *((_BYTE *)v1 + 84) = 0;
      }
      else if ( !v8 )
      {
        goto LABEL_30;
      }
      v20 = CTRPluginFramework::KeyboardImpl::_CheckInput(v1);
      v21 = (int (*)(void))*((_DWORD *)v1 + 33);
      v8 = v20 ^ 1;
      *((_BYTE *)v1 + 84) = v8;
      if ( v21 )
      {
        v8 = *((_DWORD *)v1 + 1);
        if ( v8 )
          v8 = v21();
      }
LABEL_30:
      if ( *((_BYTE *)v1 + 83) )
      {
        if ( *((_BYTE *)v1 + 84) )
        {
          *((_BYTE *)v1 + 83) = 0;
        }
        else
        {
          v8 = (unsigned __int8)(CTRPluginFramework::KeyboardImpl::_CheckInput(v1) ^ 1);
          *((_BYTE *)v1 + 84) = v8;
          if ( !v8 )
          {
            *((_BYTE *)v1 + 82) = 0;
            v9 = 0;
          }
        }
      }
    }
  }
LABEL_14:
  v12 = (CTRPluginFramework::PluginMenu *)CTRPluginFramework::PluginMenu::GetRunningInstance((CTRPluginFramework::PluginMenu *)v8);
  if ( v12 && !CTRPluginFramework::PluginMenu::IsOpen(v12) )
    CTRPluginFramework::ScreenImpl::Clean(0);
  if ( *((_BYTE *)v1 + 87) )
    CTRPluginFramework::ProcessImpl::Play(0, v13);
  std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base((void **)&v25.eventType);
  return v9;
}

//----- (00004C64) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework12KeyboardImpl12_DecimalKeysE()
{
  CTRPluginFramework::KeyboardImpl::_DecimalKeys = 0;
  dword_AC = 0;
  dword_B0 = 0;
  _aeabi_atexit(
    &CTRPluginFramework::KeyboardImpl::_DecimalKeys,
    std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::~vector,
    &_dso_handle);
  CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys = 0;
  dword_B8 = 0;
  dword_BC = 0;
  _aeabi_atexit(
    &CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys,
    std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::~vector,
    &_dso_handle);
  CTRPluginFramework::KeyboardImpl::_QwertyKeys = 0;
  dword_A0 = 0;
  dword_A4 = 0;
  return _aeabi_atexit(
           &CTRPluginFramework::KeyboardImpl::_QwertyKeys,
           std::vector<CTRPluginFramework::TouchKey,std::allocator<CTRPluginFramework::TouchKey>>::~vector,
           &_dso_handle);
}
// 9C: using guessed type int CTRPluginFramework::KeyboardImpl::_QwertyKeys;
// A0: using guessed type int dword_A0;
// A4: using guessed type int dword_A4;
// A8: using guessed type int CTRPluginFramework::KeyboardImpl::_DecimalKeys;
// AC: using guessed type int dword_AC;
// B0: using guessed type int dword_B0;
// B4: using guessed type int CTRPluginFramework::KeyboardImpl::_HexaDecimalKeys;
// B8: using guessed type int dword_B8;
// BC: using guessed type int dword_BC;
// 4FBC: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);

// ALL OK, 61 function(s) have been successfully decompiled
