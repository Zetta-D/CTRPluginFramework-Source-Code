/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::SelectableEntryCount(CTRPluginFramework *this, CTRPluginFramework::MenuFolderImpl *a2);
int __fastcall CTRPluginFramework::ScrollUp(CTRPluginFramework *this, int *a2, CTRPluginFramework::MenuFolderImpl *a3, int a4);
int __fastcall CTRPluginFramework::ScrollDown(CTRPluginFramework *this, int *a2, CTRPluginFramework::MenuFolderImpl *a3, int a4);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall CTRPluginFramework::PluginMenuHome::PluginMenuHome(int a1);
int __fastcall CTRPluginFramework::PluginMenuHome::Append(CTRPluginFramework::PluginMenuHome *this, CTRPluginFramework::MenuItem *a2);
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::Refresh(CTRPluginFramework::PluginMenuHome *this);
int __fastcall CTRPluginFramework::PluginMenuHome::_RenderTop(CTRPluginFramework::PluginMenuHome *this);
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::_TriggerEntry(CTRPluginFramework::PluginMenuHome *this);
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::_ProcessEvent(__int64 this);
int __fastcall CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick(CTRPluginFramework::PluginMenuHome *this, int a2);
int __fastcall CTRPluginFramework::PluginMenuHome::_controllerBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuHome::_keyboardBtn_OnClick(CTRPluginFramework::PluginMenuHome *this);
int __fastcall CTRPluginFramework::PluginMenuHome::_actionReplayBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuHome::_gameGuideBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuHome::_searchBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuHome::_toolsBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuHome::_InfoBtn_OnClick(CTRPluginFramework::PluginMenuHome *this);
int __fastcall CTRPluginFramework::PluginMenuHome::UnStar(int result, CTRPluginFramework::MenuItem *a2);
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::_StarItem(CTRPluginFramework::PluginMenuHome *this);
int __fastcall CTRPluginFramework::PluginMenuHome::Init(CTRPluginFramework::PluginMenuHome *this);
int __fastcall CTRPluginFramework::PluginMenuHome::AddPluginVersion(CTRPluginFramework::PluginMenuHome *this, unsigned int a2);
int __fastcall CTRPluginFramework::PluginMenuHome::Close(int result, CTRPluginFramework::MenuFolderImpl *a2);
int __fastcall CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::{lambda(void *)#1}::_FUN(int a1);
int __fastcall CTRPluginFramework::PluginMenuHome::_RenderBottom(__int64 this, int a2, int a3);
int __fastcall CTRPluginFramework::PluginMenuHome::_Update(int a1, float a2, __int64 a3);
int __fastcall CTRPluginFramework::PluginMenuHome::operator()(unsigned int a1, _DWORD *a2, _DWORD *a3, __int64 *a4);
// _DWORD CTRPluginFramework::MenuFolderImpl::ItemsCount(CTRPluginFramework::MenuFolderImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void); weak
// _DWORD CTRPluginFramework::Button::Disable(CTRPluginFramework::Button *__hidden this); idb
// _DWORD CTRPluginFramework::Button::Lock(CTRPluginFramework::Button *__hidden this); idb
// _DWORD __cdecl operator new[](unsigned int); idb
// void *memset(void *s, int c, size_t n);
// _DWORD __cdecl CTRPluginFramework::Renderer::LinuxFontSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawFavorite(CTRPluginFramework::Icon *__hidden this, int, int); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawController(CTRPluginFramework::Icon *__hidden this, int, int); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawGuide(CTRPluginFramework::Icon *__hidden this, int, int); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawSearch(CTRPluginFramework::Icon *__hidden this, int, int); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawTools(CTRPluginFramework::Icon *__hidden this, int, int); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawKeyboard(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawGameController(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawAddFavorite(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawInfo(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::Append(CTRPluginFramework::MenuFolderImpl *__hidden this, CTRPluginFramework::MenuItem *, bool); weak
// _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::_Close(CTRPluginFramework::MenuFolderImpl *__hidden this, int *, bool); idb
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawLine(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::MenuFolderImpl::HasParent(CTRPluginFramework::MenuFolderImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawStippledLine(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::MenuSelector(CTRPluginFramework::Renderer *__hidden this, int, int, int, int); idb
// _DWORD CTRPluginFramework::MenuEntryImpl::IsActivated(CTRPluginFramework::MenuEntryImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysCheckBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawSettings(CTRPluginFramework::Icon *__hidden this, int, int); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysFolder(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::MenuEntryImpl::_TriggerState(CTRPluginFramework::MenuEntryImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::PluginMenuExecuteLoop::Add(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this, CTRPluginFramework::MenuEntryImpl *); idb
// _DWORD __cdecl CTRPluginFramework::PluginMenuExecuteLoop::Remove(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this, CTRPluginFramework::MenuEntryImpl *); idb
// _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::_Open(CTRPluginFramework::MenuFolderImpl *__hidden this, CTRPluginFramework::MenuFolderImpl *, int, bool); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Milliseconds(CTRPluginFramework *__hidden this, int); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Button::SetState(CTRPluginFramework::Button *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Button::Enable(CTRPluginFramework::Button *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::GetTextSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::HotkeyManager::Count(CTRPluginFramework::HotkeyManager *__hidden this); idb
// int __fastcall CTRPluginFramework::HotkeyManager::operator[](_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Hotkey::AskForKeys(CTRPluginFramework::Hotkey *__hidden this); idb
// _DWORD CTRPluginFramework::MenuEntry::RefreshNote(CTRPluginFramework::MenuEntry *__hidden this); idb
// _DWORD CTRPluginFramework::HotkeyManager::AskForKeys(CTRPluginFramework::HotkeyManager *__hidden this); idb
// _DWORD CTRPluginFramework::TextBox::IsOpen(CTRPluginFramework::TextBox *__hidden this); idb
// _DWORD CTRPluginFramework::TextBox::Close(CTRPluginFramework::TextBox *__hidden this); idb
// _DWORD CTRPluginFramework::TextBox::Open(CTRPluginFramework::TextBox *__hidden this); idb
// void *memmove(void *dest, const void *src, size_t n);
// int sprintf(char *s, const char *format, ...);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// _DWORD CTRPluginFramework::TextBox::Draw(CTRPluginFramework::TextBox *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD CTRPluginFramework::Button::Draw(CTRPluginFramework::Button *__hidden this); idb
// _DWORD CTRPluginFramework::Time::AsSeconds(CTRPluginFramework::Time *__hidden this); idb
// _DWORD CTRPluginFramework::MenuItem::HasNoteChanged(CTRPluginFramework::MenuItem *__hidden this); idb
// _DWORD CTRPluginFramework::MenuItem::HandledNoteChanges(CTRPluginFramework::MenuItem *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::Button::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Task::Task(CTRPluginFramework::Task *__hidden this, int (__cdecl *)(void *), void *, int); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::TextBox::ProcessEvent(CTRPluginFramework::TextBox *__hidden this, Event *); idb
// int __fastcall CTRPluginFramework::Button::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::Task::Start(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::Task::Wait(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::Window::MustClose(CTRPluginFramework::Window *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Task::~Task(CTRPluginFramework::Task *__hidden this); weak

//-------------------------------------------------------------------------
// Data declarations

char CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework = '\x01'; // weak
int CTRPluginFramework::g_ctrpfString; // weak
int CTRPluginFramework::g_bymeString; // weak
char `guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll; // weak
_UNKNOWN CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll; // weak
char `guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock; // weak
_UNKNOWN unk_23; // weak
_UNKNOWN CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock; // weak
int CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::last; // weak
int CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick(void)::bak; // weak
char `guard variable for'CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock; // weak
_UNKNOWN CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock; // weak
char `guard variable for'CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top; // weak
_UNKNOWN CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top; // weak
int CTRPluginFramework::g_ctrpf = 67; // weak
int CTRPluginFramework::g_byme = 98; // weak
_UNKNOWN unk_1CF0; // weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN _dso_handle; weak


//----- (00000050) --------------------------------------------------------
int __fastcall CTRPluginFramework::SelectableEntryCount(CTRPluginFramework *this, CTRPluginFramework::MenuFolderImpl *a2)
{
  unsigned int v2; // r4
  CTRPluginFramework::MenuFolderImpl *v3; // r6
  int v4; // r5
  int v5; // r0

  v2 = 0;
  v3 = this;
  v4 = 0;
  while ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v3) > v2 )
  {
    v5 = CTRPluginFramework::MenuFolderImpl::operator[](v3, v2);
    if ( *(_BYTE *)(v5 + 57) != 1 || !(*(_BYTE *)(v5 + 100) & 8) )
      ++v4;
    ++v2;
  }
  return v4;
}
// 1D40: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);

//----- (000000A8) --------------------------------------------------------
int __fastcall CTRPluginFramework::ScrollUp(CTRPluginFramework *this, int *a2, CTRPluginFramework::MenuFolderImpl *a3, int a4)
{
  CTRPluginFramework *v4; // r6
  int *v5; // r5
  CTRPluginFramework::MenuFolderImpl *v6; // r4
  int result; // r0
  int v8; // r0
  int v9; // r1

  v4 = this;
  v5 = a2;
  v6 = a3;
  while ( 1 )
  {
    result = CTRPluginFramework::SelectableEntryCount(
               (CTRPluginFramework *)v5,
               (CTRPluginFramework::MenuFolderImpl *)a2);
    if ( !result )
      break;
    if ( *(_DWORD *)v4 )
    {
      v9 = (*(_DWORD *)v4 - (_DWORD)v6) & ~((*(_DWORD *)v4 - (signed int)v6) >> 31);
      *(_DWORD *)v4 = v9;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, v9);
      if ( *(_BYTE *)(result + 57) != 1 )
        return result;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, *(_DWORD *)v4);
      if ( !(*(_BYTE *)(result + 100) & 8) )
        return result;
      if ( (signed int)v6 < 2 )
        v6 = (CTRPluginFramework::MenuFolderImpl *)2;
      v6 = (CTRPluginFramework::MenuFolderImpl *)((char *)v6 - 1);
    }
    else
    {
      v8 = CTRPluginFramework::MenuFolderImpl::ItemsCount((CTRPluginFramework::MenuFolderImpl *)v5);
      *(_DWORD *)v4 = v8 - 1;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, v8 - 1);
      if ( *(_BYTE *)(result + 57) != 1 )
        return result;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, *(_DWORD *)v4);
      if ( !(*(_BYTE *)(result + 100) & 8) )
        return result;
    }
  }
  return result;
}
// 1D40: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);

//----- (0000015C) --------------------------------------------------------
int __fastcall CTRPluginFramework::ScrollDown(CTRPluginFramework *this, int *a2, CTRPluginFramework::MenuFolderImpl *a3, int a4)
{
  CTRPluginFramework *v4; // r4
  int *v5; // r5
  CTRPluginFramework::MenuFolderImpl *v6; // r6
  int result; // r0
  int v8; // r7
  unsigned int v9; // r7

  v4 = this;
  v5 = a2;
  v6 = a3;
  while ( 1 )
  {
    result = CTRPluginFramework::SelectableEntryCount(
               (CTRPluginFramework *)v5,
               (CTRPluginFramework::MenuFolderImpl *)a2);
    if ( !result )
      break;
    v8 = *(_DWORD *)v4;
    if ( v8 == CTRPluginFramework::MenuFolderImpl::ItemsCount((CTRPluginFramework::MenuFolderImpl *)v5) - 1 )
    {
      *(_DWORD *)v4 = 0;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, 0);
      if ( *(_BYTE *)(result + 57) != 1 )
        return result;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, *(_DWORD *)v4);
      if ( !(*(_BYTE *)(result + 100) & 8) )
        return result;
    }
    else
    {
      v9 = (unsigned int)v6 + *(_DWORD *)v4;
      *(_DWORD *)v4 = v9;
      if ( v9 >= CTRPluginFramework::MenuFolderImpl::ItemsCount((CTRPluginFramework::MenuFolderImpl *)v5) )
        *(_DWORD *)v4 = CTRPluginFramework::MenuFolderImpl::ItemsCount((CTRPluginFramework::MenuFolderImpl *)v5) - 1;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, *(_DWORD *)v4);
      if ( *(_BYTE *)(result + 57) != 1 )
        return result;
      result = CTRPluginFramework::MenuFolderImpl::operator[](v5, *(_DWORD *)v4);
      if ( !(*(_BYTE *)(result + 100) & 8) )
        return result;
      if ( (signed int)v6 < 2 )
        v6 = (CTRPluginFramework::MenuFolderImpl *)2;
      v6 = (CTRPluginFramework::MenuFolderImpl *)((char *)v6 - 1);
    }
  }
  return result;
}
// 1D40: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);

//----- (0000023C) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 1D48: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1D4C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000002B4) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::PluginMenuHome(int a1)
{
  int v1; // r4
  int v2; // r5
  int v3; // r6
  int v4; // r6
  _BYTE *v5; // r7
  _BYTE *v6; // r6
  _BYTE *v7; // r2
  int *v8; // r1
  unsigned int v9; // t1
  char v10; // r0
  int v11; // r3
  char *v12; // r1
  int *v13; // r0
  unsigned int v14; // t1
  char v15; // r12
  const char *v16; // r1
  int v18; // [sp+18h] [bp-68h]
  int v19; // [sp+1Ch] [bp-64h]
  __int64 v20; // [sp+20h] [bp-60h]
  __int64 v21; // [sp+28h] [bp-58h]
  int v22; // [sp+30h] [bp-50h]
  int v23; // [sp+34h] [bp-4Ch]
  int v24; // [sp+40h] [bp-40h]
  __int64 v25; // [sp+44h] [bp-3Ch]
  int v26; // [sp+4Ch] [bp-34h]

  v1 = a1;
  v2 = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(a1 + 40));
  *(_DWORD *)(v1 + 56) = v1 + 64;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v21,
    (const char *)&unk_1CF0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    &v24,
    (const char *)&unk_1CF0);
  v20 = 773094113600LL;
  v18 = 40;
  v19 = 30;
  CTRPluginFramework::TextBox::TextBox(v1 + 80, &v21, &v24, &v18);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v21);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v24, "Favorite");
  v21 = 300647710750LL;
  v22 = 120;
  v23 = 30;
  CTRPluginFramework::Button::Button(v1 + 200, 50, &v24, &v21, &CTRPluginFramework::Icon::DrawFavorite);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v24, "Mapper");
  v21 = 300647710885LL;
  v22 = 120;
  v23 = 30;
  CTRPluginFramework::Button::Button(v1 + 272, 48, &v24, &v21, &CTRPluginFramework::Icon::DrawController);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v24, "Game Guide");
  v21 = 450971566110LL;
  v22 = 120;
  v23 = 30;
  CTRPluginFramework::Button::Button(v1 + 344, 48, &v24, &v21, &CTRPluginFramework::Icon::DrawGuide);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v24, "Search");
  v21 = 450971566245LL;
  v22 = 120;
  v23 = 30;
  CTRPluginFramework::Button::Button(v1 + 416, 48, &v24, &v21, &CTRPluginFramework::Icon::DrawSearch);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v24, "ActionReplay");
  v21 = 601295421470LL;
  v22 = 120;
  v23 = 30;
  CTRPluginFramework::Button::Button(v1 + 488, 48, &v24, &v21, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v24, "Tools");
  v21 = 601295421605LL;
  v22 = 120;
  v23 = 30;
  CTRPluginFramework::Button::Button(v1 + 560, 48, &v24, &v21, &CTRPluginFramework::Icon::DrawTools);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  v24 = 130;
  v25 = 107374182430LL;
  v26 = 25;
  CTRPluginFramework::Button::Button(v1 + 632, 8, &v24, &CTRPluginFramework::Icon::DrawKeyboard);
  v24 = 170;
  v25 = 107374182430LL;
  v26 = 25;
  CTRPluginFramework::Button::Button(v1 + 704, 8, &v24, &CTRPluginFramework::Icon::DrawGameController);
  v24 = 50;
  v25 = 107374182430LL;
  v26 = 25;
  CTRPluginFramework::Button::Button(v1 + 776, 10, &v24, &CTRPluginFramework::Icon::DrawAddFavorite);
  v24 = 90;
  v25 = 107374182430LL;
  v26 = 25;
  CTRPluginFramework::Button::Button(v1 + 848, 10, &v24, &CTRPluginFramework::Icon::DrawInfo);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    &v24,
    (const char *)&unk_1CF0);
  v3 = operator new(0x64u);
  CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
  *(_DWORD *)(v1 + 4) = v3;
  *(_DWORD *)v1 = v3;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v21, "Favorites");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    &v24,
    (const char *)&unk_1CF0);
  v4 = operator new(0x64u);
  CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
  *(_DWORD *)(v1 + 8) = v4;
  *(_DWORD *)(v1 + 12) = v4;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v21);
  *(_DWORD *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 20) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v1 + 776));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v1 + 848));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v1 + 632));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v1 + 704));
  CTRPluginFramework::Button::Lock((CTRPluginFramework::Button *)(v1 + 272));
  CTRPluginFramework::g_ctrpfString = operator new[](0x13u);
  v5 = (_BYTE *)operator new[](0xDu);
  v6 = (_BYTE *)CTRPluginFramework::g_ctrpfString;
  CTRPluginFramework::g_bymeString = (int)v5;
  memset((void *)CTRPluginFramework::g_ctrpfString, 0, 0x13u);
  memset(v5, 0, 0xDu);
  v7 = v6;
  v8 = &CTRPluginFramework::g_ctrpf;
  do
  {
    v9 = *v8;
    ++v8;
    v10 = v2++ & 0xA;
    *v7++ = v9 >> v10;
  }
  while ( v2 != 18 );
  v11 = 0;
  v12 = v5;
  v13 = &CTRPluginFramework::g_byme;
  v6[18] = 0;
  do
  {
    v14 = *v13;
    ++v13;
    v15 = v11++ & 0xA;
    *v12++ = v14 >> v15;
  }
  while ( v11 != 12 );
  v5[12] = 0;
  CTRPluginFramework::Renderer::LinuxFontSize((CTRPluginFramework::Renderer *)v6, v12);
  CTRPluginFramework::Renderer::LinuxFontSize((CTRPluginFramework::Renderer *)CTRPluginFramework::g_bymeString, v16);
  if ( !LOBYTE(CTRPluginFramework::Preferences::Settings[1]) )
    CTRPluginFramework::Button::Lock((CTRPluginFramework::Button *)(v1 + 488));
  if ( !BYTE1(CTRPluginFramework::Preferences::Settings[1]) )
    CTRPluginFramework::Button::Lock((CTRPluginFramework::Button *)(v1 + 416));
  return v1;
}
// 8: using guessed type int CTRPluginFramework::g_ctrpfString;
// C: using guessed type int CTRPluginFramework::g_bymeString;
// 1C78: using guessed type int CTRPluginFramework::g_ctrpf;
// 1CC0: using guessed type int CTRPluginFramework::g_byme;
// 1D54: using guessed type int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 1D58: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1D5C: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1D60: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1D64: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD);
// 1D6C: using guessed type int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void);
// 1D84: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawFavorite(CTRPluginFramework::Icon *__hidden this, int, int);
// 1D88: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawController(CTRPluginFramework::Icon *__hidden this, int, int);
// 1D8C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawGuide(CTRPluginFramework::Icon *__hidden this, int, int);
// 1D90: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawSearch(CTRPluginFramework::Icon *__hidden this, int, int);
// 1D94: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawTools(CTRPluginFramework::Icon *__hidden this, int, int);
// 1D98: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawKeyboard(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1D9C: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawGameController(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1DA0: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawAddFavorite(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1DA4: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawInfo(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (00000778) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::Append(CTRPluginFramework::PluginMenuHome *this, CTRPluginFramework::MenuItem *a2)
{
  return CTRPluginFramework::MenuFolderImpl::Append(*((CTRPluginFramework::MenuFolderImpl **)this + 1), a2, 0);
}
// 1DAC: using guessed type _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::Append(CTRPluginFramework::MenuFolderImpl *__hidden this, CTRPluginFramework::MenuItem *, bool);

//----- (00000784) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::Refresh(CTRPluginFramework::PluginMenuHome *this)
{
  CTRPluginFramework::PluginMenuHome *v1; // r4
  int *v2; // r5
  CTRPluginFramework::MenuFolderImpl *v3; // r0
  int v4; // r0
  int v5; // r3
  CTRPluginFramework::MenuFolderImpl *v6; // r0
  CTRPluginFramework::MenuFolderImpl *v7; // r0
  int v8; // r0
  int v9; // r3
  unsigned int v10; // r5
  unsigned int result; // r0

  v1 = this;
  if ( *(_DWORD *)(*((_DWORD *)this + 1) + 60) )
  {
    v2 = (int *)((char *)this + 24);
    while ( 1 )
    {
      v3 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v1 + 1);
      if ( (*((_BYTE *)v3 + 56) >> 4) & 1 )
        break;
      v4 = CTRPluginFramework::MenuFolderImpl::_Close(v3, v2, 0);
      if ( !v4 )
        break;
      v5 = *((_DWORD *)v1 + 6);
      *((_DWORD *)v1 + 1) = v4;
      if ( v5 > 0 )
        *((_DWORD *)v1 + 6) = v5 - 1;
    }
  }
  while ( 1 )
  {
    v6 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v1 + 2);
    if ( !*((_DWORD *)v6 + 15) )
      break;
    while ( 1 )
    {
      v7 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v1 + 2);
      if ( *((_BYTE *)v7 + 56) & 0x10 )
        break;
      v8 = CTRPluginFramework::MenuFolderImpl::_Close(v7, (int *)v1 + 6, 1);
      if ( !v8 )
        break;
      v9 = *((_DWORD *)v1 + 6);
      *((_DWORD *)v1 + 2) = v8;
      if ( v9 > 0 )
        *((_DWORD *)v1 + 6) = v9 - 1;
    }
  }
  v10 = *((_DWORD *)v1 + 6);
  if ( !*((_BYTE *)v1 + 20) )
    v6 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v1 + 1);
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v6);
  if ( v10 >= result )
    *((_DWORD *)v1 + 6) = 0;
  return result;
}

//----- (00000850) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_RenderTop(CTRPluginFramework::PluginMenuHome *this)
{
  CTRPluginFramework::PluginMenuHome *v1; // r4
  CTRPluginFramework::MenuFolderImpl *v2; // r6
  int v3; // r3
  bool v4; // zf
  int v5; // r3
  int v6; // r0
  CTRPluginFramework::MenuFolderImpl *v7; // r1
  int result; // r0
  int v9; // r5
  int v10; // r3
  int v11; // r7
  unsigned int v12; // r3
  int v13; // r10
  int v14; // r2
  int v15; // s16
  _BYTE *v16; // r9
  int v17; // r1
  _BYTE *v18; // r3
  int v19; // r1
  _BYTE *v20; // r3
  signed int v21; // [sp+0h] [bp-50h]
  int v22; // [sp+8h] [bp-48h]
  int v23; // [sp+Ch] [bp-44h]
  int v24; // [sp+10h] [bp-40h]
  int v25; // [sp+14h] [bp-3Ch]
  int v26; // [sp+18h] [bp-38h]
  int v27; // [sp+1Ch] [bp-34h]

  v1 = this;
  v26 = 25;
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::TopWindow);
  v2 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v1 + 2);
  if ( !*((_BYTE *)v1 + 20) )
    v2 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v1 + 1);
  v27 = v26;
  v3 = *((unsigned __int8 *)v1 + 49);
  v4 = v3 == 0;
  if ( *((_BYTE *)v1 + 49) )
    v3 = *((_DWORD *)v1 + 13);
  if ( v4 )
    v5 = 360;
  else
    v5 = v3 - 10;
  v6 = CTRPluginFramework::Renderer::DrawSysString(
         *((_DWORD *)v2 + 1),
         40,
         &v26,
         v5,
         CTRPluginFramework::Preferences::Settings[4],
         0);
  v21 = 1;
  CTRPluginFramework::Renderer::DrawLine(40, v26, v6, &CTRPluginFramework::Preferences::Settings[4]);
  v26 += 7;
  if ( *((_BYTE *)v1 + 49) && !*((_BYTE *)v1 + 20) && !CTRPluginFramework::MenuFolderImpl::HasParent(v2) )
    CTRPluginFramework::Renderer::DrawSysString(
      *((_DWORD *)v1 + 14),
      *((_DWORD *)v1 + 13),
      &v27,
      360,
      CTRPluginFramework::Preferences::Settings[4],
      0);
  v24 = CTRPluginFramework::SelectableEntryCount(v2, v7);
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v2);
  if ( result )
  {
    v9 = (*((_DWORD *)v1 + 6) - 6) & ~((*((_DWORD *)v1 + 6) - 6) >> 31);
    v10 = v9 + 8;
    if ( v9 + 8 >= result )
      v10 = result;
    v25 = v10;
    while ( v9 < v25 )
    {
      v11 = *(_DWORD *)(*((_DWORD *)v2 + 20) + 4 * v9);
      v12 = *(unsigned __int8 *)(v11 + 56);
      v13 = *(_DWORD *)(v11 + 4);
      v22 = (*(_BYTE *)(v11 + 56) >> 1) & 1;
      v23 = (v12 >> 3) & 1;
      v14 = v12 & 1;
      if ( *((_DWORD *)v1 + 6) == v9 )
      {
        v15 = *((_DWORD *)v1 + 9);
        v16 = &CTRPluginFramework::Preferences::Settings[6];
      }
      else
      {
        v16 = &CTRPluginFramework::Preferences::Settings[7];
      }
      if ( v12 & 1 )
      {
        v4 = (v12 & 4) == 0;
        v21 = 1;
        v17 = v26 - 1;
        v18 = &CTRPluginFramework::Preferences::Settings[7];
        if ( v4 )
          CTRPluginFramework::Renderer::DrawLine(40, v17, 320, v18);
        else
          CTRPluginFramework::Renderer::DrawStippledLine(40, v17, 320, v18);
      }
      if ( v24 && *((_DWORD *)v1 + 6) == v9 )
        CTRPluginFramework::Renderer::MenuSelector((CTRPluginFramework::Renderer *)&unk_23, v26 - 3, 330, 20, v21);
      if ( *(_BYTE *)(v11 + 57) == 1 )
      {
        if ( *(_DWORD *)(v11 + 68) )
        {
          CTRPluginFramework::MenuEntryImpl::IsActivated((CTRPluginFramework::MenuEntryImpl *)v11);
          v21 = *(_DWORD *)v16;
          result = CTRPluginFramework::Renderer::DrawSysCheckBox(v13, 40, &v26, 350);
        }
        else
        {
          if ( *(_DWORD *)(v11 + 72) && !(*(_BYTE *)(v11 + 100) & 8) )
            CTRPluginFramework::Icon::DrawSettings(
              (CTRPluginFramework::Icon *)&CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock,
              v26,
              v14);
          result = CTRPluginFramework::Renderer::DrawSysString(v13, 60, &v26, 350, *(_DWORD *)v16, 0);
          ++v26;
        }
      }
      else
      {
        v21 = *(_DWORD *)v16;
        result = CTRPluginFramework::Renderer::DrawSysFolder(v13, 40, &v26, 350);
      }
      if ( v22 )
      {
        v19 = v26 - 1;
        v21 = 1;
        v20 = &CTRPluginFramework::Preferences::Settings[7];
        if ( v23 )
          result = CTRPluginFramework::Renderer::DrawStippledLine(40, v19, 320, v20);
        else
          result = CTRPluginFramework::Renderer::DrawLine(40, v19, 320, v20);
      }
      ++v9;
      v26 += 4;
    }
  }
  return result;
}
// 1DB8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1DBC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawLine(_DWORD, _DWORD, _DWORD, _DWORD);
// 1DC4: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawStippledLine(_DWORD, _DWORD, _DWORD, _DWORD);
// 1DD0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysCheckBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 1DD8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysFolder(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000B70) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::_TriggerEntry(CTRPluginFramework::PluginMenuHome *this)
{
  CTRPluginFramework::MenuFolderImpl *v1; // r6
  unsigned int v2; // r4
  CTRPluginFramework::PluginMenuHome *v3; // r5
  unsigned int result; // r0
  int v5; // r4
  unsigned int v6; // r3
  int v7; // r5
  CTRPluginFramework::MenuEntryImpl *v8; // r1
  int (__fastcall *v9)(_DWORD); // r3
  int (**v10)(void); // r0

  v1 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 2);
  if ( !*((_BYTE *)this + 20) )
    v1 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 1);
  v2 = *((_DWORD *)this + 6);
  v3 = this;
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v1);
  if ( v2 < result )
  {
    v5 = *(_DWORD *)(*((_DWORD *)v1 + 20) + 4 * *((_DWORD *)v3 + 6));
    if ( *(_BYTE *)(v5 + 57) == 1 )
    {
      v6 = *(unsigned __int8 *)(v5 + 100);
      if ( !(v6 & 8) )
      {
        if ( *(_DWORD *)(v5 + 68) )
        {
          v7 = (v6 >> 1) & 1;
          result = CTRPluginFramework::MenuEntryImpl::_TriggerState((CTRPluginFramework::MenuEntryImpl *)v5);
          if ( result )
          {
            result = CTRPluginFramework::PluginMenuExecuteLoop::Add((CTRPluginFramework::PluginMenuExecuteLoop *)v5, v8);
          }
          else if ( v7 )
          {
            result = CTRPluginFramework::PluginMenuExecuteLoop::Remove(
                       (CTRPluginFramework::PluginMenuExecuteLoop *)v5,
                       v8);
          }
        }
        else
        {
          v9 = *(int (__fastcall **)(_DWORD))(v5 + 72);
          if ( v9 )
            result = v9(*(_DWORD *)(v5 + 108));
        }
      }
    }
    else
    {
      v10 = *(int (***)(void))(v5 + 68);
      if ( !v10 || !*v10 || (result = (*v10)()) != 0 )
      {
        result = CTRPluginFramework::MenuFolderImpl::_Open(
                   (CTRPluginFramework::MenuFolderImpl *)v5,
                   v1,
                   *((_DWORD *)v3 + 6),
                   *((_BYTE *)v3 + 20));
        if ( *((_BYTE *)v3 + 20) )
          *((_DWORD *)v3 + 2) = v5;
        else
          *((_DWORD *)v3 + 1) = v5;
        *((_DWORD *)v3 + 6) = 0;
      }
    }
  }
  return result;
}

//----- (00000C78) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::_ProcessEvent(__int64 this)
{
  float v1; // s0
  int v2; // r4
  unsigned __int8 *v3; // r7
  int *v4; // r5
  Time v5; // r1
  Time v6; // r1
  int v7; // r3
  bool v8; // zf
  CTRPluginFramework::MenuFolderImpl *v9; // r2
  CTRPluginFramework::MenuFolderImpl *v10; // r2
  int v11; // r3
  bool v12; // zf
  CTRPluginFramework::MenuFolderImpl *v13; // r2
  CTRPluginFramework::MenuFolderImpl *v14; // r5
  unsigned int v15; // r8
  unsigned int v16; // r0
  int v17; // r3
  const char *v18; // r1
  int v19; // r0
  bool v20; // r7
  CTRPluginFramework::MenuFolderImpl *v21; // r2
  int v22; // r0
  void (__fastcall **v23)(_DWORD, signed int); // r3
  int v24; // r8
  void (__fastcall *v25)(_DWORD, signed int); // r3
  signed int v26; // s0
  unsigned int result; // r0
  unsigned int v28; // r7
  int v29; // r5
  bool v30; // r1
  int v31; // r3
  int v32; // r1
  int v33; // r0
  __int64 v34; // [sp+0h] [bp-20h]

  v34 = this;
  v3 = (unsigned __int8 *)HIDWORD(this);
  v2 = this;
  __mcr(15, 0, this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll & 1) )
  {
    LODWORD(this) = _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll);
    if ( (_DWORD)this )
    {
      CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll);
      LODWORD(this) = _cxa_guard_release(&`guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll);
    }
  }
  __mcr(15, 0, this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock) )
  {
    CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock);
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock);
  }
  v4 = *(int **)(v2 + 4);
  if ( *(_BYTE *)(v2 + 20) )
    v4 = *(int **)(v2 + 8);
  if ( !*v3 )
  {
    v11 = *((_DWORD *)v3 + 1);
    if ( v11 != 32 )
    {
      if ( v11 <= 32 )
      {
        if ( v11 == 1 )
        {
          CTRPluginFramework::PluginMenuHome::_TriggerEntry((CTRPluginFramework::PluginMenuHome *)v2);
          goto LABEL_42;
        }
        if ( v11 <= 1 )
        {
          v12 = v11 == 2147483648;
LABEL_36:
          if ( !v12 )
            goto LABEL_42;
          v13 = (CTRPluginFramework::MenuFolderImpl *)&CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework;
LABEL_39:
          CTRPluginFramework::ScrollDown((CTRPluginFramework *)(v2 + 24), v4, v13, v11);
          goto LABEL_20;
        }
        if ( v11 == 2 )
        {
          v22 = CTRPluginFramework::MenuFolderImpl::_Close(
                  (CTRPluginFramework::MenuFolderImpl *)v4,
                  (int *)(v2 + 24),
                  *(_BYTE *)(v2 + 20));
          v23 = (void (__fastcall **)(_DWORD, signed int))v4[17];
          v24 = v22;
          if ( v23 )
          {
            v25 = *v23;
            if ( v25 )
              v25(*(_DWORD *)(*(_DWORD *)(v2 + 4) + 68), 1);
          }
          if ( v24 )
          {
            if ( *(_BYTE *)(v2 + 20) )
              *(_DWORD *)(v2 + 8) = v24;
            else
              *(_DWORD *)(v2 + 4) = v24;
          }
          goto LABEL_42;
        }
        if ( v11 != 16 )
          goto LABEL_42;
LABEL_63:
        v13 = (CTRPluginFramework::MenuFolderImpl *)4;
        goto LABEL_39;
      }
      if ( v11 == 0x10000000 )
        goto LABEL_63;
      if ( v11 <= 0x10000000 )
      {
        if ( v11 != 64 )
        {
          v12 = v11 == 128;
          goto LABEL_36;
        }
        goto LABEL_59;
      }
      if ( v11 != 0x20000000 )
      {
        if ( v11 != 0x40000000 )
          goto LABEL_42;
LABEL_59:
        v21 = (CTRPluginFramework::MenuFolderImpl *)&CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework;
LABEL_60:
        CTRPluginFramework::ScrollUp((CTRPluginFramework *)(v2 + 24), v4, v21, v11);
        goto LABEL_20;
      }
    }
    v21 = (CTRPluginFramework::MenuFolderImpl *)4;
    goto LABEL_60;
  }
  if ( *v3 == 1 )
  {
    CTRPluginFramework::Milliseconds((CTRPluginFramework *)&v34, 800);
    if ( CTRPluginFramework::Clock::HasTimePassed(
           (CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll,
           v5) )
    {
      CTRPluginFramework::Milliseconds((CTRPluginFramework *)&v34, 100);
      if ( CTRPluginFramework::Clock::HasTimePassed(
             (CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock,
             v6) )
      {
        v7 = *((_DWORD *)v3 + 1);
        if ( v7 != 64 )
        {
          if ( v7 <= 64 )
          {
            if ( v7 != 16 )
            {
              if ( v7 != 32 )
              {
                v8 = v7 == 2147483648;
                goto LABEL_18;
              }
LABEL_28:
              v10 = (CTRPluginFramework::MenuFolderImpl *)4;
              goto LABEL_27;
            }
LABEL_29:
            v9 = (CTRPluginFramework::MenuFolderImpl *)4;
            goto LABEL_30;
          }
          if ( v7 == 0x10000000 )
            goto LABEL_29;
          if ( v7 <= 0x10000000 )
          {
            v8 = v7 == 128;
LABEL_18:
            if ( v8 )
            {
              v9 = (CTRPluginFramework::MenuFolderImpl *)&CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework;
LABEL_30:
              CTRPluginFramework::ScrollDown((CTRPluginFramework *)(v2 + 24), v4, v9, v7);
            }
LABEL_20:
            CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v34);
            goto LABEL_42;
          }
          if ( v7 == 0x20000000 )
            goto LABEL_28;
          if ( v7 != 0x40000000 )
            goto LABEL_20;
        }
        v10 = (CTRPluginFramework::MenuFolderImpl *)&CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework;
LABEL_27:
        CTRPluginFramework::ScrollUp((CTRPluginFramework *)(v2 + 24), v4, v10, v7);
        goto LABEL_20;
      }
    }
  }
LABEL_42:
  v14 = *(CTRPluginFramework::MenuFolderImpl **)(v2 + 8);
  v15 = *(_DWORD *)(v2 + 24);
  if ( !*(_BYTE *)(v2 + 20) )
    v14 = *(CTRPluginFramework::MenuFolderImpl **)(v2 + 4);
  v16 = CTRPluginFramework::MenuFolderImpl::ItemsCount(v14);
  if ( v15 >= v16 )
    v17 = 0;
  if ( v15 >= v16 )
    *(_DWORD *)(v2 + 24) = v17;
  if ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v14)
    && *((_DWORD *)v3 + 1) != 0x100000
    && (unsigned int)*v3 - 5 > 3 )
  {
    CTRPluginFramework::Renderer::GetTextSize(
      *(CTRPluginFramework::Renderer **)(*(_DWORD *)(*((_DWORD *)v14 + 20) + 4 * *(_DWORD *)(v2 + 24)) + 4),
      v18);
    v26 = (signed int)v1;
    *(_DWORD *)(v2 + 28) = v26;
    *(float *)(v2 + 32) = (float)v26 - 200.0;
    CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v34);
    *(_DWORD *)(v2 + 36) = 0;
    *(_BYTE *)(v2 + 48) = 0;
  }
  else
  {
    v19 = CTRPluginFramework::MenuFolderImpl::ItemsCount(v14);
    v20 = v19;
    if ( !v19 )
    {
      *(_DWORD *)(v2 + 28) = 0;
      CTRPluginFramework::Button::SetState((CTRPluginFramework::Button *)(v2 + 776), 0);
      CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 776), v20);
      CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 848), v20);
      CTRPluginFramework::Button::SetState((CTRPluginFramework::Button *)(v2 + 848), v20);
      CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 632), v20);
      CTRPluginFramework::Button::SetState((CTRPluginFramework::Button *)(v2 + 632), v20);
    }
  }
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v14);
  if ( result )
  {
    v28 = *(_DWORD *)(v2 + 24);
    result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v14);
    if ( v28 < result )
    {
      v29 = *(_DWORD *)(*((_DWORD *)v14 + 20) + 4 * *(_DWORD *)(v2 + 24));
      result = CTRPluginFramework::Button::SetState(
                 (CTRPluginFramework::Button *)(v2 + 776),
                 (*(_BYTE *)(v29 + 56) >> 5) & 1);
      if ( CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::last != v29 )
      {
        if ( *(_BYTE *)(v29 + 57) == 1 )
          v30 = *(_DWORD *)(v29 + 72) != 0;
        else
          v30 = 0;
        CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 632), v30);
        v31 = *(_DWORD *)v29;
        CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::last = v29;
        v32 = *(_DWORD *)((*(int (__fastcall **)(int))(v31 + 8))(v29) + 4);
        if ( v32 )
        {
          v33 = (*(int (__fastcall **)(int))(*(_DWORD *)v29 + 8))(v29);
          CTRPluginFramework::TextBox::Update(v2 + 80, v29 + 4, v33);
          LOBYTE(v32) = 1;
        }
        result = CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 848), v32);
      }
    }
  }
  return result;
}
// 1: using guessed type char CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework;
// 10: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::fastScroll;
// 20: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::inputClock;
// 30: using guessed type int CTRPluginFramework::PluginMenuHome::_ProcessEvent(CTRPluginFramework::Event &)::last;
// 1DF0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 1DF4: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 1E10: using guessed type int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD);

//----- (000010CC) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick(CTRPluginFramework::PluginMenuHome *this, int a2)
{
  float v2; // s0
  int v3; // r2
  int v4; // r3
  int v5; // r3
  CTRPluginFramework::MenuFolderImpl *v6; // r5
  CTRPluginFramework::PluginMenuHome *v7; // r4
  int result; // r0
  int v9; // r5
  const char *v10; // r1
  signed int v11; // s0
  CTRPluginFramework::PluginMenuHome *v12; // [sp+0h] [bp-20h]
  int v13; // [sp+4h] [bp-1Ch]

  v12 = this;
  v13 = a2;
  v3 = CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick(void)::bak;
  CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick(void)::bak = *((_DWORD *)this + 6);
  v4 = *((unsigned __int8 *)this + 20);
  *((_DWORD *)this + 6) = v3;
  v5 = v4 ^ 1;
  v6 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 2);
  if ( !v5 )
    v6 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 1);
  v7 = this;
  *((_BYTE *)this + 20) = v5;
  if ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v6) )
  {
    v9 = *(_DWORD *)(*((_DWORD *)v6 + 20) + 4 * *((_DWORD *)v7 + 6));
    CTRPluginFramework::Button::Enable(
      (CTRPluginFramework::PluginMenuHome *)((char *)v7 + 848),
      *(_DWORD *)(v9 + 32) != 0);
    CTRPluginFramework::Button::Enable(
      (CTRPluginFramework::PluginMenuHome *)((char *)v7 + 632),
      *(_DWORD *)(v9 + 72) != 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuHome *)((char *)v7 + 776), 1);
    CTRPluginFramework::Button::SetState(
      (CTRPluginFramework::PluginMenuHome *)((char *)v7 + 776),
      (*(_BYTE *)(v9 + 56) >> 5) & 1);
    CTRPluginFramework::Renderer::GetTextSize(*(CTRPluginFramework::Renderer **)(v9 + 4), v10);
    v11 = (signed int)v2;
    *((_DWORD *)v7 + 7) = v11;
    *((float *)v7 + 8) = (float)v11 - 200.0;
    result = CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v12);
    *((_DWORD *)v7 + 9) = 0;
    *((_BYTE *)v7 + 48) = 0;
  }
  else
  {
    CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuHome *)((char *)v7 + 848), 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuHome *)((char *)v7 + 776), 0);
    result = CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuHome *)((char *)v7 + 632), 0);
    *((_DWORD *)v7 + 7) = 0;
  }
  return result;
}
// 34: using guessed type int CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick(void)::bak;

//----- (000011E8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_controllerBtn_OnClick(int result)
{
  __int64 v1; // r2
  int v2; // r3
  CTRPluginFramework::MenuEntry *v3; // r4
  CTRPluginFramework::Hotkey *v4; // r0
  void (__fastcall *v5)(CTRPluginFramework::MenuEntry *, _DWORD); // r3

  v1 = *(_QWORD *)(result + 4);
  if ( !*(_BYTE *)(result + 20) )
    HIDWORD(v1) = v1;
  v2 = *(_DWORD *)(*(_DWORD *)(HIDWORD(v1) + 80) + 4 * *(_DWORD *)(result + 24));
  v3 = *(CTRPluginFramework::MenuEntry **)(v2 + 108);
  if ( v3 )
  {
    if ( CTRPluginFramework::HotkeyManager::Count(*(CTRPluginFramework::HotkeyManager **)(v2 + 108)) == 1 )
    {
      v4 = (CTRPluginFramework::Hotkey *)CTRPluginFramework::HotkeyManager::operator[](v3, 0);
      CTRPluginFramework::Hotkey::AskForKeys(v4);
      v5 = (void (__fastcall *)(CTRPluginFramework::MenuEntry *, _DWORD))*((_DWORD *)v3 + 1);
      if ( v5 )
        v5(v3, 0);
      result = CTRPluginFramework::MenuEntry::RefreshNote(v3);
    }
    else
    {
      result = CTRPluginFramework::HotkeyManager::Count(v3);
      if ( result )
        result = CTRPluginFramework::HotkeyManager::AskForKeys(v3);
    }
  }
  return result;
}
// 1E18: using guessed type int __fastcall CTRPluginFramework::HotkeyManager::operator[](_DWORD, _DWORD);

//----- (00001274) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_keyboardBtn_OnClick(CTRPluginFramework::PluginMenuHome *this)
{
  int v1; // r1
  int v2; // r0
  int result; // r0
  int (__fastcall *v4)(_DWORD); // r3

  v1 = *((_DWORD *)this + 6);
  if ( *((_BYTE *)this + 20) )
    v2 = *((_DWORD *)this + 2);
  else
    v2 = *((_DWORD *)this + 1);
  result = CTRPluginFramework::MenuFolderImpl::operator[](v2, v1);
  v4 = *(int (__fastcall **)(_DWORD))(result + 72);
  if ( v4 )
    result = v4(*(_DWORD *)(result + 108));
  return result;
}
// 1D40: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);

//----- (000012B0) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_actionReplayBtn_OnClick(int result)
{
  *(_DWORD *)(result + 16) = 4;
  return result;
}

//----- (000012BC) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_gameGuideBtn_OnClick(int result)
{
  *(_DWORD *)(result + 16) = 2;
  return result;
}

//----- (000012C8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_searchBtn_OnClick(int result)
{
  *(_DWORD *)(result + 16) = 3;
  return result;
}

//----- (000012D4) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_toolsBtn_OnClick(int result)
{
  *(_DWORD *)(result + 16) = 5;
  return result;
}

//----- (000012E0) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_InfoBtn_OnClick(CTRPluginFramework::PluginMenuHome *this)
{
  CTRPluginFramework::TextBox *v1; // r4
  int result; // r0

  v1 = (CTRPluginFramework::PluginMenuHome *)((char *)this + 80);
  if ( CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::PluginMenuHome *)((char *)this + 80)) )
    result = CTRPluginFramework::TextBox::Close(v1);
  else
    result = CTRPluginFramework::TextBox::Open(v1);
  return result;
}

//----- (0000130C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::UnStar(int result, CTRPluginFramework::MenuItem *a2)
{
  CTRPluginFramework::MenuFolderImpl *v2; // r6
  CTRPluginFramework::MenuItem *v3; // r5
  int v4; // r4
  int v5; // r2
  int i; // r3
  int v7; // r3
  int v8; // r2
  unsigned int v9; // r5
  int v10; // r0
  int v11; // r7
  CTRPluginFramework::MenuItem **v12; // r0
  char *v13; // r2

  v2 = *(CTRPluginFramework::MenuFolderImpl **)(result + 8);
  if ( !*(_BYTE *)(result + 20) )
    v2 = *(CTRPluginFramework::MenuFolderImpl **)(result + 4);
  v3 = a2;
  if ( a2 )
  {
    v4 = result;
    *((_BYTE *)a2 + 56) &= 0xDFu;
    v5 = CTRPluginFramework::MenuFolderImpl::ItemsCount(*(CTRPluginFramework::MenuFolderImpl **)(result + 12));
    if ( v5 == 1 )
    {
      v7 = *(_DWORD *)(v4 + 12);
      v8 = *(_DWORD *)(v7 + 80);
      if ( v8 != *(_DWORD *)(v7 + 84) )
        *(_DWORD *)(v7 + 84) = v8;
    }
    else
    {
      for ( i = 0; i < v5; ++i )
      {
        v11 = *(_DWORD *)(v4 + 12);
        v12 = (CTRPluginFramework::MenuItem **)(*(_DWORD *)(v11 + 80) + 4 * i);
        if ( v3 == *v12 )
        {
          v13 = *(char **)(v11 + 84);
          if ( v12 + 1 != (CTRPluginFramework::MenuItem **)v13 )
            memmove(v12, v12 + 1, v13 - (char *)(v12 + 1));
          *(_DWORD *)(v11 + 84) -= 4;
          break;
        }
      }
    }
    v9 = *(_DWORD *)(v4 + 24);
    result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v2);
    if ( v9 >= result )
    {
      v10 = CTRPluginFramework::MenuFolderImpl::ItemsCount(v2);
      result = (v10 - 1) & ~((v10 - 1) >> 31);
      *(_DWORD *)(v4 + 24) = result;
    }
  }
  return result;
}

//----- (000013DC) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::PluginMenuHome::_StarItem(CTRPluginFramework::PluginMenuHome *this)
{
  CTRPluginFramework::MenuFolderImpl *v1; // r5
  unsigned int v2; // r6
  CTRPluginFramework::PluginMenuHome *v3; // r4
  unsigned int result; // r0
  CTRPluginFramework::MenuItem *v5; // r1
  bool v6; // zf

  v1 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 2);
  if ( !*((_BYTE *)this + 20) )
    v1 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 1);
  v2 = *((_DWORD *)this + 6);
  v3 = this;
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v1);
  if ( v2 < result )
  {
    v5 = *(CTRPluginFramework::MenuItem **)(*((_DWORD *)v1 + 20) + 4 * *((_DWORD *)v3 + 6));
    if ( v5 )
    {
      v6 = ((*((_BYTE *)v5 + 56) >> 5) & 1) == 1;
      *((_BYTE *)v5 + 56) = *((_BYTE *)v5 + 56) & 0xDF | 32 * ((*((_BYTE *)v5 + 56) >> 5) & 1 ^ 1);
      if ( v6 )
        result = CTRPluginFramework::PluginMenuHome::UnStar((int)v3, v5);
      else
        result = CTRPluginFramework::MenuFolderImpl::Append(*((CTRPluginFramework::MenuFolderImpl **)v3 + 3), v5, 1);
    }
  }
  return result;
}
// 1DAC: using guessed type _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::Append(CTRPluginFramework::MenuFolderImpl *__hidden this, CTRPluginFramework::MenuItem *, bool);

//----- (0000145C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::Init(CTRPluginFramework::PluginMenuHome *this)
{
  CTRPluginFramework::MenuFolderImpl *v1; // r6
  CTRPluginFramework::PluginMenuHome *v2; // r5
  int *v3; // r3
  int v4; // r4
  int v5; // r0
  bool v6; // r1
  CTRPluginFramework::Button *v7; // r5
  bool v8; // r1

  v1 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 2);
  if ( !*((_BYTE *)this + 20) )
    v1 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)this + 1);
  v2 = this;
  v4 = CTRPluginFramework::MenuFolderImpl::ItemsCount(v1);
  if ( v4 )
    v3 = (int *)*((_DWORD *)v1 + 20);
  if ( v4 )
    v4 = *v3;
  v5 = CTRPluginFramework::MenuFolderImpl::ItemsCount(v1);
  v6 = v5;
  if ( v5 )
    v6 = 1;
  CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuHome *)((char *)v2 + 776), v6);
  v7 = (CTRPluginFramework::PluginMenuHome *)((char *)v2 + 848);
  if ( v4 )
    v8 = *(_DWORD *)((*(int (__fastcall **)(int))(*(_DWORD *)v4 + 8))(v4) + 4) != 0;
  else
    v8 = 0;
  return CTRPluginFramework::Button::Enable(v7, v8);
}

//----- (000014D8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::AddPluginVersion(CTRPluginFramework::PluginMenuHome *this, unsigned int a2)
{
  float v2; // s0
  CTRPluginFramework::PluginMenuHome *v3; // r4
  const char *v4; // r1
  int result; // r0
  char s; // [sp+Ch] [bp-6Ch]

  v3 = this;
  sprintf(&s, "[%d.%d.%d]", (unsigned __int8)a2, BYTE1(a2), a2 >> 16);
  *((_DWORD *)v3 + 15) = 0;
  **((_BYTE **)v3 + 14) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=((char *)v3 + 56, &s);
  result = CTRPluginFramework::Renderer::GetTextSize((CTRPluginFramework::Renderer *)&s, v4);
  *((_BYTE *)v3 + 49) = 1;
  *((_DWORD *)v3 + 13) = (signed int)(float)(360.0 - (float)(v2 + 1.0));
  return result;
}
// 1E3C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (0000155C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::Close(int result, CTRPluginFramework::MenuFolderImpl *a2)
{
  CTRPluginFramework::MenuFolderImpl *v2; // r5
  _DWORD *v3; // r4

  if ( *(CTRPluginFramework::MenuFolderImpl **)result != a2 )
  {
    v2 = a2;
    v3 = (_DWORD *)result;
    if ( *(CTRPluginFramework::MenuFolderImpl **)(result + 4) == a2 )
    {
      result = CTRPluginFramework::MenuFolderImpl::_Close(a2, (int *)(result + 24), 0);
      v3[1] = result;
    }
    if ( (CTRPluginFramework::MenuFolderImpl *)v3[2] == v2 )
    {
      result = CTRPluginFramework::MenuFolderImpl::_Close(v2, v3 + 6, 1);
      v3[2] = result;
    }
  }
  return result;
}

//----- (000015B8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::{lambda(void *)#1}::_FUN(int a1)
{
  int v1; // r4

  v1 = a1;
  CTRPluginFramework::Renderer::SetTarget(1);
  if ( CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::TextBox *)(v1 + 80)) )
    CTRPluginFramework::TextBox::Draw((CTRPluginFramework::TextBox *)(v1 + 80));
  else
    CTRPluginFramework::PluginMenuHome::_RenderTop((CTRPluginFramework::PluginMenuHome *)v1);
  return 0;
}
// 1E40: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);

//----- (000015F8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_RenderBottom(__int64 this, int a2, int a3)
{
  int v3; // r4
  signed int v4; // r1
  int v5; // r0
  float v6; // r1
  Time v7; // r1
  __int64 v9; // [sp+0h] [bp-20h]
  int v10; // [sp+8h] [bp-18h]
  int v11; // [sp+Ch] [bp-14h]

  v9 = this;
  v10 = a2;
  v11 = a3;
  v3 = this;
  __mcr(15, 0, this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock) )
  {
    CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock);
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock);
  }
  CTRPluginFramework::Renderer::SetTarget(0);
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  v11 = 205;
  if ( CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework )
  {
    v4 = 100;
    v5 = CTRPluginFramework::g_ctrpfString;
  }
  else
  {
    v4 = 124;
    v5 = CTRPluginFramework::g_bymeString;
  }
  CTRPluginFramework::Renderer::DrawString(v5, v4, &v11, CTRPluginFramework::Color::White, v9, HIDWORD(v9), v10, v11);
  CTRPluginFramework::Seconds((CTRPluginFramework *)&v9, v6);
  if ( CTRPluginFramework::Clock::HasTimePassed(
         (CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock,
         v7) )
  {
    CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v9);
    CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework ^= 1u;
  }
  v11 = 35;
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 200));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 272));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 344));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 416));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 488));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 560));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 776));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 848));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 632));
  return CTRPluginFramework::Button::Draw((CTRPluginFramework::Button *)(v3 + 704));
}
// 1: using guessed type char CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::framework;
// 8: using guessed type int CTRPluginFramework::g_ctrpfString;
// C: using guessed type int CTRPluginFramework::g_bymeString;
// 38: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuHome::_RenderBottom(void)::creditClock;
// 1DF0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 1DF4: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 1E40: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 1E48: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001728) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::_Update(int a1, float a2, __int64 a3)
{
  int v3; // r4
  CTRPluginFramework::Clock *v4; // r5
  Time v5; // r1
  CTRPluginFramework::MenuFolderImpl *v6; // r5
  char v7; // r3
  float v8; // s15
  int v9; // r10
  int v10; // r1
  int v11; // r5
  CTRPluginFramework::Touch *v12; // r0
  CTRPluginFramework::MenuItem *v13; // r5
  int v14; // r11
  CTRPluginFramework::HotkeyManager *v15; // r0
  bool v16; // r1
  int v17; // r0
  int v18; // r0
  int v19; // r5
  __int64 v21; // [sp+0h] [bp-48h]
  __int64 v22; // [sp+8h] [bp-40h]
  int v23; // [sp+10h] [bp-38h]
  int v24; // [sp+14h] [bp-34h]
  int v25; // [sp+18h] [bp-30h]
  int v26; // [sp+1Ch] [bp-2Ch]

  v22 = a3;
  v3 = a1;
  if ( *(_DWORD *)(a1 + 28) >= 280 )
  {
    v4 = (CTRPluginFramework::Clock *)(a1 + 40);
    CTRPluginFramework::Seconds((CTRPluginFramework *)&v21, a2);
    if ( CTRPluginFramework::Clock::HasTimePassed(v4, v5) )
    {
      if ( *(_BYTE *)(v3 + 48) || *(float *)(v3 + 36) >= *(float *)(v3 + 32) )
      {
        CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)&v22);
        v8 = (float)-(float)(2.0 * 55.0) - *(float *)(v3 + 36);
        if ( v8 > 0.0 )
          v7 = 1;
        *(float *)(v3 + 36) = v8;
        if ( v8 <= 0.0 )
        {
          *(_BYTE *)(v3 + 48) = 0;
          *(_DWORD *)(v3 + 36) = 0;
          CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v21);
        }
        else
        {
          *(_BYTE *)(v3 + 48) = v7;
        }
      }
      else
      {
        CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)&v22);
        *(float *)(v3 + 36) = *(float *)(v3 + 36) + (float)(2.0 * 29.0);
      }
    }
  }
  v6 = *(CTRPluginFramework::MenuFolderImpl **)(v3 + 8);
  if ( !*(_BYTE *)(v3 + 20) )
    v6 = *(CTRPluginFramework::MenuFolderImpl **)(v3 + 4);
  if ( !CTRPluginFramework::MenuFolderImpl::ItemsCount(v6) )
    goto LABEL_28;
  v9 = *(unsigned __int8 *)(CTRPluginFramework::MenuFolderImpl::operator[](v6, *(_DWORD *)(v3 + 24)) + 57);
  v10 = *(_DWORD *)(v3 + 24);
  if ( !v9 )
  {
    v11 = CTRPluginFramework::MenuFolderImpl::operator[](v6, v10);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 632), 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 848), *(_DWORD *)(v11 + 32) != 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 776), 1);
    CTRPluginFramework::Button::SetState((CTRPluginFramework::Button *)(v3 + 776), (*(_BYTE *)(v11 + 56) >> 5) & 1);
    goto LABEL_17;
  }
  if ( *(_BYTE *)(CTRPluginFramework::MenuFolderImpl::operator[](v6, v10) + 57) != 1 )
  {
LABEL_28:
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 776), 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 848), 0);
    CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 632), 0);
LABEL_17:
    v12 = (CTRPluginFramework::Touch *)CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 704), 0);
    goto LABEL_25;
  }
  v13 = (CTRPluginFramework::MenuItem *)CTRPluginFramework::MenuFolderImpl::operator[](v6, *(_DWORD *)(v3 + 24));
  v14 = (*(int (**)(void))(*(_DWORD *)v13 + 8))();
  CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 632), *((_DWORD *)v13 + 18) != 0);
  CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 848), *(_DWORD *)(v14 + 4) != 0);
  CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 776), 1);
  CTRPluginFramework::Button::SetState((CTRPluginFramework::Button *)(v3 + 776), (*((_BYTE *)v13 + 56) >> 5) & 1);
  v15 = (CTRPluginFramework::HotkeyManager *)*((_DWORD *)v13 + 27);
  if ( v15 )
  {
    v17 = CTRPluginFramework::HotkeyManager::Count(v15);
    v16 = v17;
    if ( v17 )
      v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v3 + 704), v16);
  v12 = (CTRPluginFramework::Touch *)CTRPluginFramework::MenuItem::HasNoteChanged(v13);
  if ( v12 )
  {
    v18 = (*(int (__fastcall **)(CTRPluginFramework::MenuItem *))(*(_DWORD *)v13 + 8))(v13);
    CTRPluginFramework::TextBox::Update(v3 + 80, (char *)v13 + 4, v18);
    v12 = (CTRPluginFramework::Touch *)CTRPluginFramework::MenuItem::HandledNoteChanges(v13);
  }
LABEL_25:
  v19 = CTRPluginFramework::Touch::IsDown(v12);
  CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v25);
  v23 = v25;
  v24 = v26;
  CTRPluginFramework::Button::Update(v3 + 200, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 344, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 416, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 488, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 560, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 776, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 848, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 632, v19, &v23);
  CTRPluginFramework::Button::Update(v3 + 704, v19, &v23);
  return CTRPluginFramework::Window::Update(&CTRPluginFramework::Window::BottomWindow, v19, &v23);
}
// 1D40: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);
// 1E10: using guessed type int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD);
// 1E70: using guessed type int __fastcall CTRPluginFramework::Button::Update(_DWORD, _DWORD, _DWORD);
// 1E74: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);

//----- (00001A64) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuHome::operator()(unsigned int a1, _DWORD *a2, _DWORD *a3, __int64 *a4)
{
  __int64 *v4; // r8
  _DWORD *v5; // r4
  _DWORD *v6; // r5
  _DWORD *v7; // r6
  unsigned int v8; // r9
  unsigned int i; // r9
  int v10; // r1
  int v11; // r0
  signed int v12; // r3
  int v13; // r0
  signed int v14; // r3
  int v15; // r0
  signed int v16; // r3
  int v17; // r0
  signed int v18; // r3
  float v19; // r1
  __int64 v20; // r0
  int v21; // r2
  int v22; // r3
  __int64 v24; // r0

  v4 = a4;
  v5 = (_DWORD *)a1;
  v6 = a2;
  v7 = a3;
  __mcr(15, 0, a1, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top) )
  {
    CTRPluginFramework::Task::Task(
      (CTRPluginFramework::Task *)&CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top,
      (int (__cdecl *)(void *))CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::{lambda(void *)#1}::_FUN,
      v5,
      5);
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top);
    _aeabi_atexit(
      &CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top,
      &CTRPluginFramework::Task::~Task,
      &_dso_handle);
  }
  v5[4] = *v7;
  v8 = CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::TextBox *)(v5 + 20));
  if ( v8 )
  {
    for ( i = 0; -1431655765 * ((v6[1] - *v6) >> 2) > i; ++i )
    {
      if ( !CTRPluginFramework::TextBox::ProcessEvent((CTRPluginFramework::TextBox *)(v5 + 20), (Event *)(*v6 + 12 * i)) )
      {
        CTRPluginFramework::Button::SetState((CTRPluginFramework::Button *)(v5 + 212), 0);
        break;
      }
    }
  }
  else
  {
    while ( -1431655765 * ((v6[1] - *v6) >> 2) > v8 )
    {
      HIDWORD(v24) = *v6 + 12 * v8;
      LODWORD(v24) = v5;
      CTRPluginFramework::PluginMenuHome::_ProcessEvent(v24);
      ++v8;
    }
  }
  if ( CTRPluginFramework::Button::operator()(v5 + 50) )
    CTRPluginFramework::PluginMenuHome::_showStarredBtn_OnClick((CTRPluginFramework::PluginMenuHome *)v5, v10);
  v11 = CTRPluginFramework::Button::operator()(v5 + 86);
  if ( v11 )
    v12 = 2;
  if ( v11 )
    v5[4] = v12;
  v13 = CTRPluginFramework::Button::operator()(v5 + 104);
  if ( v13 )
    v14 = 3;
  if ( v13 )
    v5[4] = v14;
  v15 = CTRPluginFramework::Button::operator()(v5 + 122);
  if ( v15 )
    v16 = 4;
  if ( v15 )
    v5[4] = v16;
  v17 = CTRPluginFramework::Button::operator()(v5 + 140);
  if ( v17 )
    v18 = 5;
  if ( v17 )
    v5[4] = v18;
  if ( CTRPluginFramework::Button::operator()(v5 + 194) )
    CTRPluginFramework::PluginMenuHome::_StarItem((CTRPluginFramework::PluginMenuHome *)v5);
  if ( CTRPluginFramework::Button::operator()(v5 + 212) )
    CTRPluginFramework::PluginMenuHome::_InfoBtn_OnClick((CTRPluginFramework::PluginMenuHome *)v5);
  if ( CTRPluginFramework::Button::operator()(v5 + 158) )
    CTRPluginFramework::PluginMenuHome::_keyboardBtn_OnClick((CTRPluginFramework::PluginMenuHome *)v5);
  if ( CTRPluginFramework::Button::operator()(v5 + 176) )
    CTRPluginFramework::PluginMenuHome::_controllerBtn_OnClick((int)v5);
  CTRPluginFramework::PluginMenuHome::_Update((int)v5, v19, *v4);
  CTRPluginFramework::Task::Start((CTRPluginFramework::Task *)&CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top);
  LODWORD(v20) = v5;
  CTRPluginFramework::PluginMenuHome::_RenderBottom(v20, v21, v22);
  CTRPluginFramework::Task::Wait((CTRPluginFramework::Task *)&CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top);
  *v7 = v5[4];
  return CTRPluginFramework::Window::MustClose((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
}
// 48: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuHome::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,int &,CTRPluginFramework::Time &)::top;
// 1DF0: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 1DF4: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 1E7C: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 1E84: using guessed type int __fastcall CTRPluginFramework::Button::operator()(_DWORD);
// 1E98: using guessed type _DWORD __cdecl CTRPluginFramework::Task::~Task(CTRPluginFramework::Task *__hidden this);

// ALL OK, 27 function(s) have been successfully decompiled
