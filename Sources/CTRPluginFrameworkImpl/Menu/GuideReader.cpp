/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this);
int __fastcall CTRPluginFramework::GuideReader::_LoadBMP(CTRPluginFramework::GuideReader *this);
int __fastcall CTRPluginFramework::GuideReader::Open(int result);
int __fastcall CTRPluginFramework::GuideReader::Close(int result);
int __fastcall CTRPluginFramework::GuideReader::IsOpen(CTRPluginFramework::GuideReader *this);
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1);
_QWORD *__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(_QWORD *result);
signed int __fastcall CTRPluginFramework::GuideReader::_ProcessEvent(int a1, Event *a2);
signed int __fastcall CTRPluginFramework::GuideReader::_ProcessEvent(CTRPluginFramework::GuideReader *this, Event *a2);
int __fastcall CTRPluginFramework::CreateFolder(int a1);
CTRPluginFramework::GuideReader *__fastcall CTRPluginFramework::GuideReader::GuideReader(CTRPluginFramework::GuideReader *this);
int __fastcall CTRPluginFramework::GuideReader::Draw(CTRPluginFramework::GuideReader *this);
int __fastcall CTRPluginFramework::GuideReader::operator()(CTRPluginFramework::GuideReader *this, _DWORD *a2);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::BMPImage::~BMPImage(CTRPluginFramework::BMPImage *__hidden this); idb
// void __cdecl operator delete(void *); idb
// int __fastcall ZNK18CTRPluginFramework9Directory11GetFullNameB5cxx11Ev(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int CTRPluginFramework::BMPImage::BMPImage(void); weak
// _DWORD __cdecl CTRPluginFramework::PostProcess(CTRPluginFramework *__hidden this, CTRPluginFramework::BMPImage *, int, int); idb
// _DWORD CTRPluginFramework::TextBox::IsOpen(CTRPluginFramework::TextBox *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::TextBox::ProcessEvent(CTRPluginFramework::TextBox *__hidden this, Event *); idb
// int __fastcall CTRPluginFramework::Menu::ProcessEvent(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Directory::Close(CTRPluginFramework::Directory *__hidden this); idb
// int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::GetSize(CTRPluginFramework::File *__hidden this); idb
// _DWORD CTRPluginFramework::File::IsOpen(CTRPluginFramework::File *__hidden this); idb
// _DWORD CTRPluginFramework::File::Rewind(CTRPluginFramework::File *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD); weak
// void *memset(void *s, int c, size_t n);
// _DWORD __cdecl CTRPluginFramework::File::Read(CTRPluginFramework::File *__hidden this, void *, unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::TextBox::Open(CTRPluginFramework::TextBox *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void); weak
// _DWORD CTRPluginFramework::Directory::Directory(CTRPluginFramework::Directory *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Directory::~Directory(CTRPluginFramework::Directory *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Directory::ListDirectories(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD); weak
// int CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(void); weak
// int __fastcall CTRPluginFramework::Menu::Menu(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::GetRect(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawFile(CTRPluginFramework::Icon *__hidden this, int, int); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// _DWORD CTRPluginFramework::TextBox::Draw(CTRPluginFramework::TextBox *__hidden this); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::BMPImage::IsLoaded(CTRPluginFramework::BMPImage *__hidden this); idb
// int __fastcall CTRPluginFramework::BMPImage::Draw(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// _DWORD CTRPluginFramework::Menu::Draw(CTRPluginFramework::Menu *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::MustClose(CTRPluginFramework::Window *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

char `guard variable for'CTRPluginFramework::GuideReader::Draw(void)::background; // weak
int CTRPluginFramework::GuideReader::Draw(void)::background; // weak
int dword_C; // weak
_UNKNOWN unk_10; // weak
_UNKNOWN loc_118; // weak
_UNKNOWN unk_C64; // weak
_UNKNOWN unk_C70; // weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::BlackGrey; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak


//----- (00000018) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// C84: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// C88: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000090) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this)
{
  CTRPluginFramework::File *v1; // r4

  v1 = this;
  CTRPluginFramework::File::Close(this);
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::File *)((char *)v1 + 48));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000000B4) --------------------------------------------------------
int __fastcall CTRPluginFramework::GuideReader::_LoadBMP(CTRPluginFramework::GuideReader *this)
{
  void *v1; // r5
  CTRPluginFramework::GuideReader *v2; // r4
  int v3; // r0
  int v4; // r0
  int v5; // r5
  int v6; // r3
  int result; // r0
  int v8; // [sp+0h] [bp-58h]
  char v9; // [sp+18h] [bp-40h]
  char v10; // [sp+30h] [bp-28h]

  v1 = (void *)*((_DWORD *)this + 103);
  v2 = this;
  if ( v1 )
  {
    CTRPluginFramework::BMPImage::~BMPImage(*((CTRPluginFramework::BMPImage **)this + 103));
    operator delete(v1);
  }
  ZNK18CTRPluginFramework9Directory11GetFullNameB5cxx11Ev(&v8, (char *)v2 + 340);
  v3 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v8, &unk_C64);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v9, v3);
  v4 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
         &v9,
         *((_DWORD *)v2 + 99) + 24 * *((_DWORD *)v2 + 102));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v10, v4);
  v5 = operator new(0x34u);
  CTRPluginFramework::BMPImage::BMPImage();
  *((_DWORD *)v2 + 103) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  result = CTRPluginFramework::PostProcess(
             *((CTRPluginFramework **)v2 + 103),
             (CTRPluginFramework::BMPImage *)&loc_118,
             200,
             v6);
  *((_DWORD *)v2 + 103) = result;
  return result;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// CA0: using guessed type int __fastcall ZNK18CTRPluginFramework9Directory11GetFullNameB5cxx11Ev(_DWORD, _DWORD);
// CA4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CA8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// CAC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CB4: using guessed type int CTRPluginFramework::BMPImage::BMPImage(void);

//----- (00000174) --------------------------------------------------------
int __fastcall CTRPluginFramework::GuideReader::Open(int result)
{
  *(_BYTE *)result = 1;
  return result;
}

//----- (00000180) --------------------------------------------------------
int __fastcall CTRPluginFramework::GuideReader::Close(int result)
{
  *(_BYTE *)result = 0;
  return result;
}

//----- (0000018C) --------------------------------------------------------
int __fastcall CTRPluginFramework::GuideReader::IsOpen(CTRPluginFramework::GuideReader *this)
{
  return *(unsigned __int8 *)this;
}

//----- (00000194) --------------------------------------------------------
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000001D0) --------------------------------------------------------
_QWORD *__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(_QWORD *result)
{
  __int64 v1; // r6
  _QWORD *v2; // r4
  int v3; // r5
  int v4; // r0

  v1 = *result;
  if ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = result;
    v3 = v1;
    do
    {
      v4 = v3;
      v3 += 24;
      result = (_QWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4);
    }
    while ( HIDWORD(v1) != v3 );
    *((_DWORD *)v2 + 1) = v1;
  }
  return result;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000204) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::GuideReader::_ProcessEvent(int a1, Event *a2)
{
  CTRPluginFramework::TextBox *v2; // r8
  int v3; // r9
  Event *v4; // r7
  int v5; // r4
  signed int v6; // r2
  TMLongCard v7; // r1
  int v8; // r2
  int v9; // r0
  void *v10; // r4
  int v11; // r1
  int v12; // r0
  int v13; // r4
  int v14; // r3
  int v15; // r6
  int v16; // r1
  int v17; // r0
  int v18; // r0
  int v19; // r1
  signed __int64 v20; // r10
  signed __int64 v22; // r0
  _BYTE *v23; // r2
  int v24; // r1
  bool v25; // zf
  signed __int64 v26; // r4
  unsigned int v27; // r11
  unsigned int v28; // r10
  bool v29; // zf
  int v30; // [sp+14h] [bp-10A4h]
  char v31; // [sp+18h] [bp-10A0h]
  char v32; // [sp+30h] [bp-1088h]
  char v33; // [sp+48h] [bp-1070h]
  char v34; // [sp+8Ch] [bp-102Ch]

  v2 = (CTRPluginFramework::TextBox *)(a1 + 192);
  v3 = a1;
  v4 = a2;
  v5 = CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::TextBox *)(a1 + 192));
  if ( v5 )
  {
    CTRPluginFramework::TextBox::ProcessEvent(v2, v4);
  }
  else
  {
    v30 = 0;
    v9 = CTRPluginFramework::Menu::ProcessEvent(v3 + 8, v4, &v30);
    switch ( v9 )
    {
      case -4:
        *(_BYTE *)v3 = 0;
        return v5;
      case -3:
        v10 = *(void **)(v3 + 412);
        if ( v10 )
        {
          CTRPluginFramework::BMPImage::~BMPImage(*(CTRPluginFramework::BMPImage **)(v3 + 412));
          operator delete(v10);
        }
        *(_DWORD *)(v3 + 408) = -1;
        *(_DWORD *)(v3 + 412) = 0;
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear((_QWORD *)(v3 + 396));
        CTRPluginFramework::Directory::Close((CTRPluginFramework::Directory *)(v3 + 340));
        if ( v30 )
        {
          if ( !CTRPluginFramework::Directory::Open(v3 + 340, v30 + 28, 0) )
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
              (int *)&v34,
              ".bmp");
            CTRPluginFramework::Directory::ListFiles(v3 + 340, v3 + 396, &v34);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v34);
            if ( *(_DWORD *)(v3 + 396) != *(_DWORD *)(v3 + 400) )
            {
              v11 = v30 + 28;
              *(_DWORD *)(v3 + 408) = 0;
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v33, v11);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v33, &unk_C64);
              v12 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
                      &v33,
                      *(_DWORD *)(v3 + 396));
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v34, v12);
              v13 = operator new(0x34u);
              CTRPluginFramework::BMPImage::BMPImage();
              *(_DWORD *)(v3 + 412) = v13;
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v34);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v33);
              *(_DWORD *)(v3 + 412) = CTRPluginFramework::PostProcess(
                                        *(CTRPluginFramework **)(v3 + 412),
                                        (CTRPluginFramework::BMPImage *)&loc_118,
                                        200,
                                        v14);
            }
          }
        }
        break;
      case -2:
        v15 = v30;
        if ( v30 == *(_DWORD *)(v3 + 336) )
        {
          CTRPluginFramework::TextBox::Open(v2);
        }
        else
        {
          v16 = v30 + 28;
          *(_DWORD *)(v3 + 336) = v30;
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v31, v16);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v31, &unk_C64);
          v17 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v31, v15 + 4);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v32, v17);
          v18 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v32, ".txt");
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v34, v18);
          CTRPluginFramework::File::File(&v33, &v34, 35);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v34);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v32);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v31);
          LODWORD(v20) = CTRPluginFramework::File::GetSize((CTRPluginFramework::File *)&v33);
          HIDWORD(v20) = v19;
          if ( !CTRPluginFramework::File::IsOpen((CTRPluginFramework::File *)&v33) )
          {
            CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v33);
            return v5;
          }
          LODWORD(v22) = CTRPluginFramework::File::Rewind((CTRPluginFramework::File *)&v33);
          v23 = *(_BYTE **)(v3 + 312);
          *(_DWORD *)(v3 + 316) = 0;
          *v23 = 0;
          v24 = *(_DWORD *)(v3 + 312);
          v25 = v24 == v3 + 320;
          if ( v24 == v3 + 320 )
            LODWORD(v22) = 15;
          HIDWORD(v22) = 0;
          if ( !v25 )
            LODWORD(v22) = *(_DWORD *)(v3 + 320);
          v26 = v20;
          if ( v22 < v20 )
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(v3 + 312, v20);
          while ( v26 )
          {
            memset(&v34, 0, 0x1001u);
            v27 = v26;
            if ( v26 > 4096 )
              v27 = 4096;
            v28 = HIDWORD(v26);
            if ( v26 > 4096 )
              v28 = 0;
            if ( !CTRPluginFramework::File::Read((CTRPluginFramework::File *)&v33, &v34, v27) )
            {
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v3 + 312, &v34);
              v26 -= __PAIR__(v28, v27);
            }
          }
          CTRPluginFramework::TextBox::Update(v2, v15 + 4, v3 + 312, 0);
          CTRPluginFramework::TextBox::Open(v2);
          CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v33);
        }
        break;
    }
  }
  v6 = *(_DWORD *)(v3 + 408);
  if ( v6 == -1 )
    return 1;
  if ( !LOBYTE(v4->modifiers) )
  {
    v7 = v4->modifierMask;
    if ( v7 == 512 )
    {
      if ( v6 <= 0 )
        return 1;
      v8 = v6 - 1;
LABEL_44:
      *(_DWORD *)(v3 + 408) = v8;
      CTRPluginFramework::GuideReader::_LoadBMP((CTRPluginFramework::GuideReader *)v3);
      return 1;
    }
    v29 = v7 == 256;
LABEL_40:
    if ( !v29 || v6 >= (unsigned int)(-1431655765 * ((*(_DWORD *)(v3 + 400) - *(_DWORD *)(v3 + 396)) >> 3) - 1) )
      return 1;
    v8 = v6 + 1;
    goto LABEL_44;
  }
  if ( LOBYTE(v4->modifiers) != 8 )
    return 1;
  v5 = LOBYTE(v4->modifierMask);
  if ( v5 != 1 )
  {
    v29 = v5 == 2;
    goto LABEL_40;
  }
  if ( v6 > 0 )
  {
    *(_DWORD *)(v3 + 408) = v6 - 1;
    CTRPluginFramework::GuideReader::_LoadBMP((CTRPluginFramework::GuideReader *)v3);
  }
  return v5;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// CA4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CA8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// CAC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CB4: using guessed type int CTRPluginFramework::BMPImage::BMPImage(void);
// CC4: using guessed type int __fastcall CTRPluginFramework::Menu::ProcessEvent(_DWORD, _DWORD, _DWORD);
// CCC: using guessed type int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD);
// CD0: using guessed type int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD);
// CD4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// CD8: using guessed type int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD);
// CE8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// CF4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// CF8: using guessed type int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000005FC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::GuideReader::_ProcessEvent(CTRPluginFramework::GuideReader *this, Event *a2)
{
  signed int result; // r0

  if ( *(_BYTE *)this )
    result = CTRPluginFramework::GuideReader::_ProcessEvent((int)this, a2);
  else
    result = *(unsigned __int8 *)this;
  return result;
}

//----- (00000614) --------------------------------------------------------
int __fastcall CTRPluginFramework::CreateFolder(int a1)
{
  int v1; // r6
  int v2; // r0
  int v3; // r5
  unsigned int v4; // r7
  unsigned int i; // r4
  int v7; // r0
  int v8; // r10
  int v9; // r10
  int v10; // r3
  int v11; // r10
  __int64 v12; // [sp+0h] [bp-B8h]
  int v13; // [sp+8h] [bp-B0h]
  int v14; // [sp+Ch] [bp-ACh]
  int v15; // [sp+10h] [bp-A8h]
  int v16; // [sp+14h] [bp-A4h]
  char v17; // [sp+18h] [bp-A0h]
  char v18; // [sp+30h] [bp-88h]
  char v19; // [sp+48h] [bp-70h]
  char v20; // [sp+60h] [bp-58h]

  v1 = a1;
  v2 = ((int (*)(void))std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind)();
  if ( v2 == -1 )
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v17, v1);
  else
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v17, v1, v2 + 1, -1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v20,
    (const char *)&unk_C70);
  v3 = operator new(0x64u);
  CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v20);
  CTRPluginFramework::Directory::Directory((CTRPluginFramework::Directory *)&v20);
  v12 = 0LL;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v4 = CTRPluginFramework::Directory::Open(&v20, v1, 0);
  if ( v4 )
  {
    (*(void (__fastcall **)(int))(*(_DWORD *)v3 + 4))(v3);
    v3 = 0;
  }
  else
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v3 + 28, v1);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v19,
      (const char *)&unk_C70);
    CTRPluginFramework::Directory::ListDirectories(&v20, &v12, &v19);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v19);
    if ( HIDWORD(v12) != (_DWORD)v12 )
    {
      for ( i = 0; -1431655765 * ((HIDWORD(v12) - (signed int)v12) >> 3) > i; ++i )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v18, v1);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v18, &unk_C64);
        v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v18, v12 + 24 * i);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v19, v7);
        v8 = CTRPluginFramework::CreateFolder(&v19);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v19);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v18);
        if ( v8 )
          CTRPluginFramework::MenuFolderImpl::Append(v3, v8, 0);
      }
    }
    std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(&v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v19, ".txt");
    CTRPluginFramework::Directory::ListFiles(&v20, &v14, &v19);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v19);
    if ( v15 != v14 )
    {
      while ( v4 < -1431655765 * ((v15 - v14) >> 3) )
      {
        v9 = 24 * v4;
        v10 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind(
                v14 + 24 * v4,
                ".txt",
                -1);
        if ( v10 == -1 )
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v19, v14 + v9);
        else
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v19, v14 + v9, 0, v10);
        v11 = operator new(0x78u);
        CTRPluginFramework::MenuEntryImpl::MenuEntryImpl();
        CTRPluginFramework::MenuFolderImpl::Append(v3, v11, 0);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v19);
        ++v4;
      }
    }
    CTRPluginFramework::Directory::Close((CTRPluginFramework::Directory *)&v20);
  }
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v14);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v12);
  CTRPluginFramework::Directory::~Directory((CTRPluginFramework::Directory *)&v20);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v17);
  return v3;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// CA4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CA8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// CAC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CCC: using guessed type int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD);
// CD0: using guessed type int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD);
// CD4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// D00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::rfind(_DWORD, _DWORD, _DWORD);
// D04: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD);
// D08: using guessed type int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void);
// D14: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// D18: using guessed type int __fastcall CTRPluginFramework::Directory::ListDirectories(_DWORD, _DWORD, _DWORD);
// D1C: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD);
// D20: using guessed type int CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(void);

//----- (000008D8) --------------------------------------------------------
CTRPluginFramework::GuideReader *__fastcall CTRPluginFramework::GuideReader::GuideReader(CTRPluginFramework::GuideReader *this)
{
  CTRPluginFramework::GuideReader *v1; // r4
  char *v2; // r6
  int v3; // r0
  int v4; // r0
  int v5; // r5
  int v6; // r6
  int v7; // r5
  int v8; // r3
  int v10; // [sp+0h] [bp-40h]
  char *v11; // [sp+18h] [bp-28h]
  int v12; // [sp+1Ch] [bp-24h]
  char v13; // [sp+20h] [bp-20h]

  v1 = this;
  *(_BYTE *)this = 0;
  v2 = (char *)this + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v11, "Guide");
  v3 = CTRPluginFramework::CreateFolder((int)&v11);
  CTRPluginFramework::Menu::Menu(v2, v3, &CTRPluginFramework::Icon::DrawFile);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    &v10,
    (const char *)&unk_C70);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v11,
    (const char *)&unk_C70);
  v4 = CTRPluginFramework::Window::GetRect((CTRPluginFramework::Window *)&CTRPluginFramework::Window::TopWindow);
  CTRPluginFramework::TextBox::TextBox((char *)v1 + 192, &v10, &v11, v4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)v1 + 78,
    (const char *)&unk_C70);
  *((_DWORD *)v1 + 84) = 0;
  CTRPluginFramework::Directory::Directory((CTRPluginFramework::GuideReader *)((char *)v1 + 340));
  *((_DWORD *)v1 + 99) = 0;
  *((_DWORD *)v1 + 100) = 0;
  *((_DWORD *)v1 + 101) = 0;
  *(_BYTE *)v1 = 0;
  *((_DWORD *)v1 + 103) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v11, "Guide");
  v5 = CTRPluginFramework::Directory::Open((char *)v1 + 340, &v11, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  if ( v5
    || (std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v11, ".bmp"),
        CTRPluginFramework::Directory::ListFiles((char *)v1 + 340, (char *)v1 + 396, &v11),
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11),
        v6 = *((_DWORD *)v1 + 99),
        *((_DWORD *)v1 + 100) == v6) )
  {
    *((_DWORD *)v1 + 102) = -1;
  }
  else
  {
    v11 = &v13;
    *((_DWORD *)v1 + 102) = 0;
    v12 = 0;
    v13 = 0;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(&v11, *(_DWORD *)(v6 + 4) + 6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v11, "Guide/", 6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v11, v6);
    v7 = operator new(0x34u);
    CTRPluginFramework::BMPImage::BMPImage();
    *((_DWORD *)v1 + 103) = v7;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
    *((_DWORD *)v1 + 103) = CTRPluginFramework::PostProcess(
                              *((CTRPluginFramework **)v1 + 103),
                              (CTRPluginFramework::BMPImage *)&loc_118,
                              200,
                              v8);
  }
  return v1;
}
// C94: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// CAC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// CB4: using guessed type int CTRPluginFramework::BMPImage::BMPImage(void);
// CCC: using guessed type int __fastcall CTRPluginFramework::Directory::Open(_DWORD, _DWORD, _DWORD);
// CD0: using guessed type int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD);
// CE8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// D24: using guessed type int __fastcall CTRPluginFramework::Menu::Menu(_DWORD, _DWORD, _DWORD);
// D2C: using guessed type int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD);
// D30: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD);
// D34: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawFile(CTRPluginFramework::Icon *__hidden this, int, int);

//----- (00000A98) --------------------------------------------------------
int __fastcall CTRPluginFramework::GuideReader::Draw(CTRPluginFramework::GuideReader *this)
{
  int v1; // r6
  CTRPluginFramework::GuideReader *v2; // r4
  CTRPluginFramework::BMPImage *v3; // r0
  CTRPluginFramework::Touch *v4; // r0
  int v5; // r4
  int v7; // [sp+10h] [bp-20h]
  int v8; // [sp+14h] [bp-1Ch]
  int v9; // [sp+18h] [bp-18h]
  int v10; // [sp+1Ch] [bp-14h]

  v1 = *(unsigned __int8 *)this;
  if ( *(_BYTE *)this )
  {
    v2 = this;
    CTRPluginFramework::Renderer::SetTarget(1);
    if ( CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::GuideReader *)((char *)v2 + 192)) )
      CTRPluginFramework::TextBox::Draw((CTRPluginFramework::GuideReader *)((char *)v2 + 192));
    else
      CTRPluginFramework::Menu::Draw((CTRPluginFramework::GuideReader *)((char *)v2 + 8));
    __mcr(15, 0, CTRPluginFramework::Renderer::SetTarget(0), 7, 10, 5);
    if ( !(`guard variable for'CTRPluginFramework::GuideReader::Draw(void)::background & 1)
      && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::GuideReader::Draw(void)::background) )
    {
      unk_10 = 858993459480LL;
      CTRPluginFramework::GuideReader::Draw(void)::background = 20;
      dword_C = 20;
      _cxa_guard_release(&`guard variable for'CTRPluginFramework::GuideReader::Draw(void)::background, 200);
    }
    v3 = (CTRPluginFramework::BMPImage *)*((_DWORD *)v2 + 103);
    if ( v3 && CTRPluginFramework::BMPImage::IsLoaded(v3) )
    {
      v4 = (CTRPluginFramework::Touch *)CTRPluginFramework::BMPImage::Draw(
                                          *((_DWORD *)v2 + 103),
                                          &CTRPluginFramework::GuideReader::Draw(void)::background);
    }
    else
    {
      CTRPluginFramework::Renderer::DrawRect2(
        &CTRPluginFramework::GuideReader::Draw(void)::background,
        &CTRPluginFramework::Color::Black,
        &CTRPluginFramework::Color::BlackGrey);
      v4 = (CTRPluginFramework::Touch *)CTRPluginFramework::Renderer::DrawRect(
                                          22,
                                          22,
                                          276,
                                          196,
                                          &CTRPluginFramework::Color::White,
                                          0,
                                          1);
    }
    v5 = CTRPluginFramework::Touch::IsDown(v4);
    CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v9);
    v7 = v9;
    v8 = v10;
    CTRPluginFramework::Window::Update(&CTRPluginFramework::Window::BottomWindow, v5, &v7);
    CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  }
  return v1;
}
// 4: using guessed type char `guard variable for'CTRPluginFramework::GuideReader::Draw(void)::background;
// 8: using guessed type int CTRPluginFramework::GuideReader::Draw(void)::background;
// C: using guessed type int dword_C;
// D3C: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// D44: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// D48: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);
// D50: using guessed type int __fastcall CTRPluginFramework::BMPImage::Draw(_DWORD, _DWORD);
// D5C: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);
// D68: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD, _DWORD);
// D6C: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000BF0) --------------------------------------------------------
int __fastcall CTRPluginFramework::GuideReader::operator()(CTRPluginFramework::GuideReader *this, _DWORD *a2)
{
  CTRPluginFramework::GuideReader *v2; // r4
  _DWORD *v3; // r6
  unsigned int v4; // r5
  int result; // r0

  v2 = this;
  v3 = a2;
  v4 = 0;
  *(_BYTE *)this = 1;
  while ( -1431655765 * ((v3[1] - *v3) >> 2) > v4 )
    CTRPluginFramework::GuideReader::_ProcessEvent(v2, (Event *)(*v3 + 12 * v4++));
  CTRPluginFramework::GuideReader::Draw(v2);
  result = CTRPluginFramework::Window::MustClose((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  if ( !result )
    result = *(unsigned __int8 *)v2 ^ 1;
  return result;
}

// ALL OK, 14 function(s) have been successfully decompiled
