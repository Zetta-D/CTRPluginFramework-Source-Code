/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall ZN18CTRPluginFramework8MenuItem7GetNoteB5cxx11Ev(int a1);
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this);
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this);
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl(CTRPluginFramework::MenuFolderImpl *this, CTRPluginFramework::MenuFolderImpl *a2);
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl(CTRPluginFramework::MenuFolderImpl *this, CTRPluginFramework::MenuFolderImpl *a2);
_DWORD *__fastcall CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(int a1);
_DWORD *__fastcall CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(int a1, int a2);
int __fastcall CTRPluginFramework::MenuFolderImpl::ItemsCount(CTRPluginFramework::MenuFolderImpl *this);
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::GetItem(CTRPluginFramework::MenuFolderImpl *this, unsigned int a2);
int __fastcall CTRPluginFramework::MenuFolderImpl::DisableAll(int result);
int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](int a1, unsigned int a2);
bool __fastcall CTRPluginFramework::MenuFolderImpl::HasParent(CTRPluginFramework::MenuFolderImpl *this);
void __fastcall CTRPluginFramework::MenuFolderImpl::Clear(CTRPluginFramework::MenuFolderImpl *this);
int __fastcall CTRPluginFramework::MenuFolderImpl::_Open(int result, CTRPluginFramework::MenuFolderImpl *a2, int a3, int a4);
int __fastcall CTRPluginFramework::MenuFolderImpl::_Close(CTRPluginFramework::MenuFolderImpl *this, int *a2, int a3);
void __fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_realloc_insert<CTRPluginFramework::MenuItem * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::MenuFolderImpl::Append(CTRPluginFramework::MenuFolderImpl *this, CTRPluginFramework::MenuItem *a2, int a3);
void __fastcall std::vector<CTRPluginFramework::MenuEntry *,std::allocator<CTRPluginFramework::MenuEntry *>>::_M_realloc_insert<CTRPluginFramework::MenuEntry * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::GetEntryList(CTRPluginFramework::MenuFolderImpl *this, int a2);
void __fastcall std::vector<CTRPluginFramework::MenuFolder *,std::allocator<CTRPluginFramework::MenuFolder *>>::_M_realloc_insert<CTRPluginFramework::MenuFolder * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::GetFolderList(CTRPluginFramework::MenuFolderImpl *this, int a2);
char *__fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(int a1, char *a2, char *a3);
char *__fastcall CTRPluginFramework::MenuFolderImpl::Remove(CTRPluginFramework::MenuFolderImpl *this, unsigned int a2, unsigned int a3, int a4);
char *__fastcall CTRPluginFramework::MenuFolderImpl::Remove(int a1, int a2);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD CTRPluginFramework::MenuEntryImpl::AsMenuEntry(CTRPluginFramework::MenuEntryImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::MenuEntry::~MenuEntry(CTRPluginFramework::MenuEntry *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::MenuFolder::~MenuFolder(CTRPluginFramework::MenuFolder *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::PluginMenuImpl::Close(CTRPluginFramework::PluginMenuImpl *__hidden this, CTRPluginFramework::MenuFolderImpl *); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// _DWORD __cdecl operator new(unsigned int); idb

//-------------------------------------------------------------------------
// Data declarations

_DWORD (__fastcall *off_A0C[2])(CTRPluginFramework::MenuItem *__hidden this) =
{
  &CTRPluginFramework::MenuItem::~MenuItem,
  &CTRPluginFramework::MenuItem::~MenuItem
}; // weak
_DWORD (__fastcall *off_A20[2])(CTRPluginFramework::MenuFolderImpl *this) =
{
  &CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl,
  &CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl
}; // weak
// extern _UNKNOWN CTRPluginFramework::MenuItem::_uidCounter; weak


//----- (00000004) --------------------------------------------------------
int __fastcall ZN18CTRPluginFramework8MenuItem7GetNoteB5cxx11Ev(int a1)
{
  return a1 + 28;
}

//----- (0000000C) --------------------------------------------------------
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this)
{
  CTRPluginFramework::MenuItem *v1; // r4

  v1 = this;
  *(_DWORD *)this = off_A0C;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 28);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 4);
  return v1;
}
// A0C: using guessed type _DWORD (__fastcall *[2])(CTRPluginFramework::MenuItem *__hidden this);
// A2C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000034) --------------------------------------------------------
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this)
{
  CTRPluginFramework::MenuItem *v1; // r4

  v1 = this;
  CTRPluginFramework::MenuItem::~MenuItem(this);
  operator delete((void *)v1);
  return v1;
}

//----- (00000050) --------------------------------------------------------
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl(CTRPluginFramework::MenuFolderImpl *this, CTRPluginFramework::MenuFolderImpl *a2)
{
  CTRPluginFramework::MenuFolderImpl *v2; // r4
  int *v3; // r8
  int *v4; // r7
  int v5; // r5
  int v6; // t1
  CTRPluginFramework::MenuEntry *v7; // r0
  CTRPluginFramework::MenuEntry *v8; // r5
  CTRPluginFramework::MenuEntry *v9; // r0
  CTRPluginFramework::MenuEntry *v10; // r6
  void *v11; // r0

  v2 = this;
  v3 = (int *)*((_DWORD *)this + 21);
  v4 = (int *)*((_DWORD *)this + 20);
  *(_DWORD *)this = off_A20;
  while ( v3 != v4 )
  {
    v6 = *v4;
    ++v4;
    v5 = v6;
    if ( *(_BYTE *)(v6 + 57) == 1
      && CTRPluginFramework::MenuEntryImpl::AsMenuEntry((CTRPluginFramework::MenuEntryImpl *)v5) )
    {
      v7 = (CTRPluginFramework::MenuEntry *)CTRPluginFramework::MenuEntryImpl::AsMenuEntry((CTRPluginFramework::MenuEntryImpl *)v5);
      v8 = v7;
      if ( v7 )
      {
        CTRPluginFramework::MenuEntry::~MenuEntry(v7);
        v9 = v8;
        goto LABEL_7;
      }
    }
    else if ( *(_BYTE *)(v5 + 57) || (v10 = *(CTRPluginFramework::MenuEntry **)(v5 + 68)) == 0 )
    {
      (*(void (__fastcall **)(int))(*(_DWORD *)v5 + 4))(v5);
    }
    else
    {
      CTRPluginFramework::MenuFolder::~MenuFolder(*(CTRPluginFramework::MenuFolder **)(v5 + 68));
      v9 = v10;
LABEL_7:
      operator delete((void *)v9);
    }
  }
  CTRPluginFramework::PluginMenuImpl::Close(v2, a2);
  v11 = (void *)*((_DWORD *)v2 + 20);
  if ( v11 != *((void **)v2 + 21) )
    *((_DWORD *)v2 + 21) = v11;
  if ( v11 )
    operator delete(v11);
  CTRPluginFramework::MenuItem::~MenuItem(v2);
  return v2;
}
// A20: using guessed type _DWORD (__fastcall *off_A20[2])(CTRPluginFramework::MenuFolderImpl *this);

//----- (00000124) --------------------------------------------------------
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl(CTRPluginFramework::MenuFolderImpl *this, CTRPluginFramework::MenuFolderImpl *a2)
{
  CTRPluginFramework::MenuFolderImpl *v2; // r4

  v2 = this;
  CTRPluginFramework::MenuFolderImpl::~MenuFolderImpl(this, a2);
  operator delete((void *)v2);
  return v2;
}

//----- (00000140) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(int a1)
{
  _DWORD *v1; // r4
  int v2; // r3

  v1 = (_DWORD *)a1;
  *(_DWORD *)a1 = off_A0C;
  v1[1] = v1 + 3;
  v1[7] = v1 + 9;
  v2 = CTRPluginFramework::MenuItem::_uidCounter;
  *(_DWORD *)(a1 + 8) = 0;
  CTRPluginFramework::MenuItem::_uidCounter = v2 + 1;
  *(_DWORD *)(a1 + 52) = v2 + 1;
  LOWORD(v2) = *(_WORD *)(a1 + 56);
  *(_BYTE *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 56) = (unsigned __int8)(v2 & 0x80) | 0x10;
  *(_DWORD *)a1 = off_A20;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(a1 + 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v1 + 7);
  v1[18] = 0;
  v1[23] = -1;
  v1[24] = -1;
  v1[19] = 0;
  return v1;
}
// A0C: using guessed type _DWORD (__fastcall *off_A0C[2])(CTRPluginFramework::MenuItem *__hidden this);
// A20: using guessed type _DWORD (__fastcall *off_A20[2])(CTRPluginFramework::MenuFolderImpl *this);
// A44: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD);

//----- (000001F8) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(int a1, int a2)
{
  _DWORD *v2; // r4
  int v3; // r6
  int v4; // r12

  v2 = (_DWORD *)a1;
  v3 = a1 + 28;
  *(_DWORD *)a1 = off_A0C;
  v2[1] = v2 + 3;
  v2[7] = v2 + 9;
  *(_DWORD *)(a1 + 68) = a2;
  *(_DWORD *)(a1 + 52) = ++CTRPluginFramework::MenuItem::_uidCounter;
  v4 = *(_WORD *)(a1 + 56) & 0x80 | 0x10;
  *(_DWORD *)a1 = off_A20;
  *(_WORD *)(a1 + 56) = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(a1 + 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v3);
  v2[18] = 0;
  v2[23] = -1;
  v2[24] = -1;
  v2[19] = 0;
  return v2;
}
// A0C: using guessed type _DWORD (__fastcall *off_A0C[2])(CTRPluginFramework::MenuItem *__hidden this);
// A20: using guessed type _DWORD (__fastcall *off_A20[2])(CTRPluginFramework::MenuFolderImpl *this);
// A44: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD);

//----- (000002B4) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuFolderImpl::ItemsCount(CTRPluginFramework::MenuFolderImpl *this)
{
  return (*((_DWORD *)this + 21) - *((_DWORD *)this + 20)) >> 2;
}

//----- (000002C8) --------------------------------------------------------
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::GetItem(CTRPluginFramework::MenuFolderImpl *this, unsigned int a2)
{
  unsigned int v2; // r5
  CTRPluginFramework::MenuFolderImpl **v3; // r6
  CTRPluginFramework::MenuFolderImpl **v4; // r4
  CTRPluginFramework::MenuFolderImpl *result; // r0
  CTRPluginFramework::MenuFolderImpl *v6; // t1

  v2 = a2;
  v3 = (CTRPluginFramework::MenuFolderImpl **)*((_DWORD *)this + 21);
  v4 = (CTRPluginFramework::MenuFolderImpl **)*((_DWORD *)this + 20);
  while ( v4 != v3 )
  {
    v6 = *v4;
    ++v4;
    result = v6;
    if ( *((_DWORD *)v6 + 13) != v2 )
    {
      if ( *((_BYTE *)result + 57) )
        continue;
      result = (CTRPluginFramework::MenuFolderImpl *)CTRPluginFramework::MenuFolderImpl::GetItem(result, v2);
      if ( !result )
        continue;
    }
    return result;
  }
  return 0;
}

//----- (00000318) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuFolderImpl::DisableAll(int result)
{
  CTRPluginFramework::MenuFolderImpl **v1; // r6
  CTRPluginFramework::MenuFolderImpl **v2; // r5
  CTRPluginFramework::MenuFolderImpl *v3; // r4
  CTRPluginFramework::MenuFolderImpl *v4; // t1
  int v5; // r3
  bool v6; // zf

  v1 = *(CTRPluginFramework::MenuFolderImpl ***)(result + 84);
  v2 = *(CTRPluginFramework::MenuFolderImpl ***)(result + 80);
  while ( v1 != v2 )
  {
    v4 = *v2;
    ++v2;
    v3 = v4;
    v5 = *((unsigned __int8 *)v4 + 57);
    v6 = v5 == 1;
    if ( v5 != 1 )
      v6 = v5 == 4;
    if ( v6 )
      result = (*(int (__fastcall **)(CTRPluginFramework::MenuFolderImpl *))(*(_DWORD *)v3 + 16))(v3);
    if ( !*((_BYTE *)v3 + 57) )
      result = CTRPluginFramework::MenuFolderImpl::DisableAll(v3);
  }
  return result;
}

//----- (00000368) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](int a1, unsigned int a2)
{
  __int64 v2; // r2
  int result; // r0

  v2 = *(_QWORD *)(a1 + 80);
  if ( a2 >= (HIDWORD(v2) - (signed int)v2) >> 2 )
    result = 0;
  else
    result = *(_DWORD *)(v2 + 4 * a2);
  return result;
}

//----- (00000380) --------------------------------------------------------
bool __fastcall CTRPluginFramework::MenuFolderImpl::HasParent(CTRPluginFramework::MenuFolderImpl *this)
{
  _BOOL4 result; // r0

  if ( *((_DWORD *)this + 18) )
    result = 1;
  else
    result = *((_DWORD *)this + 19) != 0;
  return result;
}

//----- (000003A4) --------------------------------------------------------
void __fastcall CTRPluginFramework::MenuFolderImpl::Clear(CTRPluginFramework::MenuFolderImpl *this)
{
  CTRPluginFramework::MenuFolderImpl *v1; // r5
  int *v2; // r8
  int *v3; // r7
  int v4; // r4
  int v5; // t1
  CTRPluginFramework::MenuEntry *v6; // r0
  CTRPluginFramework::MenuEntry *v7; // r4
  CTRPluginFramework::MenuEntry *v8; // r0
  CTRPluginFramework::MenuEntry *v9; // r6
  int v10; // r3

  v1 = this;
  v2 = (int *)*((_DWORD *)this + 21);
  v3 = (int *)*((_DWORD *)this + 20);
  while ( v2 != v3 )
  {
    v5 = *v3;
    ++v3;
    v4 = v5;
    if ( *(_BYTE *)(v5 + 57) == 1
      && CTRPluginFramework::MenuEntryImpl::AsMenuEntry((CTRPluginFramework::MenuEntryImpl *)v4) )
    {
      v6 = (CTRPluginFramework::MenuEntry *)CTRPluginFramework::MenuEntryImpl::AsMenuEntry((CTRPluginFramework::MenuEntryImpl *)v4);
      v7 = v6;
      if ( v6 )
      {
        CTRPluginFramework::MenuEntry::~MenuEntry(v6);
        v8 = v7;
        goto LABEL_7;
      }
    }
    else if ( *(_BYTE *)(v4 + 57) || (v9 = *(CTRPluginFramework::MenuEntry **)(v4 + 68)) == 0 )
    {
      (*(void (__fastcall **)(int))(*(_DWORD *)v4 + 4))(v4);
    }
    else
    {
      CTRPluginFramework::MenuFolder::~MenuFolder(*(CTRPluginFramework::MenuFolder **)(v4 + 68));
      v8 = v9;
LABEL_7:
      operator delete((void *)v8);
    }
  }
  v10 = *((_DWORD *)v1 + 20);
  if ( v10 != *((_DWORD *)v1 + 21) )
    *((_DWORD *)v1 + 21) = v10;
}

//----- (0000044C) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuFolderImpl::_Open(int result, CTRPluginFramework::MenuFolderImpl *a2, int a3, int a4)
{
  int v4; // r3

  v4 = result + 4 * a4;
  *(_DWORD *)(v4 + 72) = a2;
  *(_DWORD *)(v4 + 92) = a3;
  return result;
}

//----- (0000045C) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuFolderImpl::_Close(CTRPluginFramework::MenuFolderImpl *this, int *a2, int a3)
{
  char *v3; // r2
  int v4; // r3

  v3 = (char *)this + 4 * a3;
  if ( *((_DWORD *)v3 + 18) )
  {
    v4 = *((_DWORD *)v3 + 23);
    if ( v4 != -1 )
      *a2 = v4;
  }
  return *((_DWORD *)v3 + 18);
}

//----- (00000480) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_realloc_insert<CTRPluginFramework::MenuItem * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00000544) --------------------------------------------------------
void __fastcall CTRPluginFramework::MenuFolderImpl::Append(CTRPluginFramework::MenuFolderImpl *this, CTRPluginFramework::MenuItem *a2, int a3)
{
  _BYTE *v3; // r1
  CTRPluginFramework::MenuItem *v4; // [sp+4h] [bp-Ch]
  int v5; // [sp+8h] [bp-8h]

  v5 = a3;
  v4 = a2;
  if ( !a3 )
  {
    *((_DWORD *)a2 + 15) = this;
    *((_DWORD *)a2 + 16) = (signed int)((*((_QWORD *)this + 10) >> 32) - *((_QWORD *)this + 10)) >> 2;
  }
  v3 = (_BYTE *)*((_DWORD *)this + 21);
  if ( v3 == *((_BYTE **)this + 22) )
  {
    std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_realloc_insert<CTRPluginFramework::MenuItem * const&>(
      (_DWORD *)this + 20,
      v3,
      &v4);
  }
  else
  {
    *(_DWORD *)v3 = v4;
    *((_DWORD *)this + 21) += 4;
  }
}

//----- (000005A4) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::MenuEntry *,std::allocator<CTRPluginFramework::MenuEntry *>>::_M_realloc_insert<CTRPluginFramework::MenuEntry * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00000668) --------------------------------------------------------
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::GetEntryList(CTRPluginFramework::MenuFolderImpl *this, int a2)
{
  CTRPluginFramework::MenuFolderImpl *v2; // r4
  CTRPluginFramework::MenuEntryImpl **v3; // r6
  CTRPluginFramework::MenuEntryImpl **v4; // r5
  CTRPluginFramework::MenuEntryImpl *v5; // r0
  CTRPluginFramework::MenuEntryImpl *v6; // t1
  int v7; // r0
  _BYTE *v8; // r1
  int v10; // [sp+4h] [bp-14h]

  v10 = a2;
  v2 = this;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  v3 = *(CTRPluginFramework::MenuEntryImpl ***)(a2 + 84);
  v4 = *(CTRPluginFramework::MenuEntryImpl ***)(a2 + 80);
  while ( v3 != v4 )
  {
    v6 = *v4;
    ++v4;
    v5 = v6;
    if ( *((_BYTE *)v6 + 57) == 1 )
    {
      v7 = CTRPluginFramework::MenuEntryImpl::AsMenuEntry(v5);
      v10 = v7;
      if ( v7 )
      {
        v8 = (_BYTE *)*((_DWORD *)v2 + 1);
        if ( v8 == *((_BYTE **)v2 + 2) )
        {
          std::vector<CTRPluginFramework::MenuEntry *,std::allocator<CTRPluginFramework::MenuEntry *>>::_M_realloc_insert<CTRPluginFramework::MenuEntry * const&>(
            v2,
            v8,
            &v10);
        }
        else
        {
          *(_DWORD *)v8 = v7;
          *((_DWORD *)v2 + 1) += 4;
        }
      }
    }
  }
  return v2;
}

//----- (000006EC) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::MenuFolder *,std::allocator<CTRPluginFramework::MenuFolder *>>::_M_realloc_insert<CTRPluginFramework::MenuFolder * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (000007B0) --------------------------------------------------------
CTRPluginFramework::MenuFolderImpl *__fastcall CTRPluginFramework::MenuFolderImpl::GetFolderList(CTRPluginFramework::MenuFolderImpl *this, int a2)
{
  CTRPluginFramework::MenuFolderImpl *v2; // r4
  int *v3; // r6
  int *v4; // r5
  int v5; // r3
  int v6; // t1
  int v7; // r3
  _BYTE *v8; // r1
  int v10; // [sp+4h] [bp-14h]

  v10 = a2;
  v2 = this;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  v3 = *(int **)(a2 + 84);
  v4 = *(int **)(a2 + 80);
  while ( v3 != v4 )
  {
    v6 = *v4;
    ++v4;
    v5 = v6;
    if ( !*(_BYTE *)(v6 + 57) )
    {
      v7 = *(_DWORD *)(v5 + 68);
      v10 = v7;
      if ( v7 )
      {
        v8 = (_BYTE *)*((_DWORD *)v2 + 1);
        if ( v8 == *((_BYTE **)v2 + 2) )
        {
          std::vector<CTRPluginFramework::MenuFolder *,std::allocator<CTRPluginFramework::MenuFolder *>>::_M_realloc_insert<CTRPluginFramework::MenuFolder * const&>(
            v2,
            v8,
            &v10);
        }
        else
        {
          *(_DWORD *)v8 = v7;
          *((_DWORD *)v2 + 1) += 4;
        }
      }
    }
  }
  return v2;
}

//----- (00000834) --------------------------------------------------------
char *__fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(int a1, char *a2, char *a3)
{
  char *v3; // r3
  _BYTE *v4; // r4
  _BYTE *v5; // r2
  int v6; // r5
  int v7; // r2
  char *result; // r0
  int v9; // r4

  v3 = a2;
  if ( a3 == a2 )
    return a2;
  v4 = a3;
  v5 = *(_BYTE **)(a1 + 4);
  v6 = a1;
  if ( v4 != v5 )
    v3 = (char *)memmove(a2, v4, v5 - v4);
  v7 = *(_DWORD *)(v6 + 4);
  result = v3;
  v9 = (int)&v3[v7 - (_DWORD)v4];
  if ( v9 != v7 )
    *(_DWORD *)(v6 + 4) = v9;
  return result;
}

//----- (00000890) --------------------------------------------------------
char *__fastcall CTRPluginFramework::MenuFolderImpl::Remove(CTRPluginFramework::MenuFolderImpl *this, unsigned int a2, unsigned int a3, int a4)
{
  CTRPluginFramework::MenuFolderImpl *v4; // r6
  int v5; // r4
  char *result; // r0
  char *v7; // r4
  char *v8; // r5
  char *v9; // r7
  int v10; // r0
  int v11; // t1

  v4 = this;
  v5 = *((_DWORD *)this + 20);
  result = (char *)((*((_DWORD *)this + 21) - v5) >> 2);
  if ( (unsigned int)result > a2 )
  {
    if ( a2 + a3 >= (unsigned int)result )
      a3 = (unsigned int)&result[-a2];
    v7 = (char *)(v5 + 4 * a2);
    v8 = &v7[4 * a3];
    if ( a4 )
    {
      v9 = v7;
      while ( v8 != v9 )
      {
        v11 = *(_DWORD *)v9;
        v9 += 4;
        v10 = v11;
        if ( v11 )
          (*(void (**)(void))(*(_DWORD *)v10 + 4))();
      }
    }
    result = std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(
               (int)v4 + 80,
               v7,
               v8);
  }
  return result;
}

//----- (00000908) --------------------------------------------------------
char *__fastcall CTRPluginFramework::MenuFolderImpl::Remove(int a1, int a2)
{
  char *v2; // r2
  char *v3; // r12
  int i; // lr
  int v5; // r3
  char *v6; // r2
  int v7; // lr
  int v8; // t1
  int v9; // r2

  v2 = *(char **)(a1 + 80);
  v3 = *(char **)(a1 + 84);
  for ( i = (v3 - v2) >> 4; ; --i )
  {
    v5 = (int)v2;
    if ( i <= 0 )
      break;
    if ( a2 == *(_DWORD *)v2 )
      goto LABEL_6;
    if ( a2 == *((_DWORD *)v2 + 1) )
    {
      v5 = (int)(v2 + 4);
      goto LABEL_6;
    }
    if ( a2 == *((_DWORD *)v2 + 2) )
    {
      v5 = (int)(v2 + 8);
      goto LABEL_6;
    }
    v2 += 16;
    if ( a2 == *(_DWORD *)(v5 + 12) )
    {
      v5 += 12;
      goto LABEL_6;
    }
  }
  v9 = (v3 - v2) >> 2;
  if ( v9 != 2 )
  {
    if ( v9 != 3 )
    {
      if ( v9 != 1 )
      {
        v5 = *(_DWORD *)(a1 + 84);
        goto LABEL_6;
      }
      goto LABEL_21;
    }
    if ( a2 == *(_DWORD *)v5 )
      goto LABEL_6;
    v5 += 4;
  }
  if ( a2 == *(_DWORD *)v5 )
    goto LABEL_6;
  v5 += 4;
LABEL_21:
  if ( a2 != *(_DWORD *)v5 )
  {
    v5 = *(_DWORD *)(a1 + 84);
    return std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(
             a1 + 80,
             (char *)v5,
             *(char **)(a1 + 84));
  }
LABEL_6:
  if ( v3 != (char *)v5 )
  {
    v6 = (char *)(v5 + 4);
    while ( v3 != v6 )
    {
      v8 = *(_DWORD *)v6;
      v6 += 4;
      v7 = v8;
      if ( a2 != v8 )
      {
        *(_DWORD *)v5 = v7;
        v5 += 4;
      }
    }
  }
  return std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(
           a1 + 80,
           (char *)v5,
           *(char **)(a1 + 84));
}

// ALL OK, 24 function(s) have been successfully decompiled
