/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall ZN18CTRPluginFramework8MenuItem7GetNoteB5cxx11Ev(int a1);
int __fastcall CTRPluginFramework::MenuEntryImpl::Disable(int result);
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this);
CTRPluginFramework::MenuEntryImpl *__fastcall CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl(CTRPluginFramework::MenuEntryImpl *this);
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this);
CTRPluginFramework::MenuEntryImpl *__fastcall CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl(CTRPluginFramework::MenuEntryImpl *this);
int __fastcall ZN18CTRPluginFramework13MenuEntryImpl7GetNoteB5cxx11Ev(CTRPluginFramework::HotkeyManager **a1);
int __fastcall CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(int a1, int a2, int a3, int a4);
int __fastcall CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(int a1, int a2, int a3, int a4, int a5);
int __fastcall CTRPluginFramework::MenuEntryImpl::SetRadio(int result, int a2);
int __fastcall CTRPluginFramework::MenuEntryImpl::SetArg(int result, void *a2);
int __fastcall CTRPluginFramework::MenuEntryImpl::GetArg(CTRPluginFramework::MenuEntryImpl *this);
int __fastcall CTRPluginFramework::MenuEntryImpl::WasJustActivated(CTRPluginFramework::MenuEntryImpl *this);
int __fastcall CTRPluginFramework::MenuEntryImpl::IsActivated(CTRPluginFramework::MenuEntryImpl *this);
int __fastcall CTRPluginFramework::MenuEntryImpl::AsMenuEntry(CTRPluginFramework::MenuEntryImpl *this);
int __fastcall CTRPluginFramework::MenuEntryImpl::_TriggerState(int result);
int __fastcall CTRPluginFramework::MenuEntryImpl::Enable(int result);
int __fastcall CTRPluginFramework::MenuEntryImpl::_MustBeRemoved(CTRPluginFramework::MenuEntryImpl *this);
int __fastcall CTRPluginFramework::MenuEntryImpl::_Execute(CTRPluginFramework::MenuEntryImpl *this);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD CTRPluginFramework::HotkeyManager::Count(CTRPluginFramework::HotkeyManager *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework13HotkeyManager8ToStringB5cxx11Ev(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::MenuItem::HasNoteChanged(CTRPluginFramework::MenuItem *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::PluginMenuExecuteLoop::Add(CTRPluginFramework::PluginMenuExecuteLoop *__hidden this, CTRPluginFramework::MenuEntryImpl *); idb

//-------------------------------------------------------------------------
// Data declarations

_DWORD (__fastcall *off_490[2])(CTRPluginFramework::MenuItem *__hidden this) =
{
  &CTRPluginFramework::MenuItem::~MenuItem,
  &CTRPluginFramework::MenuItem::~MenuItem
}; // weak
_DWORD (__fastcall *off_4A4[2])(CTRPluginFramework::MenuEntryImpl *__hidden this) =
{
  &CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl,
  &CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl
}; // weak
_UNKNOWN unk_4B8; // weak
// extern _UNKNOWN CTRPluginFramework::MenuItem::_uidCounter; weak


//----- (00000004) --------------------------------------------------------
int __fastcall ZN18CTRPluginFramework8MenuItem7GetNoteB5cxx11Ev(int a1)
{
  return a1 + 28;
}

//----- (0000000C) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::Disable(int result)
{
  *(_BYTE *)(result + 100) = *(_BYTE *)(result + 100) & 0xFC | 2;
  return result;
}

//----- (00000020) --------------------------------------------------------
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this)
{
  CTRPluginFramework::MenuItem *v1; // r4

  v1 = this;
  *(_DWORD *)this = off_490;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 28);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 4);
  return v1;
}
// 490: using guessed type _DWORD (__fastcall *[2])(CTRPluginFramework::MenuItem *__hidden this);
// 4BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000048) --------------------------------------------------------
CTRPluginFramework::MenuEntryImpl *__fastcall CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl(CTRPluginFramework::MenuEntryImpl *this)
{
  CTRPluginFramework::MenuEntryImpl *v1; // r4

  v1 = this;
  *(_DWORD *)this = off_4A4;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 76);
  CTRPluginFramework::MenuItem::~MenuItem(v1);
  return v1;
}
// 4A4: using guessed type _DWORD (__fastcall *off_4A4[2])(CTRPluginFramework::MenuEntryImpl *__hidden this);
// 4BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000070) --------------------------------------------------------
CTRPluginFramework::MenuItem *__fastcall CTRPluginFramework::MenuItem::~MenuItem(CTRPluginFramework::MenuItem *this)
{
  CTRPluginFramework::MenuItem *v1; // r4

  v1 = this;
  CTRPluginFramework::MenuItem::~MenuItem(this);
  operator delete((void *)v1);
  return v1;
}

//----- (0000008C) --------------------------------------------------------
CTRPluginFramework::MenuEntryImpl *__fastcall CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl(CTRPluginFramework::MenuEntryImpl *this)
{
  CTRPluginFramework::MenuEntryImpl *v1; // r4

  v1 = this;
  CTRPluginFramework::MenuEntryImpl::~MenuEntryImpl(this);
  operator delete((void *)v1);
  return v1;
}

//----- (000000A8) --------------------------------------------------------
int __fastcall ZN18CTRPluginFramework13MenuEntryImpl7GetNoteB5cxx11Ev(CTRPluginFramework::HotkeyManager **a1)
{
  CTRPluginFramework::MenuItem *v1; // r4
  CTRPluginFramework::HotkeyManager *v2; // r0
  unsigned int v4; // r3
  unsigned int v5; // r2
  unsigned int v6; // r2
  int v7; // r0
  int v8; // [sp+0h] [bp-58h]
  int *v9; // [sp+18h] [bp-40h]
  int v10; // [sp+1Ch] [bp-3Ch]
  unsigned int v11; // [sp+20h] [bp-38h]
  int *v12; // [sp+30h] [bp-28h]
  int v13; // [sp+34h] [bp-24h]
  unsigned int v14; // [sp+38h] [bp-20h]

  v1 = (CTRPluginFramework::MenuItem *)a1;
  v2 = a1[27];
  if ( !v2 || !CTRPluginFramework::HotkeyManager::Count(v2) )
    return (int)v1 + 28;
  if ( !*((_DWORD *)v1 + 20) || CTRPluginFramework::MenuItem::HasNoteChanged(v1) )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v9, (char *)v1 + 28);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v9, &unk_4B8);
    ZN18CTRPluginFramework13HotkeyManager8ToStringB5cxx11Ev(&v12, *((_DWORD *)v1 + 27));
    v4 = v10 + v13;
    if ( v9 == (int *)&v11 )
      v5 = 15;
    else
      v5 = v11;
    if ( v4 <= v5 || (v12 != (int *)&v14 ? (v6 = v14) : (v6 = 15), v4 > v6) )
      v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v9, &v12);
    else
      v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v12, 0, &v9);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v8, v7);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=((char *)v1 + 76, &v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  }
  return (int)v1 + 76;
}
// 4BC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4C8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 4CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 4D0: using guessed type int __fastcall ZN18CTRPluginFramework13HotkeyManager8ToStringB5cxx11Ev(_DWORD, _DWORD);
// 4D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 4D8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 4DC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 4E4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);

//----- (000001C0) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(int a1, int a2, int a3, int a4)
{
  int v4; // r4
  int v5; // r6
  __int16 v6; // r12
  char v7; // r2

  v4 = a1;
  v5 = a4;
  *(_DWORD *)a1 = off_490;
  *(_DWORD *)(v4 + 4) = v4 + 12;
  *(_DWORD *)(v4 + 28) = v4 + 36;
  *(_DWORD *)(a1 + 52) = ++CTRPluginFramework::MenuItem::_uidCounter;
  v6 = *(_WORD *)(a1 + 56);
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 56) = (unsigned __int8)(v6 & 0x80) | 0x110;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)a1 = off_4A4;
  *(_DWORD *)(v4 + 76) = v4 + 84;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(a1 + 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v4 + 28);
  v7 = *(_BYTE *)(v4 + 100);
  *(_DWORD *)(v4 + 68) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 116) = 0;
  *(_DWORD *)(v4 + 104) = -1;
  *(_BYTE *)(v4 + 100) = v7 & 0xF0;
  *(_DWORD *)(v4 + 112) = -1;
  *(_DWORD *)(v4 + 108) = v5;
  return v4;
}
// 490: using guessed type _DWORD (__fastcall *off_490[2])(CTRPluginFramework::MenuItem *__hidden this);
// 4A4: using guessed type _DWORD (__fastcall *off_4A4[2])(CTRPluginFramework::MenuEntryImpl *__hidden this);
// 4E8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD);

//----- (00000290) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // r4
  int v6; // r6
  __int16 v7; // r12
  char v8; // r3

  v5 = a1;
  *(_DWORD *)a1 = off_490;
  *(_DWORD *)(v5 + 4) = v5 + 12;
  *(_DWORD *)(v5 + 28) = v5 + 36;
  v6 = a3;
  *(_DWORD *)(a1 + 52) = ++CTRPluginFramework::MenuItem::_uidCounter;
  v7 = *(_WORD *)(a1 + 56);
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 56) = (unsigned __int8)(v7 & 0x80) | 0x110;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)a1 = off_4A4;
  *(_DWORD *)(v5 + 76) = v5 + 84;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(a1 + 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v5 + 28);
  v8 = *(_BYTE *)(v5 + 100);
  *(_DWORD *)(v5 + 68) = v6;
  *(_BYTE *)(v5 + 100) = v8 & 0xF0;
  *(_DWORD *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 116) = 0;
  *(_DWORD *)(v5 + 104) = -1;
  *(_DWORD *)(v5 + 112) = -1;
  *(_DWORD *)(v5 + 108) = a5;
  return v5;
}
// 490: using guessed type _DWORD (__fastcall *off_490[2])(CTRPluginFramework::MenuItem *__hidden this);
// 4A4: using guessed type _DWORD (__fastcall *off_4A4[2])(CTRPluginFramework::MenuEntryImpl *__hidden this);
// 4E8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD);

//----- (00000364) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::SetRadio(int result, int a2)
{
  char v2; // r3

  v2 = *(_BYTE *)(result + 100);
  *(_DWORD *)(result + 112) = a2;
  *(_BYTE *)(result + 100) = v2 | 4;
  return result;
}

//----- (00000378) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::SetArg(int result, void *a2)
{
  *(_DWORD *)(result + 116) = a2;
  return result;
}

//----- (00000380) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::GetArg(CTRPluginFramework::MenuEntryImpl *this)
{
  return *((_DWORD *)this + 29);
}

//----- (00000388) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::WasJustActivated(CTRPluginFramework::MenuEntryImpl *this)
{
  unsigned int v1; // r3
  int result; // r0

  v1 = *((unsigned __int8 *)this + 100);
  result = v1 & 1;
  if ( v1 & 1 )
    result = (v1 >> 1) & 1;
  return result;
}

//----- (0000039C) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::IsActivated(CTRPluginFramework::MenuEntryImpl *this)
{
  return *((_BYTE *)this + 100) & 1;
}

//----- (000003A8) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::AsMenuEntry(CTRPluginFramework::MenuEntryImpl *this)
{
  return *((_DWORD *)this + 27);
}

//----- (000003B0) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::_TriggerState(int result)
{
  char v1; // r3
  bool v2; // zf
  char v3; // r3

  v1 = *(_BYTE *)(result + 100);
  v2 = (v1 & 1) == 0;
  v3 = v1 & 0xFC;
  if ( v2 )
    v3 |= 3u;
  else
    *(_BYTE *)(result + 100) = v3;
  if ( v2 )
    *(_BYTE *)(result + 100) = v3;
  else
    result = 0;
  if ( v2 )
    result = 1;
  return result;
}

//----- (000003D4) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::Enable(int result)
{
  CTRPluginFramework::MenuEntryImpl *v1; // r1
  CTRPluginFramework::PluginMenuExecuteLoop *v2; // r2

  if ( !(*(_BYTE *)(result + 100) & 1) )
  {
    result = CTRPluginFramework::MenuEntryImpl::_TriggerState(result);
    if ( *((_DWORD *)v2 + 17) )
      result = CTRPluginFramework::PluginMenuExecuteLoop::Add(v2, v1);
  }
  return result;
}

//----- (00000404) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::_MustBeRemoved(CTRPluginFramework::MenuEntryImpl *this)
{
  unsigned int v1; // r0
  int result; // r0

  v1 = *((unsigned __int8 *)this + 100);
  if ( v1 & 1 )
    result = 0;
  else
    result = (v1 >> 1) & 1 ^ 1;
  return result;
}

//----- (00000420) --------------------------------------------------------
int __fastcall CTRPluginFramework::MenuEntryImpl::_Execute(CTRPluginFramework::MenuEntryImpl *this)
{
  CTRPluginFramework::MenuEntryImpl *v1; // r5
  int v2; // r6
  int v3; // r4
  void (__fastcall *v4)(_DWORD); // r3

  v1 = this;
  v2 = *((_BYTE *)this + 100) & 1;
  v3 = (*((_BYTE *)this + 100) >> 1) & 1;
  v4 = (void (__fastcall *)(_DWORD))*((_DWORD *)this + 17);
  if ( v4 )
    v4(*((_DWORD *)this + 27));
  if ( !(*((_BYTE *)v1 + 100) & 1) )
  {
    if ( v2 | v3 ^ 1 )
      return CTRPluginFramework::MenuEntryImpl::_MustBeRemoved(v1);
    goto LABEL_5;
  }
  if ( *((_BYTE *)v1 + 100) & 2 )
LABEL_5:
    *((_BYTE *)v1 + 100) &= 0xFDu;
  return CTRPluginFramework::MenuEntryImpl::_MustBeRemoved(v1);
}

// ALL OK, 19 function(s) have been successfully decompiled
