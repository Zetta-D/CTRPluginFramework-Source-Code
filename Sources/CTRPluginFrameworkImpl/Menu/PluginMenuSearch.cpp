/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall CTRPluginFramework::PluginMenuSearch::_ProcessEvent(int result, Event *a2);
int __fastcall CTRPluginFramework::PluginMenuSearch::_RenderBottom(CTRPluginFramework::PluginMenuSearch *this);
CTRPluginFramework::Touch *__fastcall CTRPluginFramework::PluginMenuSearch::_Update(CTRPluginFramework::Touch *result);
int __fastcall CTRPluginFramework::PluginMenuSearch::_PopulateSearchType(CTRPluginFramework::PluginMenuSearch *this, int a2);
int __fastcall CTRPluginFramework::PluginMenuSearch::_cancelBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this);
int __fastcall CTRPluginFramework::PluginMenuSearch::PluginMenuSearch(int a1, int a2);
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (__fastcall *a2)(int ***, int, int), int a3, int a4, ...);
int __fastcall CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(CTRPluginFramework::PluginMenuSearch *this);
int __fastcall CTRPluginFramework::PluginMenuSearch::_RenderTop(CTRPluginFramework::PluginMenuSearch *this);
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1);
int __fastcall CTRPluginFramework::ClearSearchFolder(CTRPluginFramework *this);
int __fastcall std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::push_back(std::__detail::_List_node_base *a1, _DWORD *a2);
int __fastcall CTRPluginFramework::PluginMenuSearch::RestoreSearchState(CTRPluginFramework::PluginMenuSearch *this);
void __fastcall std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::pop_back(int a1);
int __fastcall CTRPluginFramework::PluginMenuSearch::_undoBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this);
void __fastcall std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::_M_realloc_insert<CTRPluginFramework::Region const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::push_back(_DWORD *a1, int *a2);
int __fastcall CTRPluginFramework::PluginMenuSearch::_ListRegion(CTRPluginFramework::PluginMenuSearch *this);
int __fastcall CTRPluginFramework::PluginMenuSearch::_resetBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this);
void __fastcall CTRPluginFramework::PluginMenuSearch::GetRegionsList(CTRPluginFramework::PluginMenuSearch *a1, _DWORD *a2);
char *__fastcall std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<CTRPluginFramework::Region>(void *src, _BYTE *a2, char *a3);
char **__fastcall std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::operator=(char **a1, char **a2);
void __fastcall CTRPluginFramework::PluginMenuSearch::_searchBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this);
int __fastcall CTRPluginFramework::PluginMenuSearch::operator()(int a1, _DWORD *a2, __int64 *a3);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Button::Disable(CTRPluginFramework::Button *__hidden this); idb
// _DWORD CTRPluginFramework::Button::Enable(CTRPluginFramework::Button *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::UIContainer::Draw(CTRPluginFramework::UIContainer *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::UIContainer::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::ComboBox::Clear(CTRPluginFramework::ComboBox *__hidden this); idb
// int __fastcall CTRPluginFramework::ComboBox::Add(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD CTRPluginFramework::SearchMenu::Update(CTRPluginFramework::SearchMenu *__hidden this); idb
// int __fastcall CTRPluginFramework::SearchMenu::SearchMenu(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::ComboBox::ComboBox(CTRPluginFramework::ComboBox *__hidden this, int, int, int, int); idb
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::NumericTextBox(CTRPluginFramework::NumericTextBox *__hidden this, int, int, int, int); idb
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::UIContainer::UIContainer(CTRPluginFramework::UIContainer *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *__hidden this, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::UseHexadecimal(CTRPluginFramework::NumericTextBox *__hidden this, bool); idb
// int __fastcall CTRPluginFramework::UIContainer::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::ProcessingLogo::Draw(CTRPluginFramework::ProcessingLogo *__hidden this, int, int); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Time::AsSeconds(CTRPluginFramework::Time *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// void *memset(void *s, int c, size_t n);
// int sprintf(char *s, const char *format, ...);
// int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg);
// int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::SearchMenu::Draw(CTRPluginFramework::SearchMenu *__hidden this); idb
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::Directory::Directory(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::Remove(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Directory::~Directory(CTRPluginFramework::Directory *__hidden this); idb
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD __cdecl std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base *__hidden this, std::__detail::_List_node_base *); weak
// _DWORD CTRPluginFramework::Directory::IsOpen(CTRPluginFramework::Directory *__hidden this); idb
// int CTRPluginFramework::Search32::Search32(void); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(void); weak
// _DWORD CTRPluginFramework::Search::GetType(CTRPluginFramework::Search *__hidden this); idb
// _DWORD CTRPluginFramework::NumericTextBox::Clear(CTRPluginFramework::NumericTextBox *__hidden this); idb
// _DWORD std::__detail::_List_node_base::_M_unhook(std::__detail::_List_node_base *__hidden this); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// _DWORD CTRPluginFramework::Process::GetHandle(CTRPluginFramework::Process *__hidden this); idb
// int __fastcall svcQueryProcessMemory(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// void __noreturn std::__throw_bad_alloc(void); idb
// int CTRPluginFramework::Search32::Search32(void); weak
// _DWORD __cdecl CTRPluginFramework::Search32::~Search32(CTRPluginFramework::Search32 *__hidden this); idb
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// int __fastcall CTRPluginFramework::HexEditor::operator()(_DWORD); weak
// int __fastcall CTRPluginFramework::SearchMenu::ProcessEvent(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::Close(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::Button::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::Search::ExecuteSearch(CTRPluginFramework::Search *__hidden this); idb
// _DWORD CTRPluginFramework::Window::MustClose(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::ComboBox::operator()(_DWORD); weak
// int __fastcall CTRPluginFramework::NumericTextBox::operator()(_DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::backgroundconst; // weak
_UNKNOWN unk_10; // weak
_UNKNOWN CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::background2const; // weak
_UNKNOWN unk_20; // weak
char `guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background; // weak
char `guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background2; // weak
char `guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::waitLogo; // weak
_UNKNOWN CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::waitLogoconst; // weak
int dword_40; // weak
_UNKNOWN unk_1EBF; // weak
_UNKNOWN unk_1ECE; // weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN CTRPluginFramework::Color::BlackGrey; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::Gainsboro; weak
// extern _UNKNOWN CTRPluginFramework::Color::LimeGreen; weak
// extern _UNKNOWN CTRPluginFramework::Color::SkyBlue; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _UNKNOWN _ctru_linear_heap; weak


//----- (00000048) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 1F1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1F20: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000000C0) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_ProcessEvent(int result, Event *a2)
{
  _DWORD *v2; // r4

  if ( *(_BYTE *)(result + 35) && LOBYTE(a2->modifiers) == 1 && a2->modifierMask == 1 )
  {
    v2 = (_DWORD *)result;
    *(_BYTE *)(result + 35) = 0;
    CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(result + 640));
    result = CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 196));
    if ( v2[5] )
      result = CTRPluginFramework::Button::Enable((CTRPluginFramework::Button *)(v2 + 178));
  }
  return result;
}

//----- (0000011C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_RenderBottom(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r6
  int v3; // [sp+4h] [bp-14h]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(0);
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  v3 = 47;
  CTRPluginFramework::Renderer::DrawString("MemRegion:", 30, &v3, CTRPluginFramework::Color::White);
  v3 = 67;
  CTRPluginFramework::Renderer::DrawString("Start:", 30, &v3, CTRPluginFramework::Color::White);
  v3 = 67;
  CTRPluginFramework::Renderer::DrawString("Stop:", 170, &v3, CTRPluginFramework::Color::White);
  v3 = 87;
  CTRPluginFramework::Renderer::DrawString("Value Type:", 30, &v3, CTRPluginFramework::Color::White);
  v3 = 107;
  CTRPluginFramework::Renderer::DrawString("Search Type:", 30, &v3, CTRPluginFramework::Color::White);
  v3 = 127;
  CTRPluginFramework::Renderer::DrawString("Scan Type:", 30, &v3, CTRPluginFramework::Color::White);
  v3 = 147;
  CTRPluginFramework::Renderer::DrawString("Value:", 30, &v3, CTRPluginFramework::Color::White);
  v3 = 187;
  return CTRPluginFramework::UIContainer::Draw((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 928));
}
// 1F2C: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 1F34: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000234) --------------------------------------------------------
CTRPluginFramework::Touch *__fastcall CTRPluginFramework::PluginMenuSearch::_Update(CTRPluginFramework::Touch *result)
{
  CTRPluginFramework::Touch *v1; // r4
  int v2; // r5
  int v3; // [sp+0h] [bp-20h]
  int v4; // [sp+4h] [bp-1Ch]
  int v5; // [sp+8h] [bp-18h]
  int v6; // [sp+Ch] [bp-14h]

  if ( !*((_BYTE *)result + 35) )
  {
    v1 = result;
    v2 = CTRPluginFramework::Touch::IsDown(result);
    CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v5);
    v3 = v5;
    v4 = v6;
    CTRPluginFramework::Window::Update(&CTRPluginFramework::Window::BottomWindow, v2, &v3);
    result = (CTRPluginFramework::Touch *)CTRPluginFramework::UIContainer::Update((char *)v1 + 928, v2, &v3);
  }
  return result;
}
// 1F4C: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);
// 1F50: using guessed type int __fastcall CTRPluginFramework::UIContainer::Update(_DWORD, _DWORD, _DWORD);

//----- (00000298) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_PopulateSearchType(CTRPluginFramework::PluginMenuSearch *this, int a2)
{
  int v2; // r5
  char *v3; // r4
  int result; // r0
  int v5; // [sp+0h] [bp-28h]

  v2 = a2;
  v3 = (char *)this + 340;
  CTRPluginFramework::ComboBox::Clear((CTRPluginFramework::PluginMenuSearch *)((char *)this + 340));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Equal To");
  CTRPluginFramework::ComboBox::Add(v3, &v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Not Equal To");
  CTRPluginFramework::ComboBox::Add(v3, &v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Bigger Than");
  CTRPluginFramework::ComboBox::Add(v3, &v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Bigger Or Equal");
  CTRPluginFramework::ComboBox::Add(v3, &v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Smaller Than");
  CTRPluginFramework::ComboBox::Add(v3, &v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Smaller Or Equal");
  CTRPluginFramework::ComboBox::Add(v3, &v5);
  result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  if ( !v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Different By");
    CTRPluginFramework::ComboBox::Add(v3, &v5);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Different By Less");
    CTRPluginFramework::ComboBox::Add(v3, &v5);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "Different By More");
    CTRPluginFramework::ComboBox::Add(v3, &v5);
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  }
  return result;
}
// 1F58: using guessed type int __fastcall CTRPluginFramework::ComboBox::Add(_DWORD, _DWORD);
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000404) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_cancelBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4

  v1 = this;
  (***((void (****)(void))this + 6))();
  *((_BYTE *)v1 + 32) = 0;
  *((_BYTE *)v1 + 35) = 1;
  *((_BYTE *)v1 + 344) = 1;
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 640));
  if ( *((_DWORD *)v1 + 10) == 1 )
    CTRPluginFramework::PluginMenuSearch::_PopulateSearchType(v1, 0);
  return CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 48));
}

//----- (0000045C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::PluginMenuSearch(int a1, int a2)
{
  int v2; // r4
  int v3; // ST04_4
  int v4; // ST04_4
  int v5; // ST04_4
  int v6; // ST04_4
  __int64 v8; // [sp+8h] [bp-50h]
  char v9; // [sp+18h] [bp-40h]

  v2 = a1;
  *(_DWORD *)(a1 + 16) = a1 + 12;
  *(_DWORD *)(a1 + 12) = a1 + 12;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  CTRPluginFramework::SearchMenu::SearchMenu(a1 + 48, a1 + 24, a2, a1 + 33, a1 + 36);
  CTRPluginFramework::ComboBox::ComboBox((CTRPluginFramework::ComboBox *)(v2 + 208), 150, 45, 130, 15);
  CTRPluginFramework::ComboBox::ComboBox((CTRPluginFramework::ComboBox *)(v2 + 252), 150, 85, 130, 15);
  CTRPluginFramework::ComboBox::ComboBox((CTRPluginFramework::ComboBox *)(v2 + 296), 150, 105, 130, 15);
  CTRPluginFramework::ComboBox::ComboBox((CTRPluginFramework::ComboBox *)(v2 + 340), 150, 125, 130, 15);
  CTRPluginFramework::NumericTextBox::NumericTextBox((CTRPluginFramework::NumericTextBox *)(v2 + 384), 85, 65, 66, 15);
  CTRPluginFramework::NumericTextBox::NumericTextBox((CTRPluginFramework::NumericTextBox *)(v2 + 444), 214, 65, 66, 15);
  CTRPluginFramework::NumericTextBox::NumericTextBox(
    (CTRPluginFramework::NumericTextBox *)(v2 + 504),
    150,
    145,
    130,
    15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Search");
  ((void (__fastcall *)(int, _DWORD, char *, __int64 *, _DWORD))CTRPluginFramework::Button::Button)(
    v2 + 568,
    0,
    &v9,
    &v8,
    0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Cancel");
  CTRPluginFramework::Button::Button(v2 + 640, 0, &v9, &v8, 0, v3, 120, 195, 80, 15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Undo");
  CTRPluginFramework::Button::Button(v2 + 712, 0, &v9, &v8, 0, v4, 120, 195, 80, 15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Reset");
  CTRPluginFramework::Button::Button(v2 + 784, 0, &v9, &v8, 0, v5, 205, 195, 80, 15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Hex");
  CTRPluginFramework::Button::Button(v2 + 856, 2, &v9, &v8, 0, v6, 110, 145, 38, 15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  CTRPluginFramework::UIContainer::UIContainer((CTRPluginFramework::UIContainer *)(v2 + 928));
  *(_DWORD *)(v2 + 24) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "1 Byte");
  CTRPluginFramework::ComboBox::Add(v2 + 252, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "2 Bytes");
  CTRPluginFramework::ComboBox::Add(v2 + 252, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "4 Bytes");
  CTRPluginFramework::ComboBox::Add(v2 + 252, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Float");
  CTRPluginFramework::ComboBox::Add(v2 + 252, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v9,
    "Specified value");
  CTRPluginFramework::ComboBox::Add(v2 + 296, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v9,
    "Unknown search");
  CTRPluginFramework::ComboBox::Add(v2 + 296, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  CTRPluginFramework::PluginMenuSearch::_PopulateSearchType((CTRPluginFramework::PluginMenuSearch *)v2, 1);
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v2 + 712));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v2 + 784));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v2 + 640));
  *(_DWORD *)(v2 + 260) = 2;
  CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v2 + 384), 0);
  CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v2 + 444), 0xFFFFFFF0);
  *(_BYTE *)(v2 + 388) = 0;
  *(_BYTE *)(v2 + 448) = 0;
  CTRPluginFramework::NumericTextBox::UseHexadecimal((CTRPluginFramework::NumericTextBox *)(v2 + 504), 0);
  CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v2 + 504), 0);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 208);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 252);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 296);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 340);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 384);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 444);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 504);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 568);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 640);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 712);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 784);
  CTRPluginFramework::UIContainer::operator+=(v2 + 928, v2 + 856);
  return v2;
}
// 1F58: using guessed type int __fastcall CTRPluginFramework::ComboBox::Add(_DWORD, _DWORD);
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1F64: using guessed type int __fastcall CTRPluginFramework::SearchMenu::SearchMenu(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1F70: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1F80: using guessed type int __fastcall CTRPluginFramework::UIContainer::operator+=(_DWORD, _DWORD);

//----- (000008B4) --------------------------------------------------------
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (__fastcall *a2)(int ***, int, int), int a3, int a4, ...)
{
  int *v4; // r4
  unsigned int v5; // r0
  char *v6; // r6
  int v7; // r0
  int v8; // r3
  int *result; // r0
  int v10; // r3
  int v11; // r2
  int **v12; // [sp+0h] [bp-18h]
  int v13; // [sp+4h] [bp-14h]
  va_list va; // [sp+20h] [bp+8h]

  va_start(va, a4);
  v4 = a1;
  va_copy(v12, va);
  v5 = a2(&v12, a3, a4);
  v6 = (char *)&v12 + v5;
  *v4 = (int)(v4 + 2);
  v13 = v5;
  if ( v5 > 0xF )
  {
    v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v4, &v13, 0);
    v8 = v13;
    *v4 = v7;
    v4[2] = v8;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v4, &v12, v6);
  result = v4;
  v10 = v13;
  v11 = *v4;
  v4[1] = v13;
  *(_BYTE *)(v11 + v10) = 0;
  return result;
}
// 1F1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1F84: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000960) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(CTRPluginFramework::PluginMenuSearch *this)
{
  float v1; // s0
  float v2; // s14
  CTRPluginFramework::PluginMenuSearch *v3; // r5
  int v4; // r1
  void *v5; // r0
  bool v6; // zf
  int v7; // r3
  __int64 v8; // r2
  float v9; // s15
  unsigned int v10; // r3
  int v11; // r0
  int v12; // r0
  int v13; // r0
  int result; // r0
  int v15; // [sp+8h] [bp-E0h]
  __int64 v16; // [sp+Ch] [bp-DCh]
  __int64 v17; // [sp+14h] [bp-D4h]
  int v18; // [sp+1Ch] [bp-CCh]
  int v19; // [sp+20h] [bp-C8h]
  unsigned int v20; // [sp+24h] [bp-C4h]
  int v21; // [sp+28h] [bp-C0h]
  int v22; // [sp+2Ch] [bp-BCh]
  int v23; // [sp+44h] [bp-A4h]
  char v24; // [sp+5Ch] [bp-8Ch]
  char s; // [sp+74h] [bp-74h]

  v3 = this;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background & 1) )
  {
    this = (CTRPluginFramework::PluginMenuSearch *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background);
    if ( this )
    {
      CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::backgroundconst = 343597383805LL;
      unk_10 = 300647710870LL;
      this = (CTRPluginFramework::PluginMenuSearch *)_cxa_guard_release(
                                                       &`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background,
                                                       70);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background2 & 1) )
  {
    this = (CTRPluginFramework::PluginMenuSearch *)_cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background2);
    if ( this )
    {
      CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::background2const = 343597383805LL;
      unk_20 = 365072220310LL;
      this = (CTRPluginFramework::PluginMenuSearch *)_cxa_guard_release(
                                                       &`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background2,
                                                       85);
    }
  }
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::waitLogo & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::waitLogo) )
  {
    CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::waitLogoconst);
    dword_40 = 0;
    _cxa_guard_release(
      &`guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::waitLogo,
      v4);
  }
  CTRPluginFramework::Renderer::SetTarget(1);
  v5 = (void *)*((unsigned __int8 *)v3 + 32);
  v6 = v5 == 0;
  if ( !*((_BYTE *)v3 + 32) )
    v5 = &CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::background2const;
  if ( !v6 )
    v5 = &CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::backgroundconst;
  CTRPluginFramework::Renderer::DrawRect2(v5, &CTRPluginFramework::Color::Black, &CTRPluginFramework::Color::BlackGrey);
  v7 = *((unsigned __int8 *)v3 + 32);
  v15 = 90;
  if ( v7 )
  {
    CTRPluginFramework::ProcessingLogo::Draw(
      (CTRPluginFramework::ProcessingLogo *)&CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)::waitLogoconst,
      192,
      90);
    v15 += 16;
  }
  else
  {
    v1 = 0.0;
    CTRPluginFramework::Renderer::DrawSysString("Done", 173, &v15, 300, CTRPluginFramework::Color::SkyBlue, 0);
  }
  LODWORD(v8) = 130;
  v17 = 64424509580LL;
  HIDWORD(v8) = v15 + 10;
  v16 = v8;
  v15 += 10;
  CTRPluginFramework::Renderer::DrawRect(&v16, &CTRPluginFramework::Color::Gainsboro, 0);
  if ( *((_BYTE *)v3 + 32) )
  {
    v2 = 1.38;
    v9 = *(float *)(*((_DWORD *)v3 + 6) + 16);
  }
  else
  {
    v9 = 138.0;
  }
  if ( *((_BYTE *)v3 + 32) )
    v9 = v9 * v2;
  v19 = v15 + 1;
  v10 = (unsigned int)v9;
  if ( (unsigned int)v9 >= 0x8A )
    v10 = 138;
  v20 = v10;
  v21 = 13;
  v18 = 131;
  CTRPluginFramework::Renderer::DrawRect(&v18, &CTRPluginFramework::Color::LimeGreen, 1);
  v15 += 20;
  if ( !*((_BYTE *)v3 + 32)
    || (memset(&s, 0, 0x64u),
        sprintf(&s, "Hit(s): %u", *(_DWORD *)(*((_DWORD *)v3 + 6) + 12)),
        result = CTRPluginFramework::Renderer::DrawString(&s, 131, &v15, CTRPluginFramework::Preferences::Settings[4]),
        !*((_BYTE *)v3 + 32)) )
  {
    __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(
      (int *)&s,
      (int (__fastcall *)(int ***, int, int))&vsnprintf,
      16,
      (int)"%lu",
      *(_DWORD *)(*((_DWORD *)v3 + 6) + 12));
    v11 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&s, " hit(s)");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v22, v11);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&s);
    CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)(*((_DWORD *)v3 + 6) + 24));
    __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(
      (int *)&v24,
      (int (__fastcall *)(int ***, int, int))&vsnprintf,
      58,
      (int)"%f",
      v1);
    v12 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v24, 0, "in ");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&s, v12);
    v13 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&s, "s");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v23, v13);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&s);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
    CTRPluginFramework::Renderer::DrawString(v22, 131, &v15, CTRPluginFramework::Color::White);
    CTRPluginFramework::Renderer::DrawString(v23, 131, &v15, CTRPluginFramework::Color::White);
    v15 -= 10;
    CTRPluginFramework::Renderer::DrawSysString(&unk_1EBF, 255, &v15, 300, CTRPluginFramework::Color::SkyBlue, 0);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v22);
  }
  return result;
}
// 28: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background;
// 2C: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::background2;
// 30: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(void)const::waitLogo;
// 40: using guessed type int dword_40;
// 1F2C: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 1F34: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1F88: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 1F8C: using guessed type int __fastcall _cxa_guard_release(_DWORD, _DWORD);
// 1F94: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD, _DWORD);
// 1F9C: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD);
// 1FA0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1FA4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 1FAC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 1FB0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000D1C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_RenderTop(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4
  int v3; // [sp+0h] [bp-20h]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(1);
  if ( *((_BYTE *)v1 + 32) || *((_BYTE *)v1 + 35) )
    return CTRPluginFramework::PluginMenuSearch::_ShowProgressWindow(v1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v3, "Search");
  CTRPluginFramework::Window::Draw(&CTRPluginFramework::Window::TopWindow, &v3);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v3);
  return CTRPluginFramework::SearchMenu::Draw((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 48));
}
// 1F2C: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1FD8: using guessed type int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD);

//----- (00000D8C) --------------------------------------------------------
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000DC8) --------------------------------------------------------
int __fastcall CTRPluginFramework::ClearSearchFolder(CTRPluginFramework *this)
{
  int v1; // r5
  int v2; // r5
  int v3; // r8
  int v5; // [sp+4h] [bp-74h]
  int v6; // [sp+8h] [bp-70h]
  int v7; // [sp+Ch] [bp-6Ch]
  char *v8; // [sp+10h] [bp-68h]
  int v9; // [sp+14h] [bp-64h]
  char v10; // [sp+18h] [bp-60h]
  char v11; // [sp+28h] [bp-50h]

  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v8, "Search");
  CTRPluginFramework::Directory::Directory(&v11, &v8, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v8,
    (const char *)&unk_1ECE);
  v1 = CTRPluginFramework::Directory::ListFiles(&v11, &v5, &v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  if ( v1 > 0 )
  {
    v2 = v5;
    v3 = v6;
    while ( v2 != v3 )
    {
      v8 = &v10;
      v9 = 0;
      v10 = 0;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(
        &v8,
        *(_DWORD *)(v2 + 4) + 7);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v8, "Search/", 7);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v8, v2);
      CTRPluginFramework::File::Remove(&v8);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
      v2 += 24;
    }
  }
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v5);
  return CTRPluginFramework::Directory::~Directory((CTRPluginFramework::Directory *)&v11);
}
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1FE8: using guessed type int __fastcall CTRPluginFramework::Directory::Directory(_DWORD, _DWORD, _DWORD);
// 1FEC: using guessed type int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD);
// 1FF0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// 1FF4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD);
// 1FF8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1FFC: using guessed type int __fastcall CTRPluginFramework::File::Remove(_DWORD);

//----- (00000EBC) --------------------------------------------------------
int __fastcall std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::push_back(std::__detail::_List_node_base *a1, _DWORD *a2)
{
  _DWORD *v2; // r5
  std::__detail::_List_node_base *v3; // r4
  std::__detail::_List_node_base *v4; // r0
  int result; // r0

  v2 = a2;
  v3 = a1;
  v4 = (std::__detail::_List_node_base *)operator new(0xCu);
  *((_DWORD *)v4 + 2) = *v2;
  result = std::__detail::_List_node_base::_M_hook(v4, v3);
  ++*((_DWORD *)v3 + 2);
  return result;
}
// 2008: using guessed type _DWORD __cdecl std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base *__hidden this, std::__detail::_List_node_base *);

//----- (00000EF0) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::RestoreSearchState(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4
  int v2; // r5
  int v3; // r0
  int v4; // r7
  int v5; // r5
  int v6; // r3
  int v7; // r6
  int v8; // r1
  int v9; // r5
  int v10; // r7
  CTRPluginFramework::Search *v11; // r0
  int v12; // r0
  int v13; // r3
  unsigned int v14; // r0
  signed int v16; // r3
  int v17; // [sp+4h] [bp-7Ch]
  int v18; // [sp+8h] [bp-78h]
  int v19; // [sp+Ch] [bp-74h]
  char v20; // [sp+10h] [bp-70h]
  char v21; // [sp+28h] [bp-58h]

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v20, "Search");
  CTRPluginFramework::Directory::Directory(&v21, &v20, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v20);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  if ( CTRPluginFramework::Directory::IsOpen((CTRPluginFramework::Directory *)&v21) )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v20, "Step");
    v2 = CTRPluginFramework::Directory::ListFiles(&v21, &v17, &v20);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v20);
    if ( v2 )
    {
      while ( 1 )
      {
        v3 = v17;
        v4 = v18;
        if ( (unsigned int)(-1431655765 * ((v18 - v17) >> 3)) <= 5 )
          break;
        if ( v18 != v17 + 24 )
        {
          v9 = -1431655765 * ((v18 - (v17 + 24)) >> 3);
          while ( 1 )
          {
            v10 = v3 + 24;
            if ( v9 <= 0 )
              break;
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=();
            --v9;
            v3 = v10;
          }
        }
        v18 -= 24;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v18);
      }
      v5 = v17;
      while ( 1 )
      {
        v6 = *((_DWORD *)v1 + 6);
        if ( v4 == v5 )
          break;
        if ( v6 )
          std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::push_back(
            (CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 12),
            (_DWORD *)v1 + 6);
        v7 = operator new(0x570u);
        v8 = *((_DWORD *)v1 + 6);
        CTRPluginFramework::Search32::Search32();
        v5 += 24;
        *((_DWORD *)v1 + 6) = v7;
      }
      if ( v6 )
      {
        *((_DWORD *)v1 + 10) = *(_DWORD *)(v6 + 32) + 1;
        CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 48));
        CTRPluginFramework::PluginMenuSearch::_PopulateSearchType(v1, 0);
        CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 784));
        if ( *((_DWORD *)v1 + 5) )
          CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 712));
        v11 = (CTRPluginFramework::Search *)*((_DWORD *)v1 + 6);
        *((_BYTE *)v1 + 212) = 0;
        *((_BYTE *)v1 + 388) = 0;
        *((_BYTE *)v1 + 448) = 0;
        *((_BYTE *)v1 + 256) = 0;
        v12 = CTRPluginFramework::Search::GetType(v11) & 0x3F;
        v13 = -v12;
        v14 = 31 - __clz(v12 & -v12);
        if ( v14 == 4 )
          v13 = 3;
        *((_DWORD *)v1 + 65) = v14;
        if ( v14 == 4 )
        {
          *((_DWORD *)v1 + 65) = v13;
LABEL_28:
          v16 = 3;
LABEL_26:
          *((_DWORD *)v1 + 128) = v16;
        }
        else
        {
          switch ( v14 )
          {
            case 0u:
              *((_DWORD *)v1 + 128) = 0;
              break;
            case 1u:
              v16 = 1;
              goto LABEL_26;
            case 2u:
              v16 = 2;
              goto LABEL_26;
            case 3u:
              goto LABEL_28;
            default:
              break;
          }
        }
        CTRPluginFramework::NumericTextBox::Clear((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 504));
      }
    }
  }
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v17);
  return CTRPluginFramework::Directory::~Directory((CTRPluginFramework::Directory *)&v21);
}
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1FE8: using guessed type int __fastcall CTRPluginFramework::Directory::Directory(_DWORD, _DWORD, _DWORD);
// 1FEC: using guessed type int __fastcall CTRPluginFramework::Directory::ListFiles(_DWORD, _DWORD, _DWORD);
// 2010: using guessed type int CTRPluginFramework::Search32::Search32(void);
// 2014: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(void);

//----- (00001118) --------------------------------------------------------
void __fastcall std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::pop_back(int a1)
{
  std::__detail::_List_node_base *v1; // r4

  v1 = *(std::__detail::_List_node_base **)(a1 + 4);
  --*(_DWORD *)(a1 + 8);
  std::__detail::_List_node_base::_M_unhook(v1);
  operator delete((void *)v1);
}

//----- (00001140) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_undoBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4
  int v2; // r0

  v1 = this;
  v2 = *((_DWORD *)this + 6);
  if ( v2 )
    (*(void (**)(void))(*(_DWORD *)v2 + 12))();
  if ( *((_DWORD *)v1 + 5) )
  {
    *((_DWORD *)v1 + 6) = *(_DWORD *)(*((_DWORD *)v1 + 4) + 8);
    std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::pop_back((int)v1 + 12);
  }
  else
  {
    *((_DWORD *)v1 + 6) = 0;
  }
  --*((_DWORD *)v1 + 10);
  if ( !*((_DWORD *)v1 + 5) )
    CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 712));
  return CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 48));
}

//----- (000011B0) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::_M_realloc_insert<CTRPluginFramework::Region const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r6
  _BYTE *v4; // r9
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r7
  _BYTE *v10; // r8
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r10
  int v14; // r1
  char *v15; // r3
  char *v16; // r5
  int v17; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 3;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 3;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x1FFFFFFF )
  {
    v8 = 0x1FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(8 * v8);
LABEL_8:
  v14 = v11[1];
  v15 = &v13[v12];
  *(_DWORD *)v15 = *v11;
  *((_DWORD *)v15 + 1) = v14;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v16 = &v13[v12 + 8];
  if ( v10 != v4 )
    memcpy(v16, v10, v4 - v10);
  v17 = (int)&v16[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v17;
  v9[2] = &v13[8 * v8];
}

//----- (00001278) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::push_back(_DWORD *a1, int *a2)
{
  int v2; // r3
  _DWORD *v3; // r2
  int v4; // r0
  int v5; // r1

  v2 = a1[1];
  if ( v2 == a1[2] )
  {
    std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::_M_realloc_insert<CTRPluginFramework::Region const&>(
      a1,
      (_BYTE *)v2,
      a2);
  }
  else
  {
    v3 = a1;
    v4 = *a2;
    v5 = a2[1];
    *(_DWORD *)v2 = v4;
    *(_DWORD *)(v2 + 4) = v5;
    v3[1] += 8;
  }
}

//----- (000012B4) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_ListRegion(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4
  int v2; // r0
  unsigned int v3; // r5
  int v4; // r11
  _DWORD *v5; // r3
  unsigned int v6; // r8
  signed int v7; // r10
  int result; // r0
  unsigned int i; // r6
  _BOOL4 v10; // r3
  bool v11; // zf
  _DWORD *v12; // r5
  _DWORD *v13; // r9
  int v14; // r6
  unsigned int v15; // r1
  unsigned int v16; // r7
  bool v17; // zf
  char v18; // [sp+Ch] [bp-5Ch]
  __int64 v19; // [sp+10h] [bp-58h]
  unsigned int v20; // [sp+18h] [bp-50h]
  int v21; // [sp+1Ch] [bp-4Ch]
  int v22; // [sp+20h] [bp-48h]
  unsigned int v23; // [sp+24h] [bp-44h]
  char v24; // [sp+28h] [bp-40h]

  v1 = this;
  v2 = CTRPluginFramework::Process::GetHandle(this);
  v3 = *((_DWORD *)v1 + 54);
  v4 = v2;
  v5 = *(_DWORD **)v1;
  if ( !v3 )
    goto LABEL_5;
  if ( v3 >= (*((_DWORD *)v1 + 1) - (signed int)v5) >> 3 )
  {
    v3 = 0;
LABEL_5:
    v6 = v3;
    goto LABEL_6;
  }
  v6 = v5[2 * v3];
  v3 = v5[2 * v3 + 1];
LABEL_6:
  v7 = 1;
  if ( v5 != *((_DWORD **)v1 + 1) )
    *((_DWORD *)v1 + 1) = v5;
  CTRPluginFramework::ComboBox::Clear((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 208));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v24, "All memory");
  CTRPluginFramework::ComboBox::Add((char *)v1 + 208, &v24);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  svcQueryProcessMemory(&v20, &v18, v4, 0x100000);
  LODWORD(v19) = v20;
  HIDWORD(v19) = v21 + v20;
  std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::push_back(v1, (int *)&v19);
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v24, "%08X-%08X", v19);
  CTRPluginFramework::ComboBox::Add((char *)v1 + 208, &v24);
  result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  for ( i = v20 + v21 + 1; ; i = v16 )
  {
    v10 = i > 0x4FFFFFFF;
    if ( v7 > 98 )
      v10 = 1;
    if ( v10 )
      break;
    result = svcQueryProcessMemory(&v20, &v18, v4, i);
    if ( result >= 0 )
    {
      v17 = v20 == 122683392;
      if ( v20 != 122683392 )
        v17 = (v20 & 0xFEFFFFFF) == 100663296;
      v16 = v20 + v21 + 1;
      if ( !v17 && v20 != _ctru_linear_heap )
      {
        result = v23;
        if ( (v23 > 6 || ~(0x4Du >> v23) & 1) && v22 & 1 )
        {
          LODWORD(v19) = v20;
          HIDWORD(v19) = v20 + v21;
          std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::push_back(v1, (int *)&v19);
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v24, "%08X-%08X", v19);
          CTRPluginFramework::ComboBox::Add((char *)v1 + 208, &v24);
          result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
          ++v7;
        }
        if ( v20 > 0x4FFFFFFF )
          break;
      }
    }
    else
    {
      if ( v20 > 0x4FFFFFFF )
        break;
      v16 = v20 + v21 + 1;
      if ( v16 <= i )
        v16 = i + 4096;
    }
  }
  v11 = v6 == 0;
  if ( v6 )
    v11 = v3 == 0;
  if ( !v11 )
  {
    v12 = *(_DWORD **)v1;
    v13 = (_DWORD *)*((_DWORD *)v1 + 1);
    v14 = 0;
    while ( v12 != v13 )
    {
      if ( *v12 == v6 )
      {
        *((_DWORD *)v1 + 54) = v14;
        *((_BYTE *)v1 + 388) = 1;
        *((_BYTE *)v1 + 448) = 1;
        v15 = v12[1];
        if ( *((_DWORD *)v1 + 114) >= v15 )
          result = CTRPluginFramework::NumericTextBox::SetValue(
                     (CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 444),
                     v15);
      }
      ++v14;
      v12 += 2;
    }
  }
  return result;
}
// 1F58: using guessed type int __fastcall CTRPluginFramework::ComboBox::Add(_DWORD, _DWORD);
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2030: using guessed type int __fastcall svcQueryProcessMemory(_DWORD, _DWORD, _DWORD, _DWORD);
// 2034: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);

//----- (0000151C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::_resetBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4
  char *v2; // r5
  char *i; // r6
  int v4; // r0
  char *j; // r0
  char *v6; // r6
  int v7; // r0
  CTRPluginFramework *v8; // r0

  v1 = this;
  if ( *((_DWORD *)this + 5) )
  {
    v2 = (char *)this + 12;
    for ( i = (char *)*((_DWORD *)this + 3); i != v2; i = *(char **)i )
    {
      v4 = *((_DWORD *)i + 2);
      if ( v4 )
        (*(void (**)(void))(*(_DWORD *)v4 + 12))();
    }
    for ( j = (char *)*((_DWORD *)v1 + 3); v2 != j; j = v6 )
    {
      v6 = *(char **)j;
      operator delete(j);
    }
    *((_DWORD *)v1 + 4) = v2;
    *((_DWORD *)v1 + 3) = v2;
    *((_DWORD *)v1 + 5) = 0;
  }
  v7 = *((_DWORD *)v1 + 6);
  if ( v7 )
    (*(void (**)(void))(*(_DWORD *)v7 + 12))();
  *((_DWORD *)v1 + 6) = 0;
  CTRPluginFramework::PluginMenuSearch::_ListRegion(v1);
  *((_BYTE *)v1 + 212) = 1;
  *((_BYTE *)v1 + 256) = 1;
  *((_DWORD *)v1 + 10) = 0;
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 784));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 712));
  CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 48));
  v8 = (CTRPluginFramework *)CTRPluginFramework::PluginMenuSearch::_PopulateSearchType(v1, 1);
  if ( *((_DWORD *)v1 + 76) )
  {
    *((_BYTE *)v1 + 344) = 0;
    *((_BYTE *)v1 + 508) = 0;
  }
  return CTRPluginFramework::ClearSearchFolder(v8);
}

//----- (00001600) --------------------------------------------------------
void __fastcall CTRPluginFramework::PluginMenuSearch::GetRegionsList(CTRPluginFramework::PluginMenuSearch *a1, _DWORD *a2)
{
  int **v2; // r4
  _DWORD *v3; // r5
  int *v4; // r4
  int *v5; // r6
  int **v6; // t0

  v2 = (int **)a1;
  v3 = a2;
  if ( *a2 != a2[1] )
    a2[1] = *a2;
  CTRPluginFramework::PluginMenuSearch::_ListRegion(a1);
  v6 = v2;
  v4 = *v2;
  v5 = v6[1];
  while ( v5 != v4 )
  {
    std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::push_back(v3, v4);
    v4 += 2;
  }
}

//----- (00001640) --------------------------------------------------------
char *__fastcall std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<CTRPluginFramework::Region>(void *src, _BYTE *a2, char *a3)
{
  char *v3; // r3
  size_t v4; // r4

  v3 = a3;
  v4 = a2 - (_BYTE *)src;
  if ( a2 != src )
    v3 = (char *)memmove(a3, src, v4);
  return &v3[v4];
}

//----- (00001670) --------------------------------------------------------
char **__fastcall std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::operator=(char **a1, char **a2)
{
  char **v2; // r4
  char *v3; // r6
  char *v4; // r8
  char *v5; // r2
  int v6; // r7
  unsigned int v7; // r0
  char **v8; // r5
  unsigned int v9; // r5
  int v11; // r3
  __int64 v12; // r0

  v2 = a1;
  if ( a2 != a1 )
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = *a1;
    v6 = v4 - *a2;
    v7 = v6 >> 3;
    v8 = a2;
    if ( v6 >> 3 <= (unsigned int)((v2[2] - *v2) >> 3) )
    {
      v11 = v2[1] - v5;
      if ( v7 > v11 >> 3 )
      {
        std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<CTRPluginFramework::Region>(
          v3,
          &v3[v11],
          v5);
        v12 = *(_QWORD *)v8;
        v5 = v2[1];
        LODWORD(v12) = *(unsigned __int64 *)v8 + v5 - *v2;
      }
      else
      {
        HIDWORD(v12) = a2[1];
        LODWORD(v12) = v3;
      }
      std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<CTRPluginFramework::Region>(
        (void *)v12,
        (_BYTE *)HIDWORD(v12),
        v5);
    }
    else
    {
      if ( v7 )
      {
        if ( v7 > 0x1FFFFFFF )
          std::__throw_bad_alloc();
        v7 = operator new(v4 - *a2);
      }
      v9 = v7;
      std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<CTRPluginFramework::Region>(
        v3,
        v4,
        (char *)v7);
      if ( *v2 )
        operator delete(*v2);
      *v2 = (char *)v9;
      v2[2] = (char *)(v9 + v6);
    }
    v2[1] = &(*v2)[v6];
  }
  return v2;
}

//----- (00001744) --------------------------------------------------------
void __fastcall CTRPluginFramework::PluginMenuSearch::_searchBtn_OnClick(CTRPluginFramework::PluginMenuSearch *this)
{
  CTRPluginFramework::PluginMenuSearch *v1; // r4
  unsigned int v2; // r3
  _DWORD *v3; // r6
  int v4; // r5
  std::__detail::_List_node_base *v5; // r0
  unsigned int v6; // r2
  signed int v7; // r3
  __int64 v8; // r0
  bool v9; // zf
  int v10; // r3
  signed int v11; // r12
  unsigned __int8 *v12; // r5
  unsigned int v13; // r3
  int v14; // r5
  char v15; // [sp+8h] [bp-60h]
  char v16; // [sp+Ch] [bp-5Ch]
  __int64 v17; // [sp+24h] [bp-44h]
  int v18; // [sp+3Ch] [bp-2Ch]
  int v19; // [sp+40h] [bp-28h]
  int v20; // [sp+44h] [bp-24h]
  void *v21; // [sp+48h] [bp-20h]
  int v22; // [sp+4Ch] [bp-1Ch]
  int v23; // [sp+50h] [bp-18h]
  int v24; // [sp+54h] [bp-14h]

  v1 = this;
  if ( *((_DWORD *)this + 6) )
    std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::push_back(
      (CTRPluginFramework::PluginMenuSearch *)((char *)this + 12),
      (_DWORD *)this + 6);
  else
    CTRPluginFramework::ClearSearchFolder(this);
  v2 = *((_DWORD *)v1 + 5);
  if ( v2 > 5 )
  {
    v3 = (_DWORD *)*((_DWORD *)v1 + 3);
    v4 = v3[2];
    v5 = (std::__detail::_List_node_base *)*((_DWORD *)v1 + 3);
    *((_DWORD *)v1 + 5) = v2 - 1;
    std::__detail::_List_node_base::_M_unhook(v5);
    operator delete(v3);
    if ( v4 )
      (*(void (__fastcall **)(int))(*(_DWORD *)v4 + 12))(v4);
  }
  v6 = *((_DWORD *)v1 + 54);
  if ( v6 != -1 && v6 <= (*((_DWORD *)v1 + 1) - *(_DWORD *)v1) >> 3 )
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v7 = *((_DWORD *)v1 + 6);
    LODWORD(v8) = *((_DWORD *)v1 + 99);
    v9 = v7 == 0;
    v24 = *((_DWORD *)v1 + 6);
    if ( !v7 )
      v7 = 128;
    HIDWORD(v8) = *((_DWORD *)v1 + 114);
    if ( v9 )
    {
      v18 = v7;
    }
    else if ( !*(_DWORD *)(v7 + 32) )
    {
      v18 = 256;
      v24 = *(_DWORD *)(*((_DWORD *)v1 + 3) + 8);
    }
    switch ( *((_DWORD *)v1 + 65) )
    {
      case 0:
        v10 = v18 | 1;
        goto LABEL_17;
      case 1:
        v10 = v18 | 2;
        goto LABEL_17;
      case 2:
        v10 = v18 | 4;
        goto LABEL_17;
      case 3:
        v10 = v18 | 0x10;
LABEL_17:
        v18 = v10;
        break;
      default:
        break;
    }
    if ( *((_DWORD *)v1 + 76) )
      v11 = 64;
    else
      v11 = 0;
    v18 |= (512 << *((_DWORD *)v1 + 87)) | v11;
    v19 = *((_DWORD *)v1 + 129);
    if ( v6 )
    {
      v17 = v8;
      std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::push_back(&v21, (int *)&v17);
    }
    else
    {
      LOBYTE(v20) = 1;
      std::vector<CTRPluginFramework::Region,std::allocator<CTRPluginFramework::Region>>::operator=(
        (char **)&v21,
        (char **)v1);
    }
    v12 = (unsigned __int8 *)operator new(0x570u);
    CTRPluginFramework::Search32::Search32();
    v13 = v12[4];
    *((_DWORD *)v1 + 6) = v12;
    if ( (v13 >> 1) & 1 )
    {
      CTRPluginFramework::Search32::~Search32((CTRPluginFramework::Search32 *)v12);
      *((_DWORD *)v1 + 6) = 0;
      if ( *((_DWORD *)v1 + 5) )
      {
        v14 = *(_DWORD *)(*((_DWORD *)v1 + 4) + 8);
        std::__cxx11::list<CTRPluginFramework::Search *,std::allocator<CTRPluginFramework::Search *>>::pop_back((int)v1 + 12);
        *((_DWORD *)v1 + 6) = v14;
      }
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v16, "Error");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v17,
        "An error occurred: pool alloc.");
      CTRPluginFramework::MessageBox::MessageBox(&v15, &v16, &v17);
      CTRPluginFramework::MessageBox::operator()(&v15);
      CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v15);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v17);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v16);
    }
    else
    {
      *((_BYTE *)v1 + 212) = 0;
      *((_BYTE *)v1 + 388) = 0;
      *((_BYTE *)v1 + 448) = 0;
      *((_BYTE *)v1 + 256) = 0;
      CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 640));
      CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuSearch *)((char *)v1 + 712));
      *((_BYTE *)v1 + 32) = 1;
      ++*((_DWORD *)v1 + 10);
    }
    if ( v21 )
      operator delete(v21);
  }
}
// 1F5C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2040: using guessed type int CTRPluginFramework::Search32::Search32(void);
// 2048: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD);
// 204C: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (000019D0) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuSearch::operator()(int a1, _DWORD *a2, __int64 *a3)
{
  int v3; // r4
  int v4; // r5
  _DWORD *v6; // r6
  __int64 *v7; // r7
  unsigned int i; // r5
  __int64 v9; // r2
  int v10; // r0
  bool v11; // r1
  unsigned int v12; // r1
  int v13; // r8
  int v14; // r3
  bool v15; // zf
  unsigned int v16; // r10
  int v17; // r3
  signed int v18; // r3
  int v19; // r2
  int v20; // r3
  signed int v21; // r1
  bool v22; // zf
  bool v23; // r3
  int v24; // r3
  unsigned int v25; // r2
  unsigned int v26; // r1
  int v27; // r3
  unsigned int v28; // r2
  unsigned int v29; // r1

  v3 = a1;
  if ( *(_BYTE *)(a1 + 33) )
  {
    if ( CTRPluginFramework::HexEditor::operator()(*(_DWORD *)(a1 + 28)) )
    {
      v4 = 0;
      *(_BYTE *)(v3 + 33) = 0;
      return v4;
    }
    return 0;
  }
  v6 = a2;
  v7 = a3;
  if ( !*(_BYTE *)(a1 + 34) )
  {
    CTRPluginFramework::PluginMenuSearch::_ListRegion((CTRPluginFramework::PluginMenuSearch *)a1);
    *(_BYTE *)(v3 + 34) = 1;
  }
  if ( !*(_BYTE *)(v3 + 32) )
  {
    if ( CTRPluginFramework::SearchMenu::ProcessEvent(v3 + 48, v6, v7) )
      CTRPluginFramework::Window::Close((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
    for ( i = 0; i < -1431655765 * ((v6[1] - *v6) >> 2); ++i )
      CTRPluginFramework::PluginMenuSearch::_ProcessEvent(v3, (Event *)(*v6 + 12 * i));
  }
  v9 = *v7;
  CTRPluginFramework::PluginMenuSearch::_Update((CTRPluginFramework::Touch *)v3);
  CTRPluginFramework::PluginMenuSearch::_RenderTop((CTRPluginFramework::PluginMenuSearch *)v3);
  CTRPluginFramework::PluginMenuSearch::_RenderBottom((CTRPluginFramework::PluginMenuSearch *)v3);
  if ( !*(_BYTE *)(v3 + 32) )
  {
    if ( !*(_BYTE *)(v3 + 35) )
    {
      v4 = CTRPluginFramework::Window::MustClose((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
      if ( v4 )
        return v4;
      if ( CTRPluginFramework::Button::operator()(v3 + 568) )
        CTRPluginFramework::PluginMenuSearch::_searchBtn_OnClick((CTRPluginFramework::PluginMenuSearch *)v3);
      if ( CTRPluginFramework::Button::operator()(v3 + 712) )
        CTRPluginFramework::PluginMenuSearch::_undoBtn_OnClick((CTRPluginFramework::PluginMenuSearch *)v3);
      if ( CTRPluginFramework::Button::operator()(v3 + 784) )
        CTRPluginFramework::PluginMenuSearch::_resetBtn_OnClick((CTRPluginFramework::PluginMenuSearch *)v3);
      if ( CTRPluginFramework::Button::operator()(v3 + 856) )
      {
        v11 = *(_BYTE *)(v3 + 36) ^ 1;
        *(_BYTE *)(v3 + 36) = v11;
        CTRPluginFramework::NumericTextBox::UseHexadecimal((CTRPluginFramework::NumericTextBox *)(v3 + 504), v11);
      }
      v13 = CTRPluginFramework::ComboBox::operator()(v3 + 208);
      if ( v13 )
      {
        v14 = *(_DWORD *)(v3 + 216);
        v15 = v14 == 0;
        if ( v14 )
        {
          v17 = v14 - 1;
          v16 = *(_DWORD *)(*(_DWORD *)v3 + 8 * v17 + 4);
          v12 = *(_DWORD *)(*(_DWORD *)v3 + 8 * v17);
        }
        else
        {
          v13 = 0;
          v16 = -16;
        }
        if ( v15 )
          v12 = v13;
        CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 384), v12);
        CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 444), v16);
        *(_BYTE *)(v3 + 388) = v13;
        *(_BYTE *)(v3 + 448) = v13;
      }
      if ( CTRPluginFramework::ComboBox::operator()(v3 + 252) )
      {
        switch ( *(_DWORD *)(v3 + 260) )
        {
          case 0:
            v18 = 0;
            goto LABEL_40;
          case 1:
            v18 = 1;
            goto LABEL_40;
          case 2:
            v18 = 2;
            goto LABEL_40;
          case 3:
            v18 = 3;
LABEL_40:
            *(_DWORD *)(v3 + 512) = v18;
            break;
          default:
            break;
        }
        CTRPluginFramework::NumericTextBox::Clear((CTRPluginFramework::NumericTextBox *)(v3 + 504));
      }
      if ( CTRPluginFramework::ComboBox::operator()(v3 + 296) )
      {
        v19 = *(_DWORD *)(v3 + 304);
        if ( v19 )
        {
          v20 = *(_DWORD *)(v3 + 24);
          if ( v20 )
          {
            LOBYTE(v20) = 1;
            v21 = *(_DWORD *)(v3 + 348);
            *(_BYTE *)(v3 + 344) = 1;
            v22 = v21 == 5;
            if ( v21 <= 5 )
              v22 = v19 == 1;
            if ( v22 )
              LOBYTE(v20) = 0;
          }
          else
          {
            *(_BYTE *)(v3 + 344) = 0;
          }
          *(_BYTE *)(v3 + 508) = v20;
        }
        else
        {
          *(_BYTE *)(v3 + 508) = 1;
          *(_BYTE *)(v3 + 344) = 1;
        }
      }
      if ( CTRPluginFramework::ComboBox::operator()(v3 + 340) )
      {
        v23 = *(_DWORD *)(v3 + 348) > 5 || *(_DWORD *)(v3 + 304) != 1;
        *(_BYTE *)(v3 + 508) = v23;
      }
      CTRPluginFramework::NumericTextBox::operator()(v3 + 504);
      if ( CTRPluginFramework::NumericTextBox::operator()(v3 + 384) )
      {
        v24 = *(_DWORD *)(v3 + 216) - 1;
        v25 = *(_DWORD *)(v3 + 396);
        v26 = *(_DWORD *)(*(_DWORD *)v3 + 8 * v24);
        if ( v25 >= *(_DWORD *)(*(_DWORD *)v3 + 8 * v24 + 4) || v25 < v26 || v25 >= *(_DWORD *)(v3 + 456) )
          CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 384), v26);
      }
      if ( CTRPluginFramework::NumericTextBox::operator()(v3 + 444) )
      {
        v27 = *(_DWORD *)(v3 + 216) - 1;
        v28 = *(_DWORD *)(v3 + 456);
        v29 = *(_DWORD *)(*(_DWORD *)v3 + 8 * v27 + 4);
        if ( v28 > v29 || v28 <= *(_DWORD *)(*(_DWORD *)v3 + 8 * v27) || v28 <= *(_DWORD *)(v3 + 396) )
        {
          CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 444), v29);
          return v4;
        }
      }
    }
    return 0;
  }
  v4 = CTRPluginFramework::Button::operator()(v3 + 640);
  if ( v4 )
    return 0;
  v10 = CTRPluginFramework::Search::ExecuteSearch(*(CTRPluginFramework::Search **)(v3 + 24));
  *(_BYTE *)(v3 + 32) = v10 ^ 1;
  if ( !v10 )
    return 0;
  *(_BYTE *)(v3 + 35) = 1;
  *(_BYTE *)(v3 + 344) = 1;
  if ( *(_DWORD *)(v3 + 40) == 1 )
    CTRPluginFramework::PluginMenuSearch::_PopulateSearchType((CTRPluginFramework::PluginMenuSearch *)v3, 0);
  CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::SearchMenu *)(v3 + 48));
  return v4;
}
// 2054: using guessed type int __fastcall CTRPluginFramework::HexEditor::operator()(_DWORD);
// 2058: using guessed type int __fastcall CTRPluginFramework::SearchMenu::ProcessEvent(_DWORD, _DWORD, _DWORD);
// 2060: using guessed type int __fastcall CTRPluginFramework::Button::operator()(_DWORD);
// 206C: using guessed type int __fastcall CTRPluginFramework::ComboBox::operator()(_DWORD);
// 2070: using guessed type int __fastcall CTRPluginFramework::NumericTextBox::operator()(_DWORD);

// ALL OK, 25 function(s) have been successfully decompiled
