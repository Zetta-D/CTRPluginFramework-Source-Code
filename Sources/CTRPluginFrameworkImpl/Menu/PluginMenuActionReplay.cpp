/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::{lambda(void *)#1}::_FUN(int a1);
int CTRPluginFramework::PluginMenuActionReplay::Initialize(void)::{lambda(void *)#1}::_FUN();
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
unsigned int __fastcall CTRPluginFramework::ProcessPathString(CTRPluginFramework *this, unsigned __int8 *a2);
bool __fastcall CTRPluginFramework::ActionReplay_GetInput(int a1);
int __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(int result, int a2, int a3);
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this);
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2);
CTRPluginFramework::PluginMenuActionReplay *__fastcall CTRPluginFramework::PluginMenuActionReplay::PluginMenuActionReplay(CTRPluginFramework::PluginMenuActionReplay *this);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::Initialize(CTRPluginFramework::PluginMenuActionReplay *this, int a2, int a3);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_ProcessEvent(int result, _QWORD *a2);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_CutBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_PasteBtn_OnClick(int result);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_TrashBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this);
CTRPluginFramework::File *__fastcall CTRPluginFramework::PluginMenuActionReplay::SaveCodes(CTRPluginFramework::PluginMenuActionReplay *this);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_OpenFileBtn_OnClick(int result);
CTRPluginFramework::ARCode *__fastcall CTRPluginFramework::ARCode::~ARCode(CTRPluginFramework::ARCode *this);
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_NewBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(char **a1, char *a2, int a3);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_EditorBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(const CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(int a1, const CTRPluginFramework::ARCode *a2);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::NewARCode(int result, int a2, unsigned int a3, unsigned int a4);
char *__fastcall std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, _BYTE *a2, char *a3);
char **__fastcall std::vector<unsigned long,std::allocator<unsigned long>>::operator=(char **a1, char **a2);
CTRPluginFramework::ARCode **__fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::operator=(CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode **a2);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_DuplicateBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this);
CTRPluginFramework::PluginMenuActionReplay *__fastcall CTRPluginFramework::PluginMenuActionReplay::~PluginMenuActionReplay(CTRPluginFramework::PluginMenuActionReplay *this);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_DrawBottom(CTRPluginFramework::PluginMenuActionReplay *this);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_Update(CTRPluginFramework::PluginMenuActionReplay *this, const Time *a2, CTRPluginFramework::PluginMenuActionReplay *a3, const Time *a4);
int __fastcall CTRPluginFramework::PluginMenuActionReplay::operator()(unsigned int a1, _QWORD *a2, const Time *a3);
// _DWORD CTRPluginFramework::Menu::Draw(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD CTRPluginFramework::Menu::GetFolder(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ActionReplay_LoadCodes(CTRPluginFramework *__hidden this, CTRPluginFramework::MenuFolderImpl *); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_logic_error(const char *); idb
// int __fastcall CTRPluginFramework::Utils::GetSize(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Open(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *__hidden this); idb
// void __noreturn std::__throw_bad_alloc(void); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// _DWORD CTRPluginFramework::ARCodeEditor::ARCodeEditor(CTRPluginFramework::ARCodeEditor *__hidden this); idb
// int __fastcall CTRPluginFramework::Menu::Menu(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// void *memset(void *s, int c, size_t n);
// _DWORD CTRPluginFramework::Button::Disable(CTRPluginFramework::Button *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawInfo(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawEdit(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawPlus(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawCut(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawClipboard(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawDuplicate(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawTrash(CTRPluginFramework::Icon *__hidden this, int, int, bool); weak
// _DWORD __cdecl CTRPluginFramework::Task::Task(CTRPluginFramework::Task *__hidden this, int (__cdecl *)(void *), void *, int); idb
// _DWORD CTRPluginFramework::Task::Start(CTRPluginFramework::Task *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Task::~Task(CTRPluginFramework::Task *__hidden this); idb
// int __fastcall CTRPluginFramework::Menu::ProcessEvent(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::Close(CTRPluginFramework::Window *__hidden this); idb
// _DWORD CTRPluginFramework::Menu::Pop(CTRPluginFramework::Menu *__hidden this); idb
// int __fastcall CTRPluginFramework::Menu::Insert(_DWORD); weak
// _DWORD CTRPluginFramework::Menu::GetSelectedItem(CTRPluginFramework::Menu *__hidden this); idb
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// _DWORD CTRPluginFramework::Menu::GetRootFolder(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD CTRPluginFramework::MenuFolderImpl::ItemsCount(CTRPluginFramework::MenuFolderImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::LineWriter::LineWriter(CTRPluginFramework::LineWriter *__hidden this, CTRPluginFramework::File *); idb
// _DWORD CTRPluginFramework::File::IsOpen(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::LineWriter::~LineWriter(CTRPluginFramework::LineWriter *__hidden this); idb
// int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::ActionReplay_WriteToFile(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::LineWriter::Close(CTRPluginFramework::LineWriter *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ActionReplay_OpenCheatsFile(CTRPluginFramework *__hidden this, CTRPluginFramework::File *, bool); idb
// int __fastcall ZNK18CTRPluginFramework4File11GetFullNameB5cxx11Ev(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::Remove(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Rename(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Utils::FilePicker(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Menu::CloseAll(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD CTRPluginFramework::MenuFolderImpl::Clear(CTRPluginFramework::MenuFolderImpl *__hidden this); idb
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this); idb
// int CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay(void); weak
// int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD); weak
// int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Populate(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::ActionReplay_ProcessString(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::RemoveAR(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::ARCodeEditor::Edit(CTRPluginFramework::ARCodeEditor *__hidden this, CTRPluginFramework::ARCodeContext *); weak
// _DWORD CTRPluginFramework::ARCodeContext::Update(CTRPluginFramework::ARCodeContext *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *); weak
// _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, unsigned __int8, unsigned int, unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD __cdecl CTRPluginFramework::Button::~Button(CTRPluginFramework::Button *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Menu::~Menu(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::KeyboardImpl::~KeyboardImpl(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::SubMenu::~SubMenu(CTRPluginFramework::SubMenu *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Converter::~Converter(CTRPluginFramework::Converter *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// _DWORD CTRPluginFramework::Button::Draw(CTRPluginFramework::Button *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Menu::Update(CTRPluginFramework::Menu *__hidden this, const Time *); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Button::Enable(CTRPluginFramework::Button *__hidden this, bool); idb
// _DWORD CTRPluginFramework::Menu::IsNoteOpen(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Button::SetState(CTRPluginFramework::Button *__hidden this, bool); idb
// int __fastcall CTRPluginFramework::Button::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD); weak
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Button::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::Menu::ShowNote(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD CTRPluginFramework::Task::Wait(CTRPluginFramework::Task *__hidden this); idb
// int __fastcall CTRPluginFramework::Window::MustClose(_DWORD); weak
// _DWORD CTRPluginFramework::Menu::CloseNote(CTRPluginFramework::Menu *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_1; // weak
int CTRPluginFramework::__pmARinstance; // weak
char `guard variable for'CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top; // weak
_UNKNOWN CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top; // weak
_UNKNOWN unk_1A8A; // weak
// extern _DWORD ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E[2]; idb
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::Orange; weak
// extern _UNKNOWN CTRPluginFramework::Color::Gray; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN _dso_handle; weak


//----- (00000010) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::{lambda(void *)#1}::_FUN(int a1)
{
  CTRPluginFramework::Menu::Draw((CTRPluginFramework::Menu *)(a1 + 544));
  return 0;
}

//----- (00000024) --------------------------------------------------------
int CTRPluginFramework::PluginMenuActionReplay::Initialize(void)::{lambda(void *)#1}::_FUN()
{
  CTRPluginFramework *v0; // r0
  CTRPluginFramework::MenuFolderImpl *v1; // r1

  v0 = (CTRPluginFramework *)CTRPluginFramework::Menu::GetFolder((CTRPluginFramework::Menu *)(CTRPluginFramework::__pmARinstance
                                                                                            + 544));
  CTRPluginFramework::ActionReplay_LoadCodes(v0, v1);
  return 0;
}
// 4: using guessed type int CTRPluginFramework::__pmARinstance;
// 1B4C: using guessed type _DWORD __cdecl CTRPluginFramework::ActionReplay_LoadCodes(CTRPluginFramework *__hidden this, CTRPluginFramework::MenuFolderImpl *);

//----- (00000048) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  const char *v2; // r5
  int *v3; // r4
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  const char *v11; // [sp+4h] [bp-14h]

  v11 = a2;
  v2 = a2;
  *a1 = (int)(a1 + 2);
  if ( !a2 )
    std::__throw_logic_error("basic_string::_M_construct null not valid");
  v3 = a1;
  v4 = strlen(a2);
  v5 = (int)&v2[v4];
  v11 = (const char *)v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v3, &v11, 0);
    v7 = (int)v11;
    *v3 = v6;
    v3[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v3, v2, v5);
  result = v3;
  v9 = (int)v11;
  v10 = *v3;
  v3[1] = (int)v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 1B54: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1B58: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000000D0) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::ProcessPathString(CTRPluginFramework *this, unsigned __int8 *a2)
{
  CTRPluginFramework *v2; // r4
  const char *v3; // r5
  unsigned int result; // r0
  char v5; // r2
  const char *v6; // r6
  int v7; // r3
  int v8; // r5
  bool v9; // zf
  char v10; // r2
  int v11; // t1
  const char *v12; // r3
  int v13; // r2
  int v14; // t1
  bool v15; // zf
  int v16; // r1
  unsigned int v17; // r8
  int v18; // r6
  int v19; // t1
  int v20; // r5
  char v21; // r3
  int v22; // t1
  int v23; // [sp+0h] [bp-30h]

  v2 = this;
  v3 = (const char *)ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E[0];
  result = CTRPluginFramework::Utils::GetSize(ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E, a2);
  if ( result <= 0x23 )
  {
    *(_BYTE *)v2 = 46;
    v7 = *(unsigned __int8 *)v3;
    v8 = (int)(v3 - 1);
    v9 = v7 == 47;
    if ( v7 == 47 )
      v7 = (int)v2 + 1;
    else
      v5 = 47;
    if ( !v9 )
    {
      v7 = (int)v2 + 2;
      *((_BYTE *)v2 + 1) = v5;
    }
    while ( 1 )
    {
      v11 = *(unsigned __int8 *)(v8++ + 1);
      v10 = v11;
      if ( !v11 )
        break;
      *(_BYTE *)v7++ = v10;
    }
  }
  else
  {
    v6 = v3;
    while ( 2 )
    {
      v12 = v6 + 1;
      do
      {
        v6 = v12;
        if ( !v12 || (v14 = *(unsigned __int8 *)v12, ++v12, (v13 = v14) == 0) )
        {
          v20 = (int)&v3[ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E[1] - 37];
          while ( 1 )
          {
            v22 = *(unsigned __int8 *)(v20++ + 1);
            v21 = v22;
            if ( !v22 )
              break;
            *(_BYTE *)v2 = v21;
            v2 = (CTRPluginFramework *)((char *)v2 + 1);
          }
          *(_BYTE *)v2 = v21;
          return result;
        }
        v15 = v13 == 47;
        if ( v13 != 47 )
          v15 = v13 == 92;
      }
      while ( !v15 );
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v23, v6);
      v17 = CTRPluginFramework::Utils::GetSize(&v23, v16);
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
      if ( v17 > 0x22 )
        continue;
      break;
    }
    *(_BYTE *)v2 = 46;
    *((_BYTE *)v2 + 1) = 47;
    *((_BYTE *)v2 + 2) = 46;
    v7 = (int)v2 + 4;
    *((_BYTE *)v2 + 3) = 46;
    v18 = (int)(v6 - 1);
    while ( 1 )
    {
      v19 = *(unsigned __int8 *)(v18++ + 1);
      v10 = v19;
      if ( !v19 )
        break;
      *(_BYTE *)v7++ = v10;
    }
  }
  *(_BYTE *)v7 = v10;
  return result;
}
// 1B60: using guessed type int __fastcall CTRPluginFramework::Utils::GetSize(_DWORD, _DWORD);
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000001E0) --------------------------------------------------------
bool __fastcall CTRPluginFramework::ActionReplay_GetInput(int a1)
{
  int v1; // r4
  int v2; // r4
  char v4; // [sp+4h] [bp-2Ch]
  char v5; // [sp+10h] [bp-20h]

  v1 = a1;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v5,
    (const char *)&unk_1A8A);
  CTRPluginFramework::Keyboard::Keyboard(&v4, &v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  v2 = CTRPluginFramework::Keyboard::Open(&v4, v1, v1);
  CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v4);
  return v2 != -1;
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1B6C: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);
// 1B70: using guessed type int __fastcall CTRPluginFramework::Keyboard::Open(_DWORD, _DWORD, _DWORD);

//----- (0000023C) --------------------------------------------------------
int __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(int result, int a2, int a3)
{
  unsigned int v3; // r6
  unsigned int v4; // r4
  unsigned int *v5; // r7
  int v6; // r5
  int v7; // r8
  unsigned int v8; // r9

  v3 = a3 - a2;
  v4 = -1431655765 * ((a3 - a2) >> 3);
  v5 = (unsigned int *)result;
  v6 = a2;
  v7 = a3;
  if ( -1431655765 * ((a3 - a2) >> 3) )
  {
    if ( v4 > 0xAAAAAAA )
      std::__throw_bad_alloc();
    result = operator new(a3 - a2);
    v4 = result;
  }
  v8 = v4;
  *v5 = v4;
  v5[2] = v4 + v3;
  while ( v7 != v6 )
  {
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v8, v6);
    v6 += 24;
    v8 += 24;
  }
  v5[1] = v4 + 24 * (178956971 * (v3 >> 3) & 0x1FFFFFFF);
  return result;
}
// 1B80: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (000002D4) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this)
{
  CTRPluginFramework::File *v1; // r4

  v1 = this;
  CTRPluginFramework::File::Close(this);
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::File *)((char *)v1 + 48));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000002F8) --------------------------------------------------------
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2)
{
  unsigned int v2; // r3
  int *v3; // r4
  unsigned int v4; // r3
  unsigned int v5; // r3
  int *v7; // [sp+0h] [bp-10h]
  unsigned __int8 *v8; // [sp+4h] [bp-Ch]

  v7 = a1;
  v8 = a2;
  LOBYTE(v8) = 0;
  LOBYTE(v7) = 27;
  v2 = *a2;
  v3 = a1;
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  BYTE1(v7) = v2;
  v4 = a2[1];
  if ( v4 < 1 )
    LOBYTE(v4) = 1;
  BYTE2(v7) = v4;
  v5 = a2[2];
  if ( v5 < 1 )
    LOBYTE(v5) = 1;
  HIBYTE(v7) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, (const char *)&v7);
  return v3;
}

//----- (00000354) --------------------------------------------------------
CTRPluginFramework::PluginMenuActionReplay *__fastcall CTRPluginFramework::PluginMenuActionReplay::PluginMenuActionReplay(CTRPluginFramework::PluginMenuActionReplay *this)
{
  CTRPluginFramework::PluginMenuActionReplay *v1; // r5
  CTRPluginFramework *v2; // r0
  unsigned __int8 *v3; // r1
  int v5; // [sp+8h] [bp-58h]
  int v6; // [sp+20h] [bp-40h]
  int v7; // [sp+24h] [bp-3Ch]
  int v8; // [sp+28h] [bp-38h]
  int v9; // [sp+2Ch] [bp-34h]

  v1 = this;
  CTRPluginFramework::ARCodeEditor::ARCodeEditor(this);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v5, "ActionReplay");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    &v6,
    (const char *)&unk_1A8A);
  CTRPluginFramework::Menu::Menu((char *)v1 + 544, &v5, &v6, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  v6 = 90;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 728, 10, &v6, &CTRPluginFramework::Icon::DrawInfo);
  v6 = 130;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 800, 8, &v6, &CTRPluginFramework::Icon::DrawEdit);
  v6 = 165;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 872, 8, &v6, &CTRPluginFramework::Icon::DrawPlus);
  v6 = 200;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 944, 8, &v6, &CTRPluginFramework::Icon::DrawCut);
  v6 = 200;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 1016, 8, &v6, &CTRPluginFramework::Icon::DrawClipboard);
  v6 = 235;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 1088, 8, &v6, &CTRPluginFramework::Icon::DrawDuplicate);
  v6 = 50;
  v8 = 25;
  v9 = 25;
  v7 = 30;
  CTRPluginFramework::Button::Button((char *)v1 + 1160, 8, &v6, &CTRPluginFramework::Icon::DrawTrash);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v6, "Open");
  ((void (__fastcall *)(char *, _DWORD, int *, int *, _DWORD))CTRPluginFramework::Button::Button)(
    (char *)v1 + 1232,
    0,
    &v6,
    &v5,
    0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  *((_DWORD *)v1 + 326) = 0;
  v2 = (CTRPluginFramework *)memset((char *)v1 + 1308, 0, 0x28u);
  CTRPluginFramework::__pmARinstance = (int)v1;
  CTRPluginFramework::ProcessPathString(v2, v3);
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 800));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 944));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1016));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1088));
  CTRPluginFramework::Button::Disable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1160));
  return v1;
}
// 4: using guessed type int CTRPluginFramework::__pmARinstance;
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1B90: using guessed type int __fastcall CTRPluginFramework::Menu::Menu(_DWORD, _DWORD, _DWORD, _DWORD);
// 1B94: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD);
// 1B98: using guessed type int __fastcall CTRPluginFramework::Button::Button(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1BA4: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawInfo(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1BA8: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawEdit(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1BAC: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawPlus(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1BB0: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawCut(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1BB4: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawClipboard(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1BB8: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawDuplicate(CTRPluginFramework::Icon *__hidden this, int, int, bool);
// 1BBC: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawTrash(CTRPluginFramework::Icon *__hidden this, int, int, bool);

//----- (000005A4) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::Initialize(CTRPluginFramework::PluginMenuActionReplay *this, int a2, int a3)
{
  int v4; // [sp+4h] [bp-Ch]
  int v5; // [sp+8h] [bp-8h]

  v4 = a2;
  v5 = a3;
  CTRPluginFramework::Task::Task(
    (CTRPluginFramework::Task *)&v4,
    (int (__cdecl *)(void *))CTRPluginFramework::PluginMenuActionReplay::Initialize(void)::{lambda(void *)#1}::_FUN,
    0,
    -1);
  CTRPluginFramework::Task::Start((CTRPluginFramework::Task *)&v4);
  return CTRPluginFramework::Task::~Task((CTRPluginFramework::Task *)&v4);
}

//----- (000005D8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_ProcessEvent(int result, _QWORD *a2)
{
  int v2; // r6
  __int64 i; // r4
  _QWORD *v4; // [sp+4h] [bp-1Ch]

  v4 = a2;
  v2 = result;
  for ( i = *a2; HIDWORD(i) != (_DWORD)i; LODWORD(i) = i + 12 )
  {
    v4 = 0;
    result = CTRPluginFramework::Menu::ProcessEvent(v2 + 544, i, &v4);
    if ( result == -4 )
      result = CTRPluginFramework::Window::Close((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  }
  return result;
}
// 1BCC: using guessed type int __fastcall CTRPluginFramework::Menu::ProcessEvent(_DWORD, _DWORD, _DWORD);

//----- (0000062C) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_CutBtn_OnClick(int result)
{
  int v1; // r4

  if ( !*(_DWORD *)(result + 1304) )
  {
    v1 = result;
    result = CTRPluginFramework::Menu::Pop((CTRPluginFramework::Menu *)(result + 544));
    *(_DWORD *)(v1 + 1304) = result;
  }
  return result;
}

//----- (00000650) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_PasteBtn_OnClick(int result)
{
  int v1; // r4

  if ( *(_DWORD *)(result + 1304) )
  {
    v1 = result;
    result = CTRPluginFramework::Menu::Insert(result + 544);
    *(_DWORD *)(v1 + 1304) = 0;
  }
  return result;
}
// 1BDC: using guessed type int __fastcall CTRPluginFramework::Menu::Insert(_DWORD);

//----- (00000678) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_TrashBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this)
{
  CTRPluginFramework::Menu *v1; // r4
  int result; // r0
  int v3; // r5
  int v4; // r5
  char v5; // [sp+Ch] [bp-74h]
  char v6; // [sp+10h] [bp-70h]
  char v7; // [sp+28h] [bp-58h]
  char v8; // [sp+40h] [bp-40h]
  char v9; // [sp+58h] [bp-28h]

  v1 = (CTRPluginFramework::PluginMenuActionReplay *)((char *)this + 544);
  result = CTRPluginFramework::Menu::GetSelectedItem((CTRPluginFramework::PluginMenuActionReplay *)((char *)this + 544));
  v3 = result;
  if ( result )
  {
    CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
      (int *)&v6,
      (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
    CTRPluginFramework::operator<<(&v7, &v6, "Warning");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v8,
      "Do you really want to delete: ");
    CTRPluginFramework::operator<<(&v9, &v8, v3 + 4);
    CTRPluginFramework::MessageBox::MessageBox(&v5, &v7, &v9, 2, 0);
    v4 = CTRPluginFramework::MessageBox::operator()(&v5);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v5);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
    if ( v4 )
    {
      result = CTRPluginFramework::Menu::Pop(v1);
      if ( result )
        result = (*(int (**)(void))(*(_DWORD *)result + 4))();
    }
  }
  return result;
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1BE4: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 1BE8: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 1BEC: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1BF0: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (00000754) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::PluginMenuActionReplay::SaveCodes(CTRPluginFramework::PluginMenuActionReplay *this)
{
  CTRPluginFramework::File *result; // r0
  CTRPluginFramework::MenuFolderImpl *v2; // r5
  unsigned int i; // r4
  int v4; // r0
  bool v5; // r2
  char v6; // [sp+4h] [bp-8Ch]
  char v7; // [sp+10h] [bp-80h]
  char v8; // [sp+28h] [bp-68h]
  char v9; // [sp+40h] [bp-50h]

  result = (CTRPluginFramework::File *)CTRPluginFramework::__pmARinstance;
  if ( CTRPluginFramework::__pmARinstance )
  {
    result = (CTRPluginFramework::File *)CTRPluginFramework::Menu::GetRootFolder((CTRPluginFramework::Menu *)(CTRPluginFramework::__pmARinstance + 544));
    v2 = result;
    if ( result )
    {
      result = (CTRPluginFramework::File *)CTRPluginFramework::MenuFolderImpl::ItemsCount(result);
      if ( result )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v8,
          "AR.temp");
        CTRPluginFramework::File::File(&v9, &v8, 23);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
        CTRPluginFramework::LineWriter::LineWriter(
          (CTRPluginFramework::LineWriter *)&v6,
          (CTRPluginFramework::File *)&v9);
        if ( CTRPluginFramework::File::IsOpen((CTRPluginFramework::File *)&v9) )
        {
          for ( i = 0; CTRPluginFramework::MenuFolderImpl::ItemsCount(v2) > i; ++i )
          {
            v4 = CTRPluginFramework::MenuFolderImpl::operator[](v2, i);
            CTRPluginFramework::ActionReplay_WriteToFile(&v6, v4);
          }
          CTRPluginFramework::LineWriter::Close((CTRPluginFramework::LineWriter *)&v6);
          CTRPluginFramework::ActionReplay_OpenCheatsFile(
            (CTRPluginFramework *)&v9,
            (CTRPluginFramework::File *)&unk_1,
            v5);
          ZNK18CTRPluginFramework4File11GetFullNameB5cxx11Ev(&v7, &v9);
          CTRPluginFramework::File::Close((CTRPluginFramework::File *)&v9);
          CTRPluginFramework::File::Remove(&v7);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v8,
            "AR.temp");
          CTRPluginFramework::File::Rename(&v8, &v7);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
        }
        CTRPluginFramework::LineWriter::~LineWriter((CTRPluginFramework::LineWriter *)&v6);
        result = CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v9);
      }
    }
  }
  return result;
}
// 4: using guessed type int CTRPluginFramework::__pmARinstance;
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1C04: using guessed type int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD);
// 1C14: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);
// 1C18: using guessed type int __fastcall CTRPluginFramework::ActionReplay_WriteToFile(_DWORD, _DWORD);
// 1C24: using guessed type int __fastcall ZNK18CTRPluginFramework4File11GetFullNameB5cxx11Ev(_DWORD, _DWORD);
// 1C28: using guessed type int __fastcall CTRPluginFramework::File::Remove(_DWORD);
// 1C2C: using guessed type int __fastcall CTRPluginFramework::File::Rename(_DWORD, _DWORD);

//----- (00000878) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_OpenFileBtn_OnClick(int result)
{
  int v1; // r7
  int v2; // r5
  CTRPluginFramework::PluginMenuActionReplay *v3; // r0
  int v4; // r6
  CTRPluginFramework::MenuFolderImpl *v5; // r6
  CTRPluginFramework::MenuFolderImpl *v6; // r1
  int v7; // r5
  unsigned __int8 *v8; // r1
  char v9; // [sp+Ch] [bp-7Ch]
  char *v10; // [sp+10h] [bp-78h]
  int v11; // [sp+14h] [bp-74h]
  char v12; // [sp+18h] [bp-70h]
  char v13; // [sp+28h] [bp-60h]
  char v14; // [sp+40h] [bp-48h]
  char v15; // [sp+58h] [bp-30h]

  if ( CTRPluginFramework::__pmARinstance )
  {
    v1 = result;
    CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
      (int *)&v13,
      (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
    CTRPluginFramework::operator<<(&v14, &v13, "Warning");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v15,
      "Do you want to save all changes to current file ?");
    CTRPluginFramework::MessageBox::MessageBox(&v10, &v14, &v15, 2, 0);
    v2 = CTRPluginFramework::MessageBox::operator()(&v10);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v10);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
    v3 = (CTRPluginFramework::PluginMenuActionReplay *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
    if ( v2 )
      CTRPluginFramework::PluginMenuActionReplay::SaveCodes(v3);
    v10 = &v12;
    v11 = 0;
    v12 = 0;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v15, ".txt");
    v4 = CTRPluginFramework::Utils::FilePicker(&v10, &v15);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
    if ( v4 != -1 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(
        ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E,
        &v10);
      v5 = (CTRPluginFramework::MenuFolderImpl *)CTRPluginFramework::Menu::GetRootFolder((CTRPluginFramework::Menu *)(CTRPluginFramework::__pmARinstance + 544));
      if ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v5) )
      {
        CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          (int *)&v13,
          (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
        CTRPluginFramework::operator<<(&v14, &v13, "Warning");
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v15,
          "Do you want to clear current code list ?");
        CTRPluginFramework::MessageBox::MessageBox(&v9, &v14, &v15, 2, 0);
        v7 = CTRPluginFramework::MessageBox::operator()(&v9);
        CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v9);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
        if ( v7 )
        {
          CTRPluginFramework::Menu::CloseAll((CTRPluginFramework::Menu *)(CTRPluginFramework::__pmARinstance + 544));
          CTRPluginFramework::MenuFolderImpl::Clear(v5);
        }
      }
      CTRPluginFramework::ActionReplay_LoadCodes(v5, v6);
      CTRPluginFramework::ProcessPathString((CTRPluginFramework *)(v1 + 1308), v8);
    }
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  }
  return result;
}
// 4: using guessed type int CTRPluginFramework::__pmARinstance;
// 1B4C: using guessed type _DWORD __cdecl CTRPluginFramework::ActionReplay_LoadCodes(CTRPluginFramework *__hidden this, CTRPluginFramework::MenuFolderImpl *);
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1BE4: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 1BEC: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1BF0: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 1C30: using guessed type int __fastcall CTRPluginFramework::Utils::FilePicker(_DWORD, _DWORD);
// 1C34: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);

//----- (00000A44) --------------------------------------------------------
CTRPluginFramework::ARCode *__fastcall CTRPluginFramework::ARCode::~ARCode(CTRPluginFramework::ARCode *this)
{
  CTRPluginFramework::ARCode *v1; // r4
  void *v2; // r0

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 24);
  v2 = (void *)*((_DWORD *)v1 + 3);
  if ( v2 )
    operator delete(v2);
  return v1;
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000A6C) --------------------------------------------------------
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000AA8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_NewBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this)
{
  int v1; // r6
  int v2; // r5
  int v4; // r4
  int v5; // r1
  int v6; // r5
  int v7; // [sp+0h] [bp-70h]
  int v8; // [sp+Ch] [bp-64h]
  int v9; // [sp+10h] [bp-60h]
  int v10; // [sp+14h] [bp-5Ch]
  char *v11; // [sp+18h] [bp-58h]
  int v12; // [sp+1Ch] [bp-54h]
  char v13; // [sp+20h] [bp-50h]
  char v14; // [sp+30h] [bp-40h]
  char v15; // [sp+48h] [bp-28h]
  char v16; // [sp+60h] [bp-10h]

  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v11,
    (const char *)&unk_1A8A);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v14, "Code");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v15, "Folder");
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
    (int)&v8,
    (int)&v14,
    (int)&v16);
  CTRPluginFramework::Keyboard::Keyboard(&v7, &v11, &v8);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  v1 = CTRPluginFramework::Menu::GetRootFolder((CTRPluginFramework::Menu *)(CTRPluginFramework::__pmARinstance + 544));
  if ( v1 )
  {
    v2 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v7);
    if ( v2 != -1 )
    {
      v11 = &v13;
      v12 = 0;
      v13 = 0;
      if ( CTRPluginFramework::ActionReplay_GetInput((int)&v11) )
      {
        if ( v2 )
        {
          if ( v2 != 1 )
            goto LABEL_4;
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v14,
            (const char *)&unk_1A8A);
          v6 = operator new(0x64u);
          CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
          v5 = v6;
        }
        else
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v14,
            (const char *)&unk_1A8A);
          v4 = operator new(0x94u);
          CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay();
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
          v5 = v4;
        }
        CTRPluginFramework::MenuFolderImpl::Append(v1, v5, 0);
      }
LABEL_4:
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
      return CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v7);
    }
  }
  return CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v7);
}
// 4: using guessed type int CTRPluginFramework::__pmARinstance;
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1C44: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD, _DWORD);
// 1C4C: using guessed type int CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay(void);
// 1C50: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD);
// 1C54: using guessed type int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void);

//----- (00000C20) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(char **a1, char *a2, int a3)
{
  char *v3; // r7
  char *v4; // r6
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  char **v9; // r8
  char *v10; // r9
  __int64 v11; // r10
  unsigned int v12; // r5
  char *v13; // r11
  int i; // r0
  int v15; // r5
  int v16; // r5
  int v17; // r11
  int v18; // r3
  int v19; // r2
  int v20; // ST04_4
  int v21; // ST00_4
  unsigned int v22; // r9
  char *v23; // r6
  int v24; // r9
  int v25; // r5
  int v26; // [sp+0h] [bp-30h]

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 3);
  if ( -1431655765 * ((v4 - *a1) >> 3) )
    v6 = -1431655765 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  HIDWORD(v11) = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xAAAAAAA )
  {
    v8 = 178956970;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    LODWORD(v11) = operator new(24 * v8);
    goto LABEL_8;
  }
  LODWORD(v11) = 0;
LABEL_8:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11 + v12, HIDWORD(v11));
  v13 = v3;
  for ( i = v11; ; i = v26 )
  {
    v26 = i + 24;
    if ( v10 == v13 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(i, v13);
    v13 += 24;
  }
  v15 = 178956971 * (v12 >> 3) & 0x1FFFFFFF;
  HIDWORD(v11) = 24 * v15 + 24;
  v16 = (int)&v3[24 * v15];
  v17 = v11 + HIDWORD(v11);
  v18 = v16;
  v19 = v17;
  while ( v4 != (char *)v18 )
  {
    v20 = v18;
    v21 = v19;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v19, v18);
    v19 = v21 + 24;
    v18 = v20 + 24;
  }
  v22 = 178956971 * ((unsigned int)&v4[-v16] >> 3);
  v23 = v3;
  v24 = 24 * (v22 & 0x1FFFFFFF);
  v25 = v16 + v24;
  HIDWORD(v11) = v17 + v24;
  while ( (char *)v25 != v23 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23);
    v23 += 24;
  }
  if ( v3 )
    operator delete(v3);
  *(_QWORD *)v9 = v11;
  v9[2] = (char *)(v11 + 24 * v8);
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1C58: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000D90) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_EditorBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this)
{
  int v1; // r4
  int v3; // r0
  int v4; // r4
  int v5; // r0
  CTRPluginFramework::ARCodeEditor *v6; // r4
  CTRPluginFramework::ARCodeContext *v7; // r1
  int v8; // [sp+0h] [bp-58h]
  int v9; // [sp+Ch] [bp-4Ch]
  char *v10; // [sp+10h] [bp-48h]
  char *v11; // [sp+14h] [bp-44h]
  char v12; // [sp+18h] [bp-40h]
  char v13; // [sp+30h] [bp-28h]
  char v14; // [sp+48h] [bp-10h]

  v1 = CTRPluginFramework::Menu::GetSelectedItem((CTRPluginFramework::PluginMenuActionReplay *)((char *)this + 544));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v12,
    (const char *)&unk_1A8A);
  CTRPluginFramework::Keyboard::Keyboard(&v8, &v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v12, "Name");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v13, "Note");
  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
    (int)&v9,
    (int)&v12,
    (int)&v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  if ( v1 )
  {
    if ( *(_BYTE *)(v1 + 57) )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v12, "Code");
      if ( v10 == v11 )
      {
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>(
          (char **)&v9,
          v10,
          (int)&v12);
      }
      else
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v10, &v12);
        v10 += 24;
      }
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
    }
    CTRPluginFramework::Keyboard::Populate(&v8, &v9);
    v3 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v8);
    if ( v3 >= 0 )
    {
      if ( v3 )
      {
        if ( v3 == 1 )
        {
          v4 = v1 + 28;
          CTRPluginFramework::ActionReplay_GetInput(v4);
          CTRPluginFramework::ActionReplay_ProcessString(v4, 1);
        }
        else if ( v3 == 2 )
        {
          v5 = v1;
          v6 = (CTRPluginFramework::ARCodeEditor *)(v1 + 120);
          CTRPluginFramework::PluginMenuExecuteLoop::RemoveAR(v5);
          CTRPluginFramework::ARCodeEditor::Edit(v6, v7);
          CTRPluginFramework::ARCodeContext::Update(v6);
        }
      }
      else
      {
        CTRPluginFramework::ActionReplay_GetInput(v1 + 4);
      }
    }
  }
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v9);
  return CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v8);
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1B6C: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);
// 1C58: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 1C5C: using guessed type int __fastcall CTRPluginFramework::Keyboard::Populate(_DWORD, _DWORD);
// 1C60: using guessed type int __fastcall CTRPluginFramework::ActionReplay_ProcessString(_DWORD, _DWORD);
// 1C64: using guessed type int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::RemoveAR(_DWORD);
// 1C68: using guessed type _DWORD __cdecl CTRPluginFramework::ARCodeEditor::Edit(CTRPluginFramework::ARCodeEditor *__hidden this, CTRPluginFramework::ARCodeContext *);

//----- (00000F0C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(const CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3)
{
  const CTRPluginFramework::ARCode *v3; // r6
  const CTRPluginFramework::ARCode *v4; // r8
  int v5; // r5
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r5
  CTRPluginFramework::ARCode **v9; // r7
  const CTRPluginFramework::ARCode *v10; // r9
  const CTRPluginFramework::ARCode *v11; // r11
  unsigned int v12; // r4
  CTRPluginFramework::ARCode *v13; // r10
  const CTRPluginFramework::ARCode *v14; // r11
  CTRPluginFramework::ARCode *v15; // r0
  int v16; // r3
  int v17; // r9
  int v18; // r4
  CTRPluginFramework::ARCode *v19; // r2
  const CTRPluginFramework::ARCode *v20; // r3
  unsigned int v21; // r4
  CTRPluginFramework::ARCode *i; // r9
  int v23; // ST00_4
  const CTRPluginFramework::ARCode *v24; // ST04_4
  CTRPluginFramework::ARCode *v25; // ST00_4

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 4);
  if ( -1431655765 * ((v4 - *a1) >> 4) )
    v6 = -1431655765 * ((v4 - *a1) >> 4);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x5555555 )
  {
    v8 = 89478485;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    v13 = (CTRPluginFramework::ARCode *)operator new(48 * v8);
    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:
  CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)((char *)v13 + v12), v11);
  v14 = v3;
  v15 = v13;
  while ( v10 != v14 )
  {
    v23 = (int)v15 + 48;
    CTRPluginFramework::ARCode::ARCode(v15, v14);
    v14 = (const CTRPluginFramework::ARCode *)((char *)v14 + 48);
    v15 = (CTRPluginFramework::ARCode *)v23;
  }
  v16 = 178956971 * (v12 >> 4) & 0xFFFFFFF;
  v17 = (int)v13 + 48 * v16 + 48;
  v18 = (int)v3 + 48 * v16;
  v19 = (CTRPluginFramework::ARCode *)((char *)v13 + 48 * v16 + 48);
  v20 = (const CTRPluginFramework::ARCode *)((char *)v3 + 48 * v16);
  while ( v20 != v4 )
  {
    v24 = v20;
    v25 = v19;
    CTRPluginFramework::ARCode::ARCode(v19, v20);
    v20 = (const CTRPluginFramework::ARCode *)((char *)v24 + 48);
    v19 = (CTRPluginFramework::ARCode *)((char *)v25 + 48);
  }
  v21 = v17 + 48 * (178956971 * (((unsigned int)v4 - v18) >> 4) & 0xFFFFFFF);
  for ( i = v3; i != v4; i = (CTRPluginFramework::ARCode *)((char *)i + 48) )
    CTRPluginFramework::ARCode::~ARCode(i);
  if ( v3 )
    operator delete((void *)v3);
  *v9 = v13;
  v9[1] = (CTRPluginFramework::ARCode *)v21;
  v9[2] = (CTRPluginFramework::ARCode *)((char *)v13 + 48 * v8);
}
// 1C70: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (00001074) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(int a1, const CTRPluginFramework::ARCode *a2)
{
  int v2; // r4

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(
      (const CTRPluginFramework::ARCode **)a1,
      *(const CTRPluginFramework::ARCode **)(a1 + 4),
      a2);
  }
  else
  {
    v2 = a1;
    CTRPluginFramework::ARCode::ARCode(*(CTRPluginFramework::ARCode **)(a1 + 4), a2);
    *(_DWORD *)(v2 + 4) += 48;
  }
}
// 1C70: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (000010B0) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::NewARCode(int result, int a2, unsigned int a3, unsigned int a4)
{
  unsigned __int8 v4; // r8
  unsigned int v5; // r10
  int v6; // r5
  int v7; // r6
  int v8; // r0
  CTRPluginFramework::ARCodeContext *v9; // r1
  char *v10; // [sp+0h] [bp-68h]
  int v11; // [sp+4h] [bp-64h]
  char v12; // [sp+8h] [bp-60h]
  char v13; // [sp+18h] [bp-50h]

  if ( CTRPluginFramework::__pmARinstance )
  {
    v4 = result;
    v5 = a3;
    v6 = a2;
    v10 = &v12;
    v11 = 0;
    v12 = 0;
    if ( CTRPluginFramework::ActionReplay_GetInput((int)&v10) )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v13,
        (const char *)&unk_1A8A);
      v7 = operator new(0x94u);
      CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay();
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
      CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)&v13, 0xD3u, 0, v6 & 0xFF000000);
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(
        v7 + 132,
        (const CTRPluginFramework::ARCode *)&v13);
      CTRPluginFramework::ARCode::~ARCode((CTRPluginFramework::ARCode *)&v13);
      CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)&v13, v4, v6 & 0xFFFFFF, v5);
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(
        v7 + 132,
        (const CTRPluginFramework::ARCode *)&v13);
      CTRPluginFramework::ARCode::~ARCode((CTRPluginFramework::ARCode *)&v13);
      CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)&v13, 0xD2u, 0, 0);
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(
        v7 + 132,
        (const CTRPluginFramework::ARCode *)&v13);
      CTRPluginFramework::ARCode::~ARCode((CTRPluginFramework::ARCode *)&v13);
      CTRPluginFramework::ARCodeContext::Update((CTRPluginFramework::ARCodeContext *)(v7 + 120));
      v8 = CTRPluginFramework::Menu::GetRootFolder((CTRPluginFramework::Menu *)(CTRPluginFramework::__pmARinstance + 544));
      if ( v8 )
        CTRPluginFramework::MenuFolderImpl::Append(v8, v7, 0);
      CTRPluginFramework::ARCodeEditor::Edit((CTRPluginFramework::ARCodeEditor *)(v7 + 120), v9);
      CTRPluginFramework::ARCodeContext::Update((CTRPluginFramework::ARCodeContext *)(v7 + 120));
    }
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  }
  return result;
}
// 4: using guessed type int CTRPluginFramework::__pmARinstance;
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1C4C: using guessed type int CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay(void);
// 1C50: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD);
// 1C68: using guessed type _DWORD __cdecl CTRPluginFramework::ARCodeEditor::Edit(CTRPluginFramework::ARCodeEditor *__hidden this, CTRPluginFramework::ARCodeContext *);

//----- (000011F8) --------------------------------------------------------
char *__fastcall std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, _BYTE *a2, char *a3)
{
  char *v3; // r3
  size_t v4; // r4

  v3 = a3;
  v4 = a2 - (_BYTE *)src;
  if ( a2 != src )
    v3 = (char *)memmove(a3, src, v4);
  return &v3[v4];
}

//----- (00001228) --------------------------------------------------------
char **__fastcall std::vector<unsigned long,std::allocator<unsigned long>>::operator=(char **a1, char **a2)
{
  char **v2; // r4
  char *v3; // r6
  char *v4; // r8
  char *v5; // r2
  int v6; // r7
  unsigned int v7; // r0
  char **v8; // r5
  unsigned int v9; // r5
  int v11; // r3
  __int64 v12; // r0

  v2 = a1;
  if ( a2 != a1 )
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = *a1;
    v6 = v4 - *a2;
    v7 = v6 >> 2;
    v8 = a2;
    if ( v6 >> 2 <= (unsigned int)((v2[2] - *v2) >> 2) )
    {
      v11 = v2[1] - v5;
      if ( v7 > v11 >> 2 )
      {
        std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(v3, &v3[v11], v5);
        v12 = *(_QWORD *)v8;
        v5 = v2[1];
        LODWORD(v12) = *(unsigned __int64 *)v8 + v5 - *v2;
      }
      else
      {
        HIDWORD(v12) = a2[1];
        LODWORD(v12) = v3;
      }
      std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(
        (void *)v12,
        (_BYTE *)HIDWORD(v12),
        v5);
    }
    else
    {
      if ( v7 )
      {
        if ( v7 > 0x3FFFFFFF )
          std::__throw_bad_alloc();
        v7 = operator new(v4 - *a2);
      }
      v9 = v7;
      std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(v3, v4, (char *)v7);
      if ( *v2 )
        operator delete(*v2);
      *v2 = (char *)v9;
      v2[2] = (char *)(v9 + v6);
    }
    v2[1] = &(*v2)[v6];
  }
  return v2;
}

//----- (000012FC) --------------------------------------------------------
CTRPluginFramework::ARCode **__fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::operator=(CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode **a2)
{
  CTRPluginFramework::ARCode **v2; // r7
  const CTRPluginFramework::ARCode *v3; // r4
  const CTRPluginFramework::ARCode *v4; // r8
  CTRPluginFramework::ARCode *v5; // r10
  int v6; // r6
  unsigned int v7; // r5
  const CTRPluginFramework::ARCode **v8; // r11
  CTRPluginFramework::ARCode *v9; // r9
  CTRPluginFramework::ARCode *v10; // r4
  CTRPluginFramework::ARCode *v11; // r8
  char **v13; // r8
  int v14; // r9
  char **v15; // r4
  int v16; // r9
  CTRPluginFramework::ARCode *v17; // r5
  CTRPluginFramework::ARCode *v18; // r4
  const CTRPluginFramework::ARCode *v19; // r8
  __int64 v20; // r4

  v2 = a1;
  if ( a2 != a1 )
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = *a1;
    v6 = v4 - *a2;
    v7 = -1431655765 * (v6 >> 4);
    v8 = a2;
    if ( -1431655765 * ((a1[2] - *a1) >> 4) >= v7 )
    {
      v13 = (char **)((char *)v5 + 12);
      v14 = -1431655765 * ((a1[1] - v5) >> 4);
      v15 = (char **)((char *)v3 + 12);
      if ( v7 > v14 )
      {
        while ( v14 > 0 )
        {
          *((_BYTE *)v13 - 12) = *((_BYTE *)v15 - 12);
          *((_BYTE *)v13 - 11) = *((_BYTE *)v15 - 11);
          --v14;
          *(v13 - 2) = *(v15 - 2);
          *(v13 - 1) = *(v15 - 1);
          std::vector<unsigned long,std::allocator<unsigned long>>::operator=(v13, v15);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v13 + 3, v15 + 3);
          v13 += 12;
          v15 += 12;
        }
        v20 = *(_QWORD *)v2;
        v19 = v8[1];
        LODWORD(v20) = (char *)*v8 + HIDWORD(v20) - v20;
        while ( v19 != (const CTRPluginFramework::ARCode *)v20 )
        {
          CTRPluginFramework::ARCode::ARCode(
            (CTRPluginFramework::ARCode *)HIDWORD(v20),
            (const CTRPluginFramework::ARCode *)v20);
          LODWORD(v20) = v20 + 48;
          HIDWORD(v20) += 48;
        }
      }
      else
      {
        v16 = -1431655765 * (v6 >> 4);
        while ( v16 > 0 )
        {
          *((_BYTE *)v13 - 12) = *((_BYTE *)v15 - 12);
          *((_BYTE *)v13 - 11) = *((_BYTE *)v15 - 11);
          --v16;
          *(v13 - 2) = *(v15 - 2);
          *(v13 - 1) = *(v15 - 1);
          std::vector<unsigned long,std::allocator<unsigned long>>::operator=(v13, v15);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v13 + 3, v15 + 3);
          v13 += 12;
          v15 += 12;
        }
        v17 = (CTRPluginFramework::ARCode *)((char *)v5 + 48 * (v7 & ~((signed int)v7 >> 31)));
        v18 = v2[1];
        while ( v18 != v17 )
        {
          CTRPluginFramework::ARCode::~ARCode(v17);
          v17 = (CTRPluginFramework::ARCode *)((char *)v17 + 48);
        }
      }
    }
    else
    {
      if ( v7 )
      {
        if ( v7 > 0x5555555 )
          std::__throw_bad_alloc();
        v7 = operator new(v4 - *a2);
      }
      v9 = (CTRPluginFramework::ARCode *)v7;
      while ( v4 != v3 )
      {
        CTRPluginFramework::ARCode::ARCode(v9, v3);
        v9 = (CTRPluginFramework::ARCode *)((char *)v9 + 48);
        v3 = (const CTRPluginFramework::ARCode *)((char *)v3 + 48);
      }
      v10 = *v2;
      v11 = v2[1];
      while ( v11 != v10 )
      {
        CTRPluginFramework::ARCode::~ARCode(v10);
        v10 = (CTRPluginFramework::ARCode *)((char *)v10 + 48);
      }
      if ( *v2 )
        operator delete((void *)*v2);
      *v2 = (CTRPluginFramework::ARCode *)v7;
      v2[2] = (CTRPluginFramework::ARCode *)(v7 + v6);
    }
    v2[1] = (CTRPluginFramework::ARCode *)((char *)*v2 + v6);
  }
  return v2;
}
// 1C34: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 1C70: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (000014FC) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_DuplicateBtn_OnClick(CTRPluginFramework::PluginMenuActionReplay *this)
{
  char *v1; // r6
  int result; // r0
  int v3; // r4
  int v4; // r5

  v1 = (char *)this + 544;
  result = CTRPluginFramework::Menu::GetSelectedItem((CTRPluginFramework::PluginMenuActionReplay *)((char *)this + 544));
  v3 = result;
  if ( result )
  {
    if ( *(_BYTE *)(result + 57) )
    {
      v4 = operator new(0x94u);
      CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay();
      *(_BYTE *)(v4 + 120) = *(_BYTE *)(v3 + 120);
      *(_DWORD *)(v4 + 124) = *(_DWORD *)(v3 + 124);
      *(_DWORD *)(v4 + 128) = *(_DWORD *)(v3 + 128);
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::operator=(
        (CTRPluginFramework::ARCode **)(v4 + 132),
        (const CTRPluginFramework::ARCode **)(v3 + 132));
      *(_DWORD *)(v4 + 144) = *(_DWORD *)(v3 + 144);
      result = CTRPluginFramework::Menu::Insert(v1);
    }
  }
  return result;
}
// 1BDC: using guessed type int __fastcall CTRPluginFramework::Menu::Insert(_DWORD);
// 1C4C: using guessed type int CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay(void);

//----- (00001574) --------------------------------------------------------
CTRPluginFramework::PluginMenuActionReplay *__fastcall CTRPluginFramework::PluginMenuActionReplay::~PluginMenuActionReplay(CTRPluginFramework::PluginMenuActionReplay *this)
{
  CTRPluginFramework::PluginMenuActionReplay *v1; // r4
  int v2; // r0
  int v3; // r5
  int v4; // r6
  void *v5; // r0

  v1 = this;
  v2 = *((_DWORD *)this + 326);
  if ( v2 )
    (*(void (**)(void))(*(_DWORD *)v2 + 4))();
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1232));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1160));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1088));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1016));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 944));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 872));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 800));
  CTRPluginFramework::Button::~Button((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 728));
  CTRPluginFramework::Menu::~Menu((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 544));
  v3 = *((_DWORD *)v1 + 132);
  v4 = *((_DWORD *)v1 + 133);
  while ( v4 != v3 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v3 + 36);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v3 + 12);
    v3 += 60;
  }
  v5 = (void *)*((_DWORD *)v1 + 132);
  if ( v5 )
    operator delete(v5);
  CTRPluginFramework::KeyboardImpl::~KeyboardImpl((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 304));
  CTRPluginFramework::SubMenu::~SubMenu((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 272));
  CTRPluginFramework::Converter::~Converter((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 32));
  return v1;
}
// 1B64: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001638) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_DrawBottom(CTRPluginFramework::PluginMenuActionReplay *this)
{
  CTRPluginFramework::PluginMenuActionReplay *v1; // r4
  int v3; // [sp+14h] [bp-Ch]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(0);
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 728));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 800));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 872));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 944));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1016));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1088));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1160));
  CTRPluginFramework::Button::Draw((CTRPluginFramework::PluginMenuActionReplay *)((char *)v1 + 1232));
  CTRPluginFramework::Renderer::DrawRect(69, 195, 220, 15, &CTRPluginFramework::Color::Gray, 1, 1);
  v3 = 198;
  return CTRPluginFramework::Renderer::DrawString((char *)v1 + 1308, 71, &v3, CTRPluginFramework::Color::Black);
}
// 1C90: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 1C9C: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1CA0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001700) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::_Update(CTRPluginFramework::PluginMenuActionReplay *this, const Time *a2, CTRPluginFramework::PluginMenuActionReplay *a3, const Time *a4)
{
  CTRPluginFramework::Menu *v4; // r8
  CTRPluginFramework::PluginMenuActionReplay *v5; // r5
  CTRPluginFramework::Touch *v6; // r0
  int v7; // r4
  CTRPluginFramework::Touch *v8; // r0
  int v9; // r6
  int v10; // r0
  int v11; // r4
  bool v12; // r1
  char v13; // r0
  bool v14; // r8
  unsigned int v15; // r1
  unsigned int v16; // r1
  char v17; // r1
  CTRPluginFramework::PluginMenuActionReplay *v19; // [sp+0h] [bp-30h]
  const Time *v20; // [sp+4h] [bp-2Ch]
  CTRPluginFramework::PluginMenuActionReplay *v21; // [sp+8h] [bp-28h]
  const Time *v22; // [sp+Ch] [bp-24h]

  v19 = this;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v4 = (CTRPluginFramework::PluginMenuActionReplay *)((char *)this + 544);
  v5 = this;
  v6 = (CTRPluginFramework::Touch *)CTRPluginFramework::Menu::Update(
                                      (CTRPluginFramework::PluginMenuActionReplay *)((char *)this + 544),
                                      a2);
  v7 = CTRPluginFramework::Touch::IsDown(v6);
  CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v19);
  v21 = v19;
  v22 = v20;
  v8 = (CTRPluginFramework::Touch *)CTRPluginFramework::Window::Update(
                                      &CTRPluginFramework::Window::BottomWindow,
                                      v7,
                                      &v21);
  v9 = CTRPluginFramework::Touch::IsDown(v8);
  CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v21);
  v19 = v21;
  v20 = v22;
  v10 = CTRPluginFramework::Menu::GetSelectedItem(v4);
  v11 = v10;
  if ( v10 )
    v12 = *(_DWORD *)(v10 + 32) != 0;
  else
    v12 = v10;
  CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 728), v12);
  v13 = CTRPluginFramework::Menu::IsNoteOpen(v4);
  CTRPluginFramework::Button::SetState((CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 728), v13);
  CTRPluginFramework::Button::Update((char *)v5 + 728, v9, &v19);
  v14 = v11;
  if ( v11 )
    v14 = 1;
  CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 800), v14);
  CTRPluginFramework::Button::Update((char *)v5 + 800, v9, &v19);
  if ( v11 )
    v15 = *((_DWORD *)v5 + 326);
  if ( v11 )
    v16 = __clz(v15);
  else
    v16 = 0;
  if ( v11 )
    v16 >>= 5;
  CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 944), v16);
  CTRPluginFramework::Button::Enable(
    (CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 1016),
    *((_DWORD *)v5 + 326) != 0);
  if ( v11 )
  {
    v17 = *(_BYTE *)(v11 + 57);
    if ( *(_BYTE *)(v11 + 57) )
      v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 1088), v17);
  CTRPluginFramework::Button::Enable((CTRPluginFramework::PluginMenuActionReplay *)((char *)v5 + 1160), v14);
  CTRPluginFramework::Button::Update((char *)v5 + 872, v9, &v19);
  CTRPluginFramework::Button::Update((char *)v5 + 944, v9, &v19);
  CTRPluginFramework::Button::Update((char *)v5 + 1016, v9, &v19);
  CTRPluginFramework::Button::Update((char *)v5 + 1088, v9, &v19);
  CTRPluginFramework::Button::Update((char *)v5 + 1160, v9, &v19);
  return CTRPluginFramework::Button::Update((char *)v5 + 1232, v9, &v19);
}
// 1CB8: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);
// 1CC8: using guessed type int __fastcall CTRPluginFramework::Button::Update(_DWORD, _DWORD, _DWORD);

//----- (000018B8) --------------------------------------------------------
int __fastcall CTRPluginFramework::PluginMenuActionReplay::operator()(unsigned int a1, _QWORD *a2, const Time *a3)
{
  int v3; // r4
  _QWORD *v4; // r7
  const Time *v5; // r6
  CTRPluginFramework::PluginMenuActionReplay *v6; // r2
  const Time *v7; // r3
  bool v8; // zf
  CTRPluginFramework::Menu *v9; // r0

  v3 = a1;
  v4 = a2;
  v5 = a3;
  __mcr(15, 0, a1, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top) )
  {
    CTRPluginFramework::Task::Task(
      (CTRPluginFramework::Task *)&CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top,
      (int (__cdecl *)(void *))CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::{lambda(void *)#1}::_FUN,
      (void *)v3,
      5);
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top);
    _aeabi_atexit(
      &CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top,
      &CTRPluginFramework::Task::~Task,
      &_dso_handle);
  }
  CTRPluginFramework::PluginMenuActionReplay::_ProcessEvent(v3, v4);
  CTRPluginFramework::PluginMenuActionReplay::_Update((CTRPluginFramework::PluginMenuActionReplay *)v3, v5, v6, v7);
  if ( CTRPluginFramework::Button::operator()(v3 + 728) )
  {
    v8 = CTRPluginFramework::Menu::IsNoteOpen((CTRPluginFramework::Menu *)(v3 + 544)) == 0;
    v9 = (CTRPluginFramework::Menu *)(v3 + 544);
    if ( v8 )
    {
      if ( !CTRPluginFramework::Menu::ShowNote(v9) )
        CTRPluginFramework::Button::Disable((CTRPluginFramework::Button *)(v3 + 728));
    }
    else
    {
      CTRPluginFramework::Menu::CloseNote(v9);
    }
  }
  if ( CTRPluginFramework::Button::operator()(v3 + 800) )
    CTRPluginFramework::PluginMenuActionReplay::_EditorBtn_OnClick((CTRPluginFramework::PluginMenuActionReplay *)v3);
  if ( CTRPluginFramework::Button::operator()(v3 + 872) )
    CTRPluginFramework::PluginMenuActionReplay::_NewBtn_OnClick((CTRPluginFramework::PluginMenuActionReplay *)v3);
  if ( CTRPluginFramework::Button::operator()(v3 + 944) )
    CTRPluginFramework::PluginMenuActionReplay::_CutBtn_OnClick(v3);
  if ( CTRPluginFramework::Button::operator()(v3 + 1016) )
    CTRPluginFramework::PluginMenuActionReplay::_PasteBtn_OnClick(v3);
  if ( CTRPluginFramework::Button::operator()(v3 + 1088) )
    CTRPluginFramework::PluginMenuActionReplay::_DuplicateBtn_OnClick((CTRPluginFramework::PluginMenuActionReplay *)v3);
  if ( CTRPluginFramework::Button::operator()(v3 + 1160) )
    CTRPluginFramework::PluginMenuActionReplay::_TrashBtn_OnClick((CTRPluginFramework::PluginMenuActionReplay *)v3);
  if ( CTRPluginFramework::Button::operator()(v3 + 1232) )
    CTRPluginFramework::PluginMenuActionReplay::_OpenFileBtn_OnClick(v3);
  CTRPluginFramework::Task::Start((CTRPluginFramework::Task *)&CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top);
  CTRPluginFramework::PluginMenuActionReplay::_DrawBottom((CTRPluginFramework::PluginMenuActionReplay *)v3);
  CTRPluginFramework::Task::Wait((CTRPluginFramework::Task *)&CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top);
  return CTRPluginFramework::Window::MustClose(&CTRPluginFramework::Window::BottomWindow);
}
// 8: using guessed type char `guard variable for'CTRPluginFramework::PluginMenuActionReplay::operator()(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time const&)::top;
// 1CCC: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 1CD0: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 1CD4: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 1CD8: using guessed type int __fastcall CTRPluginFramework::Button::operator()(_DWORD);
// 1CE4: using guessed type int __fastcall CTRPluginFramework::Window::MustClose(_DWORD);

// ALL OK, 32 function(s) have been successfully decompiled
