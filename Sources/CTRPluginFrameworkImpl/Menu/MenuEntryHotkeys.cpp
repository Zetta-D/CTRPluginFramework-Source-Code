/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int _tcf_0();
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall CTRPluginFramework::Hotkey::Hotkey(int result);
_DWORD *__fastcall CTRPluginFramework::Hotkey::Hotkey(_DWORD *a1, int a2, int a3);
CTRPluginFramework::Hotkey *__fastcall CTRPluginFramework::Hotkey::~Hotkey(CTRPluginFramework::Hotkey *this);
_DWORD *__fastcall CTRPluginFramework::Hotkey::operator=(_DWORD *result, int a2);
int __fastcall CTRPluginFramework::Hotkey::operator=(int a1);
int __fastcall CTRPluginFramework::Hotkey::IsDown(CTRPluginFramework::Hotkey *this, unsigned int a2);
int __fastcall CTRPluginFramework::Hotkey::AskForKeys(CTRPluginFramework::Hotkey *this);
int __fastcall CTRPluginFramework::Hotkey::GetKeys(CTRPluginFramework::Hotkey *this);
int __fastcall ZN18CTRPluginFramework12KeysToStringB5cxx11Em(int a1, int a2);
int __fastcall ZNK18CTRPluginFramework6Hotkey8ToStringB5cxx11Eb(int a1, int *a2, int a3);
_DWORD *__fastcall CTRPluginFramework::HotkeyManager::HotkeyManager(_DWORD *result, int a2);
CTRPluginFramework::HotkeyManager *__fastcall CTRPluginFramework::HotkeyManager::~HotkeyManager(CTRPluginFramework::HotkeyManager *this);
int __fastcall CTRPluginFramework::HotkeyManager::operator[](int a1, int a2);
int *__fastcall ZN18CTRPluginFramework13HotkeyManager8ToStringB5cxx11Ev(int *a1, int a2);
int __fastcall CTRPluginFramework::HotkeyManager::OnHotkeyChangeCallback(int result, int a2);
int __fastcall CTRPluginFramework::HotkeyManager::Count(CTRPluginFramework::HotkeyManager *this);
void __fastcall std::vector<CTRPluginFramework::Hotkey,std::allocator<CTRPluginFramework::Hotkey>>::_M_realloc_insert<CTRPluginFramework::Hotkey const&>(int *a1, int a2, _DWORD *a3);
void __fastcall CTRPluginFramework::HotkeyManager::operator+=(int *a1, _DWORD *a2);
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&>(char **a1, char *a2, int a3);
int __fastcall CTRPluginFramework::HotkeyManager::AskForKeys(int result);
int GLOBAL__sub_I__ZN18CTRPluginFramework6HotkeyC2Ev();
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Controller::IsKeysDown(CTRPluginFramework::Controller *__hidden this, unsigned int); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::HotkeysModifier::HotkeysModifier(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::HotkeysModifier::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::HotkeysModifier::~HotkeysModifier(CTRPluginFramework::HotkeysModifier *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Populate(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this); idb
// _DWORD CTRPluginFramework::MenuEntry::RefreshNote(CTRPluginFramework::MenuEntry *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *__hidden this); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN CTRPluginFramework::g_keyName; // weak
_UNKNOWN unk_1C; // weak
_UNKNOWN unk_34; // weak
_UNKNOWN unk_4C; // weak
_UNKNOWN unk_64; // weak
_UNKNOWN unk_7C; // weak
_UNKNOWN unk_94; // weak
_UNKNOWN unk_AC; // weak
_UNKNOWN unk_C4; // weak
_UNKNOWN unk_DC; // weak
_UNKNOWN unk_F4; // weak
_UNKNOWN unk_10C; // weak
_UNKNOWN unk_124; // weak
_UNKNOWN unk_13C; // weak
_UNKNOWN unk_154; // weak
_UNKNOWN unk_16C; // weak
_UNKNOWN unk_B89; // weak
_UNKNOWN unk_BCE; // weak
_UNKNOWN unk_BD2; // weak
_UNKNOWN unk_BE3; // weak
_UNKNOWN unk_BE7; // weak
_UNKNOWN unk_BEB; // weak
_UNKNOWN unk_BEF; // weak
_UNKNOWN unk_BF3; // weak
_UNKNOWN unk_BF7; // weak
_UNKNOWN unk_BFB; // weak
_UNKNOWN unk_BFF; // weak
_UNKNOWN unk_C03; // weak
_UNKNOWN unk_C07; // weak
// extern _UNKNOWN _dso_handle; weak


//----- (00000184) --------------------------------------------------------
int _tcf_0()
{
  unsigned int v0; // r4
  int result; // r0
  bool v2; // cf

  v0 = 15;
  do
  {
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)&CTRPluginFramework::g_keyName + 24 * v0);
    v2 = v0-- >= 1;
  }
  while ( v2 );
  return result;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000001AC) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// C14: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// C18: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000224) --------------------------------------------------------
int __fastcall CTRPluginFramework::Hotkey::Hotkey(int result)
{
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = result + 12;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  return result;
}

//----- (0000023C) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Hotkey::Hotkey(_DWORD *a1, int a2, int a3)
{
  _DWORD *v3; // r4

  v3 = a1;
  *a1 = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1 + 1, a3);
  return v3;
}
// C1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000258) --------------------------------------------------------
CTRPluginFramework::Hotkey *__fastcall CTRPluginFramework::Hotkey::~Hotkey(CTRPluginFramework::Hotkey *this)
{
  CTRPluginFramework::Hotkey *v1; // r4

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 4);
  return v1;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000270) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Hotkey::operator=(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

//----- (00000278) --------------------------------------------------------
int __fastcall CTRPluginFramework::Hotkey::operator=(int a1)
{
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(a1 + 4);
}
// C20: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD);

//----- (00000280) --------------------------------------------------------
int __fastcall CTRPluginFramework::Hotkey::IsDown(CTRPluginFramework::Hotkey *this, unsigned int a2)
{
  return CTRPluginFramework::Controller::IsKeysDown(*(CTRPluginFramework::Controller **)this, a2);
}
// C24: using guessed type _DWORD __cdecl CTRPluginFramework::Controller::IsKeysDown(CTRPluginFramework::Controller *__hidden this, unsigned int);

//----- (00000288) --------------------------------------------------------
int __fastcall CTRPluginFramework::Hotkey::AskForKeys(CTRPluginFramework::Hotkey *this)
{
  CTRPluginFramework::Hotkey *v1; // r4
  int v2; // r1
  char *v4; // [sp+0h] [bp-48h]
  int v5; // [sp+4h] [bp-44h]
  char v6; // [sp+8h] [bp-40h]
  char v7; // [sp+18h] [bp-30h]

  v4 = &v6;
  v1 = this;
  v2 = *((_DWORD *)this + 2);
  v5 = 0;
  v6 = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(&v4, v2 + 37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
    &v4,
    "Select the keys you want to use for:\n",
    37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v4, (char *)v1 + 4);
  CTRPluginFramework::HotkeysModifier::HotkeysModifier(&v7, v1, &v4);
  CTRPluginFramework::HotkeysModifier::operator()(&v7);
  CTRPluginFramework::HotkeysModifier::~HotkeysModifier((CTRPluginFramework::HotkeysModifier *)&v7);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// C28: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// C2C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD);
// C30: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// C34: using guessed type int __fastcall CTRPluginFramework::HotkeysModifier::HotkeysModifier(_DWORD, _DWORD, _DWORD);
// C38: using guessed type int __fastcall CTRPluginFramework::HotkeysModifier::operator()(_DWORD);

//----- (00000308) --------------------------------------------------------
int __fastcall CTRPluginFramework::Hotkey::GetKeys(CTRPluginFramework::Hotkey *this)
{
  return *(_DWORD *)this;
}

//----- (00000310) --------------------------------------------------------
int __fastcall ZN18CTRPluginFramework12KeysToStringB5cxx11Em(int a1, int a2)
{
  int v2; // r4
  int v3; // r5
  int v4; // r6
  signed int v5; // r3

  v2 = 0;
  *(_DWORD *)a1 = a1 + 8;
  v3 = a1;
  v4 = a2;
  v5 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  do
  {
    if ( v4 & (1 << v2) )
    {
      if ( v5 )
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(
          v3,
          " + ",
          v4 & (1 << v2));
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(
        v3,
        (char *)&CTRPluginFramework::g_keyName + 24 * v2);
      v5 = 1;
    }
    ++v2;
  }
  while ( v2 != 16 );
  return v3;
}
// C40: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD, _DWORD);
// C44: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);

//----- (0000038C) --------------------------------------------------------
int __fastcall ZNK18CTRPluginFramework6Hotkey8ToStringB5cxx11Eb(int a1, int *a2, int a3)
{
  int v3; // r5
  int *v4; // r4
  unsigned int v5; // r3
  unsigned int v6; // r2
  unsigned int v7; // r2
  int v8; // r0
  int *v10; // [sp+0h] [bp-40h]
  int v11; // [sp+4h] [bp-3Ch]
  unsigned int v12; // [sp+8h] [bp-38h]
  int *v13; // [sp+18h] [bp-28h]
  int v14; // [sp+1Ch] [bp-24h]
  unsigned int v15; // [sp+20h] [bp-20h]

  v3 = a1;
  v4 = a2;
  if ( a3 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v10, a2 + 1);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v10, ": ");
    ZN18CTRPluginFramework12KeysToStringB5cxx11Em((int)&v13, *v4);
    v5 = v11 + v14;
    if ( v10 == (int *)&v12 )
      v6 = 15;
    else
      v6 = v12;
    if ( v5 <= v6 || (v13 != (int *)&v15 ? (v7 = v15) : (v7 = 15), v5 > v7) )
      v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v10, &v13);
    else
      v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v13, 0, &v10);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v3, v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  }
  else
  {
    ZN18CTRPluginFramework12KeysToStringB5cxx11Em(a1, *a2);
  }
  return v3;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// C1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// C30: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// C48: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// C4C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// C50: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000464) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::HotkeyManager::HotkeyManager(_DWORD *result, int a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

//----- (00000480) --------------------------------------------------------
CTRPluginFramework::HotkeyManager *__fastcall CTRPluginFramework::HotkeyManager::~HotkeyManager(CTRPluginFramework::HotkeyManager *this)
{
  CTRPluginFramework::HotkeyManager *v1; // r4
  int v2; // r5
  int v3; // r6
  void *v4; // r0

  v1 = this;
  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2 + 4);
    v2 += 28;
  }
  v4 = (void *)*((_DWORD *)v1 + 2);
  if ( v4 )
    operator delete(v4);
  return v1;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000004C0) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeyManager::operator[](int a1, int a2)
{
  return *(_DWORD *)(a1 + 8) + 28 * a2;
}

//----- (000004D0) --------------------------------------------------------
int *__fastcall ZN18CTRPluginFramework13HotkeyManager8ToStringB5cxx11Ev(int *a1, int a2)
{
  int *v2; // r5
  int v4; // r4
  int *v5; // r7
  int *i; // r4
  int v7; // r0
  int v8; // [sp+0h] [bp-60h]
  char v9; // [sp+18h] [bp-48h]
  char v10; // [sp+30h] [bp-30h]

  v2 = a1;
  if ( (unsigned int)*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 8) >> 32 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      a1,
      (const char *)&unk_B89);
  }
  else
  {
    v4 = a2;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v8, "Hotkeys:\n");
    v5 = *(int **)(v4 + 12);
    for ( i = *(int **)(v4 + 8); v5 != i; i += 7 )
    {
      ZNK18CTRPluginFramework6Hotkey8ToStringB5cxx11Eb((int)&v9, i, 1);
      v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v9, "\n");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v10, v7);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v8, &v10);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
    }
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v2, &v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  }
  return v2;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// C44: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// C48: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// C50: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000590) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeyManager::OnHotkeyChangeCallback(int result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

//----- (00000598) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeyManager::Count(CTRPluginFramework::HotkeyManager *this)
{
  return -1227133513 * ((*((_DWORD *)this + 3) - *((_DWORD *)this + 2)) >> 2);
}

//----- (000005B8) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Hotkey,std::allocator<CTRPluginFramework::Hotkey>>::_M_realloc_insert<CTRPluginFramework::Hotkey const&>(int *a1, int a2, _DWORD *a3)
{
  char *v3; // r6
  char *v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int *v9; // r7
  int v10; // r5
  _DWORD *v11; // r10
  unsigned int v12; // r11
  int v13; // r9
  int v14; // r3
  int v15; // r10
  int v16; // r3
  int v17; // r11
  int v18; // r5
  _DWORD *v19; // r0
  int v20; // r3
  unsigned int v21; // r5
  char *i; // r10
  int v23; // r1
  int v24; // ST00_4
  int v25; // ST04_4
  int v26; // ST00_4

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = -1227133513 * ((signed int)&v4[-*a1] >> 2);
  if ( -1227133513 * ((signed int)&v4[-*a1] >> 2) )
    v6 = -1227133513 * ((signed int)&v4[-*a1] >> 2);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - (_DWORD)v3;
  if ( v7 || v8 > 0x9249249 )
  {
    v8 = 153391689;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    v13 = operator new(28 * v8);
    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:
  *(_DWORD *)(v13 + v12) = *v11;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v13 + v12 + 4, v11 + 1);
  v14 = v13;
  v15 = (int)(v3 + 4);
  while ( 1 )
  {
    v16 = v14 + 28;
    if ( v10 == v15 - 4 )
      break;
    v23 = v15;
    *(_DWORD *)(v16 - 28) = *(_DWORD *)(v15 - 4);
    v24 = v16;
    v15 += 28;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v16 - 24, v23);
    v14 = v24;
  }
  v17 = 920350135 * (v12 >> 2) & 0x3FFFFFFF;
  v18 = (int)&v3[28 * v17];
  v19 = (_DWORD *)(v13 + 28 * v17 + 28);
  v20 = v18 + 4;
  while ( v4 != (char *)(v20 - 4) )
  {
    *v19 = *(_DWORD *)(v20 - 4);
    v25 = (int)(v19 + 7);
    v26 = v20;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v19 + 1, v20);
    v20 = v26 + 28;
    v19 = (_DWORD *)v25;
  }
  v21 = v13 + 28 * v17 + 28 + 28 * (920350135 * ((unsigned int)&v4[-v18] >> 2) & 0x3FFFFFFF);
  for ( i = v3; i != v4; i += 28 )
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(i + 4);
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v21;
  v9[2] = v13 + 28 * v8;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// C1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (0000074C) --------------------------------------------------------
void __fastcall CTRPluginFramework::HotkeyManager::operator+=(int *a1, _DWORD *a2)
{
  int *v2; // r4
  _DWORD *v3; // r0

  v2 = a1;
  v3 = (_DWORD *)a1[3];
  if ( v3 == (_DWORD *)v2[4] )
  {
    std::vector<CTRPluginFramework::Hotkey,std::allocator<CTRPluginFramework::Hotkey>>::_M_realloc_insert<CTRPluginFramework::Hotkey const&>(
      v2 + 2,
      (int)v3,
      a2);
  }
  else
  {
    *v3 = *a2;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v3 + 1, a2 + 1);
    v2[3] += 28;
  }
}
// C1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000794) --------------------------------------------------------
void __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&>(char **a1, char *a2, int a3)
{
  char *v3; // r7
  char *v4; // r6
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  char **v9; // r8
  char *v10; // r9
  __int64 v11; // r10
  unsigned int v12; // r5
  char *v13; // r11
  int i; // r0
  int v15; // r5
  int v16; // r5
  int v17; // r11
  int v18; // r3
  int v19; // r2
  int v20; // ST04_4
  int v21; // ST00_4
  unsigned int v22; // r9
  char *v23; // r6
  int v24; // r9
  int v25; // r5
  int v26; // [sp+0h] [bp-30h]

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 3);
  if ( -1431655765 * ((v4 - *a1) >> 3) )
    v6 = -1431655765 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  HIDWORD(v11) = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xAAAAAAA )
  {
    v8 = 178956970;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    LODWORD(v11) = operator new(24 * v8);
    goto LABEL_8;
  }
  LODWORD(v11) = 0;
LABEL_8:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11 + v12, HIDWORD(v11));
  v13 = v3;
  for ( i = v11; ; i = v26 )
  {
    v26 = i + 24;
    if ( v10 == v13 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(i, v13);
    v13 += 24;
  }
  v15 = 178956971 * (v12 >> 3) & 0x1FFFFFFF;
  HIDWORD(v11) = 24 * v15 + 24;
  v16 = (int)&v3[24 * v15];
  v17 = v11 + HIDWORD(v11);
  v18 = v16;
  v19 = v17;
  while ( v4 != (char *)v18 )
  {
    v20 = v18;
    v21 = v19;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v19, v18);
    v19 = v21 + 24;
    v18 = v20 + 24;
  }
  v22 = 178956971 * ((unsigned int)&v4[-v16] >> 3);
  v23 = v3;
  v24 = 24 * (v22 & 0x1FFFFFFF);
  v25 = v16 + v24;
  HIDWORD(v11) = v17 + v24;
  while ( (char *)v25 != v23 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23);
    v23 += 24;
  }
  if ( v3 )
    operator delete(v3);
  *(_QWORD *)v9 = v11;
  v9[2] = (char *)(v11 + 24 * v8);
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// C1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// C50: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000904) --------------------------------------------------------
int __fastcall CTRPluginFramework::HotkeyManager::AskForKeys(int result)
{
  CTRPluginFramework::MenuEntry **v1; // r4
  CTRPluginFramework::MenuEntry *v2; // r6
  CTRPluginFramework::MenuEntry *v3; // r5
  int v4; // r0
  int v5; // r5
  CTRPluginFramework::MenuEntry *v6; // r3
  __int64 i; // r4
  char v8; // [sp+4h] [bp-34h]
  void *v9[2]; // [sp+10h] [bp-28h]
  void *v10; // [sp+18h] [bp-20h]

  if ( (unsigned int)*(_QWORD *)(result + 8) != *(_QWORD *)(result + 8) >> 32 )
  {
    v1 = (CTRPluginFramework::MenuEntry **)result;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)v9,
      "Hotkeys Modifier:\n\nWhich hotkey do you want to change ?");
    CTRPluginFramework::Keyboard::Keyboard(&v8, v9);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v9);
    v2 = v1[3];
    v3 = v1[2];
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    while ( v2 != v3 )
    {
      if ( v9[1] == v10 )
      {
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&>(
          (char **)v9,
          (char *)v9[1],
          (int)v3 + 4);
      }
      else
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          v9[1],
          (char *)v3 + 4);
        v9[1] = (char *)v9[1] + 24;
      }
      v3 = (CTRPluginFramework::MenuEntry *)((char *)v3 + 28);
    }
    CTRPluginFramework::Keyboard::Populate(&v8, v9);
    while ( 1 )
    {
      v4 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v8);
      v5 = v4;
      if ( v4 == -1 )
        break;
      CTRPluginFramework::Hotkey::AskForKeys((CTRPluginFramework::MenuEntry *)((char *)v1[2] + 28 * v4));
      v6 = v1[1];
      if ( v6 )
        ((void (__fastcall *)(CTRPluginFramework::MenuEntry *, int))v6)(*v1, v5);
      CTRPluginFramework::MenuEntry::RefreshNote(*v1);
    }
    for ( i = *(_QWORD *)v9; HIDWORD(i) != (_DWORD)i; LODWORD(i) = i + 24 )
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(i);
    if ( v9[0] )
      operator delete(v9[0]);
    result = CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v8);
  }
  return result;
}
// C0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// C1C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// C5C: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);
// C60: using guessed type int __fastcall CTRPluginFramework::Keyboard::Populate(_DWORD, _DWORD);

//----- (00000A30) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework6HotkeyC2Ev()
{
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&CTRPluginFramework::g_keyName,
    (const char *)&unk_BCE);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_1C,
    (const char *)&unk_BD2);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&unk_34, "Select");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&unk_4C, "Start");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_64,
    (const char *)&unk_BE3);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_7C,
    (const char *)&unk_BE7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_94,
    (const char *)&unk_BEB);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_AC,
    (const char *)&unk_BEF);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_C4,
    (const char *)&unk_BF3);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_DC,
    (const char *)&unk_BF7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_F4,
    (const char *)&unk_BFB);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_10C,
    (const char *)&unk_BFF);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_124,
    (const char *)&unk_B89);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_13C,
    (const char *)&unk_B89);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_154,
    (const char *)&unk_C03);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&unk_16C,
    (const char *)&unk_C07);
  return _aeabi_atexit(0, _tcf_0, &_dso_handle);
}
// C70: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);

// ALL OK, 23 function(s) have been successfully decompiled
