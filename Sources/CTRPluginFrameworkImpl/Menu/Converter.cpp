/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

CTRPluginFramework::Converter *__fastcall CTRPluginFramework::Converter::Converter(CTRPluginFramework::Converter *this);
CTRPluginFramework::Converter *__fastcall CTRPluginFramework::Converter::~Converter(CTRPluginFramework::Converter *this);
int __fastcall CTRPluginFramework::Converter::Instance(CTRPluginFramework::Converter *this);
int __fastcall CTRPluginFramework::Converter::_Draw(CTRPluginFramework::Converter *this);
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1);
void **__fastcall std::deque<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~deque(void **a1);
void **__fastcall CTRPluginFramework::Converter::operator()(unsigned int *a1, unsigned int a2);
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::NumericTextBox(CTRPluginFramework::NumericTextBox *__hidden this, int, int, int, int); idb
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *__hidden this, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::UseHexadecimal(CTRPluginFramework::NumericTextBox *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *__hidden this, float); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void); weak
// int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::NumericTextBox::Draw(CTRPluginFramework::NumericTextBox *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb
// void __cdecl operator delete(void *); idb
// _DWORD CTRPluginFramework::EventManager::EventManager(CTRPluginFramework::EventManager *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::EventManager::PollEvent(CTRPluginFramework::EventManager *__hidden this, Event *); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::NumericTextBox::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::NumericTextBox::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::Window::MustClose(CTRPluginFramework::Window *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::__converter; // weak
// extern _UNKNOWN `vtable for'CTRPluginFramework::NumericTextBox; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb


//----- (00000008) --------------------------------------------------------
CTRPluginFramework::Converter *__fastcall CTRPluginFramework::Converter::Converter(CTRPluginFramework::Converter *this)
{
  CTRPluginFramework::Converter *v1; // r4
  CTRPluginFramework::NumericTextBox *v2; // r7
  float v3; // r1
  CTRPluginFramework::Converter *result; // r0

  v1 = this;
  v2 = (CTRPluginFramework::Converter *)((char *)this + 60);
  CTRPluginFramework::NumericTextBox::NumericTextBox(this, 30, 100, 125, 15);
  CTRPluginFramework::NumericTextBox::NumericTextBox(v2, 30, 140, 125, 15);
  CTRPluginFramework::NumericTextBox::NumericTextBox(
    (CTRPluginFramework::Converter *)((char *)v1 + 120),
    160,
    100,
    125,
    15);
  CTRPluginFramework::NumericTextBox::NumericTextBox(
    (CTRPluginFramework::Converter *)((char *)v1 + 180),
    160,
    140,
    125,
    15);
  CTRPluginFramework::NumericTextBox::SetValue(v1, 0);
  CTRPluginFramework::NumericTextBox::UseHexadecimal(v1, 0);
  CTRPluginFramework::NumericTextBox::SetValue(v2, 0);
  CTRPluginFramework::NumericTextBox::UseHexadecimal(v2, 1);
  CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::Converter *)((char *)v1 + 120), v3);
  CTRPluginFramework::NumericTextBox::UseHexadecimal((CTRPluginFramework::Converter *)((char *)v1 + 180), 1);
  CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::Converter *)((char *)v1 + 180), 0);
  result = v1;
  CTRPluginFramework::__converter = (int)v1;
  return result;
}
// 4: using guessed type int CTRPluginFramework::__converter;

//----- (000000EC) --------------------------------------------------------
CTRPluginFramework::Converter *__fastcall CTRPluginFramework::Converter::~Converter(CTRPluginFramework::Converter *this)
{
  CTRPluginFramework::Converter *v1; // r4

  v1 = this;
  *((_DWORD *)this + 45) = (char *)&`vtable for'CTRPluginFramework::NumericTextBox + 8;
  ((void (*)(void))std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose)();
  *((_DWORD *)v1 + 30) = (char *)&`vtable for'CTRPluginFramework::NumericTextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 156);
  *((_DWORD *)v1 + 15) = (char *)&`vtable for'CTRPluginFramework::NumericTextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 96);
  *(_DWORD *)v1 = (char *)&`vtable for'CTRPluginFramework::NumericTextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 36);
  return v1;
}
// 508: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000134) --------------------------------------------------------
int __fastcall CTRPluginFramework::Converter::Instance(CTRPluginFramework::Converter *this)
{
  return CTRPluginFramework::__converter;
}
// 4: using guessed type int CTRPluginFramework::__converter;

//----- (00000144) --------------------------------------------------------
int __fastcall CTRPluginFramework::Converter::_Draw(CTRPluginFramework::Converter *this)
{
  CTRPluginFramework::Converter *v1; // r4
  bool v2; // r1
  char *v4; // [sp+0h] [bp-30h]
  int v5; // [sp+4h] [bp-2Ch]
  char v6; // [sp+8h] [bp-28h]
  char v7; // [sp+11h] [bp-1Fh]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(0);
  v4 = &v6;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
  v5 = 9;
  v7 = 0;
  CTRPluginFramework::Window::Draw(&CTRPluginFramework::Window::BottomWindow, &v4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
  CTRPluginFramework::NumericTextBox::Draw(v1);
  CTRPluginFramework::NumericTextBox::Draw((CTRPluginFramework::Converter *)((char *)v1 + 60));
  CTRPluginFramework::NumericTextBox::Draw((CTRPluginFramework::Converter *)((char *)v1 + 120));
  CTRPluginFramework::NumericTextBox::Draw((CTRPluginFramework::Converter *)((char *)v1 + 180));
  CTRPluginFramework::Renderer::DrawString("Decimal:", 30, &v4, CTRPluginFramework::Preferences::Settings[4], 90);
  CTRPluginFramework::Renderer::DrawString("Decimal (hex):", 30, &v4, CTRPluginFramework::Preferences::Settings[4], 130);
  CTRPluginFramework::Renderer::DrawString("Float: ", 160, &v4, CTRPluginFramework::Preferences::Settings[4], 90);
  CTRPluginFramework::Renderer::DrawString("Float (hex):", 160, &v4, CTRPluginFramework::Preferences::Settings[4], 130);
  return CTRPluginFramework::Renderer::EndFrame(0, v2);
}
// 508: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 510: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 514: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void);
// 518: using guessed type int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD);
// 520: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (0000024C) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (00000290) --------------------------------------------------------
void **__fastcall std::deque<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~deque(void **a1)
{
  void **v1; // r4

  v1 = a1;
  std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(a1);
  return v1;
}

//----- (000002A4) --------------------------------------------------------
void **__fastcall CTRPluginFramework::Converter::operator()(unsigned int *a1, unsigned int a2)
{
  unsigned int v2; // r5
  unsigned int *v3; // r4
  float v4; // r1
  int v6; // r8
  float v7; // r1
  float v8; // r1
  float v9; // r1
  unsigned int v10; // s0
  int v11; // [sp+0h] [bp-70h]
  int v12; // [sp+4h] [bp-6Ch]
  int v13; // [sp+8h] [bp-68h]
  int v14; // [sp+Ch] [bp-64h]
  Event v15; // [sp+10h] [bp-60h]

  v2 = a2;
  v3 = a1;
  CTRPluginFramework::EventManager::EventManager((CTRPluginFramework::EventManager *)&v15.eventType);
  if ( v2 )
  {
    CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 15), v2);
    CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)v3, v2);
    CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 30), v4);
    CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 45), v2);
  }
  do
  {
    while ( CTRPluginFramework::EventManager::PollEvent((CTRPluginFramework::EventManager *)&v15.eventType, &v15) )
    {
      if ( !LOBYTE(v15.modifiers) && v15.modifierMask == 2 )
        return std::deque<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~deque((void **)&v15.eventType);
    }
    v6 = CTRPluginFramework::Touch::IsDown(0);
    CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v13);
    v11 = v13;
    v12 = v14;
    CTRPluginFramework::NumericTextBox::Update(v3, v6, &v11);
    CTRPluginFramework::NumericTextBox::Update(v3 + 15, v6, &v11);
    CTRPluginFramework::NumericTextBox::Update(v3 + 30, v6, &v11);
    CTRPluginFramework::NumericTextBox::Update(v3 + 45, v6, &v11);
    CTRPluginFramework::Window::Update(&CTRPluginFramework::Window::BottomWindow, v6, &v11);
    if ( CTRPluginFramework::NumericTextBox::operator()(v3) )
    {
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 15), v3[3]);
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 30), v7);
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 45), v3[33]);
    }
    if ( CTRPluginFramework::NumericTextBox::operator()(v3 + 15) )
    {
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)v3, v3[18]);
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 30), v8);
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 45), v3[33]);
    }
    if ( CTRPluginFramework::NumericTextBox::operator()(v3 + 30) )
    {
      CTRPluginFramework::NumericTextBox::SetValue(
        (CTRPluginFramework::NumericTextBox *)v3,
        (signed int)*((float *)v3 + 33));
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 15), v3[3]);
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 45), v3[33]);
    }
    if ( CTRPluginFramework::NumericTextBox::operator()(v3 + 45) )
    {
      v10 = v3[48];
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 30), v9);
      CTRPluginFramework::NumericTextBox::SetValue(
        (CTRPluginFramework::NumericTextBox *)v3,
        (signed int)*((float *)v3 + 48));
      CTRPluginFramework::NumericTextBox::SetValue((CTRPluginFramework::NumericTextBox *)(v3 + 15), v3[3]);
    }
    CTRPluginFramework::Converter::_Draw((CTRPluginFramework::Converter *)v3);
  }
  while ( !CTRPluginFramework::Window::MustClose((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow) );
  return std::deque<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~deque((void **)&v15.eventType);
}
// 544: using guessed type int __fastcall CTRPluginFramework::NumericTextBox::Update(_DWORD, _DWORD, _DWORD);
// 548: using guessed type int __fastcall CTRPluginFramework::Window::Update(_DWORD, _DWORD, _DWORD);
// 54C: using guessed type int __fastcall CTRPluginFramework::NumericTextBox::operator()(_DWORD);

// ALL OK, 7 function(s) have been successfully decompiled
