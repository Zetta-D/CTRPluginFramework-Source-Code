/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(int result, int a2, int a3);
int __fastcall CTRPluginFramework::SearchMenu::_OpenExportFile(CTRPluginFramework::SearchMenu *this);
int __fastcall CTRPluginFramework::SearchMenu::_NewCheat(__int64 this);
int __fastcall CTRPluginFramework::SearchMenu::_Edit(CTRPluginFramework::SearchMenu *this);
int __fastcall CTRPluginFramework::SearchMenu::_JumpInEditor(CTRPluginFramework::SearchMenu *this);
int __fastcall CTRPluginFramework::SearchMenu::_Export(CTRPluginFramework::SearchMenu *this);
int __fastcall CTRPluginFramework::SearchMenu::_ExportAll(CTRPluginFramework::SearchMenu *this);
int __fastcall CTRPluginFramework::SearchMenu::_ShowGame(CTRPluginFramework::SearchMenu *this);
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (__fastcall *a2)(int ***, int, int), int a3, int a4, ...);
std::__cxx11 *__fastcall std::__cxx11::to_string(std::__cxx11 *this, unsigned int a2);
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1);
CTRPluginFramework::SearchMenu *__fastcall CTRPluginFramework::SearchMenu::SearchMenu(CTRPluginFramework::SearchMenu *this, CTRPluginFramework::Search **a2, CTRPluginFramework::HexEditor *a3, bool *a4, bool *a5);
int __fastcall std::operator+<char,std::char_traits<char>,std::allocator<char>>(int a1, _DWORD *a2, _DWORD *a3);
int __fastcall CTRPluginFramework::SearchMenu::Draw(CTRPluginFramework::SearchMenu *this);
_QWORD *__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(_QWORD *result);
int __fastcall CTRPluginFramework::SearchMenu::Update(CTRPluginFramework::SearchMenu *this);
signed int __fastcall CTRPluginFramework::SearchMenu::ProcessEvent(unsigned int a1, __int64 *a2);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_logic_error(const char *); idb
// void __noreturn std::__throw_bad_alloc(void); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::IsOpen(CTRPluginFramework::File *__hidden this); idb
// int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// unsigned int strtoul(const char *nptr, char **endptr, int base);
// _DWORD CTRPluginFramework::Search::GetType(CTRPluginFramework::Search *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Process::Read8(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned __int8 *); idb
// _DWORD __cdecl CTRPluginFramework::PluginMenuActionReplay::NewARCode(CTRPluginFramework::PluginMenuActionReplay *__hidden this, unsigned __int8, unsigned int, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Process::Read16(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned __int16 *); idb
// _DWORD __cdecl CTRPluginFramework::Process::Read32(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned int *); idb
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Keyboard::IsHexadecimal(CTRPluginFramework::Keyboard *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, float *, float); idb
// _DWORD __cdecl CTRPluginFramework::Process::CheckAddress(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned __int8 *, unsigned __int8); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned __int16 *, unsigned __int16); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned int *, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::HexEditor::Goto(CTRPluginFramework::HexEditor *__hidden this, unsigned int, bool); idb
// int __fastcall CTRPluginFramework::File::WriteLine(_DWORD, _DWORD); weak
// time_t time(time_t *timer);
// char *ctime(const time_t *timer);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::File::Write(CTRPluginFramework::File *__hidden this, const void *, unsigned int); idb
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::Clean(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD CTRPluginFramework::Controller::Update(CTRPluginFramework::Controller *__hidden this); idb
// int __fastcall CTRPluginFramework::Controller::IsKeyPressed(_DWORD); weak
// _DWORD CTRPluginFramework::ScreenImpl::ApplyFading(CTRPluginFramework::ScreenImpl *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// int vsnprintf(char *s, size_t maxlen, const char *format, __gnuc_va_list arg);
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::SubMenu::SubMenu(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::File(CTRPluginFramework::File *__hidden this); idb
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(void); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::SubMenu::Draw(CTRPluginFramework::SubMenu *__hidden this); idb
// _DWORD CTRPluginFramework::SubMenu::OptionsCount(CTRPluginFramework::SubMenu *__hidden this); idb
// int __fastcall CTRPluginFramework::SubMenu::ChangeOptions(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Search::IsFirstUnknownSearch(CTRPluginFramework::Search *__hidden this); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall _cxa_guard_release(_DWORD); weak
// _DWORD CTRPluginFramework::SubMenu::IsOpen(CTRPluginFramework::SubMenu *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::SubMenu::ProcessEvent(CTRPluginFramework::SubMenu *__hidden this, const Event *); idb
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// int __fastcall CTRPluginFramework::SubMenu::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::Converter::Instance(CTRPluginFramework::Converter *__hidden this); idb
// int CTRPluginFramework::Converter::operator()(void); weak

//-------------------------------------------------------------------------
// Data declarations

char `guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll; // weak
_UNKNOWN CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll; // weak
char `guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll; // weak
_UNKNOWN CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll; // weak
_UNKNOWN unk_16DC; // weak
_UNKNOWN unk_1720; // weak
_UNKNOWN unk_1732; // weak
_UNKNOWN unk_1792; // weak
_UNKNOWN unk_1796; // weak
_UNKNOWN unk_1799; // weak
_UNKNOWN unk_179B; // weak
// extern _UNKNOWN CTRPluginFramework::Color::Green; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb
// extern _UNKNOWN CTRPluginFramework::Color::DarkGrey; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN CTRPluginFramework::Color::Gainsboro; weak
// extern _UNKNOWN CTRPluginFramework::Color::Silver; weak


//----- (00000028) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  const char *v2; // r5
  int *v3; // r4
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  const char *v11; // [sp+4h] [bp-14h]

  v11 = a2;
  v2 = a2;
  *a1 = (int)(a1 + 2);
  if ( !a2 )
    std::__throw_logic_error("basic_string::_M_construct null not valid");
  v3 = a1;
  v4 = strlen(a2);
  v5 = (int)&v2[v4];
  v11 = (const char *)v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v3, &v11, 0);
    v7 = (int)v11;
    *v3 = v6;
    v3[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v3, v2, v5);
  result = v3;
  v9 = (int)v11;
  v10 = *v3;
  v3[1] = (int)v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 17E8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 17EC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000000B0) --------------------------------------------------------
int __fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(int result, int a2, int a3)
{
  unsigned int v3; // r6
  unsigned int v4; // r4
  unsigned int *v5; // r7
  int v6; // r5
  int v7; // r8
  unsigned int v8; // r9

  v3 = a3 - a2;
  v4 = -1431655765 * ((a3 - a2) >> 3);
  v5 = (unsigned int *)result;
  v6 = a2;
  v7 = a3;
  if ( -1431655765 * ((a3 - a2) >> 3) )
  {
    if ( v4 > 0xAAAAAAA )
      std::__throw_bad_alloc();
    result = operator new(a3 - a2);
    v4 = result;
  }
  v8 = v4;
  *v5 = v4;
  v5[2] = v4 + v3;
  while ( v7 != v6 )
  {
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v8, v6);
    v6 += 24;
    v8 += 24;
  }
  v5[1] = v4 + 24 * (178956971 * (v3 >> 3) & 0x1FFFFFFF);
  return result;
}
// 17FC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000148) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_OpenExportFile(CTRPluginFramework::SearchMenu *this)
{
  char *v1; // r4
  int result; // r0
  int v3; // r5
  int v4; // [sp+0h] [bp-28h]

  v1 = (char *)this + 96;
  result = CTRPluginFramework::File::IsOpen((CTRPluginFramework::SearchMenu *)((char *)this + 96));
  if ( !result )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      &v4,
      "ExportedAddresses.txt");
    v3 = CTRPluginFramework::File::Open(v1, &v4, 10);
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
    if ( v3 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        &v4,
        "ExportedAddresses.txt");
      CTRPluginFramework::File::Open(v1, &v4, 6);
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
    }
  }
  return result;
}
// 1804: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000001C4) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_NewCheat(__int64 this)
{
  int v1; // r6
  unsigned int v2; // r0
  CTRPluginFramework::Search **v3; // r3
  CTRPluginFramework::Process *v4; // r5
  int v5; // r0
  unsigned __int8 *v6; // r2
  CTRPluginFramework::PluginMenuActionReplay *v7; // r0
  unsigned int v8; // r3
  __int64 v10; // [sp+0h] [bp-18h]

  v10 = this;
  v1 = this;
  v2 = strtoul(*(const char **)(*(_DWORD *)(this + 40) + 24 * *(_DWORD *)(this + 76)), 0, 16);
  v3 = *(CTRPluginFramework::Search ***)(v1 + 4);
  HIDWORD(v10) = 0;
  v4 = (CTRPluginFramework::Process *)v2;
  v5 = CTRPluginFramework::Search::GetType(*v3);
  if ( v5 == 1 )
  {
    BYTE2(v10) = 0;
    CTRPluginFramework::Process::Read8(v4, (unsigned int)&v10 + 2, v6);
    v7 = (CTRPluginFramework::PluginMenuActionReplay *)&CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll;
    v8 = BYTE2(v10);
    HIDWORD(v10) = BYTE2(v10);
  }
  else if ( v5 == 2 )
  {
    WORD1(v10) = 0;
    CTRPluginFramework::Process::Read16(v4, (unsigned int)&v10 + 2, (unsigned __int16 *)v6);
    v8 = WORD1(v10);
    v7 = (CTRPluginFramework::PluginMenuActionReplay *)&CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll;
    HIDWORD(v10) = WORD1(v10);
  }
  else
  {
    CTRPluginFramework::Process::Read32(v4, (unsigned int)&v10 + 4, (unsigned int *)v6);
    v7 = 0;
  }
  return CTRPluginFramework::PluginMenuActionReplay::NewARCode(v7, (unsigned __int8)v4, HIDWORD(v10), v8);
}

//----- (00000278) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_Edit(CTRPluginFramework::SearchMenu *this)
{
  CTRPluginFramework::SearchMenu *v1; // r5
  bool *v2; // r3
  CTRPluginFramework::Process *v3; // r4
  signed int v4; // r0
  float v5; // r2
  unsigned int v7; // r2
  unsigned int v8; // r2
  unsigned int v9; // r2
  unsigned int v10; // r2
  char v11; // [sp+4h] [bp-34h]
  float v12; // [sp+10h] [bp-28h]

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v12,
    (const char *)&unk_1720);
  CTRPluginFramework::Keyboard::Keyboard(&v11, &v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
  v2 = (bool *)*((_DWORD *)v1 + 23);
  v11 = 0;
  CTRPluginFramework::Keyboard::IsHexadecimal((CTRPluginFramework::Keyboard *)&v11, *v2);
  v3 = (CTRPluginFramework::Process *)strtoul(*(const char **)(*((_DWORD *)v1 + 10) + 24 * *((_DWORD *)v1 + 19)), 0, 16);
  v4 = CTRPluginFramework::Search::GetType(**((CTRPluginFramework::Search ***)v1 + 1));
  if ( v4 == 2 )
  {
    LOWORD(v12) = *(_WORD *)v3;
    if ( CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v11, (unsigned __int16 *)&v12, LOWORD(v12)) != -1
      && CTRPluginFramework::Process::CheckAddress(v3, 3u, v9) )
    {
      *(_WORD *)v3 = LOWORD(v12);
    }
  }
  else if ( v4 > 2 )
  {
    if ( v4 == 4 )
    {
      v12 = *(float *)v3;
      if ( CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v11, (unsigned int *)&v12, LODWORD(v12)) != -1
        && CTRPluginFramework::Process::CheckAddress(v3, 3u, v10) )
      {
        *(float *)v3 = v12;
      }
    }
    else if ( v4 == 16 )
    {
      v12 = *(float *)v3;
      if ( CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v11, &v12, v5) != -1 )
      {
        if ( CTRPluginFramework::Process::CheckAddress(v3, 3u, v7) )
          *(float *)v3 = v12;
      }
    }
  }
  else if ( v4 == 1 )
  {
    LOBYTE(v12) = *(_BYTE *)v3;
    if ( CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v11, (unsigned __int8 *)&v12, LOBYTE(v12)) != -1 )
    {
      if ( CTRPluginFramework::Process::CheckAddress(v3, 3u, v8) )
        *(_BYTE *)v3 = LOBYTE(v12);
    }
  }
  return CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v11);
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1824: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);

//----- (00000404) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_JumpInEditor(CTRPluginFramework::SearchMenu *this)
{
  CTRPluginFramework::SearchMenu *v1; // r4
  unsigned int v2; // r0
  int result; // r0

  v1 = this;
  v2 = strtoul(*(const char **)(*((_DWORD *)this + 10) + 24 * *((_DWORD *)this + 19)), 0, 16);
  result = CTRPluginFramework::HexEditor::Goto(*(CTRPluginFramework::HexEditor **)v1, v2, 1);
  **((_BYTE **)v1 + 22) = 1;
  return result;
}

//----- (0000044C) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_Export(CTRPluginFramework::SearchMenu *this)
{
  CTRPluginFramework::SearchMenu *v1; // r4
  char *v2; // r5
  __int64 v3; // r0
  char *v4; // r6
  int v5; // r0
  __int64 v7; // [sp+0h] [bp-48h]
  char v8; // [sp+8h] [bp-40h]
  char v9; // [sp+20h] [bp-28h]

  v1 = this;
  v2 = (char *)this + 96;
  if ( !*((_BYTE *)this + 84) )
  {
    if ( !CTRPluginFramework::File::IsOpen((CTRPluginFramework::SearchMenu *)((char *)this + 96)) )
      CTRPluginFramework::SearchMenu::_OpenExportFile(v1);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v9,
      (const char *)&unk_1720);
    CTRPluginFramework::File::WriteLine(v2, &v9);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
    LODWORD(v3) = time(0);
    v7 = v3;
    v4 = ctime((const time_t *)&v7);
    v4[strlen(v4)] = 0;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v8, v4);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v8, " :\r\n");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v9, &v8);
    CTRPluginFramework::File::WriteLine(v2, &v9);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
    *((_BYTE *)v1 + 84) = 1;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    &v9,
    *((_DWORD *)v1 + 10) + 24 * *((_DWORD *)v1 + 19));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v9, " : ");
  v5 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
         &v9,
         *((_DWORD *)v1 + 13) + 24 * *((_DWORD *)v1 + 19));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v8, v5);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v9, &v8);
  CTRPluginFramework::File::WriteLine(v2, &v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
}
// 17FC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1848: using guessed type int __fastcall CTRPluginFramework::File::WriteLine(_DWORD, _DWORD);
// 1854: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 1858: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 185C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1860: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (00000594) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_ExportAll(CTRPluginFramework::SearchMenu *this)
{
  CTRPluginFramework::SearchMenu *v1; // r4
  CTRPluginFramework::File *v2; // r5
  int v3; // r8
  int v4; // r1
  int v5; // r0
  int v6; // r0
  char *v8; // [sp+0h] [bp-80h]
  unsigned int v9; // [sp+4h] [bp-7Ch]
  char v10; // [sp+8h] [bp-78h]
  char v11; // [sp+18h] [bp-68h]
  char v12; // [sp+30h] [bp-50h]
  char v13; // [sp+48h] [bp-38h]

  v1 = this;
  v2 = (CTRPluginFramework::SearchMenu *)((char *)this + 96);
  if ( !*((_BYTE *)this + 84) )
  {
    if ( !CTRPluginFramework::File::IsOpen((CTRPluginFramework::SearchMenu *)((char *)this + 96)) )
      CTRPluginFramework::SearchMenu::_OpenExportFile(v1);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v13,
      (const char *)&unk_1720);
    CTRPluginFramework::File::WriteLine(v2, &v13);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
    *((_BYTE *)v1 + 84) = 1;
  }
  v8 = &v10;
  v3 = *((_DWORD *)v1 + 19);
  v9 = 0;
  v10 = 0;
  while ( *((_DWORD *)v1 + 19) + 9 >= v3 )
  {
    v4 = *((_DWORD *)v1 + 10);
    if ( -1431655765 * ((*((_DWORD *)v1 + 11) - v4) >> 3) <= (unsigned int)v3 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v11, v4 + 24 * v3);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v11, " : ");
    v5 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
           &v11,
           *((_DWORD *)v1 + 13) + 24 * v3);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v12, v5);
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v12, "\r\n");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v13, v6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v8, &v13);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v13);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
    ++v3;
  }
  CTRPluginFramework::File::Write(v2, v8, v9);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
}
// 17FC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1848: using guessed type int __fastcall CTRPluginFramework::File::WriteLine(_DWORD, _DWORD);
// 1858: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 185C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1860: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 1864: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);

//----- (000006EC) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::_ShowGame(CTRPluginFramework::SearchMenu *this)
{
  char v1; // r2
  unsigned int v2; // r2
  unsigned int v3; // r2
  CTRPluginFramework::ScreenImpl *v4; // r0
  CTRPluginFramework::Controller *v5; // r0
  char v7; // [sp+Ch] [bp-54h]
  char v8; // [sp+10h] [bp-50h]
  char v9; // [sp+28h] [bp-38h]
  char v10; // [sp+40h] [bp-20h]
  char v11; // [sp+41h] [bp-1Fh]
  char v12; // [sp+42h] [bp-1Eh]
  char v13; // [sp+43h] [bp-1Dh]
  char v14; // [sp+44h] [bp-1Ch]

  v10 = 27;
  v1 = CTRPluginFramework::Color::Green;
  if ( CTRPluginFramework::Color::Green < 1u )
    v1 = 1;
  v11 = v1;
  v2 = *((unsigned __int8 *)&CTRPluginFramework::Color::Green + 1);
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  v12 = v2;
  v3 = *((unsigned __int8 *)&CTRPluginFramework::Color::Green + 2);
  v14 = 0;
  if ( v3 < 1 )
    LOBYTE(v3) = 1;
  v13 = v3;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v8, &v10);
  CTRPluginFramework::operator<<(&v9, &v8, "Info");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v10,
    (const char *)&unk_1732);
  CTRPluginFramework::MessageBox::MessageBox(&v7, &v9, &v10, 0, 0);
  CTRPluginFramework::MessageBox::operator()(&v7);
  CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  v4 = (CTRPluginFramework::ScreenImpl *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  v5 = (CTRPluginFramework::Controller *)CTRPluginFramework::ScreenImpl::Clean(v4);
  do
  {
    CTRPluginFramework::Controller::Update(v5);
    v5 = (CTRPluginFramework::Controller *)CTRPluginFramework::Controller::IsKeyPressed(2);
  }
  while ( !v5 );
  return CTRPluginFramework::ScreenImpl::ApplyFading(v5);
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 186C: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 1870: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1874: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 1884: using guessed type int __fastcall CTRPluginFramework::Controller::IsKeyPressed(_DWORD);

//----- (000007D0) --------------------------------------------------------
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (__fastcall *a2)(int ***, int, int), int a3, int a4, ...)
{
  int *v4; // r4
  unsigned int v5; // r0
  char *v6; // r6
  int v7; // r0
  int v8; // r3
  int *result; // r0
  int v10; // r3
  int v11; // r2
  int **v12; // [sp+0h] [bp-18h]
  int v13; // [sp+4h] [bp-14h]
  va_list va; // [sp+20h] [bp+8h]

  va_start(va, a4);
  v4 = a1;
  va_copy(v12, va);
  v5 = a2(&v12, a3, a4);
  v6 = (char *)&v12 + v5;
  *v4 = (int)(v4 + 2);
  v13 = v5;
  if ( v5 > 0xF )
  {
    v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v4, &v13, 0);
    v8 = v13;
    *v4 = v7;
    v4[2] = v8;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v4, &v12, v6);
  result = v4;
  v10 = v13;
  v11 = *v4;
  v4[1] = v13;
  *(_BYTE *)(v11 + v10) = 0;
  return result;
}
// 17E8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1890: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (0000087C) --------------------------------------------------------
std::__cxx11 *__fastcall std::__cxx11::to_string(std::__cxx11 *this, unsigned int a2)
{
  std::__cxx11 *v2; // r4

  v2 = this;
  __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(
    (int *)this,
    (int (__fastcall *)(int ***, int, int))&vsnprintf,
    16,
    (int)&unk_16DC,
    a2,
    a2);
  return v2;
}

//----- (000008AC) --------------------------------------------------------
void **__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000008E8) --------------------------------------------------------
CTRPluginFramework::SearchMenu *__fastcall CTRPluginFramework::SearchMenu::SearchMenu(CTRPluginFramework::SearchMenu *this, CTRPluginFramework::Search **a2, CTRPluginFramework::HexEditor *a3, bool *a4, bool *a5)
{
  CTRPluginFramework::SearchMenu *v5; // r4
  bool *v6; // r6
  CTRPluginFramework::SearchMenu *result; // r0
  int v8; // [sp+4h] [bp-34h]
  int v9; // [sp+8h] [bp-30h]
  int v10; // [sp+Ch] [bp-2Ch]
  char v11; // [sp+10h] [bp-28h]
  char v12; // [sp+28h] [bp-10h]

  v5 = this;
  v6 = a4;
  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a2;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v11, "Show game");
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
    (int)&v8,
    (int)&v11,
    (int)&v12);
  CTRPluginFramework::SubMenu::SubMenu((char *)v5 + 8, &v8);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  *((_DWORD *)v5 + 10) = 0;
  *((_DWORD *)v5 + 11) = 0;
  *((_DWORD *)v5 + 12) = 0;
  *((_DWORD *)v5 + 13) = 0;
  *((_DWORD *)v5 + 14) = 0;
  *((_DWORD *)v5 + 15) = 0;
  *((_DWORD *)v5 + 16) = 0;
  *((_DWORD *)v5 + 17) = 0;
  *((_DWORD *)v5 + 18) = 0;
  *((_DWORD *)v5 + 22) = v6;
  *((_DWORD *)v5 + 23) = a5;
  CTRPluginFramework::File::File((CTRPluginFramework::SearchMenu *)((char *)v5 + 96));
  result = v5;
  *((_DWORD *)v5 + 20) = 0;
  *((_DWORD *)v5 + 19) = 0;
  *((_BYTE *)v5 + 84) = 0;
  return result;
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 189C: using guessed type int __fastcall CTRPluginFramework::SubMenu::SubMenu(_DWORD, _DWORD);

//----- (0000099C) --------------------------------------------------------
int __fastcall std::operator+<char,std::char_traits<char>,std::allocator<char>>(int a1, _DWORD *a2, _DWORD *a3)
{
  int v3; // r4
  _DWORD *v4; // r0
  _DWORD *v5; // r3
  unsigned int v6; // r2
  unsigned int v7; // r1
  unsigned int v8; // r1
  int v9; // r0

  v3 = a1;
  v4 = a3;
  v5 = a2;
  v6 = a2[1] + a3[1];
  if ( (_DWORD *)*a2 == a2 + 2 )
    v7 = 15;
  else
    v7 = a2[2];
  if ( v6 <= v7 || ((_DWORD *)*v4 != v4 + 2 ? (v8 = v4[2]) : (v8 = 15), v6 > v8) )
    v9 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v5, v4);
  else
    v9 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert();
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v3, v9);
  return v3;
}
// 185C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1860: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 18A4: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(void);

//----- (00000A20) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::Draw(CTRPluginFramework::SearchMenu *this)
{
  CTRPluginFramework::SearchMenu *v1; // r4
  int v2; // r3
  int v3; // r0
  int v4; // r0
  void *v5; // r3
  int v6; // r7
  __int64 v7; // r2
  __int64 v8; // r0
  int v9; // r3
  unsigned int v10; // r5
  int v11; // r8
  int v12; // r0
  int v13; // r0
  int v14; // r5
  int v15; // r0
  unsigned int v16; // r5
  unsigned int v17; // r1
  int v18; // r0
  int v20; // [sp+10h] [bp-E8h]
  unsigned int v21; // [sp+14h] [bp-E4h]
  int v22; // [sp+18h] [bp-E0h]
  int v23; // [sp+24h] [bp-D4h]
  int v24; // [sp+28h] [bp-D0h]
  char v25; // [sp+40h] [bp-B8h]
  char v26; // [sp+58h] [bp-A0h]
  char v27; // [sp+70h] [bp-88h]
  int v28; // [sp+88h] [bp-70h]
  char v29; // [sp+A0h] [bp-58h]
  int v30; // [sp+B8h] [bp-40h]

  v23 = 51;
  v1 = this;
  v2 = **((_DWORD **)this + 1);
  if ( v2 )
  {
    std::__cxx11::to_string((std::__cxx11 *)&v30, *(_DWORD *)(v2 + 32));
    v3 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v30, 0, "Step: ");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v28, v3);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
    CTRPluginFramework::Renderer::DrawString(v28, 37, &v23, CTRPluginFramework::Preferences::Settings[4]);
    std::__cxx11::to_string((std::__cxx11 *)&v29, *(_DWORD *)(**((_DWORD **)v1 + 1) + 12));
    v4 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v29, 0, "Hit(s): ");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v30, v4);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v28, &v30);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v29);
    CTRPluginFramework::Renderer::DrawString(v28, 37, &v23, CTRPluginFramework::Preferences::Settings[4]);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v28);
  }
  v23 = 80;
  CTRPluginFramework::Renderer::DrawRect(35, 75, 78, 20, &CTRPluginFramework::Color::DarkGrey, 1, 1);
  CTRPluginFramework::Renderer::DrawString("Address", 53, &v23, CTRPluginFramework::Color::Black);
  v23 = 80;
  CTRPluginFramework::Renderer::DrawRect(113, 75, 126, 20, &CTRPluginFramework::Color::DarkGrey, 1, 1);
  CTRPluginFramework::Renderer::DrawString("New Value", 149, &v23, CTRPluginFramework::Color::Black);
  v23 = 80;
  CTRPluginFramework::Renderer::DrawRect(239, 75, 126, 20, &CTRPluginFramework::Color::DarkGrey, 1, 1);
  CTRPluginFramework::Renderer::DrawString("Old Value", 275, &v23, CTRPluginFramework::Color::Black);
  v23 = 95;
  v5 = &CTRPluginFramework::Color::White;
  v6 = 0;
  while ( 1 )
  {
    CTRPluginFramework::Renderer::DrawRect(35, v23, 330, 10, v5, 1, 1);
    ++v6;
    v23 += 10;
    if ( v6 == 10 )
      break;
    if ( v6 & 1 )
      v5 = &CTRPluginFramework::Color::Gainsboro;
    else
      v5 = &CTRPluginFramework::Color::White;
  }
  v23 = 203;
  CTRPluginFramework::Renderer::DrawString("Options:", 260, &v23, CTRPluginFramework::Preferences::Settings[4]);
  v23 -= 14;
  CTRPluginFramework::Renderer::DrawSysString(
    &unk_1792,
    320,
    &v23,
    380,
    CTRPluginFramework::Preferences::Settings[4],
    0);
  if ( **((_DWORD **)v1 + 1)
    && (v7 = *((_QWORD *)v1 + 5), (_DWORD)v7 != HIDWORD(v7))
    && (v8 = *(_QWORD *)((char *)v1 + 52), (_DWORD)v8 != HIDWORD(v8)) )
  {
    v9 = -1431655765 * ((HIDWORD(v7) - (signed int)v7) >> 3);
    v10 = (*((_DWORD *)v1 + 19) - 5) & ~((*((_DWORD *)v1 + 19) - 5) >> 31);
    if ( v9 >= (signed int)(v10 + 10) )
      v9 = v10 + 10;
    v22 = v9;
    v23 = 95;
    v21 = v10;
    v20 = -10 * v10;
    while ( (signed int)v10 < v22 )
    {
      if ( v10 >= -1431655765 * ((signed int)((*((_QWORD *)v1 + 5) >> 32) - *((_QWORD *)v1 + 5)) >> 3) )
        return v8;
      if ( *((_DWORD *)v1 + 19) == v10 )
        CTRPluginFramework::Renderer::DrawRect(
          35,
          v20 + 95 + v6 * v10,
          330,
          10,
          &CTRPluginFramework::Color::Silver,
          1,
          1);
      v11 = 24 * v10;
      v12 = *((_DWORD *)v1 + 10);
      v30 = v23;
      CTRPluginFramework::Renderer::DrawString(*(_DWORD *)(v12 + 24 * v10), 47, &v30, CTRPluginFramework::Color::Black);
      v13 = *((_DWORD *)v1 + 13);
      v30 = v23;
      CTRPluginFramework::Renderer::DrawString(
        *(_DWORD *)(v13 + v11),
        ((unsigned int)(126 - 6 * *(_DWORD *)(v13 + v11 + 4)) >> 1) + 113,
        &v30,
        CTRPluginFramework::Color::Black);
      LODWORD(v8) = *((_DWORD *)v1 + 16);
      if ( v10 < -1431655765 * ((*((_DWORD *)v1 + 17) - (signed int)v8) >> 3) )
        LODWORD(v8) = CTRPluginFramework::Renderer::DrawString(
                        *(_DWORD *)(v8 + v11),
                        ((unsigned int)(126 - 6 * *(_DWORD *)(v8 + v11 + 4)) >> 1) + 239,
                        &v23,
                        CTRPluginFramework::Color::Black);
      else
        v23 += 10;
      ++v10;
    }
    v14 = v21 + *((_DWORD *)v1 + 20);
    __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(
      (int *)&v25,
      (int (__fastcall *)(int ***, int, int))&vsnprintf,
      16,
      (int)&unk_1796,
      v21 + *((_DWORD *)v1 + 20));
    v15 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v25, &unk_1799);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v26, v15);
    v16 = v14 + 10;
    v17 = *(_DWORD *)(**((_DWORD **)v1 + 1) + 12);
    if ( v16 < v17 )
      v17 = v16;
    std::__cxx11::to_string((std::__cxx11 *)&v27, v17);
    std::operator+<char,std::char_traits<char>,std::allocator<char>>((int)&v28, &v26, &v27);
    v18 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v28, &unk_179B);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v29, v18);
    std::__cxx11::to_string((std::__cxx11 *)&v30, *(_DWORD *)(**((_DWORD **)v1 + 1) + 12));
    std::operator+<char,std::char_traits<char>,std::allocator<char>>((int)&v24, &v29, &v30);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v29);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v28);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
    v23 = 196;
    CTRPluginFramework::Renderer::DrawString(v24, 37, &v23, CTRPluginFramework::Preferences::Settings[4]);
    CTRPluginFramework::SubMenu::Draw((CTRPluginFramework::SearchMenu *)((char *)v1 + 8));
    LODWORD(v8) = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
  }
  else
  {
    LODWORD(v8) = CTRPluginFramework::SubMenu::Draw((CTRPluginFramework::SearchMenu *)((char *)v1 + 8));
  }
  return v8;
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1858: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 1860: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 18A8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 18AC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);
// 18B0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 18B4: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 18B8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000F68) --------------------------------------------------------
_QWORD *__fastcall std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear(_QWORD *result)
{
  __int64 v1; // r6
  _QWORD *v2; // r4
  int v3; // r5
  int v4; // r0

  v1 = *result;
  if ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = result;
    v3 = v1;
    do
    {
      v4 = v3;
      v3 += 24;
      result = (_QWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4);
    }
    while ( HIDWORD(v1) != v3 );
    *((_DWORD *)v2 + 1) = v1;
  }
  return result;
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000F9C) --------------------------------------------------------
int __fastcall CTRPluginFramework::SearchMenu::Update(CTRPluginFramework::SearchMenu *this)
{
  CTRPluginFramework::SearchMenu *v1; // r4
  __int64 v2; // r0
  unsigned int v3; // r5
  bool v4; // cf
  _DWORD *v5; // r2
  int v6; // r1
  int v8; // [sp+Ch] [bp-D4h]
  int v9; // [sp+10h] [bp-D0h]
  int v10; // [sp+14h] [bp-CCh]
  char v11[24]; // [sp+18h] [bp-C8h]
  char v12; // [sp+30h] [bp-B0h]
  char v13; // [sp+48h] [bp-98h]
  char v14; // [sp+60h] [bp-80h]
  char v15; // [sp+78h] [bp-68h]
  char v16; // [sp+90h] [bp-50h]
  char v17; // [sp+A8h] [bp-38h]
  char v18; // [sp+C0h] [bp-20h]

  v1 = this;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear((_QWORD *)this + 5);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear((CTRPluginFramework::SearchMenu *)((char *)v1 + 52));
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::clear((_QWORD *)v1 + 8);
  if ( **((_DWORD **)v1 + 1) )
  {
    if ( CTRPluginFramework::SubMenu::OptionsCount((CTRPluginFramework::SearchMenu *)((char *)v1 + 8)) == 1
      && !CTRPluginFramework::Search::IsFirstUnknownSearch(**((CTRPluginFramework::Search ***)v1 + 1)) )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)v11, "Edit");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v12,
        "Jump in editor");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v13,
        "New cheat");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v14, "Export");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v15,
        "Export all");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v16,
        "Converter");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v17,
        "Show Game");
      v8 = 0;
      v9 = 0;
      v10 = 0;
      std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
        (int)&v8,
        (int)v11,
        (int)&v18);
      CTRPluginFramework::SubMenu::ChangeOptions((char *)v1 + 8, &v8);
      std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v8);
      v3 = 6;
      do
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11[24 * v3]);
        v4 = v3-- >= 1;
      }
      while ( v4 );
    }
    v5 = (_DWORD *)*((_DWORD *)v1 + 1);
    if ( (unsigned int)(*((_DWORD *)v1 + 20) + *((_DWORD *)v1 + 19)) >= *(_DWORD *)(*v5 + 12) )
    {
      *((_DWORD *)v1 + 20) = 0;
      *((_DWORD *)v1 + 19) = 0;
    }
    v6 = *((_DWORD *)v1 + 20);
    (*(void (__cdecl **)(_DWORD))(*(_DWORD *)*v5 + 4))(*v5);
    v2 = *((_QWORD *)v1 + 5);
    if ( *((_DWORD *)v1 + 19) >= (unsigned int)(-1431655765 * ((HIDWORD(v2) - (signed int)v2) >> 3)) )
      *((_DWORD *)v1 + 19) = 0;
    if ( (_DWORD)v2 == HIDWORD(v2) && *(_DWORD *)(**((_DWORD **)v1 + 1) + 12) )
    {
      *((_DWORD *)v1 + 20) = 0;
      *((_DWORD *)v1 + 19) = 0;
      LODWORD(v2) = CTRPluginFramework::SearchMenu::Update(v1);
    }
  }
  else
  {
    *((_DWORD *)v1 + 19) = 0;
    *((_DWORD *)v1 + 20) = 0;
    LODWORD(v2) = CTRPluginFramework::SubMenu::OptionsCount((CTRPluginFramework::SearchMenu *)((char *)v1 + 8));
    if ( (unsigned int)v2 > 1 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)v11,
        "Show game");
      v8 = 0;
      v9 = 0;
      v10 = 0;
      std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
        (int)&v8,
        (int)v11,
        (int)&v12);
      CTRPluginFramework::SubMenu::ChangeOptions((char *)v1 + 8, &v8);
      std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v8);
      LODWORD(v2) = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v11);
    }
  }
  return v2;
}
// 1808: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 18DC: using guessed type int __fastcall CTRPluginFramework::SubMenu::ChangeOptions(_DWORD, _DWORD);
// F9C: using guessed type char var_C8[24];

//----- (000011CC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::SearchMenu::ProcessEvent(unsigned int a1, __int64 *a2)
{
  unsigned int v2; // r4
  __int64 *v3; // r11
  unsigned int v4; // r6
  int v5; // r7
  __int64 v6; // r2
  int v7; // r10
  float v8; // r1
  signed int v9; // r3
  int v10; // r3
  int v11; // r3
  int v12; // r2
  signed int v13; // r2
  int v14; // r3
  Time v15; // r1
  float v16; // r1
  Time v17; // r1
  signed int v18; // r3
  signed int v19; // r2
  int v20; // r3
  unsigned int v21; // r3
  int v22; // r2
  int v23; // r3
  int v24; // r12
  int v25; // r3
  int v26; // r2
  unsigned int v27; // r0
  int v28; // r2
  signed int v29; // r3
  int v30; // r1
  int v31; // r3
  int v32; // r3
  int v33; // r2
  __int64 v35; // r0
  bool v36; // zf
  CTRPluginFramework::SearchMenu *v37; // r0
  __int64 v38; // [sp+0h] [bp-38h]
  __int64 v39; // [sp+8h] [bp-30h]

  v2 = a1;
  v3 = a2;
  __mcr(15, 0, a1, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll & 1) )
  {
    a1 = _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll);
    if ( a1 )
    {
      CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll);
      a1 = _cxa_guard_release(&`guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll);
    }
  }
  __mcr(15, 0, a1, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll) )
  {
    CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll);
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll);
  }
  v4 = 0;
  v5 = CTRPluginFramework::SubMenu::IsOpen((CTRPluginFramework::SubMenu *)(v2 + 8));
  while ( 1 )
  {
    v6 = *v3;
    if ( -1431655765 * ((HIDWORD(v6) - (signed int)v6) >> 2) <= v4 )
      break;
    HIDWORD(v6) = 12 * v4;
    v7 = v6 + 12 * v4;
    v38 = v6;
    CTRPluginFramework::SubMenu::ProcessEvent((CTRPluginFramework::SubMenu *)(v2 + 8), (const Event *)(v6 + 12 * v4));
    if ( v5 )
      goto LABEL_16;
    if ( *(_BYTE *)(v38 + HIDWORD(v38)) )
    {
      if ( *(_BYTE *)(v38 + HIDWORD(v38)) == 1 )
      {
        if ( **(_DWORD **)(v2 + 4) )
        {
          CTRPluginFramework::Seconds((CTRPluginFramework *)&v39, v8);
          if ( CTRPluginFramework::Clock::HasTimePassed(
                 (CTRPluginFramework::Clock *)&CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll,
                 v15) )
          {
            CTRPluginFramework::Seconds((CTRPluginFramework *)&v39, v16);
            if ( CTRPluginFramework::Clock::HasTimePassed(
                   (CTRPluginFramework::Clock *)&CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll,
                   v17) )
            {
              v18 = *(_DWORD *)(v7 + 4);
              if ( v18 == 32 )
              {
                *(_DWORD *)(v2 + 80) = (*(_DWORD *)(v2 + 80) - 500 + *(_DWORD *)(v2 + 76)) & ~((*(_DWORD *)(v2 + 80)
                                                                                              - 500
                                                                                              + *(_DWORD *)(v2 + 76)) >> 31);
                *(_DWORD *)(v2 + 76) = 0;
                goto LABEL_33;
              }
              if ( v18 > 32 )
              {
                switch ( v18 )
                {
                  case 0x80:
                    v32 = -1431655765 * ((signed int)((*(_QWORD *)(v2 + 40) >> 32) - *(_QWORD *)(v2 + 40)) >> 3) - 1;
                    v33 = *(_DWORD *)(v2 + 76) + 1;
                    if ( v32 > v33 )
                      *(_DWORD *)(v2 + 76) = v33;
                    else
                      *(_DWORD *)(v2 + 76) = v32;
                    goto LABEL_23;
                  case 0x40000000:
                    v28 = (*(_DWORD *)(v2 + 76) - 5) & ~((*(_DWORD *)(v2 + 76) - 5) >> 31);
                    v29 = (unsigned int)(-1431655765 * ((*(_DWORD *)(v2 + 44) - *(_DWORD *)(v2 + 40)) >> 3)) >> 1;
                    *(_DWORD *)(v2 + 76) = v28;
                    if ( v29 > v28 )
                    {
                      v30 = *(_DWORD *)(v2 + 80);
                      if ( v30 )
                      {
                        v31 = (v30 - v29) & ~((v30 - v29) >> 31);
                        *(_DWORD *)(v2 + 80) = v31;
                        *(_DWORD *)(v2 + 76) = v28 + v30 - v31;
                        goto LABEL_60;
                      }
                    }
LABEL_23:
                    CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v39);
                    break;
                  case 0x40:
                    *(_DWORD *)(v2 + 76) = (*(_DWORD *)(v2 + 76) - 1) & ~((*(_DWORD *)(v2 + 76) - 1) >> 31);
                    goto LABEL_23;
                }
              }
              else
              {
                if ( v18 == 0x80000000 )
                {
                  v21 = -1431655765 * ((signed int)((*(_QWORD *)(v2 + 40) >> 32) - *(_QWORD *)(v2 + 40)) >> 3);
                  v22 = *(_DWORD *)(v2 + 76) + 5;
                  if ( v22 >= (signed int)(v21 - 1) )
                    v22 = v21 - 1;
                  v23 = v21 >> 1;
                  *(_DWORD *)(v2 + 76) = v22;
                  if ( v23 >= v22 )
                    goto LABEL_23;
                  v24 = *(_DWORD *)(v2 + 80);
                  v25 = v23 + v24;
                  v26 = v22 + v24;
                  v27 = *(_DWORD *)(**(_DWORD **)(v2 + 4) + 12) / 0x1F4u;
                  if ( (signed int)(500 * v27) < v25 )
                    v25 = 500 * v27;
                  *(_DWORD *)(v2 + 80) = v25;
                  *(_DWORD *)(v2 + 76) = v26 - v25;
LABEL_60:
                  CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::SearchMenu *)v2);
                  goto LABEL_23;
                }
                if ( v18 == 16 )
                {
                  v19 = 500 * (*(_DWORD *)(**(_DWORD **)(v2 + 4) + 12) / 0x1F4u);
                  v20 = *(_DWORD *)(v2 + 80) + 500 + *(_DWORD *)(v2 + 76);
                  if ( v19 > v20 )
                    *(_DWORD *)(v2 + 80) = v20;
                  else
                    *(_DWORD *)(v2 + 80) = v19;
                  *(_DWORD *)(v2 + 76) = 0;
                  goto LABEL_33;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v9 = *(_DWORD *)(v7 + 4);
      if ( v9 == 2 )
        return 1;
      if ( v9 == 32 )
      {
        *(_DWORD *)(v2 + 80) = (*(_DWORD *)(v2 + 80) - 500 + *(_DWORD *)(v2 + 76)) & ~((*(_DWORD *)(v2 + 80)
                                                                                      - 500
                                                                                      + *(_DWORD *)(v2 + 76)) >> 31);
        goto LABEL_32;
      }
      if ( v9 <= 32 )
      {
        if ( v9 == 0x80000000 )
        {
          v11 = -1431655765 * ((signed int)((*(_QWORD *)(v2 + 40) >> 32) - *(_QWORD *)(v2 + 40)) >> 3) - 1;
          v12 = *(_DWORD *)(v2 + 76) + 5;
          goto LABEL_25;
        }
        if ( v9 != 16 )
          goto LABEL_16;
        v13 = 500 * (*(_DWORD *)(**(_DWORD **)(v2 + 4) + 12) / 0x1F4u);
        v14 = *(_DWORD *)(v2 + 80) + 500 + *(_DWORD *)(v2 + 76);
        if ( v13 > v14 )
          *(_DWORD *)(v2 + 80) = v14;
        else
          *(_DWORD *)(v2 + 80) = v13;
LABEL_32:
        *(_DWORD *)(v2 + 76) = 0;
LABEL_33:
        CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v39);
        CTRPluginFramework::SearchMenu::Update((CTRPluginFramework::SearchMenu *)v2);
        goto LABEL_16;
      }
      switch ( v9 )
      {
        case 0x80:
          v11 = -1431655765 * ((signed int)((*(_QWORD *)(v2 + 40) >> 32) - *(_QWORD *)(v2 + 40)) >> 3) - 1;
          v12 = *(_DWORD *)(v2 + 76) + 1;
LABEL_25:
          if ( v11 > v12 )
            *(_DWORD *)(v2 + 76) = v12;
          else
            *(_DWORD *)(v2 + 76) = v11;
          goto LABEL_23;
        case 0x40000000:
          v10 = *(_DWORD *)(v2 + 76) - 5;
          goto LABEL_22;
        case 0x40:
          v10 = *(_DWORD *)(v2 + 76) - 1;
LABEL_22:
          *(_DWORD *)(v2 + 76) = v10 & ~(v10 >> 31);
          goto LABEL_23;
      }
    }
LABEL_16:
    ++v4;
  }
  if ( CTRPluginFramework::SubMenu::IsOpen((CTRPluginFramework::SubMenu *)(v2 + 8)) )
  {
    LODWORD(v35) = CTRPluginFramework::SubMenu::operator()(v2 + 8);
    switch ( (_DWORD)v35 )
    {
      case 0:
        v36 = CTRPluginFramework::SubMenu::OptionsCount((CTRPluginFramework::SubMenu *)(v2 + 8)) == 1;
        v37 = (CTRPluginFramework::SearchMenu *)v2;
        if ( v36 )
          goto LABEL_76;
        CTRPluginFramework::SearchMenu::_Edit((CTRPluginFramework::SearchMenu *)v2);
        break;
      case 1:
        CTRPluginFramework::SearchMenu::_JumpInEditor((CTRPluginFramework::SearchMenu *)v2);
        break;
      case 2:
        LODWORD(v35) = v2;
        CTRPluginFramework::SearchMenu::_NewCheat(v35);
        break;
      case 3:
        CTRPluginFramework::SearchMenu::_Export((CTRPluginFramework::SearchMenu *)v2);
        break;
      case 4:
        CTRPluginFramework::SearchMenu::_ExportAll((CTRPluginFramework::SearchMenu *)v2);
        break;
      case 5:
        if ( CTRPluginFramework::Converter::Instance((CTRPluginFramework::Converter *)v35) )
          CTRPluginFramework::Converter::operator()();
        break;
      case 6:
        v37 = (CTRPluginFramework::SearchMenu *)v2;
LABEL_76:
        CTRPluginFramework::SearchMenu::_ShowGame(v37);
        break;
      default:
        return 0;
    }
  }
  return 0;
}
// 8: using guessed type char `guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_fastScroll;
// 18: using guessed type char `guard variable for'CTRPluginFramework::SearchMenu::ProcessEvent(std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>> &,CTRPluginFramework::Time &)::_startFastScroll;
// 18E4: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 18EC: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 1904: using guessed type int __fastcall CTRPluginFramework::SubMenu::operator()(_DWORD);
// 190C: using guessed type int CTRPluginFramework::Converter::operator()(void);

// ALL OK, 18 function(s) have been successfully decompiled
