/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
CTRPluginFramework::TextBox *__fastcall CTRPluginFramework::TextBox::~TextBox(CTRPluginFramework::TextBox *this);
CTRPluginFramework::TextBox *__fastcall CTRPluginFramework::TextBox::~TextBox(CTRPluginFramework::TextBox *this);
int __fastcall CTRPluginFramework::Menu::Menu(int a1, int a2, int a3, int a4);
CTRPluginFramework::Menu *__fastcall CTRPluginFramework::Menu::Menu(CTRPluginFramework::Menu *this, CTRPluginFramework::MenuFolderImpl *a2, int (__cdecl *a3)(int, int));
int __fastcall CTRPluginFramework::Menu::Open(CTRPluginFramework::Menu *this, CTRPluginFramework::MenuFolderImpl *a2, int a3);
int __fastcall CTRPluginFramework::Menu::CloseAll(int result);
CTRPluginFramework::Menu *__fastcall CTRPluginFramework::Menu::~Menu(CTRPluginFramework::Menu *this);
int __fastcall CTRPluginFramework::Menu::Append(int a1, int a2);
int __fastcall CTRPluginFramework::Menu::GetFolder(CTRPluginFramework::Menu *this);
int __fastcall CTRPluginFramework::Menu::GetRootFolder(CTRPluginFramework::Menu *this);
unsigned int __fastcall CTRPluginFramework::Menu::GetSelectedItem(CTRPluginFramework::Menu *this);
int __fastcall CTRPluginFramework::Menu::Draw(CTRPluginFramework::Menu *this);
int __fastcall CTRPluginFramework::Menu::_ScrollUp(__int64 this);
int __fastcall CTRPluginFramework::Menu::_ScrollDown(__int64 this, int a2);
signed int __fastcall CTRPluginFramework::Menu::ProcessEvent(int a1, Event *a2, CTRPluginFramework::MenuEntryImpl **a3);
unsigned int __fastcall CTRPluginFramework::Menu::Update(__int64 this);
signed int __fastcall CTRPluginFramework::Menu::ShowNote(CTRPluginFramework::Menu *this);
int __fastcall CTRPluginFramework::Menu::CloseNote(CTRPluginFramework::Menu *this);
int __fastcall CTRPluginFramework::Menu::IsNoteOpen(CTRPluginFramework::Menu *this);
void *__fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(int a1, _BYTE *a2);
unsigned int __fastcall CTRPluginFramework::Menu::Remove(int a1, int a2);
int __fastcall CTRPluginFramework::Menu::Pop(CTRPluginFramework::Menu *this);
void __fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_realloc_insert<CTRPluginFramework::MenuItem * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::Menu::Insert(int a1, int a2);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// void __cdecl operator delete(void *); idb
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void); weak
// _DWORD CTRPluginFramework::MenuFolderImpl::ItemsCount(CTRPluginFramework::MenuFolderImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::_Close(CTRPluginFramework::MenuFolderImpl *__hidden this, int *, bool); idb
// int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawLine(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::MenuSelector(CTRPluginFramework::Renderer *__hidden this, int, int, int, int); idb
// _DWORD CTRPluginFramework::MenuEntryImpl::IsActivated(CTRPluginFramework::MenuEntryImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysCheckBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysFolder(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::TextBox::IsOpen(CTRPluginFramework::TextBox *__hidden this); idb
// _DWORD CTRPluginFramework::TextBox::DrawConst(CTRPluginFramework::TextBox *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Milliseconds(CTRPluginFramework *__hidden this, int); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::TextBox::ProcessEvent(CTRPluginFramework::TextBox *__hidden this, Event *); idb
// _DWORD CTRPluginFramework::MenuEntryTools::TriggerState(CTRPluginFramework::MenuEntryTools *__hidden this); idb
// _DWORD CTRPluginFramework::MenuEntryImpl::_TriggerState(CTRPluginFramework::MenuEntryImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::AddAR(_DWORD); weak
// int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::RemoveAR(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MenuFolderImpl::_Open(CTRPluginFramework::MenuFolderImpl *__hidden this, CTRPluginFramework::MenuFolderImpl *, int, bool); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::GetTextSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD CTRPluginFramework::Time::AsSeconds(CTRPluginFramework::Time *__hidden this); idb
// int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::TextBox::Open(CTRPluginFramework::TextBox *__hidden this); idb
// int __fastcall CTRPluginFramework::TextBox::Close(_DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN loc_20; // weak
_UNKNOWN unk_EF4; // weak
// extern _UNKNOWN `vtable for'CTRPluginFramework::TextBox; weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[6]; idb
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak


//----- (00000004) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// F00: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// F04: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (0000007C) --------------------------------------------------------
CTRPluginFramework::TextBox *__fastcall CTRPluginFramework::TextBox::~TextBox(CTRPluginFramework::TextBox *this)
{
  CTRPluginFramework::TextBox *v1; // r4
  void *v2; // r0

  v1 = this;
  *(_DWORD *)this = (char *)&`vtable for'CTRPluginFramework::TextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 16);
  v2 = (void *)*((_DWORD *)v1 + 1);
  if ( v2 )
    operator delete(v2);
  return v1;
}
// F08: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000000AC) --------------------------------------------------------
CTRPluginFramework::TextBox *__fastcall CTRPluginFramework::TextBox::~TextBox(CTRPluginFramework::TextBox *this)
{
  CTRPluginFramework::TextBox *v1; // r4

  v1 = this;
  CTRPluginFramework::TextBox::~TextBox(this);
  operator delete((void *)v1);
  return v1;
}

//----- (000000C8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::Menu(int a1, int a2, int a3, int a4)
{
  int v4; // r4
  int v5; // r7
  int v6; // r6
  int result; // r0
  __int64 v8; // [sp+0h] [bp-60h]
  char v9; // [sp+10h] [bp-50h]
  char v10; // [sp+28h] [bp-38h]

  v4 = a1;
  v5 = a4;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(a1 + 24));
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(v4 + 32));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v9,
    (const char *)&unk_EF4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v10,
    (const char *)&unk_EF4);
  CTRPluginFramework::TextBox::TextBox(v4 + 40, &v9, &v10, &v8, 40, 30, 320, 180);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  *(_BYTE *)v4 = 0;
  v6 = operator new(0x64u);
  CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
  result = v4;
  *(_DWORD *)(v4 + 8) = v6;
  *(_DWORD *)(v4 + 4) = v6;
  *(_DWORD *)(v4 + 160) = v5;
  *(_DWORD *)(v4 + 12) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 164) = 0;
  *(_DWORD *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 172) = 0;
  *(_DWORD *)(v4 + 176) = 0;
  *(_DWORD *)(v4 + 180) = 0;
  return result;
}
// F08: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// F18: using guessed type int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// F20: using guessed type int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void);

//----- (000001A4) --------------------------------------------------------
CTRPluginFramework::Menu *__fastcall CTRPluginFramework::Menu::Menu(CTRPluginFramework::Menu *this, CTRPluginFramework::MenuFolderImpl *a2, int (__cdecl *a3)(int, int))
{
  CTRPluginFramework::Menu *v3; // r4
  int (__cdecl *v4)(int, int); // r6
  CTRPluginFramework::MenuFolderImpl *v5; // r5
  signed int v6; // r3
  CTRPluginFramework::Menu *result; // r0
  __int64 v8; // [sp+0h] [bp-50h]
  char v9; // [sp+10h] [bp-40h]
  char v10; // [sp+28h] [bp-28h]

  v3 = this;
  v4 = a3;
  v5 = a2;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Menu *)((char *)this + 24));
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Menu *)((char *)v3 + 32));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v9,
    (const char *)&unk_EF4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v10,
    (const char *)&unk_EF4);
  CTRPluginFramework::TextBox::TextBox((char *)v3 + 40, &v9, &v10, &v8, 40, 30, 320, 180);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  v6 = 0;
  *(_BYTE *)v3 = 0;
  if ( !v5 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v9, "Menu");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v10,
      (const char *)&unk_EF4);
    v5 = (CTRPluginFramework::MenuFolderImpl *)operator new(0x64u);
    CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
    v6 = 1;
  }
  *((_DWORD *)v3 + 2) = v5;
  *((_DWORD *)v3 + 1) = v5;
  if ( v6 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  }
  result = v3;
  *((_DWORD *)v3 + 3) = 0;
  *((_DWORD *)v3 + 4) = 0;
  *((_DWORD *)v3 + 41) = 0;
  *((_DWORD *)v3 + 42) = 0;
  *((_DWORD *)v3 + 43) = 0;
  *((_DWORD *)v3 + 40) = v4;
  *((_DWORD *)v3 + 44) = 0;
  *((_DWORD *)v3 + 45) = 0;
  return result;
}
// F08: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// F18: using guessed type int __fastcall CTRPluginFramework::TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// F20: using guessed type int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void);

//----- (000002BC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::Open(CTRPluginFramework::Menu *this, CTRPluginFramework::MenuFolderImpl *a2, int a3)
{
  CTRPluginFramework::Menu *v3; // r4
  int v4; // r7
  int v5; // r6
  CTRPluginFramework::MenuFolderImpl *v6; // r5
  int v7; // r0

  v3 = this;
  v4 = *((_DWORD *)this + 2);
  v5 = a3;
  v6 = a2;
  v7 = CTRPluginFramework::MenuFolderImpl::ItemsCount(a2) - 1;
  if ( v7 >= v5 )
    v7 = v5;
  *((_DWORD *)v3 + 41) = v7 & ~(v7 >> 31);
  *((_DWORD *)v3 + 2) = v6;
  return v4;
}

//----- (000002F8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::CloseAll(int result)
{
  _DWORD *v1; // r4
  int *v2; // r5

  if ( *(_DWORD *)(result + 4) )
  {
    v1 = (_DWORD *)result;
    v2 = (int *)(result + 164);
    while ( 1 )
    {
      result = v1[2];
      if ( v1[1] == result )
        break;
      result = CTRPluginFramework::MenuFolderImpl::_Close((CTRPluginFramework::MenuFolderImpl *)result, v2, 0);
      if ( !result )
      {
        v1[1] = v1[2];
        break;
      }
      v1[2] = result;
    }
    v1[41] = 0;
  }
  return result;
}

//----- (00000350) --------------------------------------------------------
CTRPluginFramework::Menu *__fastcall CTRPluginFramework::Menu::~Menu(CTRPluginFramework::Menu *this)
{
  CTRPluginFramework::Menu *v1; // r4
  int v2; // r0

  v1 = this;
  v2 = *((_DWORD *)this + 2);
  if ( v2 )
    (*(void (**)(void))(*(_DWORD *)v2 + 4))();
  CTRPluginFramework::TextBox::~TextBox((CTRPluginFramework::Menu *)((char *)v1 + 40));
  return v1;
}

//----- (00000380) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::Append(int a1, int a2)
{
  return CTRPluginFramework::MenuFolderImpl::Append(*(_DWORD *)(a1 + 8), a2, 0);
}
// F2C: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD);

//----- (0000038C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::GetFolder(CTRPluginFramework::Menu *this)
{
  return *((_DWORD *)this + 2);
}

//----- (00000394) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::GetRootFolder(CTRPluginFramework::Menu *this)
{
  return *((_DWORD *)this + 1);
}

//----- (0000039C) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::Menu::GetSelectedItem(CTRPluginFramework::Menu *this)
{
  CTRPluginFramework::Menu *v1; // r4
  unsigned int result; // r0
  unsigned int v3; // r3
  bool v4; // cf
  int v5; // r3

  v1 = this;
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(*((CTRPluginFramework::MenuFolderImpl **)this + 2));
  if ( result )
  {
    v3 = *((_DWORD *)v1 + 41);
    v4 = v3 >= result;
    if ( v3 >= result )
      result = (result - 1) & ~((signed int)(result - 1) >> 31);
    v5 = *((_DWORD *)v1 + 2);
    if ( v4 )
      *((_DWORD *)v1 + 41) = result;
    result = *(_DWORD *)(*(_DWORD *)(v5 + 80) + 4 * *((_DWORD *)v1 + 41));
  }
  return result;
}

//----- (000003DC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::Draw(CTRPluginFramework::Menu *this)
{
  signed int *v1; // r8
  CTRPluginFramework::Menu *v2; // r5
  int v3; // r0
  CTRPluginFramework::MenuFolderImpl *v4; // r0
  int result; // r0
  int v6; // r4
  int v7; // r3
  int v8; // r3
  int v9; // r6
  int v10; // r3
  int v11; // r6
  int v12; // s17
  int v13; // r3
  int v14; // r9
  void (__fastcall *v15)(signed int, int); // r3
  int v16; // r0
  _DWORD *v17; // r0
  signed int v18; // [sp+0h] [bp-48h]
  int v19; // [sp+Ch] [bp-3Ch]
  int v20; // [sp+10h] [bp-38h]
  int v21; // [sp+14h] [bp-34h]

  v2 = this;
  v20 = 25;
  CTRPluginFramework::Renderer::SetTarget(1);
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::TopWindow);
  v3 = CTRPluginFramework::Renderer::DrawSysString(
         *(_DWORD *)(*((_DWORD *)v2 + 2) + 4),
         40,
         &v20,
         360,
         CTRPluginFramework::Preferences::Settings[5],
         0);
  v18 = 1;
  CTRPluginFramework::Renderer::DrawLine(40, v20, v3, &CTRPluginFramework::Preferences::Settings[5]);
  v4 = (CTRPluginFramework::MenuFolderImpl *)*((_DWORD *)v2 + 2);
  v20 += 7;
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(v4);
  if ( !result )
    return result;
  v6 = (*((_DWORD *)v2 + 41) - 6) & ~((*((_DWORD *)v2 + 41) - 6) >> 31);
  v7 = v6 + 8;
  if ( v6 + 8 >= result )
    v7 = result;
  v19 = v7;
  if ( !*((_DWORD *)v2 + 40) )
  {
    while ( 1 )
    {
      if ( v6 >= v19 )
        goto LABEL_35;
      v10 = *((_DWORD *)v2 + 41);
      if ( v10 == v6 )
        v1 = &CTRPluginFramework::Preferences::Settings[6];
      if ( v10 != v6 )
        v1 = &CTRPluginFramework::Preferences::Settings[7];
      v11 = *(_DWORD *)(*(_DWORD *)(*((_DWORD *)v2 + 2) + 80) + 4 * v6);
      if ( v10 == v6 )
      {
        v12 = *((_DWORD *)v2 + 44);
        CTRPluginFramework::Renderer::MenuSelector(
          (CTRPluginFramework::Renderer *)((char *)&loc_20 + 3),
          v20 - 3,
          330,
          20,
          v18);
      }
      v13 = *(unsigned __int8 *)(v11 + 57);
      if ( v13 == 1 )
        break;
      if ( v13 == 2 )
      {
        if ( *(_BYTE *)(v11 + 132) )
          break;
        v15 = *(void (__fastcall **)(signed int, int))(v11 + 120);
        if ( v15 )
          v15(40, v20);
        CTRPluginFramework::Renderer::DrawSysString(*(_DWORD *)(v11 + 4), 60, &v20, 360, *v1, 0);
      }
      else
      {
        v14 = *(_DWORD *)(v11 + 4);
        if ( v13 == 3 )
        {
          CTRPluginFramework::MenuEntryImpl::IsActivated((CTRPluginFramework::MenuEntryImpl *)v11);
          v18 = *v1;
          goto LABEL_24;
        }
        v18 = *v1;
        CTRPluginFramework::Renderer::DrawSysFolder(v14, 40, &v20, 360);
      }
LABEL_31:
      ++v6;
      v20 += 4;
    }
    v14 = *(_DWORD *)(v11 + 4);
    CTRPluginFramework::MenuEntryImpl::IsActivated((CTRPluginFramework::MenuEntryImpl *)v11);
    v18 = *v1;
LABEL_24:
    CTRPluginFramework::Renderer::DrawSysCheckBox(v14, 40, &v20, 360);
    goto LABEL_31;
  }
  while ( v6 < v19 )
  {
    v8 = *((_DWORD *)v2 + 41);
    if ( v8 == v6 )
      v1 = &CTRPluginFramework::Preferences::Settings[6];
    if ( v8 != v6 )
      v1 = &CTRPluginFramework::Preferences::Settings[7];
    v9 = *(_DWORD *)(*(_DWORD *)(*((_DWORD *)v2 + 2) + 80) + 4 * v6);
    if ( v8 == v6 )
      CTRPluginFramework::Renderer::MenuSelector(
        (CTRPluginFramework::Renderer *)((char *)&loc_20 + 3),
        v20 - 3,
        330,
        20,
        v18);
    if ( *(_BYTE *)(v9 + 57) )
    {
      (*((void (__fastcall **)(signed int, int))v2 + 40))(40, v20);
      CTRPluginFramework::Renderer::DrawSysString(*(_DWORD *)(v9 + 4), 60, &v20, 360, *v1, 0);
    }
    else
    {
      v18 = *v1;
      CTRPluginFramework::Renderer::DrawSysFolder(*(_DWORD *)(v9 + 4), 40, &v20, 360);
    }
    ++v6;
    v20 += 4;
  }
LABEL_35:
  result = CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::Menu *)((char *)v2 + 40));
  if ( result )
    result = CTRPluginFramework::TextBox::DrawConst((CTRPluginFramework::Menu *)((char *)v2 + 40));
  if ( *(_BYTE *)v2 )
  {
    CTRPluginFramework::Renderer::SetTarget(0);
    CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
    result = (*(int (**)(void))(**((_DWORD **)v2 + 2) + 8))();
    if ( *(_DWORD *)(result + 4) )
    {
      v16 = *((_DWORD *)v2 + 2);
      v21 = 40;
      v17 = (_DWORD *)(*(int (**)(void))(*(_DWORD *)v16 + 8))();
      result = CTRPluginFramework::Renderer::DrawSysStringReturn(
                 *v17,
                 35,
                 &v21,
                 295,
                 CTRPluginFramework::Preferences::Settings[4],
                 190);
    }
  }
  return result;
}
// F30: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// F38: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// F3C: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawLine(_DWORD, _DWORD, _DWORD, _DWORD);
// F48: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysCheckBox(_DWORD, _DWORD, _DWORD, _DWORD);
// F4C: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysFolder(_DWORD, _DWORD, _DWORD, _DWORD);
// F58: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000760) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::_ScrollUp(__int64 this)
{
  CTRPluginFramework::Clock *v1; // r6
  __int64 v2; // r4
  Time v3; // r1
  int result; // r0
  int v5; // r3
  int v6; // r0
  __int64 v7; // [sp+0h] [bp-18h]

  v7 = this;
  v1 = (CTRPluginFramework::Clock *)(this + 24);
  v2 = this;
  CTRPluginFramework::Milliseconds((CTRPluginFramework *)&v7, 200);
  result = CTRPluginFramework::Clock::HasTimePassed(v1, v3);
  if ( result )
  {
    while ( 1 )
    {
      v5 = *(_DWORD *)(v2 + 164);
      if ( v5 <= 0 )
        break;
      if ( v2 <= 0 )
      {
        --HIDWORD(v2);
        break;
      }
      *(_DWORD *)(v2 + 164) = v5 - 1;
      --HIDWORD(v2);
    }
    if ( v2 > 0 )
    {
      v6 = CTRPluginFramework::MenuFolderImpl::ItemsCount(*(CTRPluginFramework::MenuFolderImpl **)(v2 + 8));
      *(_DWORD *)(v2 + 164) = (v6 - 1) & ~((v6 - 1) >> 31);
    }
    result = CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v7);
  }
  return result;
}

//----- (000007EC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::_ScrollDown(__int64 this, int a2)
{
  CTRPluginFramework::Clock *v2; // r6
  __int64 v3; // r4
  Time v4; // r1
  int result; // r0
  int v6; // r7
  int v7; // r3
  __int64 v8; // [sp+0h] [bp-20h]
  int v9; // [sp+8h] [bp-18h]

  v8 = this;
  v9 = a2;
  v2 = (CTRPluginFramework::Clock *)(this + 24);
  v3 = this;
  CTRPluginFramework::Milliseconds((CTRPluginFramework *)&v8, 200);
  result = CTRPluginFramework::Clock::HasTimePassed(v2, v4);
  if ( result )
  {
    while ( 1 )
    {
      v6 = *(_DWORD *)(v3 + 164);
      if ( v6 >= CTRPluginFramework::MenuFolderImpl::ItemsCount(*(CTRPluginFramework::MenuFolderImpl **)(v3 + 8)) - 1 )
        break;
      if ( v3 <= 0 )
      {
        --HIDWORD(v3);
        break;
      }
      --HIDWORD(v3);
      ++*(_DWORD *)(v3 + 164);
    }
    if ( SHIDWORD(v3) > 0 )
      v7 = 0;
    if ( SHIDWORD(v3) > 0 )
      *(_DWORD *)(v3 + 164) = v7;
    result = CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v8);
  }
  return result;
}

//----- (00000878) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Menu::ProcessEvent(int a1, Event *a2, CTRPluginFramework::MenuEntryImpl **a3)
{
  CTRPluginFramework::TextBox *v3; // r5
  int v4; // r4
  Event *v5; // r7
  CTRPluginFramework::MenuEntryImpl **v6; // r6
  int v8; // r0
  int v9; // r2
  CTRPluginFramework::MenuEntryImpl *v10; // r0
  signed int v11; // r3
  bool v12; // zf
  __int64 v13; // r0
  __int64 v14; // r0
  CTRPluginFramework::MenuEntryImpl *v15; // r5
  TMLongCard v16; // r3
  int v17; // r3
  int v18; // r0
  int v19; // r3
  void (__fastcall *v20)(CTRPluginFramework::MenuEntryImpl *); // r3
  int v21; // r0
  void (__fastcall *v22)(int); // r3
  void (*v23)(void); // r3

  v3 = (CTRPluginFramework::TextBox *)(a1 + 40);
  v4 = a1;
  v5 = a2;
  v6 = a3;
  if ( CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::TextBox *)(a1 + 40)) )
  {
    CTRPluginFramework::TextBox::ProcessEvent(v3, v5);
    return -6;
  }
  v8 = CTRPluginFramework::MenuFolderImpl::ItemsCount(*(CTRPluginFramework::MenuFolderImpl **)(v4 + 8));
  v9 = LOBYTE(v5->modifiers);
  if ( !v8 )
  {
    if ( LOBYTE(v5->modifiers) || v5->modifierMask != 2 )
      return -6;
LABEL_7:
    v10 = (CTRPluginFramework::MenuEntryImpl *)CTRPluginFramework::MenuFolderImpl::_Close(
                                                 *(CTRPluginFramework::MenuFolderImpl **)(v4 + 8),
                                                 (int *)(v4 + 164),
                                                 v9);
    if ( !v10 )
      return -4;
    *(_DWORD *)(v4 + 8) = v10;
    if ( v6 )
      *v6 = v10;
    return -3;
  }
  if ( v9 == 1 )
  {
    v11 = v5->modifierMask;
    if ( v11 != 64 )
    {
      if ( v11 <= 64 )
      {
        if ( v11 != 16 )
        {
          if ( v11 != 32 )
          {
            v12 = v11 == 2147483648;
LABEL_15:
            if ( !v12 )
              return -6;
            HIDWORD(v13) = 1;
            goto LABEL_18;
          }
LABEL_27:
          HIDWORD(v14) = 4;
          goto LABEL_25;
        }
LABEL_28:
        HIDWORD(v13) = 4;
LABEL_18:
        LODWORD(v13) = v4;
        CTRPluginFramework::Menu::_ScrollDown(v13, 1);
        return -5;
      }
      if ( v11 == 0x10000000 )
        goto LABEL_28;
      if ( v11 <= 0x10000000 )
      {
        v12 = v11 == 128;
        goto LABEL_15;
      }
      if ( v11 == 0x20000000 )
        goto LABEL_27;
      if ( v11 != 0x40000000 )
        return -6;
    }
    HIDWORD(v14) = 1;
LABEL_25:
    LODWORD(v14) = v4;
    CTRPluginFramework::Menu::_ScrollUp(v14);
    return -5;
  }
  if ( LOBYTE(v5->modifiers) )
    return -6;
  v15 = *(CTRPluginFramework::MenuEntryImpl **)(*(_DWORD *)(*(_DWORD *)(v4 + 8) + 80) + 4 * *(_DWORD *)(v4 + 164));
  if ( v6 )
    *v6 = v15;
  v16 = v5->modifierMask;
  if ( v16 != 1 )
  {
    if ( v16 != 2 )
      return -6;
    LOBYTE(v9) = 0;
    goto LABEL_7;
  }
  v17 = *((unsigned __int8 *)v15 + 57);
  switch ( v17 )
  {
    case 1:
      v18 = CTRPluginFramework::MenuEntryImpl::IsActivated(v15);
      v19 = *(_DWORD *)v15;
      if ( v18 )
        v20 = *(void (__fastcall **)(CTRPluginFramework::MenuEntryImpl *))(v19 + 16);
      else
        v20 = *(void (__fastcall **)(CTRPluginFramework::MenuEntryImpl *))(v19 + 12);
      goto LABEL_39;
    case 2:
      if ( !*((_BYTE *)v15 + 132) )
      {
        v23 = (void (*)(void))*((_DWORD *)v15 + 31);
        if ( v23 )
          v23();
        return -2;
      }
      v21 = CTRPluginFramework::MenuEntryTools::TriggerState(v15);
      v22 = (void (__fastcall *)(int))*((_DWORD *)v15 + 31);
      if ( v22 )
        v22(v21);
      v20 = (void (__fastcall *)(CTRPluginFramework::MenuEntryImpl *))*((_DWORD *)v15 + 32);
      if ( !v20 )
        return -2;
LABEL_39:
      v20(v15);
      return -2;
    case 3:
      if ( CTRPluginFramework::MenuEntryImpl::_TriggerState(v15) )
        CTRPluginFramework::PluginMenuExecuteLoop::AddAR(v15);
      else
        CTRPluginFramework::PluginMenuExecuteLoop::RemoveAR(v15);
      return -2;
  }
  CTRPluginFramework::MenuFolderImpl::_Open(
    v15,
    *(CTRPluginFramework::MenuFolderImpl **)(v4 + 8),
    *(_DWORD *)(v4 + 164),
    0);
  *(_DWORD *)(v4 + 8) = v15;
  *(_DWORD *)(v4 + 164) = 0;
  return -3;
}
// F80: using guessed type int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::AddAR(_DWORD);
// F84: using guessed type int __fastcall CTRPluginFramework::PluginMenuExecuteLoop::RemoveAR(_DWORD);

//----- (00000AA0) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::Menu::Update(__int64 this)
{
  float v1; // s0
  __int64 v2; // kr00_8
  unsigned int result; // r0
  const char *v4; // r1
  float v5; // s0
  Time v6; // r1
  Time v7; // r1
  float v8; // s15
  float v9; // s15
  __int64 v10; // [sp+0h] [bp-18h]

  v10 = this;
  v2 = this;
  result = CTRPluginFramework::Menu::GetSelectedItem((CTRPluginFramework::Menu *)this);
  if ( *(_DWORD *)(v2 + 12) != result )
  {
    *(_DWORD *)(v2 + 176) = 0;
    *(_DWORD *)(v2 + 12) = result;
    *(_DWORD *)(v2 + 172) = 0;
    if ( !result )
    {
      *(_DWORD *)(v2 + 168) = 0;
      return result;
    }
    CTRPluginFramework::Renderer::GetTextSize(*(CTRPluginFramework::Renderer **)(result + 4), v4);
    *(_DWORD *)(v2 + 168) = (unsigned int)v1;
    *(float *)(v2 + 180) = v1 - 280.0;
    return CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v10);
  }
  if ( *(_DWORD *)(v2 + 168) )
  {
    if ( *(_DWORD *)(v2 + 172) )
      goto LABEL_22;
    v5 = 2.0;
    CTRPluginFramework::Seconds((CTRPluginFramework *)&v10, *(float *)&v4);
    result = CTRPluginFramework::Clock::HasTimePassed((CTRPluginFramework::Clock *)(v2 + 32), v7);
    if ( !result )
      return result;
    if ( *(_DWORD *)(v2 + 172) )
    {
LABEL_22:
      v5 = 1.0;
      CTRPluginFramework::Seconds((CTRPluginFramework *)&v10, *(float *)&v4);
      result = CTRPluginFramework::Clock::HasTimePassed((CTRPluginFramework::Clock *)(v2 + 32), v6);
      if ( !result )
        return result;
    }
    result = CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)HIDWORD(v2));
    if ( v5 <= 0.5 )
    {
      v8 = *(float *)(v2 + 176);
      if ( !*(_DWORD *)(v2 + 172) )
      {
        if ( *(float *)(v2 + 180) > v8 )
        {
          *(float *)(v2 + 176) = v8 + (float)(v5 * 29.0);
          return result;
        }
        *(_DWORD *)(v2 + 172) = 1;
        return CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v10);
      }
      v9 = (float)-(float)(v5 * 55.0) - v8;
      *(float *)(v2 + 176) = v9;
      if ( v9 <= 0.0 )
      {
        *(_DWORD *)(v2 + 172) = 0;
        *(_DWORD *)(v2 + 176) = 0;
        return CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v10);
      }
    }
  }
  return result;
}

//----- (00000C14) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Menu::ShowNote(CTRPluginFramework::Menu *this)
{
  CTRPluginFramework::Menu *v1; // r4
  unsigned int v2; // r0
  int v3; // r3

  v1 = this;
  v2 = CTRPluginFramework::Menu::GetSelectedItem(this);
  v3 = *((_DWORD *)v1 + 4);
  if ( v3 == v2 )
  {
    if ( !v3 )
      return 0;
  }
  else
  {
    *((_DWORD *)v1 + 4) = v2;
    if ( !v2 )
      return 0;
    if ( !*(_DWORD *)(v2 + 32) )
    {
      *((_DWORD *)v1 + 4) = 0;
      return 0;
    }
    CTRPluginFramework::TextBox::Update((char *)v1 + 40, v2 + 4, v2 + 28);
  }
  CTRPluginFramework::TextBox::Open((CTRPluginFramework::Menu *)((char *)v1 + 40));
  return 1;
}
// F98: using guessed type int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD);

//----- (00000C7C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::CloseNote(CTRPluginFramework::Menu *this)
{
  return CTRPluginFramework::TextBox::Close((char *)this + 40);
}
// FA0: using guessed type int __fastcall CTRPluginFramework::TextBox::Close(_DWORD);

//----- (00000C84) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::IsNoteOpen(CTRPluginFramework::Menu *this)
{
  return CTRPluginFramework::TextBox::IsOpen((CTRPluginFramework::Menu *)((char *)this + 40));
}

//----- (00000C8C) --------------------------------------------------------
void *__fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(int a1, _BYTE *a2)
{
  _BYTE *v2; // r2
  void *v3; // r3
  _BYTE *v4; // r1
  int v5; // r4
  void *result; // r0

  v2 = *(_BYTE **)(a1 + 4);
  v3 = a2;
  v4 = a2 + 4;
  v5 = a1;
  if ( v2 != v4 )
    v3 = memmove(v3, v4, v2 - v4);
  result = v3;
  *(_DWORD *)(v5 + 4) -= 4;
  return result;
}

//----- (00000CCC) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::Menu::Remove(int a1, int a2)
{
  int v2; // r4
  int v3; // r0
  _BYTE *v4; // r3
  _BYTE *v5; // r2
  unsigned int v6; // r5
  unsigned int result; // r0
  int v8; // r0

  v2 = a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_BYTE **)(v3 + 80);
  while ( 1 )
  {
    v5 = v4;
    if ( (unsigned int)v4 >= *(_DWORD *)(v3 + 84) )
      break;
    v4 += 4;
    if ( *(_DWORD *)v5 == a2 )
    {
      std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(v3 + 80, v5);
      break;
    }
  }
  v6 = *(_DWORD *)(v2 + 164);
  result = CTRPluginFramework::MenuFolderImpl::ItemsCount(*(CTRPluginFramework::MenuFolderImpl **)(v2 + 8));
  if ( v6 >= result )
  {
    v8 = CTRPluginFramework::MenuFolderImpl::ItemsCount(*(CTRPluginFramework::MenuFolderImpl **)(v2 + 8));
    result = (v8 - 1) & ~((v8 - 1) >> 31);
    *(_DWORD *)(v2 + 164) = result;
  }
  return result;
}

//----- (00000D34) --------------------------------------------------------
int __fastcall CTRPluginFramework::Menu::Pop(CTRPluginFramework::Menu *this)
{
  CTRPluginFramework::Menu *v1; // r5
  int v2; // r4
  int v3; // r0
  int v4; // r1
  int v5; // t1

  v1 = this;
  v2 = CTRPluginFramework::MenuFolderImpl::ItemsCount(*((CTRPluginFramework::MenuFolderImpl **)this + 2));
  if ( v2 )
  {
    v3 = *((_DWORD *)v1 + 2);
    v4 = *((_DWORD *)v1 + 41);
    v5 = *(_DWORD *)(v3 + 80);
    v2 = *(_DWORD *)(v5 + 4 * v4);
    std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_erase(
      v3 + 80,
      (_BYTE *)(v5 + 4 * v4));
    CTRPluginFramework::Menu::_ScrollUp(__PAIR__(1, (unsigned int)v1));
  }
  return v2;
}

//----- (00000D78) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_realloc_insert<CTRPluginFramework::MenuItem * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00000E3C) --------------------------------------------------------
void __fastcall CTRPluginFramework::Menu::Insert(int a1, int a2)
{
  int v2; // r4
  _DWORD *v3; // r3
  int *v4; // r2
  int v5; // r5
  unsigned int v6; // r6
  int *v7; // r1
  int v8; // r0
  int v9; // [sp+4h] [bp-14h]

  v2 = a2;
  v9 = a2;
  if ( a2 )
  {
    v3 = *(_DWORD **)(a1 + 8);
    if ( v3 )
    {
      v4 = (int *)v3[21];
      v5 = v3[20];
      v6 = *(_DWORD *)(a1 + 164);
      if ( v6 < ((signed int)v4 - v5) >> 2 )
      {
        v7 = (int *)(v5 + 4 * v6);
        if ( v4 == (int *)v3[22] )
        {
          std::vector<CTRPluginFramework::MenuItem *,std::allocator<CTRPluginFramework::MenuItem *>>::_M_realloc_insert<CTRPluginFramework::MenuItem * const&>(
            v3 + 20,
            v7,
            &v9);
        }
        else if ( v4 == v7 )
        {
          *v4 = v2;
          v3[21] += 4;
        }
        else
        {
          *v4 = *(v4 - 1);
          v8 = v3[21];
          v3[21] = v8 + 4;
          if ( v7 != (int *)(v8 - 4) )
            memmove(v7 + 1, v7, v8 - 4 - (_DWORD)v7);
          *(_DWORD *)(v5 + 4 * v6) = v2;
        }
      }
      else
      {
        CTRPluginFramework::MenuFolderImpl::Append(v3, a2, 0);
      }
    }
  }
}
// F2C: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD);

// ALL OK, 25 function(s) have been successfully decompiled
