/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>
#include <stdarg.h>


//-------------------------------------------------------------------------
// Data declarations

char _WriteLoadedFiles(MenuEntryTools *)::firstActivation = '\x01'; // weak
int PluginMenuTools::_ProcessEvent(Event &)::selector = 4294967295; // weak
int g_mode; // weak
_UNKNOWN g_OpenFileLock; // weak
int g_HookMode; // weak
_UNKNOWN g_hookExportFile; // weak
_UNKNOWN g_returncode; // weak
int dword_68; // weak
int dword_6C; // weak
char g_FsTryOpenFileHook; // weak
int g_FsTryOpenFileAddress; // weak
char InitFsTryOpenFileHook(void)::isInitialized; // weak
int g_screenshotEntry; // weak
char PluginMenuTools::_RenderBottom(void)::xpos; // weak
int PluginMenuTools::_RenderBottom(void)::xpos; // weak
char PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task; // weak
_UNKNOWN PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task; // weak
int dword_2384 = 3785363469; // weak
int dword_2394 = 3800895504; // weak
char *Screenshots_items[3] = { "Top screen", "Bottom screen", "Both screens" }; // weak
_UNKNOWN unk_23B0; // weak
_UNKNOWN unk_2520; // weak
_UNKNOWN unk_2531; // weak
_UNKNOWN unk_26A7; // weak
_UNKNOWN unk_26FF; // weak
_UNKNOWN unk_279A; // weak
_UNKNOWN unk_2857; // weak
_UNKNOWN unk_2894; // weak
// extern _UNKNOWN Screenshot::IsEnabled; weak
// extern _UNKNOWN Color::Black; weak
// extern _UNKNOWN Color::White; weak
// extern _UNKNOWN Preferences::DrawTouchCursor; weak
// extern _UNKNOWN Preferences::DrawTouchCoord; weak
// extern _UNKNOWN Preferences::ShowTopFps; weak
// extern _UNKNOWN Preferences::ShowBottomFps; weak
// extern _UNKNOWN Preferences::UseFloatingBtn; weak
// extern _UNKNOWN Preferences::AutoSaveCheats; weak
// extern _UNKNOWN Preferences::AutoSaveFavorites; weak
// extern _UNKNOWN Preferences::AutoLoadCheats; weak
// extern _UNKNOWN Preferences::AutoLoadFavorites; weak
// extern _UNKNOWN Preferences::MenuHotkeys; weak
// extern _UNKNOWN Preferences::DisplayFilesLoading; weak
// extern _UNKNOWN Color::Red; weak
// extern _UNKNOWN Color::Yellow; weak
// extern _UNKNOWN Color::LimeGreen; weak
// extern _UNKNOWN Screenshot::Hotkeys; weak
// extern _UNKNOWN Color::Orange; weak
// extern _UNKNOWN Window::BottomWindow; weak
// extern _UNKNOWN _dso_handle; weak
// extern _DWORD ZN18CTRPluginFramework10Screenshot4PathB5cxx11E[2]; idb
// extern _UNKNOWN Screenshot::Screens; weak
// extern _UNKNOWN Screenshot::Timer; weak
// extern _UNKNOWN ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E; weak
// extern _UNKNOWN Color::DeepSkyBlue; weak


void Screenshot_Enabler()
{
  Screenshot::IsEnabled ^= 1u;
}

int FsTryOpenFileCallback(u32 a1, u16 *a2, u16 *a3)
{
  u16 *in = a2;
  u8 *out = new u8[255];
  char *message = new char[255];
  LightLock_Lock(&g_OpenFileLock);
  if (g_HookMode & 1 && utf16_to_utf8(out, in, 255) > 0)
  {
  	message = *(char*)out;
    OSD::Notify(message, Color::White, Color::Black);
  }
  if (g_HookMode & 2)
    g_hookExportFile.WriteLine(message);
  LightLock_Unlock(&g_OpenFileLock);
  return g_returncode(a1, a2, a3);
}

File::~File(void)
{
  File::Close();
  _mutex.~Mutex(void);
}

void PluginMenuTools::InitMenu(u32 preferences)
{
	switch(preferences)
	{
		case 1:
			g_mode = 1;
			break;
		case 2:
			g_mode = 2;
			break;
		case 3:
			g_mode = 3;
			break;
		case 4:
			Preferences::DrawTouchCursor ^= 1u;
			break;
		case 5:
			Preferences::DrawTouchCoord ^= 1u;
			break;
		case 6:
			Preferences::ShowTopFps ^= 1u;
			break;
		case 7:
			Preferences::ShowBottomFps ^= 1u;
			break;
		case 8:
			Preferences::UseFloatingBtn ^= 1u;
			break;
		case 9:
			Preferences::AutoSaveCheats ^= 1u;
			break;
		case 10:
			Preferences::AutoSaveFavorites ^= 1u;
			break;
		case 11:
			Preferences::AutoLoadCheats ^= 1u;
			break;
		case 12:
			Preferences::AutoLoadFavorites ^= 1u;
			break;
	} 
}

//----- (00000338) --------------------------------------------------------
int ScreenshotMenuCallback(void)::{lambda(Keyboard &,InputChangeEvent &)#1}::_FUN(int result, _BYTE *a2)
{
  int v2; // r4
  unsigned int v3; // [sp+4h] [bp-Ch]

  if ( !*a2 )
  {
    v3 = (unsigned int)a2;
    v2 = ZNK18CTRPluginFramework8Keyboard8GetInputB5cxx11Ev(result);
    result = stou32();
    if ( v3 > 0x78 )
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v2, &unk_23B0);
  }
  return result;
}
// 28A8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 28FC: using guessed type int __cdecl ZNK18CTRPluginFramework8Keyboard8GetInputB5cxx11Ev(_DWORD);
// 2900: using guessed type int stou32(void);

//----- (0000037C) --------------------------------------------------------
int *std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 2908: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 290C: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000003F4) --------------------------------------------------------
int MenuHotkeyModifier(CTRPluginFramework *this)
{
  int result; // r0
  int v2; // [sp+4h] [bp-4Ch]
  char v3; // [sp+8h] [bp-48h]
  char v4; // [sp+20h] [bp-30h]

  v2 = Preferences::MenuHotkeys;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v3,
    "Select the hotkeys you'd like to use to open the menu.");
  HotkeysModifier::HotkeysModifier(&v4, &v2, &v3);
  HotkeysModifier::operator()(&v4);
  HotkeysModifier::~HotkeysModifier((HotkeysModifier *)&v4);
  result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v3);
  if ( v2 )
    Preferences::MenuHotkeys = v2;
  return result;
}
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2910: using guessed type int HotkeysModifier::HotkeysModifier(_DWORD, _DWORD, _DWORD);
// 2914: using guessed type int HotkeysModifier::operator()(_DWORD);

//----- (00000458) --------------------------------------------------------
int std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(int result, int a2, int a3)
{
  unsigned int v3; // r6
  unsigned int v4; // r4
  unsigned int *v5; // r7
  int v6; // r5
  int v7; // r8
  unsigned int v8; // r9

  v3 = a3 - a2;
  v4 = -1431655765 * ((a3 - a2) >> 3);
  v5 = (unsigned int *)result;
  v6 = a2;
  v7 = a3;
  if ( -1431655765 * ((a3 - a2) >> 3) )
  {
    if ( v4 > 0xAAAAAAA )
      std::__throw_bad_alloc();
    result = operator new(a3 - a2);
    v4 = result;
  }
  v8 = v4;
  *v5 = v4;
  v5[2] = v4 + v3;
  while ( v7 != v6 )
  {
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v8, v6);
    v6 += 24;
    v8 += 24;
  }
  v5[1] = v4 + 24 * (178956971 * (v3 >> 3) & 0x1FFFFFFF);
  return result;
}
// 28B0: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

//----- (000004F0) --------------------------------------------------------
int InitFsTryOpenFileHook()
{
  int *v0; // r2
  int *v1; // r3
  int v2; // r0
  int v3; // r1
  char *v4; // r2
  int *v5; // r3
  char *v6; // r0
  int v7; // r1
  char *v8; // r4
  unsigned int v9; // r7
  int v10; // r3
  char *v11; // r6
  unsigned int v12; // r3
  int v14; // [sp+0h] [bp-40h]
  char v15; // [sp+10h] [bp-30h]

  v0 = &v14;
  v1 = &dword_2384;
  do
  {
    v2 = *v1;
    v3 = v1[1];
    v1 += 2;
    *v0 = v2;
    v0[1] = v3;
    v0 += 2;
  }
  while ( v1 != &dword_2394 );
  v4 = &v15;
  v5 = &dword_2394;
  do
  {
    v6 = (char *)*v5;
    v7 = v5[1];
    v5 += 2;
    *(_DWORD *)v4 = v6;
    *((_DWORD *)v4 + 1) = v7;
    v4 += 8;
  }
  while ( v5 != (int *)Screenshots_items );
  v8 = (char *)0x100000;
  v9 = Process::GetTextSize((Process *)v6) + 0x100000;
  while ( 1 )
  {
    if ( v9 <= (unsigned int)v8 )
      goto LABEL_11;
    if ( !memcmp(v8, &v14, 0x10u) || !memcmp(v8, &v15, 0x10u) )
      break;
    v8 += 4;
  }
  v10 = (int)(v8 - 4096);
  while ( 1 )
  {
    v11 = v8 - 4;
    if ( *((u16 *)v8 - 1) == 59693 )
      break;
    v8 -= 4;
    if ( v11 == (char *)v10 )
      goto LABEL_11;
  }
  if ( v8 == &_WriteLoadedFiles(MenuEntryTools *)::firstActivation )
  {
LABEL_11:
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v15,
      "Error: couldn't find OpenFile function");
    OSD::Notify(&v15, &Color::White, &Color::Black);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v15);
    Preferences::DisplayFilesLoading = 0;
    return (unsigned __int8)InitFsTryOpenFileHook(void)::isInitialized;
  }
  LightLock_Init(&g_OpenFileLock, 59693, 59693, v10);
  Process::CopyMemory(
    (Process *)&g_returncode,
    v11,
    &PluginMenuTools::_ProcessEvent(Event &)::selector,
    v12);
  dword_6C = (int)(v8 + 4);
  dword_68 = -450891772;
  g_FsTryOpenFileHook &= 0xF9u;
  Hook::Initialize(
    (Hook *)&g_FsTryOpenFileHook,
    (unsigned int)v11,
    (unsigned int)FsTryOpenFileCallback,
    0);
  g_FsTryOpenFileAddress = (int)(v8 - 4);
  InitFsTryOpenFileHook(void)::isInitialized = 1;
  return (unsigned __int8)InitFsTryOpenFileHook(void)::isInitialized;
}
// 4: using guessed type char _WriteLoadedFiles(MenuEntryTools *)::firstActivation;
// 8: using guessed type int PluginMenuTools::_ProcessEvent(Event &)::selector;
// 68: using guessed type int dword_68;
// 6C: using guessed type int dword_6C;
// 70: using guessed type char g_FsTryOpenFileHook;
// 88: using guessed type int g_FsTryOpenFileAddress;
// 8C: using guessed type char InitFsTryOpenFileHook(void)::isInitialized;
// 2384: using guessed type int dword_2384;
// 2394: using guessed type int dword_2394;
// 23A4: using guessed type char *Screenshots_items[3];
// 28AC: using guessed type int OSD::Notify(_DWORD, _DWORD, _DWORD);
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2930: using guessed type int LightLock_Init(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000694) --------------------------------------------------------
int _WriteLoadedFiles(MenuEntryImpl *a1)
{
  MenuEntryImpl *v1; // r4
  Process *v2; // r0
  int v3; // r0
  int v4; // r1
  int v5; // r0
  char v6; // r6
  int v7; // r0
  int v8; // r0
  int result; // r0
  int v10; // [sp+0h] [bp-40h]
  char v11; // [sp+18h] [bp-28h]

  v1 = a1;
  v2 = (Process *)MenuEntryImpl::WasJustActivated(a1);
  if ( v2 )
  {
    if ( !InitFsTryOpenFileHook(void)::isInitialized )
    {
      v2 = (Process *)InitFsTryOpenFileHook();
      if ( !v2 )
        v2 = (Process *)(*(int (**)(MenuEntryImpl *))(*(_DWORD *)v1 + 16))(v1);
    }
    v3 = Process::GetTitleID(v2);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v10, "[%016llX] - LoadedFiles.txt", v3, v4);
    v5 = File::Open(&g_hookExportFile, &v10, 15);
    v6 = v5;
    if ( v5 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v11,
        "Error: couldn't open \"");
      v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v11, &v10);
      v8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v7, "\"");
      OSD::Notify(v8, &Color::Red, &Color::White);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
      (*(void (**)(MenuEntryImpl *))(*(_DWORD *)v1 + 16))(v1);
    }
    else
    {
      if ( _WriteLoadedFiles(MenuEntryTools *)::firstActivation )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v11,
          "\r\n\r\n### New log ###\r\n");
        File::WriteLine(&g_hookExportFile, &v11);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
        _WriteLoadedFiles(MenuEntryTools *)::firstActivation = v6;
      }
      g_HookMode |= 2u;
      Hook::Enable((Hook *)&g_FsTryOpenFileHook);
    }
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  }
  else
  {
    result = MenuEntryImpl::IsActivated(v1);
    if ( !result )
    {
      g_HookMode &= 0xFFFFFFFD;
      File::Flush((File *)&g_hookExportFile);
      result = File::Close((File *)&g_hookExportFile);
      if ( !g_HookMode )
        result = Hook::Disable((Hook *)&g_FsTryOpenFileHook);
    }
  }
  return result;
}
// 4: using guessed type char _WriteLoadedFiles(MenuEntryTools *)::firstActivation;
// 18: using guessed type int g_HookMode;
// 70: using guessed type char g_FsTryOpenFileHook;
// 8C: using guessed type char InitFsTryOpenFileHook(void)::isInitialized;
// 28AC: using guessed type int OSD::Notify(_DWORD, _DWORD, _DWORD);
// 28B4: using guessed type int File::WriteLine(_DWORD, _DWORD);
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2948: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 294C: using guessed type int File::Open(_DWORD, _DWORD, _DWORD);
// 2950: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 2954: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);

//----- (00000818) --------------------------------------------------------
int *_DisplayLoadedFiles(MenuEntryImpl *a1)
{
  MenuEntryImpl *v1; // r5
  int *result; // r0

  v1 = a1;
  if ( MenuEntryImpl::WasJustActivated(a1) )
  {
    if ( !InitFsTryOpenFileHook(void)::isInitialized && !InitFsTryOpenFileHook() )
      (*(void (**)(MenuEntryImpl *))(*(_DWORD *)v1 + 16))(v1);
    Preferences::DisplayFilesLoading = 1;
    g_HookMode |= 1u;
    result = (int *)Hook::Enable((Hook *)&g_FsTryOpenFileHook);
  }
  else
  {
    result = (int *)MenuEntryImpl::IsActivated(v1);
    if ( !result )
    {
      Preferences::DisplayFilesLoading = 0;
      result = &g_mode;
      g_HookMode &= 0xFFFFFFFE;
      if ( !g_HookMode )
        result = (int *)Hook::Disable((Hook *)&g_FsTryOpenFileHook);
    }
  }
  return result;
}
// 10: using guessed type int g_mode;
// 18: using guessed type int g_HookMode;
// 70: using guessed type char g_FsTryOpenFileHook;
// 8C: using guessed type char InitFsTryOpenFileHook(void)::isInitialized;

//----- (000008C4) --------------------------------------------------------
int *Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2)
{
  unsigned int v2; // r3
  int *v3; // r4
  unsigned int v4; // r3
  unsigned int v5; // r3
  int *v7; // [sp+0h] [bp-10h]
  unsigned __int8 *v8; // [sp+4h] [bp-Ch]

  v7 = a1;
  v8 = a2;
  LOBYTE(v8) = 0;
  LOBYTE(v7) = 27;
  v2 = *a2;
  v3 = a1;
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  BYTE1(v7) = v2;
  v4 = a2[1];
  if ( v4 < 1 )
    LOBYTE(v4) = 1;
  BYTE2(v7) = v4;
  v5 = a2[2];
  if ( v5 < 1 )
    LOBYTE(v5) = 1;
  HIBYTE(v7) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, (const char *)&v7);
  return v3;
}

//----- (00000920) --------------------------------------------------------
int ConfirmBeforeProceed(int a1)
{
  int v1; // r5
  int v2; // r1
  int v3; // r0
  int v4; // r4
  int v6; // [sp+0h] [bp-B8h]
  char v7; // [sp+18h] [bp-A0h]
  char v8; // [sp+30h] [bp-88h]
  char v9; // [sp+48h] [bp-70h]
  char v10; // [sp+60h] [bp-58h]
  char *v11; // [sp+78h] [bp-40h]
  int v12; // [sp+7Ch] [bp-3Ch]
  char v13; // [sp+80h] [bp-38h]
  char v14; // [sp+90h] [bp-28h]

  v1 = a1;
  Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
    (int *)&v7,
    (unsigned __int8 *)&Color::Yellow);
  operator<<(&v8, &v7, "Warning\n\n");
  ZN18CTRPluginFramework10ResetColorB5cxx11Ev(&v9);
  operator<<(&v10, &v8, &v9);
  v2 = *(_DWORD *)(v1 + 4) + 22;
  v11 = &v13;
  v12 = 0;
  v13 = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(&v11, v2);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
    &v11,
    "Do you really want to ",
    22);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v11, v1);
  v3 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v11, " ?");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v14, v3);
  operator<<(&v6, &v10, &v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v9);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v8);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  MessageBox::MessageBox(&v14, &v6, 2, 0);
  v4 = MessageBox::operator()(&v14);
  MessageBox::~MessageBox((MessageBox *)&v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  return v4;
}
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2950: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 2954: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 296C: using guessed type int operator<<(_DWORD, _DWORD, _DWORD);
// 2970: using guessed type int ZN18CTRPluginFramework10ResetColorB5cxx11Ev(_DWORD);
// 2974: using guessed type int operator<<(_DWORD, _DWORD, _DWORD);
// 2978: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// 297C: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD);
// 2980: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 2984: using guessed type int MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 2988: using guessed type int MessageBox::operator()(_DWORD);

//----- (00000A44) --------------------------------------------------------
int Reboot(CTRPluginFramework *this)
{
  int v1; // r4
  int result; // r0
  float v3; // r1
  __int64 v4; // [sp+0h] [bp-28h]
  char v5; // [sp+8h] [bp-20h]

  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v5, "reboot");
  v1 = ConfirmBeforeProceed((int)&v5);
  result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  if ( v1 )
  {
    svcKernelSetState(7);
    Seconds((CTRPluginFramework *)&v4, v3);
    result = Sleep((CTRPluginFramework *)v4, HIDWORD(v4));
  }
  return result;
}
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2994: using guessed type int svcKernelSetState(_DWORD);

//----- (00000AA0) --------------------------------------------------------
int Shutdown(CTRPluginFramework *this)
{
  int v1; // r4
  int result; // r0
  float v3; // r1
  __int64 v4; // [sp+0h] [bp-28h]
  char v5; // [sp+8h] [bp-20h]

  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v5, "shutdown");
  v1 = ConfirmBeforeProceed((int)&v5);
  result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v5);
  if ( v1 )
  {
    srvPublishToSubscriber(515, 0);
    Seconds((CTRPluginFramework *)&v4, v3);
    result = Sleep((CTRPluginFramework *)v4, HIDWORD(v4));
  }
  return result;
}
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 29A0: using guessed type int srvPublishToSubscriber(_DWORD, _DWORD);

//----- (00000B04) --------------------------------------------------------
int PluginMenuTools::UpdateSettings(PluginMenuTools *this)
{
  char *v1; // r4
  PluginMenuTools *v2; // r5
  char *v3; // r0
  void (*v4)(void); // r3
  void (*v5)(void); // r3
  void (*v6)(void); // r3
  void (*v7)(void); // r3
  void (*v8)(void); // r3
  int v9; // r5
  void (*v10)(void); // r3
  void (*v11)(void); // r3
  int (*v12)(void); // r3

  v1 = (char *)this + 324;
  v2 = this;
  v3 = (char *)this + 324;
  if ( Preferences::UseFloatingBtn )
    v4 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v3, 1) + 12);
  else
    v4 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v3, 1) + 16);
  v4();
  if ( Preferences::AutoSaveCheats )
    v5 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 2) + 12);
  else
    v5 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 2) + 16);
  v5();
  if ( Preferences::AutoSaveFavorites )
    v6 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 3) + 12);
  else
    v6 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 3) + 16);
  v6();
  if ( Preferences::AutoLoadCheats )
    v7 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 4) + 12);
  else
    v7 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 4) + 16);
  v7();
  if ( Preferences::AutoLoadFavorites )
    v8 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 5) + 12);
  else
    v8 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v1, 5) + 16);
  v8();
  v9 = (int)v2 + 124;
  if ( Preferences::DrawTouchCursor )
    v10 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v9, 2) + 12);
  else
    v10 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v9, 2) + 16);
  v10();
  if ( Preferences::ShowTopFps )
    v11 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v9, 3) + 12);
  else
    v11 = *(void (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v9, 3) + 16);
  v11();
  if ( Preferences::ShowBottomFps )
    v12 = *(int (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v9, 4) + 12);
  else
    v12 = *(int (**)(void))(*(_DWORD *)MenuFolderImpl::operator[](v9, 4) + 16);
  return v12();
}
// 29A4: using guessed type int MenuFolderImpl::operator[](_DWORD, _DWORD);

//----- (00000CF8) --------------------------------------------------------
int PluginMenuTools::InitMenu(PluginMenuTools *this)
{
  MenuFolderImpl *v1; // r7
  MenuItem **v2; // r6
  MenuItem *v3; // r8
  MenuItem *v4; // r8
  MenuItem *v5; // r8
  MenuItem *v6; // r10
  MenuItem *v7; // r9
  MenuItem *v8; // r8
  MenuItem *v9; // r8
  MenuItem *v10; // r8
  MenuItem *v11; // r7
  MenuItem *v12; // r9
  MenuItem *v13; // r9
  MenuItem *v14; // r9
  MenuItem *v15; // r9
  MenuItem *v16; // r9
  MenuItem *v17; // r9
  MenuItem *v18; // r9
  MenuItem *v19; // r8
  MenuItem *v20; // r8
  MenuItem *v21; // r8
  MenuItem *v22; // r9
  MenuItem *v23; // r9
  MenuItem *v24; // r7
  MenuItem *v25; // r7
  MenuItem *v26; // r7
  char v28; // [sp+8h] [bp-110h]
  char v29; // [sp+20h] [bp-F8h]
  char v30; // [sp+38h] [bp-E0h]
  char v31; // [sp+50h] [bp-C8h]
  char v32; // [sp+68h] [bp-B0h]
  char v33; // [sp+80h] [bp-98h]
  char v34; // [sp+98h] [bp-80h]
  char v35; // [sp+B0h] [bp-68h]
  char v36; // [sp+C8h] [bp-50h]
  char v37; // [sp+E0h] [bp-38h]

  v1 = (PluginMenuTools *)((char *)this + 24);
  v2 = (MenuItem **)this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v37, "About");
  v3 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v3);
  MenuFolderImpl::Append(v1, v3, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v37, "Hex Editor");
  v4 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v4);
  v2[106] = v4;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  MenuFolderImpl::Append(v1, v2[106], 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Gateway RAM Dumper");
  v5 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v5);
  MenuFolderImpl::Append(v1, v5, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v37, "Screenshots");
  *(_DWORD *)operator new(4u) = 4;
  v6 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v6);
  MenuFolderImpl::Append(v1, v6, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Miscellaneous");
  *(_DWORD *)operator new(4u) = 5;
  v7 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v7);
  MenuFolderImpl::Append(v1, v7, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v37, "Settings");
  v8 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v8);
  MenuFolderImpl::Append(v1, v8, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Shutdown the 3DS");
  v9 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v9);
  MenuFolderImpl::Append(v1, v9, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Reboot the 3DS");
  v10 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v10);
  MenuFolderImpl::Append(v1, v10, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Change screenshot settings");
  v11 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v11);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 56), v11, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v28,
    "Screenshot: ");
  Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
    (int *)&v29,
    (unsigned __int8 *)&Color::LimeGreen);
  operator<<(&v30, &v28, &v29);
  ZN18CTRPluginFramework12KeysToStringB5cxx11Em(&v31, Screenshot::Hotkeys);
  operator<<(&v32, &v30, &v31);
  operator<<(&v33, &v32, &unk_2520);
  Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
    (int *)&v34,
    (unsigned __int8 *)&Color::Orange);
  operator<<(&v35, &v33, &v34);
  operator<<(&v36, &v35, "Both screens");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v12 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v12, &v36);
  g_screenshotEntry = (int)v12;
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 56), v12, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v35);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v34);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v33);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v32);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v31);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v29);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v28);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Display loaded files");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v13 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v13, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 31), v13, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Write loaded files to file");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v14 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v14, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 31), v14, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Display touch cursor");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v15 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v15, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 31), v15, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Display touch coord");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v16 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v16, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 31), v16, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Display top screen's fps");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v17 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v17, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 31), v17, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Display bottom screen's fps");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v18 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v18, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)(v2 + 31), v18, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Change menu hotkeys");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v19 = (MenuItem *)operator new(0x88u);
  v2 += 81;
  MenuEntryTools::MenuEntryTools(v19, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v19, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Use floating button");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v20 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v20, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v20, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Auto save enabled cheats");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v21 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v21, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v21, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Auto save favorites");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v22 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v22, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v22, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Auto load enabled cheats at starts");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v23 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v23, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v23, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v36,
    "Auto load favorites at starts");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    (const char *)&unk_2531);
  v24 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v24, &v36);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v24, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Load enabled cheats now");
  v25 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v25);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v25, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v37,
    "Load favorites now");
  v26 = (MenuItem *)operator new(0x88u);
  MenuEntryTools::MenuEntryTools(v26);
  MenuFolderImpl::Append((MenuFolderImpl *)v2, v26, 0);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v37);
}
// 90: using guessed type int g_screenshotEntry;
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 296C: using guessed type int operator<<(_DWORD, _DWORD, _DWORD);
// 2974: using guessed type int operator<<(_DWORD, _DWORD, _DWORD);
// 29A8: using guessed type int __cdecl MenuEntryTools::MenuEntryTools(_DWORD);
// 29AC: using guessed type _DWORD __cdecl MenuFolderImpl::Append(MenuFolderImpl *__hidden this, MenuItem *, bool);
// 29B0: using guessed type int ZN18CTRPluginFramework12KeysToStringB5cxx11Em(_DWORD, _DWORD);
// 29B4: using guessed type int __cdecl MenuEntryTools::MenuEntryTools(_DWORD, _DWORD);
// 29B8: using guessed type int __cdecl MenuEntryTools::MenuEntryTools(_DWORD, _DWORD);

//----- (000016F8) --------------------------------------------------------
int PluginMenuTools::PluginMenuTools(int a1, int a2, int a3)
{
  int v3; // r4
  int v4; // r7
  __int64 v6; // [sp+0h] [bp-48h]
  char v7; // [sp+18h] [bp-30h]

  v3 = a1;
  v4 = a3;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, a2);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v6, "Tools");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    (const char *)&unk_2531);
  MenuFolderImpl::MenuFolderImpl(v3 + 24, &v6, &v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v6,
    "Miscellaneous");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    (const char *)&unk_2531);
  MenuFolderImpl::MenuFolderImpl(v3 + 124, &v6, &v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v6, "Screenshots");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    (const char *)&unk_2531);
  MenuFolderImpl::MenuFolderImpl(v3 + 224, &v6, &v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v6, "Settings");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    (const char *)&unk_2531);
  MenuFolderImpl::MenuFolderImpl(v3 + 324, &v6, &v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  *(_DWORD *)(v3 + 428) = v4;
  *(_DWORD *)(v3 + 424) = 0;
  GatewayRAMDumper::GatewayRAMDumper((GatewayRAMDumper *)(v3 + 432));
  Menu::Menu(
    (Menu *)(v3 + 552),
    (MenuFolderImpl *)(v3 + 24),
    0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v7, "About");
  TextBox::TextBox(v3 + 736, &v7, v3, &v6, 30, 20, 340, 200);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  *(_BYTE *)(v3 + 856) = 0;
  PluginMenuTools::InitMenu((PluginMenuTools *)v3);
  return v3;
}
// 28B0: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 29E8: using guessed type int MenuFolderImpl::MenuFolderImpl(_DWORD, _DWORD, _DWORD);
// 29F0: using guessed type _DWORD __cdecl Menu::Menu(Menu *__hidden this, MenuFolderImpl *, int (__cdecl *)(int, int));
// 29F4: using guessed type int TextBox::TextBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001888) --------------------------------------------------------
int PluginMenuTools::TriggerHexEditor(PluginMenuTools *this, int a2)
{
  MenuItem *v2; // r0
  int result; // r0

  v2 = (MenuItem *)*((_DWORD *)this + 106);
  if ( a2 )
    result = MenuItem::Show(v2);
  else
    result = MenuItem::Hide(v2);
  return result;
}
// 29F8: using guessed type _DWORD MenuItem::Hide(MenuItem *__hidden this);
// 29FC: using guessed type _DWORD MenuItem::Show(MenuItem *__hidden this);

//----- (0000189C) --------------------------------------------------------
MenuEntryImpl *PluginMenuTools::_ProcessEvent(PluginMenuTools *this, Event *a2, int a3)
{
  TextBox *v3; // r5
  PluginMenuTools *v4; // r4
  Event *v5; // r7
  MenuEntryImpl *result; // r0
  int v7; // r1
  int v8; // r2
  PluginMenuTools *v9; // r0
  int v10; // r3
  MenuEntryImpl *v11; // [sp+4h] [bp-1Ch]
  int v12; // [sp+8h] [bp-18h]

  v11 = (MenuEntryImpl *)a2;
  v12 = a3;
  v3 = (PluginMenuTools *)((char *)this + 736);
  v4 = this;
  v5 = a2;
  if ( TextBox::IsOpen((PluginMenuTools *)((char *)this + 736)) )
    return (MenuEntryImpl *)TextBox::ProcessEvent(v3, v5);
  v11 = 0;
  result = (MenuEntryImpl *)Menu::ProcessEvent(
                                                  (PluginMenuTools *)((char *)v4 + 552),
                                                  v5,
                                                  &v11);
  if ( result == (MenuEntryImpl *)-2 )
  {
    result = v11;
    if ( !v11 )
      return result;
    result = (MenuEntryImpl *)MenuEntryImpl::GetArg(v11);
    if ( v4 == result )
    {
      v7 = (int)v4 + 324;
      PluginMenuTools::_ProcessEvent(Event &)::selector = *((_DWORD *)v4 + 179);
      v8 = 0;
      return (MenuEntryImpl *)Menu::Open((char *)v4 + 552, v7, v8);
    }
    if ( result )
    {
      if ( *(_DWORD *)result == 5 )
      {
        v7 = (int)v4 + 124;
        PluginMenuTools::_ProcessEvent(Event &)::selector = *((_DWORD *)v4 + 179);
        v8 = 0;
        return (MenuEntryImpl *)Menu::Open((char *)v4 + 552, v7, v8);
      }
      if ( *(_DWORD *)result == 4 )
      {
        v7 = (int)v4 + 224;
        PluginMenuTools::_ProcessEvent(Event &)::selector = *((_DWORD *)v4 + 179);
        v8 = 0;
        return (MenuEntryImpl *)Menu::Open((char *)v4 + 552, v7, v8);
      }
    }
  }
  else if ( result == (MenuEntryImpl *)-4 )
  {
    Menu::GetFolder((PluginMenuTools *)((char *)v4 + 552));
    v9 = (PluginMenuTools *)Menu::GetFolder((PluginMenuTools *)((char *)v4 + 552));
    v10 = (int)v4 + 24;
    if ( v9 == (PluginMenuTools *)((char *)v4 + 24) )
      v10 = 1;
    v7 = (int)v9;
    if ( v9 == (PluginMenuTools *)((char *)v4 + 24) )
    {
      *((_BYTE *)v4 + 856) = v10;
      v8 = PluginMenuTools::_ProcessEvent(Event &)::selector;
    }
    else
    {
      v8 = PluginMenuTools::_ProcessEvent(Event &)::selector;
      v7 = v10;
    }
    return (MenuEntryImpl *)Menu::Open((char *)v4 + 552, v7, v8);
  }
  return result;
}
// 8: using guessed type int PluginMenuTools::_ProcessEvent(Event &)::selector;
// 2A08: using guessed type _DWORD __cdecl Menu::ProcessEvent(Menu *__hidden this, Event *, MenuItem **);
// 2A10: using guessed type int Menu::Open(_DWORD, _DWORD, _DWORD);

//----- (000019BC) --------------------------------------------------------
int PluginMenuTools::_RenderBottom(PluginMenuTools *this, int a2)
{
  const char *v2; // r1
  int v4; // [sp+4h] [bp-Ch]

  v4 = a2;
  Renderer::SetTarget(0);
  __mcr(
    15,
    0,
    Window::Draw((Window *)&Window::BottomWindow),
    7,
    10,
    5);
  if ( !(PluginMenuTools::_RenderBottom(void)::xpos & 1)
    && _cxa_guard_acquire(&PluginMenuTools::_RenderBottom(void)::xpos) )
  {
    PluginMenuTools::_RenderBottom(void)::xpos = (unsigned int)(320
                                                                                  - Renderer::LinuxFontSize(
                                                                                      (Renderer *)"CTRPluginFramework Beta V.0.5.1",
                                                                                      v2)) >> 1;
    _cxa_guard_release(&PluginMenuTools::_RenderBottom(void)::xpos);
  }
  v4 = 205;
  return Renderer::DrawString(
           "CTRPluginFramework Beta V.0.5.1",
           PluginMenuTools::_RenderBottom(void)::xpos,
           &v4,
           Color::White);
}
// 94: using guessed type char PluginMenuTools::_RenderBottom(void)::xpos;
// 98: using guessed type int PluginMenuTools::_RenderBottom(void)::xpos;
// 2A18: using guessed type int Renderer::SetTarget(_DWORD);
// 2A20: using guessed type int _cxa_guard_acquire(_DWORD);
// 2A28: using guessed type int _cxa_guard_release(_DWORD);
// 2A2C: using guessed type int Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001A48) --------------------------------------------------------
int PluginMenuTools::_Update(Touch *a1, int a2, int a3, int a4)
{
  int v4; // r4
  int v6; // [sp+0h] [bp-18h]
  int v7; // [sp+4h] [bp-14h]
  int v8; // [sp+8h] [bp-10h]
  int v9; // [sp+Ch] [bp-Ch]

  v8 = a3;
  v9 = a4;
  v4 = Touch::IsDown(a1);
  Touch::GetPosition((Touch *)&v8);
  v6 = v8;
  v7 = v9;
  return Window::Update(&Window::BottomWindow, v4, &v6);
}
// 2A3C: using guessed type int Window::Update(_DWORD, _DWORD, _DWORD);

//----- (00001A88) --------------------------------------------------------
int PluginMenuTools::operator()(int a1, int *a2, int a3)
{
  unsigned __int8 *v3; // r4
  int result; // r0
  int *v5; // r7
  _QWORD *v6; // r8
  TextBox *v7; // r6
  unsigned int i; // r6
  int v9; // r1
  int v10; // r1

  v3 = (unsigned __int8 *)a1;
  if ( g_mode == 2 )
  {
    result = HexEditor::operator()(*(_DWORD *)(a1 + 428));
    if ( result )
    {
      result = 0;
      g_mode = 0;
    }
    return result;
  }
  v5 = a2;
  v6 = (_QWORD *)a3;
  if ( g_mode != 1 )
    goto LABEL_9;
  v7 = (TextBox *)(a1 + 736);
  if ( !TextBox::IsOpen((TextBox *)(a1 + 736)) )
  {
    TextBox::Open(v7);
LABEL_9:
    if ( g_mode == 3 )
    {
      GatewayRAMDumper::operator()(v3 + 432);
      result = 0;
      g_mode = 0;
      return result;
    }
    goto LABEL_11;
  }
  g_mode = 0;
LABEL_11:
  for ( i = 0; ; ++i )
  {
    v9 = *v5;
    if ( -1431655765 * ((v5[1] - *v5) >> 2) <= i )
      break;
    PluginMenuTools::_ProcessEvent(
      (PluginMenuTools *)v3,
      (Event *)(v9 + 12 * i),
      a3);
  }
  __mcr(
    15,
    0,
    PluginMenuTools::_Update((Touch *)v3, v9, *v6, *v6 >> 32),
    7,
    10,
    5);
  if ( !(PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task & 1)
    && _cxa_guard_acquire(&PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task) )
  {
    Task::Task(
      (Task *)&PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task,
      (int (__cdecl *)(void *))PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::{lambda(void *)#1}::_FUN,
      v3,
      5);
    _cxa_guard_release(&PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task);
    _aeabi_atexit(
      &PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task,
      &Task::~Task,
      &_dso_handle);
  }
  Task::Start((Task *)&PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task);
  PluginMenuTools::_RenderBottom((PluginMenuTools *)v3, v10);
  Task::Wait((Task *)&PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task);
  result = v3[856];
  if ( !v3[856] )
    result = Window::MustClose((Window *)&Window::BottomWindow);
  v3[856] = 0;
  return result;
}
// 10: using guessed type int g_mode;
// 9C: using guessed type char PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::task;
// 2A20: using guessed type int _cxa_guard_acquire(_DWORD);
// 2A28: using guessed type int _cxa_guard_release(_DWORD);
// 2A40: using guessed type int HexEditor::operator()(_DWORD);
// 2A48: using guessed type int GatewayRAMDumper::operator()(_DWORD);
// 2A50: using guessed type int _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 2A64: using guessed type _DWORD __cdecl Task::~Task(Task *__hidden this);

//----- (00001BF8) --------------------------------------------------------
int *__gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(int *a1, int (*a2)(int ***, int, int), int a3, int a4, ...)
{
  int *v4; // r4
  unsigned int v5; // r0
  char *v6; // r6
  int v7; // r0
  int v8; // r3
  int *result; // r0
  int v10; // r3
  int v11; // r2
  int **v12; // [sp+0h] [bp-18h]
  int v13; // [sp+4h] [bp-14h]
  va_list va; // [sp+20h] [bp+8h]

  va_start(va, a4);
  v4 = a1;
  va_copy(v12, va);
  v5 = a2(&v12, a3, a4);
  v6 = (char *)&v12 + v5;
  *v4 = (int)(v4 + 2);
  v13 = v5;
  if ( v5 > 0xF )
  {
    v7 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v4, &v13, 0);
    v8 = v13;
    *v4 = v7;
    v4[2] = v8;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v4, &v12, v6);
  result = v4;
  v10 = v13;
  v11 = *v4;
  v4[1] = v13;
  *(_BYTE *)(v11 + v10) = 0;
  return result;
}
// 2908: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 2A68: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00001CA4) --------------------------------------------------------
void **std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001CE0) --------------------------------------------------------
int ScreenshotMenuCallback(CTRPluginFramework *this)
{
  float v1; // s0
  unsigned int v2; // r4
  bool v3; // cf
  int v4; // r0
  int v5; // r0
  char *v6; // r0
  float v7; // r1
  int v8; // r5
  int v9; // r0
  int v10; // r5
  Screenshot *v11; // r0
  int v12; // r4
  int v13; // r0
  __int64 v15; // [sp+8h] [bp-118h]
  unsigned int v16; // [sp+14h] [bp-10Ch]
  char v17; // [sp+18h] [bp-108h]
  char v18; // [sp+24h] [bp-FCh]
  const char *v19; // [sp+28h] [bp-F8h]
  const char *v20; // [sp+2Ch] [bp-F4h]
  int v21[6]; // [sp+30h] [bp-F0h]
  int v22; // [sp+48h] [bp-D8h]
  int v23; // [sp+4Ch] [bp-D4h]
  int v24; // [sp+50h] [bp-D0h]
  int v25; // [sp+60h] [bp-C0h]
  char v26; // [sp+78h] [bp-A8h]
  char *v27; // [sp+90h] [bp-90h]
  int v28; // [sp+94h] [bp-8Ch]
  char v29; // [sp+98h] [bp-88h]
  char v30; // [sp+A8h] [bp-78h]
  char v31; // [sp+C0h] [bp-60h]
  char v32; // [sp+D8h] [bp-48h]
  char v33; // [sp+F0h] [bp-30h]
  _DWORD v34[1]; // [sp+108h] [bp-18h]

  Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
    &v25,
    (unsigned __int8 *)&Color::LimeGreen);
  operator<<(&v26, &v25, &unk_26A7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v27, "Screens");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v30, "Hotkeys");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v31, "Timer");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v32, "Name");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v33, "Directory");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
    (int)&v22,
    (int)&v27,
    (int)v34);
  Keyboard::Keyboard(&v17, &v26, &v22);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v22);
  v2 = 4;
  do
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&(&v27)[6 * v2]);
    v3 = v2-- >= 1;
  }
  while ( v3 );
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
  while ( 2 )
  {
    v4 = Keyboard::Open((Keyboard *)&v17);
    switch ( v4 )
    {
      case 0:
        Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          &v25,
          (unsigned __int8 *)&Color::LimeGreen);
        operator<<(&v26, &v25, &unk_26FF);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v27,
          "Top screen");
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v30,
          "Bottom screen");
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v31,
          "Both screens");
        v22 = 0;
        v23 = 0;
        v24 = 0;
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::_M_range_initialize<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const*>(
          (int)&v22,
          (int)&v27,
          (int)&v32);
        Keyboard::Keyboard(v21, &v26, &v22);
        std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)&v22);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v31);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v30);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
        v5 = Keyboard::Open((Keyboard *)v21);
        if ( v5 != -1 )
          Screenshot::Screens = v5 + 1;
        v6 = (char *)v21;
        goto LABEL_8;
      case 1:
        v25 = Screenshot::Hotkeys;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v26,
          "Select the hotkeys you'd like to use to take a new screenshot.");
        HotkeysModifier::HotkeysModifier(&v27, &v25, &v26);
        HotkeysModifier::operator()(&v27);
        HotkeysModifier::~HotkeysModifier((HotkeysModifier *)&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        if ( v25 )
          Screenshot::Hotkeys = v25;
        continue;
      case 2:
        Time::AsSeconds((Time *)&Screenshot::Timer);
        LODWORD(v1) = (unsigned int)v1;
        v16 = LODWORD(v1);
        Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          v21,
          (unsigned __int8 *)&Color::LimeGreen);
        operator<<(&v22, v21, &unk_279A);
        Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          &v25,
          (unsigned __int8 *)&Color::Orange);
        operator<<(&v26, &v22, &v25);
        operator<<(&v27, &v26, " Note that during that time, you can't\n access the menu.");
        Keyboard::Keyboard(&v18, &v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v22);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v21);
        Keyboard::IsHexadecimal((Keyboard *)&v18, 0);
        Keyboard::OnInputChange(
          &v18,
          ScreenshotMenuCallback(void)::{lambda(Keyboard &,InputChangeEvent &)#1}::_FUN);
        if ( Keyboard::Open((Keyboard *)&v18, &v16, v16) != -1 )
        {
          v1 = (float)v16;
          Seconds((CTRPluginFramework *)&v15, v7);
          Screenshot::Timer = v15;
        }
        v6 = &v18;
        goto LABEL_8;
      case 3:
        Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          (int *)&v26,
          (unsigned __int8 *)&Color::LimeGreen);
        operator<<(&v27, &v26, &unk_2857);
        Keyboard::Keyboard(&v25, &v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        v27 = &v29;
        v28 = 0;
        v29 = 0;
        if ( Keyboard::Open(&v25, &v27, &ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E) != -1 )
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(
            &ZN18CTRPluginFramework10Screenshot6PrefixB5cxx11E,
            &v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        v6 = (char *)&v25;
LABEL_8:
        Keyboard::~Keyboard((Keyboard *)v6);
        continue;
      case 4:
        v27 = &v29;
        v28 = 0;
        v29 = 0;
        if ( Utils::DirectoryPicker(&v27) != -1 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
            ZN18CTRPluginFramework10Screenshot4PathB5cxx11E,
            &v27);
          if ( *(_BYTE *)(ZN18CTRPluginFramework10Screenshot4PathB5cxx11E[0]
                        + ZN18CTRPluginFramework10Screenshot4PathB5cxx11E[1]
                        - 1) != 47 )
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(
              ZN18CTRPluginFramework10Screenshot4PathB5cxx11E,
              47);
        }
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        continue;
      default:
        if ( v4 != -1 )
          continue;
        *(_DWORD *)&v18 = "Top screen";
        v19 = "Bottom screen";
        v20 = "Both screens";
        v8 = g_screenshotEntry;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v22, "Screenshot: ");
        Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          &v25,
          (unsigned __int8 *)&Color::LimeGreen);
        operator<<(&v26, &v22, &v25);
        ZN18CTRPluginFramework12KeysToStringB5cxx11Em(&v27, Screenshot::Hotkeys);
        v9 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v26, &v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v8 + 4, v9);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v22);
        v10 = g_screenshotEntry;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          &v25,
          (const char *)&unk_2520);
        Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
          (int *)&v26,
          (unsigned __int8 *)&Color::Orange);
        operator<<(&v27, &v25, &v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v10 + 4, &v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(
          g_screenshotEntry + 4,
          v34[(Screenshot::Screens & 3) - 58]);
        v11 = (Screenshot *)Time::AsSeconds((Time *)&Screenshot::Timer);
        if ( (unsigned int)v1 )
        {
          v12 = g_screenshotEntry;
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            v21,
            (const char *)&unk_2520);
          Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
            &v22,
            (unsigned __int8 *)&Color::DeepSkyBlue);
          operator<<(&v25, v21, &v22);
          __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,char>(
            (int *)&v27,
            (int (*)(int ***, int, int))&vsnprintf,
            16,
            (int)&unk_2894,
            (unsigned int)v1);
          v13 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v27, 0, &v25);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v26, v13);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v12 + 4, &v26);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v26);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v22);
          v11 = (Screenshot *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v21);
          Screenshot::Screens |= 4u;
        }
        Screenshot::UpdateFileCount(v11);
        return Keyboard::~Keyboard((Keyboard *)&v17);
    }
  }
}
// 90: using guessed type int g_screenshotEntry;
// 23A4: using guessed type char *Screenshots_items[3];
// 28B8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 2910: using guessed type int HotkeysModifier::HotkeysModifier(_DWORD, _DWORD, _DWORD);
// 2914: using guessed type int HotkeysModifier::operator()(_DWORD);
// 2950: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 2954: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 296C: using guessed type int operator<<(_DWORD, _DWORD, _DWORD);
// 2974: using guessed type int operator<<(_DWORD, _DWORD, _DWORD);
// 2980: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 29B0: using guessed type int ZN18CTRPluginFramework12KeysToStringB5cxx11Em(_DWORD, _DWORD);
// 2A70: using guessed type int Keyboard::Keyboard(_DWORD, _DWORD, _DWORD);
// 2A80: using guessed type int Keyboard::Keyboard(_DWORD, _DWORD);
// 2A88: using guessed type int Keyboard::OnInputChange(_DWORD, _DWORD);
// 2A90: using guessed type int Keyboard::Open(_DWORD, _DWORD, _DWORD);
// 2A94: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 2A98: using guessed type int Utils::DirectoryPicker(_DWORD);
// 2A9C: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 2AA0: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD);
// 2AA4: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 2AA8: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);

//----- (000022F8) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework15PluginMenuToolsC2ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9HexEditorE()
{
  Hook::Hook((Hook *)&g_FsTryOpenFileHook);
  File::File((File *)&g_hookExportFile);
  return _aeabi_atexit(&g_hookExportFile, File::~File, &_dso_handle);
}
// 70: using guessed type char g_FsTryOpenFileHook;
// 2A50: using guessed type int _aeabi_atexit(_DWORD, _DWORD, _DWORD);

//----- (00002338) --------------------------------------------------------
int PluginMenuTools::_RenderTop(PluginMenuTools *this)
{
  PluginMenuTools *v1; // r4
  int result; // r0

  v1 = this;
  Renderer::SetTarget(1);
  if ( TextBox::IsOpen((PluginMenuTools *)((char *)v1 + 736)) )
    result = TextBox::Draw((PluginMenuTools *)((char *)v1 + 736));
  else
    result = Menu::Draw((PluginMenuTools *)((char *)v1 + 552));
  return result;
}
// 2A18: using guessed type int Renderer::SetTarget(_DWORD);

//----- (00002374) --------------------------------------------------------
int PluginMenuTools::operator()(std::vector<Event,std::allocator<Event>> &,Time &)::{lambda(void *)#1}::_FUN(PluginMenuTools *a1)
{
  PluginMenuTools::_RenderTop(a1);
  return 0;
}

// ALL OK, 40 function(s) have been successfully decompiled
