/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

unsigned int std::__uninitialized_move_if_noexcept_a<Preferences::HotkeysInfos *,Preferences::HotkeysInfos *,std::allocator<Preferences::HotkeysInfos>>(char *a1, char *a2, int a3);
KeySequenceImpl *KeySequenceImpl::~KeySequenceImpl(KeySequenceImpl *this);
File *File::~File(File *this);
TextBox *TextBox::~TextBox(TextBox *this);
TextBox *TextBox::~TextBox(TextBox *this);
_DWORD *PluginMenuImpl::PluginMenuImpl(_DWORD *a1);
int PluginMenuImpl::Append(int a1);
int PluginMenuImpl::RemoveCallback(int result, void (*a2)(void));
unsigned int *KeySequenceImpl::KeySequenceImpl(unsigned int *a1, const void **a2);
MenuFolderImpl *PluginMenuImpl::Close(MenuFolderImpl *result);
unsigned __int8 *PluginMenuImpl::LoadHotkeysFromFile(unsigned __int8 *result, File *a2);
int PluginMenuImpl::GetRegionsList(int result);
void PluginMenuImpl::ForceExit(PluginMenuImpl *this);
void PluginMenuImpl::ForceOpen(PluginMenuImpl *this);
int PluginMenuImpl::UnStar(int result);
int PluginMenuImpl::Refresh(PluginMenuImpl *this);
int PluginMenuImpl::SetHexEditorState(PluginMenuImpl *this, int a2);
int PluginMenuImpl::ShowWelcomeMessage(int result, bool a2);
int PluginMenuImpl::GetRoot(PluginMenuImpl *this);
int PluginMenuImpl::IsOpen(PluginMenuImpl *this);
int PluginMenuImpl::WasOpened(PluginMenuImpl *this);
int PluginMenuImpl::AddPluginVersion(PluginMenuImpl *this, unsigned int a2);
void **std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1);
void **std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base(void **a1);
void std::vector<void (*)(void),std::allocator<void (*)(void)>>::_M_realloc_insert<void (* const&)(void)>(_DWORD *a1, u8 *a2, _DWORD *a3);
void PluginMenuImpl::Callback(PluginMenuImpl *this, void (*a2)(void), int a3);
void **std::_Deque_base<Event,std::allocator<Event>>::~_Deque_base(void **a1);
void std::vector<Event,std::allocator<Event>>::_M_realloc_insert<Event const&>(_DWORD *a1, u8 *a2, _DWORD *a3);
int PluginMenuImpl::Run(PluginMenuImpl *this);
unsigned int std::vector<unsigned long,std::allocator<unsigned long>>::_M_check_len(_DWORD *a1, unsigned int a2, const char *a3);
void std::vector<unsigned long,std::allocator<unsigned long>>::_M_default_append(void **a1, unsigned int a2);
void std::vector<unsigned long,std::allocator<unsigned long>>::resize(int a1, unsigned int a2);
unsigned __int8 *PluginMenuImpl::LoadEnabledCheatsFromFile(unsigned __int8 *result, File *a2);
unsigned __int8 *PluginMenuImpl::LoadFavoritesFromFile(unsigned __int8 *result, File *a2);
void std::vector<unsigned long,std::allocator<unsigned long>>::push_back(_DWORD *a1, _DWORD *a2);
void **PluginMenuImpl::WriteEnabledCheatsToFile(void **result, File *a2, unsigned int a3, int a4);
void **PluginMenuImpl::WriteFavoritesToFile(void **result, File *a2);
unsigned int *std::vector<unsigned long,std::allocator<unsigned long>>::vector(unsigned int *a1, const void **a2);
void std::vector<Preferences::HotkeysInfos,std::allocator<Preferences::HotkeysInfos>>::_M_realloc_insert<Preferences::HotkeysInfos const&>(char **a1, char *a2, int a3);
void **PluginMenuImpl::ExtractHotkeys(void **result, int a2, _DWORD *a3);
void PluginMenuImpl::WriteHotkeysToFile(unsigned int a1, void *a2, void *a3, int a4);
PluginMenuSearch *PluginMenuSearch::~PluginMenuSearch(PluginMenuSearch *this);
PluginMenuImpl *PluginMenuImpl::~PluginMenuImpl(PluginMenuImpl *this, bool a2);
// void __cdecl operator delete(void *); idb
// _DWORD File::Close(File *__hidden this); idb
// _DWORD __cdecl Mutex::~Mutex(Mutex *__hidden this); idb
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD PluginMenuActionReplay::PluginMenuActionReplay(PluginMenuActionReplay *__hidden this); idb
// int PluginMenuHome::PluginMenuHome(void); weak
// _DWORD __cdecl PluginMenuSearch::PluginMenuSearch(PluginMenuSearch *__hidden this, HexEditor *); weak
// int PluginMenuTools::PluginMenuTools(void); weak
// _DWORD PluginMenuExecuteLoop::PluginMenuExecuteLoop(PluginMenuExecuteLoop *__hidden this); idb
// _DWORD GuideReader::GuideReader(GuideReader *__hidden this); idb
// _DWORD __cdecl HexEditor::HexEditor(HexEditor *__hidden this, unsigned int); idb
// int PluginMenuHome::Append(_DWORD); weak
// void __noreturn std::__throw_bad_alloc(void); idb
// void *memcpy(void *dest, const void *src, size_t n);
// _DWORD Clock::Clock(Clock *__hidden this); idb
// _DWORD __cdecl PluginMenuHome::Close(PluginMenuHome *__hidden this, MenuFolderImpl *); weak
// int File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl File::Read(File *__hidden this, void *, unsigned int); idb
// _DWORD __cdecl MenuFolderImpl::GetItem(MenuFolderImpl *__hidden this, unsigned int); idb
// _DWORD MenuEntryImpl::AsMenuEntry(MenuEntryImpl *__hidden this); idb
// _DWORD HotkeyManager::Count(HotkeyManager *__hidden this); idb
// int HotkeyManager::operator[](_DWORD, _DWORD); weak
// int Hotkey::operator=(_DWORD, _DWORD); weak
// _DWORD MenuEntry::RefreshNote(MenuEntry *__hidden this); idb
// int PluginMenuSearch::GetRegionsList(_DWORD, _DWORD); weak
// int PluginMenuHome::UnStar(_DWORD, _DWORD); weak
// _DWORD PluginMenuHome::Refresh(PluginMenuHome *__hidden this); weak
// int PluginMenuTools::TriggerHexEditor(_DWORD, _DWORD); weak
// _DWORD __cdecl PluginMenuHome::AddPluginVersion(PluginMenuHome *__hidden this, unsigned int); weak
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD EventManager::EventManager(EventManager *__hidden this); idb
// _DWORD Time::Time(Time *__hidden this); idb
// _DWORD Preferences::Initialize(Preferences *__hidden this); idb
// _DWORD Preferences::LoadSettings(Preferences *__hidden this); idb
// _DWORD Controller::Update(Controller *__hidden this); idb
// int Controller::IsKeyPressed(_DWORD); weak
// _DWORD PluginMenuTools::UpdateSettings(PluginMenuTools *__hidden this); idb
// _DWORD Preferences::LoadSavedFavorites(Preferences *__hidden this); idb
// _DWORD Preferences::LoadSavedEnabledCheats(Preferences *__hidden this); idb
// _DWORD Preferences::LoadHotkeysFromFile(Preferences *__hidden this); idb
// _DWORD PluginMenuHome::Init(PluginMenuHome *__hidden this); idb
// _DWORD PluginMenuSearch::RestoreSearchState(PluginMenuSearch *__hidden this); idb
// _DWORD PluginMenuActionReplay::Initialize(PluginMenuActionReplay *__hidden this); idb
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void); weak
// int OSD::Notify(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl EventManager::PollEvent(EventManager *__hidden this, Event *); idb
// int LightEvent_Wait(_DWORD); weak
// _DWORD SystemImpl::Status(SystemImpl *__hidden this); idb
// int Controller::IsKeyDown(_DWORD); weak
// _DWORD __cdecl ProcessImpl::Play(ProcessImpl *__hidden this, bool); idb
// _DWORD Preferences::WriteSettings(Preferences *__hidden this); idb
// _DWORD PluginMenuExecuteLoop::Unlock(PluginMenuExecuteLoop *__hidden this); idb
// _DWORD PluginMenuExecuteLoop::UnlockAR(PluginMenuExecuteLoop *__hidden this); idb
// _DWORD Clock::Restart(Clock *__hidden this); idb
// _DWORD __cdecl Milliseconds(CTRPluginFramework *__hidden this, int); idb
// int Clock::HasTimePassed(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD Controller::GetKeysDown(Controller *__hidden this); idb
// _DWORD __cdecl Controller::IsKeysDown(Controller *__hidden this, unsigned int); idb
// _DWORD PluginMenuExecuteLoop::Lock(PluginMenuExecuteLoop *__hidden this); idb
// _DWORD PluginMenuExecuteLoop::LockAR(PluginMenuExecuteLoop *__hidden this); idb
// _DWORD __cdecl ProcessImpl::Pause(ProcessImpl *__hidden this, bool); idb
// _DWORD Touch::IsDown(Touch *__hidden this); idb
// int PluginMenuHome::operator()(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl Renderer::EndFrame(Renderer *__hidden this, bool); idb
// int GuideReader::operator()(_DWORD, _DWORD, _DWORD); weak
// int PluginMenuSearch::operator()(_DWORD, _DWORD, _DWORD); weak
// int PluginMenuActionReplay::operator()(_DWORD, _DWORD, _DWORD); weak
// int PluginMenuTools::operator()(_DWORD, _DWORD, _DWORD); weak
// _DWORD FwkSettings::Get(FwkSettings *__hidden this); idb
// _DWORD PluginMenuExecuteLoop::ExecuteAR(PluginMenuExecuteLoop *__hidden this); idb
// int PluginMenuExecuteLoop::operator()(_DWORD); weak
// int _cxa_guard_acquire(_DWORD); weak
// int _cxa_guard_release(_DWORD); weak
// int _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD OSDImpl::Update(OSDImpl *__hidden this); idb
// _DWORD __cdecl Seconds(CTRPluginFramework *__hidden this, float); idb
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// int MenuFolderImpl::Append(_DWORD); weak
// _DWORD MenuEntryImpl::IsActivated(MenuEntryImpl *__hidden this); idb
// _DWORD File::Tell(File *__hidden this); idb
// _DWORD __cdecl File::Write(File *__hidden this, const void *, unsigned int); idb
// _DWORD __cdecl operator new[](unsigned int); idb
// void __cdecl operator delete[](void *); idb
// _DWORD __cdecl UIContainer::~UIContainer(UIContainer *__hidden this); idb
// _DWORD __cdecl Button::~Button(Button *__hidden this); idb
// _DWORD __cdecl SubMenu::~SubMenu(SubMenu *__hidden this); idb
// _DWORD __cdecl Menu::~Menu(Menu *__hidden this); idb
// _DWORD __cdecl MenuFolderImpl::~MenuFolderImpl(MenuFolderImpl *__hidden this); idb
// _DWORD __cdecl Directory::~Directory(Directory *__hidden this); idb
// _DWORD __cdecl HexEditor::~HexEditor(HexEditor *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_1; // weak
int PluginMenuImpl::_runningInstance; // weak
int PluginMenuImpl::Run(void)::count; // weak
char PluginMenuImpl::Run(void)::konamicode; // weak
int PluginMenuImpl::Run(void)::konamicode; // weak
int dword_1C; // weak
_UNKNOWN unk_28; // weak
int dword_30; // weak
_UNKNOWN loc_40; // weak
// extern _UNKNOWN TextBox; weak
// extern _UNKNOWN Preferences::AutoLoadCheats; weak
// extern _UNKNOWN Preferences::AutoLoadFavorites; weak
// extern u8 Preferences::Settings[6]; idb
// extern _UNKNOWN Color::White; weak
// extern _UNKNOWN SystemImpl::RosalinaHotkey; weak
// extern _UNKNOWN Preferences::MenuHotkeys; weak
// extern _UNKNOWN ProcessImpl::IsPaused; weak
// extern _UNKNOWN OSDImpl::OnNewFrameEvent; weak
// extern _UNKNOWN Preferences::UseFloatingBtn; weak
// extern _UNKNOWN _dso_handle; weak
// extern _UNKNOWN OSDImpl::MessColors; weak
// extern _UNKNOWN NumericTextBox; weak
// extern _UNKNOWN ComboBox; weak


//----- (00000038) --------------------------------------------------------
unsigned int std::__uninitialized_move_if_noexcept_a<Preferences::HotkeysInfos *,Preferences::HotkeysInfos *,std::allocator<Preferences::HotkeysInfos>>(char *a1, char *a2, int a3)
{
  int v3; // r3
  char *i; // r12
  int v5; // r4
  int v6; // r4
  int v7; // r4
  int v8; // r4

  v3 = a3;
  for ( i = a1; ; *((_DWORD *)i - 1) = v8 )
  {
    v3 += 20;
    if ( a2 == i )
      break;
    v5 = *(_DWORD *)i;
    i += 20;
    *(_DWORD *)(v3 - 20) = v5;
    v6 = *((_DWORD *)i - 4);
    *(_DWORD *)(v3 - 8) = 0;
    *(_DWORD *)(v3 - 4) = 0;
    *(_DWORD *)(v3 - 12) = 0;
    *(_DWORD *)(v3 - 16) = v6;
    *(_DWORD *)(v3 - 12) = *((_DWORD *)i - 3);
    *((_DWORD *)i - 3) = 0;
    v7 = *(_DWORD *)(v3 - 8);
    *(_DWORD *)(v3 - 8) = *((_DWORD *)i - 2);
    *((_DWORD *)i - 2) = v7;
    v8 = *(_DWORD *)(v3 - 4);
    *(_DWORD *)(v3 - 4) = *((_DWORD *)i - 1);
  }
  return a3 + 20 * (214748365 * ((unsigned int)(a2 - a1) >> 2) & 0x3FFFFFFF);
}

//----- (000000C8) --------------------------------------------------------
KeySequenceImpl *KeySequenceImpl::~KeySequenceImpl(KeySequenceImpl *this)
{
  KeySequenceImpl *v1; // r4
  void *v2; // r0

  v1 = this;
  v2 = *(void **)this;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (000000E8) --------------------------------------------------------
File *File::~File(File *this)
{
  File *v1; // r4

  v1 = this;
  File::Close(this);
  Mutex::~Mutex((File *)((char *)v1 + 48));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// 1E18: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000010C) --------------------------------------------------------
TextBox *TextBox::~TextBox(TextBox *this)
{
  TextBox *v1; // r4
  void *v2; // r0

  v1 = this;
  *(_DWORD *)this = (char *)&TextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 16);
  v2 = (void *)*((_DWORD *)v1 + 1);
  if ( v2 )
    operator delete(v2);
  return v1;
}
// 1E18: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000013C) --------------------------------------------------------
TextBox *TextBox::~TextBox(TextBox *this)
{
  TextBox *v1; // r4

  v1 = this;
  TextBox::~TextBox(this);
  operator delete((void *)v1);
  return v1;
}

//----- (00000158) --------------------------------------------------------
_DWORD *PluginMenuImpl::PluginMenuImpl(_DWORD *a1)
{
  _DWORD *v1; // r4
  PluginMenuActionReplay *v2; // r6
  int v3; // r6
  PluginMenuSearch *v4; // r7
  int v5; // r7
  PluginMenuExecuteLoop *v6; // r7
  GuideReader *v7; // r7

  v1 = a1;
  *a1 = 0;
  a1[1] = 0;
  v2 = (PluginMenuActionReplay *)operator new(0x548u);
  PluginMenuActionReplay::PluginMenuActionReplay(v2);
  v1[5] = v2;
  v3 = operator new(0x398u);
  PluginMenuHome::PluginMenuHome();
  v1[6] = v3;
  v4 = (PluginMenuSearch *)operator new(0x3B0u);
  PluginMenuSearch::PluginMenuSearch(v4, (HexEditor *)(v1 + 12));
  v1[7] = v4;
  v5 = operator new(0x360u);
  PluginMenuTools::PluginMenuTools();
  v1[8] = v5;
  v6 = (PluginMenuExecuteLoop *)operator new(0x18u);
  PluginMenuExecuteLoop::PluginMenuExecuteLoop(v6);
  v1[9] = v6;
  v7 = (GuideReader *)operator new(0x1A0u);
  GuideReader::GuideReader(v7);
  v1[10] = v7;
  HexEditor::HexEditor((HexEditor *)(v1 + 12), 0x100000u);
  v1[3] = 0x1000000;
  v1[104] = 0;
  v1[105] = 0;
  v1[106] = 0;
  *((u8 *)v1 + 428) = 0;
  *((u8 *)v1 + 16) = 1;
  return v1;
}
// 1E28: using guessed type int PluginMenuHome::PluginMenuHome(void);
// 1E2C: using guessed type _DWORD __cdecl PluginMenuSearch::PluginMenuSearch(PluginMenuSearch *__hidden this, HexEditor *);
// 1E30: using guessed type int PluginMenuTools::PluginMenuTools(void);

//----- (00000238) --------------------------------------------------------
int PluginMenuImpl::Append(int a1)
{
  return PluginMenuHome::Append(*(_DWORD *)(a1 + 24));
}
// 1E40: using guessed type int PluginMenuHome::Append(_DWORD);

//----- (00000240) --------------------------------------------------------
int PluginMenuImpl::RemoveCallback(int result, void (*a2)(void))
{
  void (**v2)(void); // r2
  void (**v3)(void); // r12
  int i; // lr
  void (**v5)(void); // r3
  void (**v6)(void); // r2
  void (*v7)(void); // lr
  void (*v8)(void); // t1
  int v9; // r2

  v2 = *(void (***)(void))(result + 416);
  v3 = *(void (***)(void))(result + 420);
  for ( i = ((char *)v3 - (char *)v2) >> 4; ; --i )
  {
    v5 = v2;
    if ( i <= 0 )
      break;
    if ( *v2 == a2 )
      goto LABEL_6;
    if ( v2[1] == a2 )
    {
      v5 = v2 + 1;
      goto LABEL_6;
    }
    if ( v2[2] == a2 )
    {
      v5 = v2 + 2;
      goto LABEL_6;
    }
    v2 += 4;
    if ( v5[3] == a2 )
    {
      v5 += 3;
      goto LABEL_6;
    }
  }
  v9 = v3 - v2;
  if ( v9 != 2 )
  {
    if ( v9 != 3 )
    {
      if ( v9 != 1 )
      {
        v5 = *(void (***)(void))(result + 420);
        goto LABEL_6;
      }
      goto LABEL_21;
    }
    if ( *v5 == a2 )
      goto LABEL_6;
    ++v5;
  }
  if ( *v5 == a2 )
    goto LABEL_6;
  ++v5;
LABEL_21:
  if ( *v5 != a2 )
  {
    v5 = *(void (***)(void))(result + 420);
    goto LABEL_24;
  }
LABEL_6:
  if ( v3 != v5 )
  {
    v6 = v5 + 1;
    while ( v3 != v6 )
    {
      v8 = *v6;
      ++v6;
      v7 = v8;
      if ( v8 != a2 )
      {
        *v5 = v7;
        ++v5;
      }
    }
  }
LABEL_24:
  if ( *(void (***)(void))(result + 420) != v5 )
    *(_DWORD *)(result + 420) = v5;
  return result;
}

//----- (00000334) --------------------------------------------------------
unsigned int *KeySequenceImpl::KeySequenceImpl(unsigned int *a1, const void **a2)
{
  signed int v2; // r5
  unsigned int v3; // r3
  unsigned int *v4; // r4
  const void **v5; // r6
  u8 *v6; // r1
  u8 *v7; // r2
  bool v8; // zf
  int v9; // r5
  unsigned int *result; // r0

  v2 = (u8 *)a2[1] - (u8 *)*a2;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = v2 >> 2;
  v4 = a1;
  v5 = a2;
  if ( v2 >> 2 )
  {
    if ( v3 > 0x3FFFFFFF )
      std::__throw_bad_alloc();
    v3 = operator new(v2);
  }
  v6 = *v5;
  v7 = v5[1];
  v8 = *v5 == v7;
  v4[2] = v3 + v2;
  *v4 = v3;
  v4[1] = v3;
  v9 = v7 - v6;
  if ( !v8 )
    v3 = (unsigned int)memcpy((void *)v3, v6, v7 - v6);
  v4[1] = v3 + v9;
  Clock::Clock((Clock *)(v4 + 4));
  result = v4;
  v4[6] = 0;
  return result;
}

//----- (000003C8) --------------------------------------------------------
MenuFolderImpl *PluginMenuImpl::Close(MenuFolderImpl *result)
{
  if ( PluginMenuImpl::_runningInstance )
    result = (MenuFolderImpl *)PluginMenuHome::Close(
                                                     *(PluginMenuHome **)(PluginMenuImpl::_runningInstance
                                                                                            + 24),
                                                     result);
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// 1E50: using guessed type _DWORD __cdecl PluginMenuHome::Close(PluginMenuHome *__hidden this, MenuFolderImpl *);

//----- (000003E8) --------------------------------------------------------
unsigned __int8 *PluginMenuImpl::LoadHotkeysFromFile(unsigned __int8 *result, File *a2)
{
  unsigned __int8 *v2; // r4
  File *v3; // r5
  unsigned int v4; // r6
  MenuFolderImpl *v5; // r7
  unsigned int v6; // r8
  MenuEntry *v7; // r0
  MenuEntry *v8; // r9
  void (*v9)(MenuEntry *, unsigned int); // r11
  char *v10; // r10
  int v11; // r0
  int v12; // t1
  unsigned int v13; // [sp+8h] [bp-F0h]
  unsigned int v14; // [sp+Ch] [bp-ECh]
  char v15; // [sp+10h] [bp-E8h]

  if ( PluginMenuImpl::_runningInstance
    && result[72] | (result[73] << 8) | (result[74] << 16) | (result[75] << 24) )
  {
    v2 = result;
    v3 = a2;
    result = (unsigned __int8 *)File::Seek(
                                  a2,
                                  v2[83],
                                  result[76] | (result[77] << 8) | (result[78] << 16) | (result[79] << 24),
                                  result[80] | (result[81] << 8) | (result[82] << 16) | (v2[83] << 24),
                                  1);
    v4 = 0;
    v5 = **(MenuFolderImpl ***)(PluginMenuImpl::_runningInstance + 24);
    while ( (v2[72] | (v2[73] << 8) | (v2[74] << 16) | ((unsigned int)v2[75] << 24)) > v4 )
    {
      result = (unsigned __int8 *)File::Read(v3, &v13, 8u);
      if ( !result )
      {
        result = (unsigned __int8 *)File::Read(v3, &v15, 4 * v14);
        v6 = (unsigned int)result;
        if ( !result )
        {
          result = (unsigned __int8 *)MenuFolderImpl::GetItem(v5, v13);
          if ( !result )
            return result;
          if ( result[57] != 1 )
            return result;
          v7 = (MenuEntry *)MenuEntryImpl::AsMenuEntry((MenuEntryImpl *)result);
          v8 = v7;
          v9 = (void (*)(MenuEntry *, unsigned int))*((_DWORD *)v7 + 1);
          result = (unsigned __int8 *)HotkeyManager::Count(v7);
          if ( result != (unsigned __int8 *)v14 )
            return result;
          v10 = &v15;
          while ( v14 > v6 )
          {
            v11 = HotkeyManager::operator[](v8, v6);
            v12 = *(_DWORD *)v10;
            v10 += 4;
            Hotkey::operator=(v11, v12);
            if ( v9 )
              v9(v8, v6);
            ++v6;
          }
          result = (unsigned __int8 *)MenuEntry::RefreshNote(v8);
        }
      }
      ++v4;
    }
  }
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// 1E54: using guessed type int File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1E68: using guessed type int HotkeyManager::operator[](_DWORD, _DWORD);
// 1E6C: using guessed type int Hotkey::operator=(_DWORD, _DWORD);

//----- (00000570) --------------------------------------------------------
int PluginMenuImpl::GetRegionsList(int result)
{
  if(PluginMenuImpl::_runningInstance)
	return PluginMenuSearch::GetRegionsList(*(u32*)(PluginMenuImpl::_runningInstance + 28));
}

void PluginMenuImpl::ForceExit(PluginMenuImpl *this)
{
  if (PluginMenuImpl::_runningInstance)
    *(u8*)(PluginMenuImpl::_runningInstance + 15) = 0;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;

//----- (000005AC) --------------------------------------------------------
void PluginMenuImpl::ForceOpen(PluginMenuImpl *this)
{
  if ( PluginMenuImpl::_runningInstance )
    *(u8 *)(PluginMenuImpl::_runningInstance + 428) = 1;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;

//----- (000005C8) --------------------------------------------------------
int PluginMenuImpl::UnStar(int result)
{
  if ( PluginMenuImpl::_runningInstance )
    result = PluginMenuHome::UnStar(
               *(_DWORD *)(PluginMenuImpl::_runningInstance + 24),
               result);
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// 1E78: using guessed type int PluginMenuHome::UnStar(_DWORD, _DWORD);

//----- (000005E8) --------------------------------------------------------
int PluginMenuImpl::Refresh(PluginMenuImpl *this)
{
  int result; // r0

  if ( PluginMenuImpl::_runningInstance )
    result = PluginMenuHome::Refresh(*(PluginMenuHome **)(PluginMenuImpl::_runningInstance
                                                                                                + 24));
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// 1E7C: using guessed type _DWORD PluginMenuHome::Refresh(PluginMenuHome *__hidden this);

//----- (00000604) --------------------------------------------------------
int PluginMenuImpl::SetHexEditorState(PluginMenuImpl *this, int a2)
{
  return PluginMenuTools::TriggerHexEditor(*((_DWORD *)this + 8), a2);
}
// 1E80: using guessed type int PluginMenuTools::TriggerHexEditor(_DWORD, _DWORD);

//----- (0000060C) --------------------------------------------------------
int PluginMenuImpl::ShowWelcomeMessage(int result, bool a2)
{
  *(u8 *)(result + 16) = a2;
  return result;
}

class PluginMenuImpl
{

private:
	u32 *_root; // 6
	bool _isOpen; // 13
	bool _wasOpen; // 14
};

class PluginMenuHome
{
private:
	u32 _version; // 6
};

u32 PluginMenuImpl::GetRoot(void)
{
  return *_root;
}

//----- (00000620) --------------------------------------------------------
bool PluginMenuImpl::IsOpen(void)
{
  return _isOpen;
}

bool PluginMenuImpl::WasOpened(void)
{
  return _wasOpen;
}

int PluginMenuImpl::AddPluginVersion(u32 version)
{
  return PluginMenuHome::AddPluginVersion(PluginMenuImpl::_version, version);
}
// 1E84: using guessed type _DWORD __cdecl PluginMenuHome::AddPluginVersion(PluginMenuHome *__hidden this, unsigned int);

//----- (00000638) --------------------------------------------------------
void **std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(void **a1)
{
  void **v1; // r4
  char *v2; // r5
  char *v3; // r6

  v1 = a1;
  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  while ( v3 != v2 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2);
    v2 += 24;
  }
  if ( *v1 )
    operator delete(*v1);
  return v1;
}
// 1E18: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000674) --------------------------------------------------------
void **std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base(void **a1)
{
  void **v1; // r4
  void *v2; // r0

  v1 = a1;
  v2 = *a1;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (00000694) --------------------------------------------------------
void std::vector<void (*)(void),std::allocator<void (*)(void)>>::_M_realloc_insert<void (* const&)(void)>(_DWORD *a1, u8 *a2, _DWORD *a3)
{
  u8 *v3; // r7
  u8 *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  u8 *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (u8 *)*a1;
  v4 = (u8 *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00000758) --------------------------------------------------------
void PluginMenuImpl::Callback(PluginMenuImpl *this, void (*a2)(void), int a3)
{
  signed int v3; // r12
  void (**v4)(void); // r3
  void (**v5)(void); // r2
  void (*v6)(void); // lr
  void (*v7)(void); // [sp+4h] [bp-Ch]
  int v8; // [sp+8h] [bp-8h]

  v3 = 1;
  v7 = a2;
  v8 = a3;
  v4 = (void (**)(void))*((_DWORD *)this + 105);
  v5 = (void (**)(void))*((_DWORD *)this + 104);
  v7 = a2;
  while ( v4 != v5 )
  {
    v6 = *v5;
    ++v5;
    if ( a2 == v6 )
      v3 = 0;
  }
  if ( v3 )
  {
    if ( v4 == *((void (***)(void))this + 106) )
    {
      std::vector<void (*)(void),std::allocator<void (*)(void)>>::_M_realloc_insert<void (* const&)(void)>(
        (_DWORD *)this + 104,
        v4,
        &v7);
    }
    else
    {
      *v4 = a2;
      *((_DWORD *)this + 105) += 4;
    }
  }
}

//----- (000007CC) --------------------------------------------------------
void **std::_Deque_base<Event,std::allocator<Event>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (00000810) --------------------------------------------------------
void std::vector<Event,std::allocator<Event>>::_M_realloc_insert<Event const&>(_DWORD *a1, u8 *a2, _DWORD *a3)
{
  u8 *v3; // r5
  u8 *v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r6
  u8 *v10; // r7
  _DWORD *v11; // r10
  size_t v12; // r9
  char *v13; // r11
  int v14; // r1
  int v15; // r2
  char *v16; // r3
  char *v17; // r9
  int v18; // r9

  v3 = (u8 *)*a1;
  v4 = (u8 *)a1[1];
  v5 = -1431655765 * ((signed int)&v4[-*a1] >> 2);
  if ( -1431655765 * ((signed int)&v4[-*a1] >> 2) )
    v6 = -1431655765 * ((signed int)&v4[-*a1] >> 2);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x15555555 )
  {
    v8 = 357913941;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(12 * v8);
LABEL_8:
  v14 = v11[1];
  v15 = v11[2];
  v16 = &v13[v12];
  *(_DWORD *)v16 = *v11;
  *((_DWORD *)v16 + 1) = v14;
  *((_DWORD *)v16 + 2) = v15;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v17 = &v13[v12 + 12];
  if ( v10 != v4 )
    memcpy(v17, v10, v4 - v10);
  v18 = (int)&v17[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v18;
  v9[2] = &v13[12 * v8];
}

//----- (000008F4) --------------------------------------------------------
int PluginMenuImpl::Run(PluginMenuImpl *this)
{
  PluginMenuImpl *v1; // r4
  int v2; // r3
  PluginMenuActionReplay *v3; // r7
  PluginMenuHome *v4; // r8
  PluginMenuSearch *v5; // r9
  Preferences *v6; // r0
  Preferences *v7; // r0
  Controller *v8; // r0
  Preferences *v9; // r0
  signed int v10; // r0
  bool v11; // r1
  Renderer *v12; // r5
  unsigned __int8 v14; // r5
  Preferences *v15; // r0
  PluginMenuExecuteLoop *v16; // r0
  PluginMenuExecuteLoop *v17; // r0
  int v18; // r1
  int v19; // r3
  PluginMenuExecuteLoop *v20; // r0
  bool v21; // r1
  Touch *v22; // r0
  Controller *v23; // r0
  void (*v24)(void); // r3
  TMLongCard v25; // r3
  TMLongCard v26; // r1
  LateBindingsPtr v27; // r2
  void (*v28)(_DWORD, _DWORD); // r3
  int v29; // r0
  bool v30; // r1
  Preferences *v31; // r0
  PluginMenuExecuteLoop *v32; // r0
  PluginMenuExecuteLoop *v33; // r0
  int v34; // r0
  PluginMenuExecuteLoop *v35; // r0
  PluginMenuExecuteLoop *v36; // r0
  PluginMenuExecuteLoop *v37; // r0
  PluginMenuExecuteLoop *v38; // r0
  unsigned int v39; // r5
  int i; // r0
  int v41; // r2
  Boolean (*v42)(TMTypeMatch, TMModifierMatch, TMEventPtr); // r5
  int v43; // r3
  int v44; // lr
  int *v45; // r12
  int v46; // r1
  bool v47; // zf
  float v48; // r1
  OSDImpl *v49; // r0
  int v50; // r1
  int v51; // [sp+0h] [bp-E8h]
  int v52; // [sp+4h] [bp-E4h]
  int v53; // [sp+8h] [bp-E0h]
  int v54; // [sp+Ch] [bp-DCh]
  __int64 v55; // [sp+10h] [bp-D8h]
  int v56; // [sp+1Ch] [bp-CCh]
  char v57; // [sp+20h] [bp-C8h]
  char v58; // [sp+28h] [bp-C0h]
  __int64 v59; // [sp+30h] [bp-B8h]
  Event v60; // [sp+38h] [bp-B0h]
  Boolean (*v61)(TMTypeMatch, TMModifierMatch, TMEventPtr); // [sp+58h] [bp-90h]
  char *v62; // [sp+5Ch] [bp-8Ch]
  int v63; // [sp+60h] [bp-88h]
  char v64; // [sp+64h] [bp-84h]
  int v65; // [sp+68h] [bp-80h]
  int v66; // [sp+6Ch] [bp-7Ch]
  int v67; // [sp+70h] [bp-78h]
  int v68; // [sp+74h] [bp-74h]
  int v69; // [sp+78h] [bp-70h]
  int v70; // [sp+7Ch] [bp-6Ch]
  int v71; // [sp+80h] [bp-68h]
  int v72; // [sp+84h] [bp-64h]
  int v73; // [sp+88h] [bp-60h]
  char v74; // [sp+8Ch] [bp-5Ch]

  v1 = this;
  EventManager::EventManager((EventManager *)&v74);
  Clock::Clock((Clock *)&v57);
  Clock::Clock((Clock *)&v58);
  v51 = *((_DWORD *)v1 + 8);
  v2 = *((_DWORD *)v1 + 10);
  v56 = 0;
  v52 = v2;
  v3 = (PluginMenuActionReplay *)*((_DWORD *)v1 + 5);
  v53 = *((_DWORD *)v1 + 9);
  v4 = (PluginMenuHome *)*((_DWORD *)v1 + 6);
  v5 = (PluginMenuSearch *)*((_DWORD *)v1 + 7);
  v6 = (Preferences *)Time::Time((Time *)&v59);
  v60.eventType = 0;
  PluginMenuImpl::_runningInstance = (int)v1;
  v60.eventCode = 0;
  v60.eventCodeMask = 0;
  v7 = (Preferences *)Preferences::Initialize(v6);
  v8 = (Controller *)Preferences::LoadSettings(v7);
  Controller::Update(v8);
  if ( Controller::IsKeyPressed(8) || Controller::IsKeyDown(8) )
    Preferences::AutoLoadCheats = 0;
  v9 = (Preferences *)PluginMenuTools::UpdateSettings(*((PluginMenuTools **)v1
                                                                                              + 8));
  if ( Preferences::AutoLoadFavorites )
    v9 = (Preferences *)Preferences::LoadSavedFavorites(v9);
  if ( Preferences::AutoLoadCheats )
    v9 = (Preferences *)Preferences::LoadSavedEnabledCheats(v9);
  Preferences::LoadHotkeysFromFile(v9);
  PluginMenuHome::Init(v4);
  if ( Preferences::Settings[5] )
    PluginMenuSearch::RestoreSearchState(v5);
  if ( Preferences::Settings[4] )
    PluginMenuActionReplay::Initialize(v3);
  if ( *((u8 *)v1 + 16) )
  {
    v62 = &v64;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
    v63 = 13;
    v62[13] = 0;
    v60.matchEvent = (MatchProc)-16777216;
    OSD::Notify(&v62, &Color::White, &v60.matchEvent);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v62);
  }
  while ( *((u8 *)v1 + 15) )
  {
    if ( v60.eventCode != v60.eventType )
      v60.eventCode = v60.eventType;
    while ( 1 )
    {
      v10 = EventManager::PollEvent((EventManager *)&v74, &v60);
      if ( !v10 )
      {
        v12 = (Renderer *)*((unsigned __int8 *)v1 + 428);
        if ( !*((u8 *)v1 + 428) )
          break;
      }
      if ( LOBYTE(v60.modifiers)
        || (Milliseconds((CTRPluginFramework *)&v55, 500),
            (v10 = Clock::HasTimePassed(&v58, v18, v55, HIDWORD(v55))) == 0)
        || Preferences::UseFloatingBtn && !*((u8 *)v1 + 13)
        || (v10 = Controller::GetKeysDown((Controller *)v10),
            v10 == SystemImpl::RosalinaHotkey) )
      {
        v14 = 0;
      }
      else
      {
        v19 = 0;
        v11 = 1;
        v14 = 0;
        do
        {
          v10 = 1 << v19;
          if ( (1 << v19) & Preferences::MenuHotkeys
            && v60.modifierMask == ((1 << v19) & Preferences::MenuHotkeys) )
          {
            v54 = v19;
            v10 = Controller::IsKeysDown(
                    (Controller *)(Preferences::MenuHotkeys & ~v10),
                    1u);
            if ( v10 )
              v14 = v10;
            v11 = 1;
            v19 = v54;
          }
          ++v19;
        }
        while ( v19 != 16 );
      }
      if ( v14 | *((u8 *)v1 + 428) )
      {
        if ( *((u8 *)v1 + 13) )
        {
          v15 = (Preferences *)ProcessImpl::Play(
                                                     (ProcessImpl *)&unk_1,
                                                     v11);
          *((u8 *)v1 + 13) = 0;
          v16 = (PluginMenuExecuteLoop *)Preferences::WriteSettings(v15);
          v17 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::Unlock(v16);
          PluginMenuExecuteLoop::UnlockAR(v17);
        }
        else
        {
          v20 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::Lock((PluginMenuExecuteLoop *)v10);
          PluginMenuExecuteLoop::LockAR(v20);
          v22 = (Touch *)ProcessImpl::Pause(
                                               (ProcessImpl *)&unk_1,
                                               v21);
          *((u8 *)v1 + 13) = 1;
          *((u8 *)v1 + 14) = 1;
          while ( 1 )
          {
            v23 = (Controller *)Touch::IsDown(v22);
            if ( !v23 )
              break;
            v22 = (Touch *)Controller::Update(v23);
          }
          if ( v60.eventType != v60.eventCode )
            v60.eventCode = v60.eventType;
          *((u8 *)v1 + 428) = 0;
          v24 = (void (*)(void))*((_DWORD *)v1 + 1);
          if ( v24 )
            v24();
        }
        Clock::Restart((Clock *)&v55);
      }
      else if ( *((u8 *)v1 + 13) )
      {
        v25 = v60.eventCode;
        if ( v60.eventCode == v60.eventCodeMask )
        {
          std::vector<Event,std::allocator<Event>>::_M_realloc_insert<Event const&>(
            &v60.eventType,
            (u8 *)v60.eventCode,
            &v60);
        }
        else
        {
          v26 = v60.modifierMask;
          v27 = v60.lateModifiers;
          *(_DWORD *)v60.eventCode = v60.modifiers;
          *(_DWORD *)(v25 + 4) = v26;
          *(_DWORD *)(v25 + 8) = v27;
          v60.eventCode += 12;
        }
      }
    }
    if ( *((u8 *)v1 + 13) )
    {
      if ( v56 )
      {
        switch ( v56 )
        {
          case 2:
            v34 = GuideReader::operator()(v52, &v60.eventType, &v59);
            break;
          case 3:
            v34 = PluginMenuSearch::operator()(v5, &v60.eventType, &v59);
            break;
          case 4:
            v34 = PluginMenuActionReplay::operator()(v3, &v60.eventType, &v59);
            break;
          case 5:
            v34 = PluginMenuTools::operator()(v51, &v60.eventType, &v59);
            break;
          default:
            goto LABEL_61;
        }
        if ( v34 )
          v56 = 0;
      }
      else
      {
        v28 = (void (*)(_DWORD, _DWORD))*((_DWORD *)v1 + 2);
        if ( v28 )
          v28(v59, HIDWORD(v59));
        v12 = (Renderer *)PluginMenuHome::operator()(
                                                v4,
                                                &v60.eventType,
                                                &v56,
                                                &v59,
                                                v51,
                                                v52);
      }
LABEL_61:
      v29 = Renderer::EndFrame(v12, v11);
      if ( *(_DWORD *)v1 )
      {
        if ( PluginMenuImpl::Run(void)::count )
        {
          (*(void (**)(int))v1)(v29);
          *(_DWORD *)v1 = 0;
          PluginMenuImpl::Run(void)::count = 0;
        }
        ++PluginMenuImpl::Run(void)::count;
      }
      Clock::Restart((Clock *)&v55);
      v59 = v55;
      if ( v12 )
      {
        v31 = (Preferences *)ProcessImpl::Play(
                                                   (ProcessImpl *)&unk_1,
                                                   v30);
        *((u8 *)v1 + 13) = 0;
        v32 = (PluginMenuExecuteLoop *)Preferences::WriteSettings(v31);
        v33 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::Unlock(v32);
        PluginMenuExecuteLoop::UnlockAR(v33);
      }
    }
    else
    {
      if ( *((u8 *)v1 + 12) && !ProcessImpl::IsPaused )
        v10 = LightEvent_Wait(&OSDImpl::OnNewFrameEvent);
      if ( SystemImpl::Status((SystemImpl *)v10) )
        break;
      v35 = (PluginMenuExecuteLoop *)FwkSettings::Get(0);
      if ( *((u8 *)v35 + 4) )
      {
        v36 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::LockAR(v35);
        v37 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::ExecuteAR(v36);
        v35 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::UnlockAR(v37);
      }
      PluginMenuExecuteLoop::Lock(v35);
      v38 = (PluginMenuExecuteLoop *)PluginMenuExecuteLoop::operator()(v53);
      v39 = 0;
      for ( i = PluginMenuExecuteLoop::Unlock(v38);
            ;
            i = (*(int (**)(int))(v41 + 4 * v39++))(i) )
      {
        v41 = *((_DWORD *)v1 + 104);
        if ( v39 >= (*((_DWORD *)v1 + 105) - v41) >> 2 )
          break;
      }
      __mcr(15, 0, (unsigned int)&PluginMenuImpl::_runningInstance, 7, 10, 5);
      v42 = (Boolean (*)(TMTypeMatch, TMModifierMatch, TMEventPtr))(PluginMenuImpl::Run(void)::konamicode & 1);
      if ( !(PluginMenuImpl::Run(void)::konamicode & 1) )
      {
        if ( _cxa_guard_acquire(&PluginMenuImpl::Run(void)::konamicode) )
        {
          v62 = (u8 *)&loc_40;
          v63 = 64;
          *(_DWORD *)&v64 = 128;
          v65 = 128;
          v66 = 32;
          v67 = 16;
          v68 = 32;
          v69 = 16;
          v70 = 2;
          v71 = 1;
          v72 = 2;
          v73 = 1;
          v60.matchEvent = v42;
          *(_DWORD *)&v60.standard = v42;
          v61 = v42;
          v43 = operator new(0x30u);
          v44 = v43 + 48;
          v60.matchEvent = (MatchProc)v43;
          v61 = (Boolean (*)(TMTypeMatch, TMModifierMatch, TMEventPtr))(v43 + 48);
          v45 = (int *)&v62;
          do
          {
            v46 = v45[1];
            v47 = v45 + 2 == (int *)&v74;
            *(_DWORD *)v43 = *v45;
            *(_DWORD *)(v43 + 4) = v46;
            v45 += 2;
            v43 += 8;
          }
          while ( !v47 );
          *(_DWORD *)&v60.standard = v44;
          KeySequenceImpl::KeySequenceImpl(
            (unsigned int *)&PluginMenuImpl::Run(void)::konamicode,
            (const void **)&v60.matchEvent);
          _cxa_guard_release(&PluginMenuImpl::Run(void)::konamicode);
          _aeabi_atexit(
            &PluginMenuImpl::Run(void)::konamicode,
            KeySequenceImpl::~KeySequenceImpl,
            &_dso_handle);
          if ( v60.matchEvent )
            operator delete(v60.matchEvent);
        }
      }
      if ( Controller::IsKeyDown(*(_DWORD *)(PluginMenuImpl::Run(void)::konamicode
                                                               + 4 * dword_30)) )
      {
        v49 = (OSDImpl *)PluginMenuImpl::Run(void)::konamicode;
        if ( ++dword_30 >= (unsigned int)((dword_1C - PluginMenuImpl::Run(void)::konamicode) >> 2) )
        {
          dword_30 = 0;
          OSDImpl::MessColors ^= 1u;
          goto LABEL_93;
        }
        Clock::Restart((Clock *)&v55);
      }
      Seconds((CTRPluginFramework *)&v55, v48);
      v49 = (OSDImpl *)Clock::HasTimePassed(&unk_28, v50, v55, HIDWORD(v55));
      if ( v49 )
      {
        dword_30 = 0;
        v49 = (OSDImpl *)Clock::Restart((Clock *)&v55);
      }
LABEL_93:
      OSDImpl::Update(v49);
      if ( *((u8 *)v1 + 14) )
        *((u8 *)v1 + 14) = 0;
    }
  }
  PluginMenuImpl::_runningInstance = 0;
  if ( v60.eventType )
    operator delete((void *)v60.eventType);
  std::_Deque_base<Event,std::allocator<Event>>::~_Deque_base((void **)&v74);
  return 0;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// C: using guessed type int PluginMenuImpl::Run(void)::count;
// 10: using guessed type char PluginMenuImpl::Run(void)::konamicode;
// 18: using guessed type int PluginMenuImpl::Run(void)::konamicode;
// 1C: using guessed type int dword_1C;
// 30: using guessed type int dword_30;
// 1E18: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1EA0: using guessed type int Controller::IsKeyPressed(_DWORD);
// 1EC0: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void);
// 1EC4: using guessed type int OSD::Notify(_DWORD, _DWORD, _DWORD);
// 1ECC: using guessed type int LightEvent_Wait(_DWORD);
// 1ED4: using guessed type int Controller::IsKeyDown(_DWORD);
// 1EF0: using guessed type int Clock::HasTimePassed(_DWORD, _DWORD, _DWORD, _DWORD);
// 1F0C: using guessed type int PluginMenuHome::operator()(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1F14: using guessed type int GuideReader::operator()(_DWORD, _DWORD, _DWORD);
// 1F18: using guessed type int PluginMenuSearch::operator()(_DWORD, _DWORD, _DWORD);
// 1F1C: using guessed type int PluginMenuActionReplay::operator()(_DWORD, _DWORD, _DWORD);
// 1F20: using guessed type int PluginMenuTools::operator()(_DWORD, _DWORD, _DWORD);
// 1F2C: using guessed type int PluginMenuExecuteLoop::operator()(_DWORD);
// 1F30: using guessed type int _cxa_guard_acquire(_DWORD);
// 1F34: using guessed type int _cxa_guard_release(_DWORD);
// 1F38: using guessed type int _aeabi_atexit(_DWORD, _DWORD, _DWORD);

//----- (00000FF0) --------------------------------------------------------
unsigned int std::vector<unsigned long,std::allocator<unsigned long>>::_M_check_len(_DWORD *a1, unsigned int a2, const char *a3)
{
  unsigned int v3; // r3
  int v4; // r0
  unsigned __int8 v5; // cf
  unsigned int result; // r0
  signed int v7; // r2

  v3 = (a1[1] - *a1) >> 2;
  if ( 0x3FFFFFFF - v3 < a2 )
    std::__throw_length_error(a3);
  if ( a2 >= v3 )
    v4 = a2;
  else
    v4 = (a1[1] - *a1) >> 2;
  v5 = __CFADD__(v3, v4);
  result = v3 + v4;
  if ( v5 )
    v7 = 1;
  else
    v7 = 0;
  if ( v7 | (result > 0x3FFFFFFF) )
    result = 0x3FFFFFFF;
  return result;
}

//----- (00001048) --------------------------------------------------------
void std::vector<unsigned long,std::allocator<unsigned long>>::_M_default_append(void **a1, unsigned int a2)
{
  unsigned int v2; // r6
  u8 *v3; // r3
  void **v4; // r4
  _DWORD *v5; // r1
  unsigned int v6; // r2
  unsigned int v7; // r0
  unsigned int v8; // r8
  unsigned int v9; // r9
  char *v10; // r5
  void *v11; // r7
  u8 *v12; // r3
  int v13; // r6
  int v14; // r6
  _DWORD *v15; // r2
  unsigned int v16; // r3
  int v17; // r6

  v2 = a2;
  if ( a2 )
  {
    v3 = a1[1];
    v4 = a1;
    if ( a2 > ((u8 *)a1[2] - v3) >> 2 )
    {
      v7 = std::vector<unsigned long,std::allocator<unsigned long>>::_M_check_len(a1, a2, "vector::_M_default_append");
      v8 = v7;
      v9 = v2;
      if ( v7 )
      {
        if ( v7 > 0x3FFFFFFF )
          std::__throw_bad_alloc();
        v10 = (char *)operator new(4 * v7);
      }
      else
      {
        v10 = (char *)v7;
      }
      v11 = *v4;
      v12 = v4[1];
      v13 = v12 - (u8 *)*v4;
      if ( *v4 != v12 )
        memmove(v10, *v4, v12 - (u8 *)*v4);
      v14 = (int)&v10[v13];
      v15 = (_DWORD *)v14;
      v16 = v9;
      do
      {
        --v16;
        *v15 = 0;
        ++v15;
      }
      while ( v16 );
      v17 = v14 + 4 * v9;
      if ( v11 )
        operator delete(v11);
      *v4 = v10;
      v4[1] = (void *)v17;
      v4[2] = &v10[4 * v8];
    }
    else
    {
      v5 = a1[1];
      v6 = v2;
      do
      {
        --v6;
        *v5 = 0;
        ++v5;
      }
      while ( v6 );
      a1[1] = &v3[4 * v2];
    }
  }
}

//----- (0000112C) --------------------------------------------------------
void std::vector<unsigned long,std::allocator<unsigned long>>::resize(int a1, unsigned int a2)
{
  int v2; // lr
  unsigned int v3; // r2
  int v4; // r3

  v2 = *(_DWORD *)(a1 + 4);
  v3 = (v2 - *(_DWORD *)a1) >> 2;
  if ( a2 <= v3 )
  {
    if ( a2 < v3 )
    {
      v4 = *(_DWORD *)a1 + 4 * a2;
      if ( v4 != v2 )
        *(_DWORD *)(a1 + 4) = v4;
    }
  }
  else
  {
    std::vector<unsigned long,std::allocator<unsigned long>>::_M_default_append((void **)a1, a2 - v3);
  }
}

//----- (00001168) --------------------------------------------------------
unsigned __int8 *PluginMenuImpl::LoadEnabledCheatsFromFile(unsigned __int8 *result, File *a2)
{
  unsigned __int8 *v2; // r4
  File *v3; // r5
  MenuFolderImpl *v4; // r6
  __int64 v5; // r4
  u8 *v6; // r0
  void *v7[2]; // [sp+Ch] [bp-1Ch]
  int v8; // [sp+14h] [bp-14h]

  if ( PluginMenuImpl::_runningInstance )
  {
    v2 = result;
    v7[1] = 0;
    v8 = 0;
    v7[0] = 0;
    v3 = a2;
    v4 = *(MenuFolderImpl **)(*(_DWORD *)(PluginMenuImpl::_runningInstance + 24)
                                                + 4);
    std::vector<unsigned long,std::allocator<unsigned long>>::resize(
      (int)v7,
      result[48] | (result[49] << 8) | (result[50] << 16) | (result[51] << 24));
    File::Seek(
      v3,
      v2[59],
      v2[52] | (v2[53] << 8) | (v2[54] << 16) | (v2[55] << 24),
      v2[56] | (v2[57] << 8) | (v2[58] << 16) | (v2[59] << 24),
      1);
    if ( !File::Read(v3, v7[0], 4 * (v2[48] | (v2[49] << 8) | (v2[50] << 16) | (v2[51] << 24))) )
    {
      v5 = *(_QWORD *)v7;
      while ( HIDWORD(v5) != (_DWORD)v5 )
      {
        v6 = (u8 *)MenuFolderImpl::GetItem(v4, *(_DWORD *)v5);
        LODWORD(v5) = v5 + 4;
        if ( v6 )
        {
          if ( v6[57] == 1 )
            (*(void (**)(void))(*(_DWORD *)v6 + 12))();
        }
      }
    }
    result = (unsigned __int8 *)std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base(v7);
  }
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// 1E54: using guessed type int File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001298) --------------------------------------------------------
unsigned __int8 *PluginMenuImpl::LoadFavoritesFromFile(unsigned __int8 *result, File *a2)
{
  unsigned __int8 *v2; // r4
  int v3; // r3
  File *v4; // r5
  MenuFolderImpl *v5; // r7
  int v6; // r6
  __int64 v7; // r4
  int v8; // r0
  void *v9[2]; // [sp+Ch] [bp-24h]
  int v10; // [sp+14h] [bp-1Ch]

  if ( PluginMenuImpl::_runningInstance )
  {
    v2 = result;
    v9[1] = 0;
    v10 = 0;
    v9[0] = 0;
    v3 = *(_DWORD *)(PluginMenuImpl::_runningInstance + 24);
    v4 = a2;
    v5 = *(MenuFolderImpl **)(v3 + 4);
    v6 = *(_DWORD *)(v3 + 12);
    std::vector<unsigned long,std::allocator<unsigned long>>::resize(
      (int)v9,
      result[60] | (result[61] << 8) | (result[62] << 16) | (result[63] << 24));
    File::Seek(
      v4,
      v2[71],
      v2[64] | (v2[65] << 8) | (v2[66] << 16) | (v2[67] << 24),
      v2[68] | (v2[69] << 8) | (v2[70] << 16) | (v2[71] << 24),
      1);
    if ( !File::Read(v4, v9[0], 4 * (v2[60] | (v2[61] << 8) | (v2[62] << 16) | (v2[63] << 24))) )
    {
      v7 = *(_QWORD *)v9;
      while ( HIDWORD(v7) != (_DWORD)v7 )
      {
        v8 = MenuFolderImpl::GetItem(v5, *(_DWORD *)v7);
        LODWORD(v7) = v7 + 4;
        if ( v8 )
        {
          if ( !(*(u8 *)(v8 + 56) & 0x20) )
          {
            *(u8 *)(v8 + 56) |= 0x20u;
            MenuFolderImpl::Append(v6);
          }
        }
      }
    }
    result = (unsigned __int8 *)std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base(v9);
  }
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;
// 1E54: using guessed type int File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1F74: using guessed type int MenuFolderImpl::Append(_DWORD);

//----- (000013D4) --------------------------------------------------------
void std::vector<unsigned long,std::allocator<unsigned long>>::push_back(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // r10
  _DWORD *v3; // r6
  _DWORD *v4; // r9
  unsigned int v5; // r0
  _DWORD *v6; // r7
  __int64 v7; // r4
  int v8; // r8

  v2 = (_DWORD *)a1[1];
  v3 = a1;
  if ( v2 == (_DWORD *)a1[2] )
  {
    v4 = a2;
    v5 = std::vector<unsigned long,std::allocator<unsigned long>>::_M_check_len(a1, 1u, "vector::_M_realloc_insert");
    v6 = (_DWORD *)*v3;
    LODWORD(v7) = v5;
    HIDWORD(v7) = (char *)v2 - *v3;
    v8 = 4 * v5;
    if ( v5 )
    {
      if ( v5 > 0x3FFFFFFF )
        std::__throw_bad_alloc();
      LODWORD(v7) = operator new(4 * v5);
    }
    *(_DWORD *)(v7 + HIDWORD(v7)) = *v4;
    if ( v2 != v6 )
      memmove((void *)v7, v6, HIDWORD(v7));
    HIDWORD(v7) += v7 + 4;
    if ( v6 )
      operator delete(v6);
    *(_QWORD *)v3 = v7;
    v3[2] = v7 + v8;
  }
  else
  {
    *v2 = *a2;
    a1[1] += 4;
  }
}

//----- (0000148C) --------------------------------------------------------
void **PluginMenuImpl::WriteEnabledCheatsToFile(void **result, File *a2, unsigned int a3, int a4)
{
  File *v4; // r7
  void **v5; // r4
  int v6; // r3
  MenuEntryImpl **v7; // r8
  MenuEntryImpl **v8; // r6
  MenuEntryImpl *v9; // r5
  MenuEntryImpl *v10; // t1
  int v11; // r6
  int v12; // r1
  int v13; // r5
  int v14; // r3
  unsigned __int64 v15; // [sp+4h] [bp-24h]
  int v16; // [sp+Ch] [bp-1Ch]

  v15 = __PAIR__(a3, (unsigned int)a2);
  v16 = a4;
  if ( PluginMenuImpl::_runningInstance )
  {
    v4 = a2;
    v5 = result;
    v16 = 0;
    v15 = 0LL;
    v6 = *(_DWORD *)(*(_DWORD *)(PluginMenuImpl::_runningInstance + 24) + 4);
    v7 = *(MenuEntryImpl ***)(v6 + 84);
    v8 = *(MenuEntryImpl ***)(v6 + 80);
    while ( v7 != v8 )
    {
      v10 = *v8;
      ++v8;
      v9 = v10;
      if ( *((u8 *)v10 + 57) == 1 )
      {
        if ( MenuEntryImpl::IsActivated(v9) )
          std::vector<unsigned long,std::allocator<unsigned long>>::push_back(&v15, (_DWORD *)v9 + 13);
      }
    }
    if ( HIDWORD(v15) != (_DWORD)v15 )
    {
      v11 = File::Tell(v4);
      v13 = v12;
      if ( !File::Write(v4, (const void *)v15, HIDWORD(v15) - v15) )
      {
        v14 = (HIDWORD(v15) - (signed int)v15) >> 2;
        *((_WORD *)v5 + 24) = v14;
        *((u8 *)v5 + 51) = HIBYTE(v14);
        *((u8 *)v5 + 53) = BYTE1(v11);
        *((u8 *)v5 + 54) = BYTE2(v11);
        *((u8 *)v5 + 52) = v11;
        *((_WORD *)v5 + 28) = v13;
        *((u8 *)v5 + 50) = BYTE2(v14);
        *((u8 *)v5 + 55) = HIBYTE(v11);
        *((u8 *)v5 + 58) = BYTE2(v13);
        *((u8 *)v5 + 59) = HIBYTE(v13);
      }
    }
    result = std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base((void **)&v15);
  }
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;

//----- (000015AC) --------------------------------------------------------
void **PluginMenuImpl::WriteFavoritesToFile(void **result, File *a2)
{
  File *v2; // r7
  void **v3; // r4
  int v4; // r3
  int *v5; // r5
  int *v6; // r6
  int v7; // t1
  int v8; // r6
  int v9; // r1
  int v10; // r5
  int v11; // r3
  __int64 v12; // [sp+4h] [bp-24h]
  int v13; // [sp+Ch] [bp-1Ch]

  if ( PluginMenuImpl::_runningInstance )
  {
    v2 = a2;
    v3 = result;
    v13 = 0;
    v12 = 0LL;
    v4 = *(_DWORD *)(*(_DWORD *)(PluginMenuImpl::_runningInstance + 24) + 8);
    v5 = *(int **)(v4 + 80);
    v6 = *(int **)(v4 + 84);
    while ( v5 != v6 )
    {
      v7 = *v5;
      ++v5;
      std::vector<unsigned long,std::allocator<unsigned long>>::push_back(&v12, (_DWORD *)(v7 + 52));
    }
    if ( HIDWORD(v12) != (_DWORD)v12 )
    {
      v8 = File::Tell(v2);
      v10 = v9;
      if ( !File::Write(v2, (const void *)v12, HIDWORD(v12) - v12) )
      {
        v11 = (HIDWORD(v12) - (signed int)v12) >> 2;
        *((_WORD *)v3 + 30) = v11;
        *((u8 *)v3 + 63) = HIBYTE(v11);
        *((u8 *)v3 + 65) = BYTE1(v8);
        *((u8 *)v3 + 66) = BYTE2(v8);
        *((u8 *)v3 + 64) = v8;
        *((_WORD *)v3 + 34) = v10;
        *((u8 *)v3 + 62) = BYTE2(v11);
        *((u8 *)v3 + 67) = HIBYTE(v8);
        *((u8 *)v3 + 70) = BYTE2(v10);
        *((u8 *)v3 + 71) = HIBYTE(v10);
      }
    }
    result = std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base((void **)&v12);
  }
  return result;
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;

//----- (000016B4) --------------------------------------------------------
unsigned int *std::vector<unsigned long,std::allocator<unsigned long>>::vector(unsigned int *a1, const void **a2)
{
  signed int v2; // r5
  unsigned int v3; // r3
  unsigned int *v4; // r4
  const void **v5; // r6
  u8 *v6; // r2
  int v7; // r5

  v2 = (u8 *)a2[1] - (u8 *)*a2;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = v2 >> 2;
  v4 = a1;
  v5 = a2;
  if ( v2 >> 2 )
  {
    if ( v3 > 0x3FFFFFFF )
      std::__throw_bad_alloc();
    v3 = operator new(v2);
  }
  v4[2] = v3 + v2;
  *v4 = v3;
  v4[1] = v3;
  v6 = v5[1];
  v7 = v6 - (u8 *)*v5;
  if ( *v5 != v6 )
    v3 = (unsigned int)memmove((void *)v3, *v5, v6 - (u8 *)*v5);
  v4[1] = v3 + v7;
  return v4;
}

//----- (00001738) --------------------------------------------------------
void std::vector<Preferences::HotkeysInfos,std::allocator<Preferences::HotkeysInfos>>::_M_realloc_insert<Preferences::HotkeysInfos const&>(char **a1, char *a2, int a3)
{
  char *v3; // r5
  char *v4; // r7
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int *v9; // r6
  char *v10; // r8
  int v11; // r10
  int v12; // r11
  int v13; // r9
  unsigned int v14; // r0
  unsigned int v15; // r0
  char *v16; // r8
  unsigned int v17; // r10

  v3 = *a1;
  v4 = a1[1];
  v5 = -858993459 * ((v4 - *a1) >> 2);
  if ( -858993459 * ((v4 - *a1) >> 2) )
    v6 = -858993459 * ((v4 - *a1) >> 2);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = (int *)a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xCCCCCCC )
  {
    v8 = 214748364;
    goto LABEL_15;
  }
  if ( v8 )
  {
LABEL_15:
    v13 = operator new(20 * v8);
    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:
  *(_DWORD *)(v13 + v12) = *(_DWORD *)v11;
  *(_DWORD *)(v13 + v12 + 4) = *(_DWORD *)(v11 + 4);
  std::vector<unsigned long,std::allocator<unsigned long>>::vector(
    (unsigned int *)(v13 + v12 + 8),
    (const void **)(v11 + 8));
  v14 = std::__uninitialized_move_if_noexcept_a<Preferences::HotkeysInfos *,Preferences::HotkeysInfos *,std::allocator<Preferences::HotkeysInfos>>(
          v3,
          v10,
          v13);
  v15 = std::__uninitialized_move_if_noexcept_a<Preferences::HotkeysInfos *,Preferences::HotkeysInfos *,std::allocator<Preferences::HotkeysInfos>>(
          v10,
          v4,
          v14 + 20);
  v16 = v3;
  v17 = v15;
  while ( v16 != v4 )
  {
    std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base((void **)v16 + 2);
    v16 += 20;
  }
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v17;
  v9[2] = v13 + 20 * v8;
}

//----- (0000182C) --------------------------------------------------------
void **PluginMenuImpl::ExtractHotkeys(void **result, int a2, _DWORD *a3)
{
  _DWORD *v3; // r5
  void **v4; // r4
  int *v5; // r8
  int *v6; // r9
  int v7; // r6
  int v8; // t1
  HotkeyManager *v9; // r10
  int v10; // r3
  unsigned int v11; // r6
  _DWORD *v12; // r0
  _DWORD *v13; // r0
  unsigned int *v14; // r0
  int v15; // [sp+4h] [bp-34h]
  unsigned int v16; // [sp+8h] [bp-30h]
  int v17; // [sp+Ch] [bp-2Ch]
  int v18; // [sp+10h] [bp-28h]
  int v19; // [sp+14h] [bp-24h]

  if ( a2 )
  {
    v3 = a3;
    v4 = result;
    v5 = *(int **)(a2 + 84);
    v6 = *(int **)(a2 + 80);
    while ( v5 != v6 )
    {
      v8 = *v6;
      ++v6;
      v7 = v8;
      if ( v8 )
      {
        if ( *(u8 *)(v7 + 57) )
        {
          result = (void **)MenuEntryImpl::AsMenuEntry((MenuEntryImpl *)v7);
          v9 = (HotkeyManager *)result;
          if ( result )
          {
            result = (void **)HotkeyManager::Count((HotkeyManager *)result);
            if ( result )
            {
              v10 = *(_DWORD *)(v7 + 52);
              v16 = 0;
              v17 = 0;
              v18 = 0;
              v19 = 0;
              v15 = v10;
              v11 = 0;
              v16 = HotkeyManager::Count(v9);
              while ( v16 > v11 )
              {
                v12 = (_DWORD *)HotkeyManager::operator[](v9, v11);
                std::vector<unsigned long,std::allocator<unsigned long>>::push_back(&v17, v12);
                ++v11;
              }
              v13 = v4[1];
              if ( v13 == v4[2] )
              {
                std::vector<Preferences::HotkeysInfos,std::allocator<Preferences::HotkeysInfos>>::_M_realloc_insert<Preferences::HotkeysInfos const&>(
                  (char **)v4,
                  (char *)v4[1],
                  (int)&v15);
              }
              else
              {
                *v13 = v15;
                v14 = v13 + 2;
                *(v14 - 1) = v16;
                std::vector<unsigned long,std::allocator<unsigned long>>::vector(v14, (const void **)&v17);
                v4[1] = (char *)v4[1] + 20;
              }
              *v3 += v16 + 2;
              result = std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base((void **)&v17);
            }
          }
        }
        else
        {
          result = (void **)PluginMenuImpl::ExtractHotkeys(v4, v7, v3);
        }
      }
    }
  }
  return result;
}
// 1E68: using guessed type int HotkeyManager::operator[](_DWORD, _DWORD);

//----- (00001964) --------------------------------------------------------
void PluginMenuImpl::WriteHotkeysToFile(unsigned int a1, void *a2, void *a3, int a4)
{
  File *v4; // r8
  int v5; // r1
  unsigned int v6; // r4
  unsigned int v7; // r0
  _DWORD *v8; // r7
  int v9; // r0
  _DWORD *v10; // r3
  _DWORD *v11; // r12
  int v12; // r1
  int v13; // r5
  int v14; // r6
  unsigned int v15; // r1
  int v16; // r2
  int v17; // r9
  int *v18; // r0
  int *v19; // lr
  int v20; // r1
  int v21; // r2
  int v22; // t1
  int v23; // r2
  __int64 i; // r4
  unsigned int v25; // [sp+0h] [bp-30h]
  void *v26[2]; // [sp+4h] [bp-2Ch]
  int v27; // [sp+Ch] [bp-24h]

  v25 = a1;
  v26[0] = a2;
  v26[1] = a3;
  v27 = a4;
  if ( PluginMenuImpl::_runningInstance )
  {
    v4 = (File *)a2;
    v5 = **(_DWORD **)(PluginMenuImpl::_runningInstance + 24);
    v6 = a1;
    v26[0] = 0;
    v26[1] = 0;
    v27 = 0;
    v25 = 0;
    PluginMenuImpl::ExtractHotkeys(v26, v5, &v25);
    if ( v25 )
    {
      if ( v25 > 0x1FFFFFFE )
        v7 = -1;
      else
        v7 = 4 * v25;
      v8 = (_DWORD *)operator new[](v7);
      v9 = File::Tell(v4);
      v10 = v26[0];
      v11 = v26[1];
      v13 = v12;
      v14 = v9;
      v15 = 0;
      while ( v11 != v10 )
      {
        v8[v15] = *v10;
        v16 = 4 * v15 + 4;
        *(_DWORD *)((char *)v8 + v16) = v10[1];
        v17 = v10[2];
        v18 = (int *)v10[3];
        v19 = (int *)v10[2];
        v20 = v15 + 2;
        v21 = (int)v8 + v16;
        while ( v18 != v19 )
        {
          v22 = *v19;
          ++v19;
          *(_DWORD *)(v21 + 4) = v22;
          v21 += 4;
        }
        v15 = v20 + (((unsigned int)v18 - v17) >> 2);
        v10 += 5;
      }
      if ( !File::Write(v4, v8, 4 * v25) )
      {
        v23 = (_DWORD)(v26[1] - v26[0]) >> 2;
        *(u8 *)(v6 + 76) = v14;
        *(_WORD *)(v6 + 72) = -13107 * v23;
        *(u8 *)(v6 + 75) = (unsigned int)(-858993459 * v23) >> 24;
        *(u8 *)(v6 + 77) = BYTE1(v14);
        *(u8 *)(v6 + 78) = BYTE2(v14);
        *(_WORD *)(v6 + 80) = v13;
        *(u8 *)(v6 + 74) = (unsigned int)(-858993459 * v23) >> 16;
        *(u8 *)(v6 + 79) = HIBYTE(v14);
        *(u8 *)(v6 + 82) = BYTE2(v13);
        *(u8 *)(v6 + 83) = HIBYTE(v13);
      }
      operator delete[](v8);
    }
    for ( i = *(_QWORD *)v26; HIDWORD(i) != (_DWORD)i; LODWORD(i) = i + 20 )
      std::_Vector_base<unsigned long,std::allocator<unsigned long>>::~_Vector_base((void **)(i + 8));
    if ( v26[0] )
      operator delete(v26[0]);
  }
}
// 8: using guessed type int PluginMenuImpl::_runningInstance;

//----- (00001AFC) --------------------------------------------------------
PluginMenuSearch *PluginMenuSearch::~PluginMenuSearch(PluginMenuSearch *this)
{
  PluginMenuSearch *v1; // r4
  _DWORD *i; // r0
  _DWORD *v3; // r6

  v1 = this;
  UIContainer::~UIContainer((PluginMenuSearch *)((char *)this + 928));
  Button::~Button((PluginMenuSearch *)((char *)v1 + 856));
  Button::~Button((PluginMenuSearch *)((char *)v1 + 784));
  Button::~Button((PluginMenuSearch *)((char *)v1 + 712));
  Button::~Button((PluginMenuSearch *)((char *)v1 + 640));
  Button::~Button((PluginMenuSearch *)((char *)v1 + 568));
  *((_DWORD *)v1 + 126) = (char *)&NumericTextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 540);
  *((_DWORD *)v1 + 111) = (char *)&NumericTextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 480);
  *((_DWORD *)v1 + 96) = (char *)&NumericTextBox + 8;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v1 + 420);
  *((_DWORD *)v1 + 85) = (char *)&ComboBox + 8;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 93);
  *((_DWORD *)v1 + 74) = (char *)&ComboBox + 8;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 82);
  *((_DWORD *)v1 + 63) = (char *)&ComboBox + 8;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 71);
  *((_DWORD *)v1 + 52) = (char *)&ComboBox + 8;
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 60);
  File::~File((PluginMenuSearch *)((char *)v1 + 144));
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 28);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 25);
  std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector((void **)v1 + 22);
  SubMenu::~SubMenu((PluginMenuSearch *)((char *)v1 + 56));
  for ( i = (_DWORD *)*((_DWORD *)v1 + 3); i != (_DWORD *)((char *)v1 + 12); i = v3 )
  {
    v3 = (_DWORD *)*i;
    operator delete(i);
  }
  if ( *(_DWORD *)v1 )
    operator delete(*(void **)v1);
  return v1;
}
// 1E18: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001BF8) --------------------------------------------------------
PluginMenuImpl *PluginMenuImpl::~PluginMenuImpl(PluginMenuImpl *this, bool a2)
{
  PluginMenuImpl *v2; // r5
  int v3; // r4
  void *v4; // r4
  _DWORD *v5; // r4
  void *v6; // r0
  int v7; // r4
  void *v8; // r0
  void **v9; // r4
  void *v10; // r0

  v2 = this;
  ProcessImpl::Play(0, a2);
  v3 = *((_DWORD *)v2 + 6);
  if ( v3 )
  {
    Button::~Button((Button *)(v3 + 848));
    Button::~Button((Button *)(v3 + 776));
    Button::~Button((Button *)(v3 + 704));
    Button::~Button((Button *)(v3 + 632));
    Button::~Button((Button *)(v3 + 560));
    Button::~Button((Button *)(v3 + 488));
    Button::~Button((Button *)(v3 + 416));
    Button::~Button((Button *)(v3 + 344));
    Button::~Button((Button *)(v3 + 272));
    Button::~Button((Button *)(v3 + 200));
    TextBox::~TextBox((TextBox *)(v3 + 80));
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v3 + 56);
    operator delete((void *)v3);
  }
  v4 = (void *)*((_DWORD *)v2 + 7);
  if ( v4 )
  {
    PluginMenuSearch::~PluginMenuSearch(*((PluginMenuSearch **)v2 + 7));
    operator delete(v4);
  }
  v5 = (_DWORD *)*((_DWORD *)v2 + 8);
  if ( v5 )
  {
    TextBox::~TextBox((TextBox *)(v5 + 184));
    Menu::~Menu((Menu *)(v5 + 138));
    v6 = (void *)v5[135];
    if ( v6 )
      operator delete(v6);
    File::~File((File *)(v5 + 114));
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v5 + 108);
    MenuFolderImpl::~MenuFolderImpl((MenuFolderImpl *)(v5 + 81));
    MenuFolderImpl::~MenuFolderImpl((MenuFolderImpl *)(v5 + 56));
    MenuFolderImpl::~MenuFolderImpl((MenuFolderImpl *)(v5 + 31));
    MenuFolderImpl::~MenuFolderImpl((MenuFolderImpl *)(v5 + 6));
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v5);
    operator delete(v5);
  }
  v7 = *((_DWORD *)v2 + 9);
  if ( v7 )
  {
    v8 = *(void **)(v7 + 12);
    if ( v8 )
      operator delete(v8);
    if ( *(_DWORD *)v7 )
      operator delete(*(void **)v7);
    operator delete((void *)v7);
  }
  v9 = (void **)*((_DWORD *)v2 + 10);
  if ( v9 )
  {
    std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::~vector(v9 + 99);
    Directory::~Directory((Directory *)(v9 + 85));
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v9 + 78);
    TextBox::~TextBox((TextBox *)(v9 + 48));
    Menu::~Menu((Menu *)(v9 + 2));
    operator delete(v9);
  }
  v10 = (void *)*((_DWORD *)v2 + 104);
  if ( v10 )
    operator delete(v10);
  HexEditor::~HexEditor((PluginMenuImpl *)((char *)v2 + 48));
  return v2;
}
// 1E18: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

// ALL OK, 43 function(s) have been successfully decompiled
