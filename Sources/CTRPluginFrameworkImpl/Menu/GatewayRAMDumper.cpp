/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2);
CTRPluginFramework::GatewayRAMDumper *__fastcall CTRPluginFramework::GatewayRAMDumper::GatewayRAMDumper(CTRPluginFramework::GatewayRAMDumper *this);
int __fastcall CTRPluginFramework::GatewayRAMDumper::_WriteHeader(CTRPluginFramework::GatewayRAMDumper *this);
int __fastcall CTRPluginFramework::GatewayRAMDumper::_DrawProgress(CTRPluginFramework::GatewayRAMDumper *this);
int __fastcall CTRPluginFramework::GatewayRAMDumper::operator()(void)::{lambda(void *)#1}::_FUN(CTRPluginFramework::GatewayRAMDumper *this); // idb
int __fastcall std::operator+<char,std::char_traits<char>,std::allocator<char>>(int a1, const char *a2, int a3);
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1);
int __fastcall CTRPluginFramework::GatewayRAMDumper::_SelectRegion(CTRPluginFramework::GatewayRAMDumper *this);
unsigned __int8 *__fastcall std::__remove_if<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,__gnu_cxx::__ops::_Iter_equals_val<char const>>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3);
int __fastcall CTRPluginFramework::GatewayRAMDumper::_OpenFile(CTRPluginFramework::GatewayRAMDumper *this);
signed int __fastcall CTRPluginFramework::GatewayRAMDumper::operator()(int a1, int a2);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::File(CTRPluginFramework::File *__hidden this); idb
// int __fastcall svcFlushProcessDataCache(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::File::Write(CTRPluginFramework::File *__hidden this, const void *, unsigned int); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall _cxa_guard_release(_DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::ProcessingLogo::Draw(CTRPluginFramework::ProcessingLogo *__hidden this, int, int); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::Menu::Menu(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::EventManager::EventManager(CTRPluginFramework::EventManager *__hidden this); idb
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(void); weak
// int __fastcall CTRPluginFramework::Menu::Append(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::EventManager::PollEvent(CTRPluginFramework::EventManager *__hidden this, Event *); idb
// int __fastcall CTRPluginFramework::Menu::ProcessEvent(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Menu::Draw(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD CTRPluginFramework::Menu::GetFolder(CTRPluginFramework::Menu *__hidden this); idb
// _DWORD CTRPluginFramework::MenuFolderImpl::ItemsCount(CTRPluginFramework::MenuFolderImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::MenuEntryImpl::IsActivated(CTRPluginFramework::MenuEntryImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Menu::~Menu(CTRPluginFramework::Menu *__hidden this); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memset(void *s, int c, size_t n);
// time_t time(time_t *timer);
// struct tm *localtime(const time_t *timer);
// size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Keyboard::Open(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Directory::IsExists(_DWORD); weak
// int __fastcall CTRPluginFramework::Directory::Create(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Process::GetTitleID(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Heap::SpaceFree(CTRPluginFramework::Heap *__hidden this); idb
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Heap::Alloc(CTRPluginFramework::Heap *__hidden this, unsigned int); idb
// int __fastcall CTRPluginFramework::PluginMenuImpl::GetRegionsList(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *__hidden this, void *); idb
// _DWORD CTRPluginFramework::File::IsOpen(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Task::Task(CTRPluginFramework::Task *__hidden this, int (__cdecl *)(void *), void *, int); idb
// _DWORD CTRPluginFramework::Task::Start(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::Controller::Update(CTRPluginFramework::Controller *__hidden this); idb
// int __fastcall CTRPluginFramework::Controller::IsKeyPressed(_DWORD); weak
// _DWORD CTRPluginFramework::Task::Wait(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// int __fastcall CTRPluginFramework::File::Remove(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Task::~Task(CTRPluginFramework::Task *__hidden this); idb
// _DWORD CTRPluginFramework::File::Flush(CTRPluginFramework::File *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

char `guard variable for'CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo; // weak
_UNKNOWN CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo; // weak
int dword_18; // weak
char CTRPluginFramework::g_progressLoop; // weak
_UNKNOWN unk_D97; // weak
_UNKNOWN unk_E2B; // weak
// extern _UNKNOWN CTRPluginFramework::ProcessImpl::ProcessHandle; weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::Gainsboro; weak
// extern _UNKNOWN CTRPluginFramework::Color::LimeGreen; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::Red; weak


//----- (00000024) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// EE0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// EE4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (0000009C) --------------------------------------------------------
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2)
{
  unsigned int v2; // r3
  int *v3; // r4
  unsigned int v4; // r3
  unsigned int v5; // r3
  int *v7; // [sp+0h] [bp-10h]
  unsigned __int8 *v8; // [sp+4h] [bp-Ch]

  v7 = a1;
  v8 = a2;
  LOBYTE(v8) = 0;
  LOBYTE(v7) = 27;
  v2 = *a2;
  v3 = a1;
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  BYTE1(v7) = v2;
  v4 = a2[1];
  if ( v4 < 1 )
    LOBYTE(v4) = 1;
  BYTE2(v7) = v4;
  v5 = a2[2];
  if ( v5 < 1 )
    LOBYTE(v5) = 1;
  HIBYTE(v7) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, (const char *)&v7);
  return v3;
}

//----- (000000F8) --------------------------------------------------------
CTRPluginFramework::GatewayRAMDumper *__fastcall CTRPluginFramework::GatewayRAMDumper::GatewayRAMDumper(CTRPluginFramework::GatewayRAMDumper *this)
{
  CTRPluginFramework::GatewayRAMDumper *v1; // r4

  v1 = this;
  *(_DWORD *)this = (char *)this + 8;
  *((_DWORD *)this + 1) = 0;
  *((_BYTE *)this + 8) = 0;
  CTRPluginFramework::File::File((CTRPluginFramework::GatewayRAMDumper *)((char *)this + 24));
  *((_DWORD *)v1 + 22) = 0;
  *((_DWORD *)v1 + 23) = 0;
  *((_DWORD *)v1 + 24) = 0;
  *((_DWORD *)v1 + 25) = 0;
  *((_DWORD *)v1 + 26) = 0;
  *((_DWORD *)v1 + 27) = 0;
  *((_DWORD *)v1 + 28) = 0;
  *((_DWORD *)v1 + 29) = 0;
  return v1;
}

//----- (00000144) --------------------------------------------------------
int __fastcall CTRPluginFramework::GatewayRAMDumper::_WriteHeader(CTRPluginFramework::GatewayRAMDumper *this)
{
  char *v1; // r10
  char *v2; // r3
  CTRPluginFramework::GatewayRAMDumper *v3; // r6
  unsigned int v4; // r5
  int *v5; // r7
  int v6; // r4
  int v7; // r9
  int v8; // r3
  int v9; // r2
  int v10; // r2
  int v11; // r3
  int v13; // [sp+0h] [bp-428h]
  int v14; // [sp+4h] [bp-424h]
  char v15; // [sp+8h] [bp-420h]

  v1 = (char *)*((_DWORD *)this + 28);
  v2 = (char *)*((_DWORD *)this + 27);
  v3 = this;
  v4 = v1 - v2;
  v13 = (v1 - v2) >> 3;
  v5 = &v13;
  v6 = 12 * v13 + 8;
  v14 = 0;
  while ( 1 )
  {
    v7 = (int)(v2 + 8);
    if ( v1 == v2 )
      break;
    v8 = *(_DWORD *)v2;
    v9 = *(_DWORD *)(v7 - 4);
    v5[2] = v8;
    v10 = v9 - v8;
    v11 = *((_DWORD *)v3 + 26);
    v5[3] = v6;
    v5[4] = v10;
    *((_DWORD *)v3 + 26) = v11 + v10;
    v6 += v10;
    v5 += 3;
    svcFlushProcessDataCache(CTRPluginFramework::ProcessImpl::ProcessHandle, *(_DWORD *)(v7 - 8));
    v2 = (char *)v7;
  }
  return CTRPluginFramework::File::Write(
           (CTRPluginFramework::GatewayRAMDumper *)((char *)v3 + 24),
           &v13,
           &v15 + 12 * (v4 >> 3) - (char *)&v13);
}
// EEC: using guessed type int __fastcall svcFlushProcessDataCache(_DWORD, _DWORD);

//----- (00000204) --------------------------------------------------------
int __fastcall CTRPluginFramework::GatewayRAMDumper::_DrawProgress(CTRPluginFramework::GatewayRAMDumper *this)
{
  CTRPluginFramework::GatewayRAMDumper *v1; // r6
  float v2; // s15
  bool v3; // r1
  __int64 v5; // [sp+0h] [bp-38h]
  __int64 v6; // [sp+8h] [bp-30h]
  __int64 v7; // [sp+10h] [bp-28h]
  float v8; // [sp+18h] [bp-20h]
  int v9; // [sp+1Ch] [bp-1Ch]

  v1 = this;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo) )
  {
    CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo);
    dword_18 = 0;
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo);
  }
  CTRPluginFramework::Renderer::SetTarget(1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v7,
    "Gateway RAM Dumper");
  CTRPluginFramework::Window::Draw(&CTRPluginFramework::Window::TopWindow, &v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
  CTRPluginFramework::ProcessingLogo::Draw(
    (CTRPluginFramework::ProcessingLogo *)&CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo,
    192,
    100);
  v5 = 498216206436LL;
  v6 = 64424509640LL;
  CTRPluginFramework::Renderer::DrawRect(&v5, &CTRPluginFramework::Color::Gainsboro, 0);
  LODWORD(v2) = (unsigned int)(float)((float)((float)((float)*((unsigned int *)v1 + 25) * 100.0)
                                            / (float)*((unsigned int *)v1 + 26))
                                    * 1.98);
  v7 = 502511173733LL;
  v8 = v2;
  v9 = 13;
  CTRPluginFramework::Renderer::DrawRect(&v7, &CTRPluginFramework::Color::LimeGreen, 1);
  CTRPluginFramework::Renderer::SetTarget(0);
  CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
  return CTRPluginFramework::Renderer::EndFrame(0, v3);
}
// 8: using guessed type char `guard variable for'CTRPluginFramework::GatewayRAMDumper::_DrawProgress(void)::logo;
// 18: using guessed type int dword_18;
// EF8: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// F00: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// F04: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// F08: using guessed type int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD);
// F0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// F14: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD);

//----- (0000033C) --------------------------------------------------------
int __fastcall CTRPluginFramework::GatewayRAMDumper::operator()(void)::{lambda(void *)#1}::_FUN(CTRPluginFramework::GatewayRAMDumper *this)
{
  CTRPluginFramework::GatewayRAMDumper *v1; // r5
  int result; // r0

  v1 = this;
  do
  {
    CTRPluginFramework::GatewayRAMDumper::_DrawProgress(v1);
    result = (unsigned __int8)CTRPluginFramework::g_progressLoop;
  }
  while ( CTRPluginFramework::g_progressLoop );
  return result;
}
// 20: using guessed type char CTRPluginFramework::g_progressLoop;

//----- (00000364) --------------------------------------------------------
int __fastcall std::operator+<char,std::char_traits<char>,std::allocator<char>>(int a1, const char *a2, int a3)
{
  int v3; // r4
  int v4; // r5
  const char *v5; // r6
  size_t v6; // r0
  size_t v7; // r7

  v3 = a1;
  v4 = a3;
  v5 = a2;
  v6 = strlen(a2);
  *(_DWORD *)v3 = v3 + 8;
  v7 = v6;
  *(_DWORD *)(v3 + 4) = 0;
  *(_BYTE *)(v3 + 8) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(v3, v6 + *(_DWORD *)(v4 + 4));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v3, v5, v7);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v3, v4);
  return v3;
}
// F30: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(_DWORD, _DWORD);
// F34: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD, _DWORD);
// F38: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);

//----- (000003C8) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (0000040C) --------------------------------------------------------
int __fastcall CTRPluginFramework::GatewayRAMDumper::_SelectRegion(CTRPluginFramework::GatewayRAMDumper *this)
{
  CTRPluginFramework::GatewayRAMDumper *v1; // r7
  int *v2; // r9
  int *v3; // r4
  int v4; // r3
  int v5; // t1
  int v6; // r5
  unsigned int v7; // r4
  int v8; // r5
  char v9; // r0
  signed int v10; // r6
  bool v11; // r1
  unsigned int v12; // r5
  CTRPluginFramework::MenuFolderImpl *v13; // r9
  int v14; // r6
  CTRPluginFramework::MenuEntryImpl *v15; // r0
  CTRPluginFramework::MenuFolderImpl *v16; // r5
  int v17; // r0
  unsigned int v18; // r4
  int v19; // r0
  CTRPluginFramework::MenuFolderImpl *v21; // r5
  int i; // r4
  CTRPluginFramework::MenuEntryImpl *v23; // r0
  int v24; // r2
  int v25; // r0
  char v26; // [sp+4h] [bp-14Ch]
  Event v27; // [sp+8h] [bp-148h]
  char v28; // [sp+2Ch] [bp-124h]
  void *v29[13]; // [sp+44h] [bp-10Ch]
  char v30; // [sp+78h] [bp-D8h]

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v28,
    "Gateway RAM Dumper");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)v29,
    (const char *)&unk_D97);
  CTRPluginFramework::Menu::Menu(&v30, &v28, v29, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v29);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v28);
  CTRPluginFramework::EventManager::EventManager((CTRPluginFramework::EventManager *)v29);
  v2 = (int *)*((_DWORD *)v1 + 28);
  v3 = (int *)*((_DWORD *)v1 + 27);
  v30 = 1;
  while ( v2 != v3 )
  {
    v4 = v3[1];
    v5 = *v3;
    v3 += 2;
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v27.eventType, "%08X - %08X", v5, v4);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v28,
      (const char *)&unk_E2B);
    v6 = operator new(0x78u);
    CTRPluginFramework::MenuEntryImpl::MenuEntryImpl();
    CTRPluginFramework::Menu::Append(&v30, v6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v28);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v27.eventType);
  }
  v7 = 0;
  v8 = 0;
  while ( 1 )
  {
    do
    {
      while ( 1 )
      {
        v9 = CTRPluginFramework::EventManager::PollEvent((CTRPluginFramework::EventManager *)v29, &v27);
        v10 = (unsigned __int8)(v8 | v9 ^ 1);
        if ( (unsigned __int8)v8 | (unsigned __int8)(v9 ^ 1) )
          break;
        if ( !LOBYTE(v27.modifiers) )
        {
          if ( v27.modifierMask == 8 )
          {
            v10 = 1;
          }
          else if ( v27.modifierMask == 4 )
          {
            v16 = (CTRPluginFramework::MenuFolderImpl *)CTRPluginFramework::Menu::GetFolder((CTRPluginFramework::Menu *)&v30);
            if ( v7 )
            {
              v18 = v10;
              while ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v16) > v18 )
              {
                v19 = CTRPluginFramework::MenuFolderImpl::operator[](v16, v18++);
                (*(void (**)(void))(*(_DWORD *)v19 + 16))();
              }
              v7 = 0;
            }
            else
            {
              while ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v16) > v7 )
              {
                v17 = CTRPluginFramework::MenuFolderImpl::operator[](v16, v7++);
                (*(void (**)(void))(*(_DWORD *)v17 + 12))();
              }
              v10 = 0;
              v7 = 1;
            }
          }
        }
        v8 = v10 | (CTRPluginFramework::Menu::ProcessEvent(&v30, &v27, 0) == -4);
      }
      CTRPluginFramework::Menu::Draw((CTRPluginFramework::Menu *)&v30);
      CTRPluginFramework::Renderer::EndFrame(0, v11);
    }
    while ( !v8 );
    v12 = 0;
    v13 = (CTRPluginFramework::MenuFolderImpl *)CTRPluginFramework::Menu::GetFolder((CTRPluginFramework::Menu *)&v30);
    v14 = 0;
    while ( CTRPluginFramework::MenuFolderImpl::ItemsCount(v13) > v12 )
    {
      v15 = (CTRPluginFramework::MenuEntryImpl *)CTRPluginFramework::MenuFolderImpl::operator[](v13, v12);
      if ( CTRPluginFramework::MenuEntryImpl::IsActivated(v15) )
        ++v14;
      ++v12;
    }
    if ( v14 )
      break;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v28,
      "Do you want to abort ?");
    CTRPluginFramework::MessageBox::MessageBox(&v26, &v28, 2, 0);
    v8 = CTRPluginFramework::MessageBox::operator()(&v26);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v26);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v28);
    if ( v8 )
      goto LABEL_27;
  }
  v21 = (CTRPluginFramework::MenuFolderImpl *)CTRPluginFramework::Menu::GetFolder((CTRPluginFramework::Menu *)&v30);
  for ( i = CTRPluginFramework::MenuFolderImpl::ItemsCount(v21) - 1; i >= 0; --i )
  {
    v23 = (CTRPluginFramework::MenuEntryImpl *)CTRPluginFramework::MenuFolderImpl::operator[](v21, i);
    if ( !CTRPluginFramework::MenuEntryImpl::IsActivated(v23) )
    {
      v24 = *((_DWORD *)v1 + 28);
      v25 = *((_DWORD *)v1 + 27) + 8 * i;
      if ( v25 + 8 != v24 )
        memmove((void *)v25, (const void *)(v25 + 8), v24 - (v25 + 8));
      *((_DWORD *)v1 + 28) -= 8;
    }
  }
  v8 = 0;
LABEL_27:
  std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(v29);
  CTRPluginFramework::Menu::~Menu((CTRPluginFramework::Menu *)&v30);
  return v8;
}
// F0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// F40: using guessed type int __fastcall CTRPluginFramework::Menu::Menu(_DWORD, _DWORD, _DWORD, _DWORD);
// F48: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// F50: using guessed type int CTRPluginFramework::MenuEntryImpl::MenuEntryImpl(void);
// F54: using guessed type int __fastcall CTRPluginFramework::Menu::Append(_DWORD, _DWORD);
// F5C: using guessed type int __fastcall CTRPluginFramework::Menu::ProcessEvent(_DWORD, _DWORD, _DWORD);
// F6C: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::operator[](_DWORD, _DWORD);
// F74: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// F78: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (0000071C) --------------------------------------------------------
unsigned __int8 *__fastcall std::__remove_if<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,__gnu_cxx::__ops::_Iter_equals_val<char const>>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3; // r3
  int i; // r12
  unsigned __int8 *result; // r0
  int v6; // lr
  unsigned __int8 *v7; // r3
  unsigned __int8 v8; // r12
  int v9; // t1
  int v10; // r3

  v3 = a1;
  for ( i = (a2 - a1) >> 2; ; --i )
  {
    result = v3;
    if ( i <= 0 )
      break;
    v6 = *a3;
    if ( *v3 == v6 )
      goto LABEL_6;
    if ( v3[1] == v6 )
    {
      result = v3 + 1;
      goto LABEL_6;
    }
    if ( v3[2] == v6 )
    {
      result = v3 + 2;
      goto LABEL_6;
    }
    v3 += 4;
    if ( result[3] == v6 )
    {
      result += 3;
      goto LABEL_6;
    }
  }
  v10 = a2 - v3;
  if ( v10 != 2 )
  {
    if ( v10 != 3 )
    {
      if ( v10 != 1 )
      {
        result = a2;
        goto LABEL_6;
      }
      goto LABEL_21;
    }
    if ( *result == *a3 )
      goto LABEL_6;
    ++result;
  }
  if ( *result == *a3 )
    goto LABEL_6;
  ++result;
LABEL_21:
  if ( *result != *a3 )
    return a2;
LABEL_6:
  if ( a2 != result )
  {
    v7 = result + 1;
    while ( a2 != v7 )
    {
      v9 = *v7++;
      v8 = v9;
      if ( *a3 != v9 )
        *result++ = v8;
    }
  }
  return result;
}

//----- (00000810) --------------------------------------------------------
int __fastcall CTRPluginFramework::GatewayRAMDumper::_OpenFile(CTRPluginFramework::GatewayRAMDumper *this)
{
  CTRPluginFramework::GatewayRAMDumper *v1; // r4
  __int64 v2; // r0
  struct tm *v3; // r0
  unsigned __int8 *v4; // r0
  unsigned __int8 *v5; // r0
  int v7; // [sp+0h] [bp-C8h]
  char v8; // [sp+4h] [bp-C4h]
  time_t timer[2]; // [sp+8h] [bp-C0h]
  __int64 v10; // [sp+14h] [bp-B4h]
  int v11[6]; // [sp+2Ch] [bp-9Ch]
  int v12[6]; // [sp+44h] [bp-84h]
  char s; // [sp+5Ch] [bp-6Ch]

  v1 = this;
  memset(&s, 0, 0x64u);
  LODWORD(v2) = time(0);
  *(_QWORD *)timer = v2;
  v3 = localtime(timer);
  strftime(&s, 0x64u, "%x-%X", v3);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v10, &s);
  LOBYTE(v12[0]) = 47;
  v4 = std::__remove_if<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,__gnu_cxx::__ops::_Iter_equals_val<char const>>(
         (unsigned __int8 *)v10,
         (unsigned __int8 *)(v10 + HIDWORD(v10)),
         (unsigned __int8 *)v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(&v10, v4, v10 + HIDWORD(v10));
  LOBYTE(v12[0]) = 58;
  v5 = std::__remove_if<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,__gnu_cxx::__ops::_Iter_equals_val<char const>>(
         (unsigned __int8 *)v10,
         (unsigned __int8 *)(v10 + HIDWORD(v10)),
         (unsigned __int8 *)v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(&v10, v5, v10 + HIDWORD(v10));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    v12,
    "Do you want to name the file ?");
  CTRPluginFramework::MessageBox::MessageBox(&v7, v12, 2, 0);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v12);
  if ( CTRPluginFramework::MessageBox::operator()(&v7) )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      v12,
      (const char *)&unk_E2B);
    CTRPluginFramework::Keyboard::Keyboard(v11, v12);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v12);
    LOBYTE(v11[0]) = 0;
    if ( CTRPluginFramework::Keyboard::Open(v11, v1) == -1 )
    {
      CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)v11);
      goto LABEL_5;
    }
    CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)v11);
  }
  else
  {
    CTRPluginFramework::Process::GetTitleID(v1);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v1, "-");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v12, &v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(v12, ".bin");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v1, v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v12);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11, "Dumps");
  if ( !CTRPluginFramework::Directory::IsExists(v11) )
    CTRPluginFramework::Directory::Create(v11);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v11, "/");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v11, v1);
  if ( CTRPluginFramework::File::Open((char *)v1 + 24, v11, 7) )
  {
    std::operator+<char,std::char_traits<char>,std::allocator<char>>((int)v12, "Error\n\nCouldn't create: \n", (int)v11);
    CTRPluginFramework::MessageBox::MessageBox(&v8, v12, 0, 0);
    CTRPluginFramework::MessageBox::operator()(&v8);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v12);
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v11);
LABEL_5:
  CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v7);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
}
// F0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// F74: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// F78: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// F98: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD);
// F9C: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);
// FA0: using guessed type int __fastcall CTRPluginFramework::Keyboard::Open(_DWORD, _DWORD);
// FA8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// FAC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// FB0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// FB4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// FB8: using guessed type int __fastcall CTRPluginFramework::Directory::IsExists(_DWORD);
// FBC: using guessed type int __fastcall CTRPluginFramework::Directory::Create(_DWORD);
// FC0: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);
// FC4: using guessed type int __fastcall CTRPluginFramework::Process::GetTitleID(_DWORD);

//----- (00000A58) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::GatewayRAMDumper::operator()(int a1, int a2)
{
  CTRPluginFramework::File *v2; // r5
  int v3; // r4
  CTRPluginFramework::Heap *v4; // r0
  CTRPluginFramework::Heap *v5; // r0
  unsigned int v6; // r1
  CTRPluginFramework::Heap *v8; // r6
  void *v9; // r1
  __int64 i; // r8
  unsigned int v11; // r3
  unsigned int v12; // r2
  unsigned int v13; // r2
  CTRPluginFramework::Heap *v14; // r3
  int v15; // r1
  _BYTE *v16; // r0
  CTRPluginFramework::Controller *v17; // r0
  void *v18; // r1
  void *v19; // r1
  void *v20; // r1
  char v21; // [sp+8h] [bp-70h]
  char v22; // [sp+Ch] [bp-6Ch]
  char v23; // [sp+10h] [bp-68h]
  char v24; // [sp+28h] [bp-50h]
  char v25; // [sp+40h] [bp-38h]

  *(_DWORD *)(a1 + 4) = 0;
  v2 = (CTRPluginFramework::File *)(a1 + 24);
  v3 = a1;
  **(_BYTE **)a1 = 0;
  v4 = (CTRPluginFramework::Heap *)CTRPluginFramework::File::Seek(a1 + 24, a2, 0, 0, 1);
  *(_DWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 100) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  v5 = (CTRPluginFramework::Heap *)(CTRPluginFramework::Heap::SpaceFree(v4) & 0xFFFFF000);
  if ( (unsigned int)v5 > 0x60000 )
  {
    v5 = (CTRPluginFramework::Heap *)393216;
  }
  else if ( !v5 )
  {
LABEL_3:
    CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
      (int *)&v23,
      (unsigned __int8 *)&CTRPluginFramework::Color::Red);
    CTRPluginFramework::operator<<(&v24, &v23, "Error");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v25,
      "An error occured (buffer alloc failed)");
    CTRPluginFramework::MessageBox::MessageBox(&v22, &v24, &v25, 0, 0);
    CTRPluginFramework::MessageBox::operator()(&v22);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v22);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
    return 1;
  }
  v8 = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Alloc(v5, v6);
  if ( !v8 )
    goto LABEL_3;
  CTRPluginFramework::PluginMenuImpl::GetRegionsList(v3 + 108);
  if ( CTRPluginFramework::GatewayRAMDumper::_SelectRegion((CTRPluginFramework::GatewayRAMDumper *)v3) )
  {
    CTRPluginFramework::Heap::Free(v8, v9);
  }
  else
  {
    CTRPluginFramework::GatewayRAMDumper::_OpenFile((CTRPluginFramework::GatewayRAMDumper *)v3);
    if ( CTRPluginFramework::File::IsOpen(v2) )
    {
      CTRPluginFramework::GatewayRAMDumper::_WriteHeader((CTRPluginFramework::GatewayRAMDumper *)v3);
      CTRPluginFramework::Task::Task(
        (CTRPluginFramework::Task *)&v21,
        (int (__cdecl *)(void *))CTRPluginFramework::GatewayRAMDumper::operator()(void)::{lambda(void *)#1}::_FUN,
        (void *)v3,
        5);
      CTRPluginFramework::g_progressLoop = 1;
      CTRPluginFramework::Task::Start((CTRPluginFramework::Task *)&v21);
      for ( i = *(_QWORD *)(v3 + 108); HIDWORD(i) != (_DWORD)i; LODWORD(i) = i + 8 )
      {
        *(_DWORD *)(v3 + 88) = *(_DWORD *)i;
        *(_DWORD *)(v3 + 92) = *(_DWORD *)(i + 4);
        while ( 1 )
        {
          v11 = *(_DWORD *)(v3 + 88);
          v12 = *(_DWORD *)(v3 + 92);
          if ( v11 >= v12 )
            break;
          v13 = v12 - v11;
          if ( v13 >= 0x60000 )
            v13 = 393216;
          v14 = v8;
          while ( v14 != (CTRPluginFramework::Heap *)((char *)v8 + 4 * (v13 >> 2)) )
          {
            *(_DWORD *)v14 = **(_DWORD **)(v3 + 88);
            v14 = (CTRPluginFramework::Heap *)((char *)v14 + 4);
            *(_DWORD *)(v3 + 88) += 4;
          }
          v15 = (int)v14 + v13 - 4 * (v13 >> 2);
          while ( v14 != (CTRPluginFramework::Heap *)v15 )
          {
            v16 = *(_BYTE **)(v3 + 88);
            *(_DWORD *)(v3 + 88) = v16 + 1;
            *(_BYTE *)v14 = *v16;
            v14 = (CTRPluginFramework::Heap *)((char *)v14 + 1);
          }
          *(_DWORD *)(v3 + 100) += v13;
          v17 = (CTRPluginFramework::Controller *)CTRPluginFramework::File::Write(v2, (const void *)v8, v13);
          CTRPluginFramework::Controller::Update(v17);
          if ( CTRPluginFramework::Controller::IsKeyPressed(2) )
          {
            CTRPluginFramework::g_progressLoop = 0;
            CTRPluginFramework::Task::Wait((CTRPluginFramework::Task *)&v21);
            CTRPluginFramework::File::Close(v2);
            CTRPluginFramework::Heap::Free(v8, v18);
            std::operator+<char,std::char_traits<char>,std::allocator<char>>((int)&v25, "Dumps/", v3);
            CTRPluginFramework::File::Remove(&v25);
            CTRPluginFramework::Heap::Free(v8, v19);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
            goto LABEL_24;
          }
        }
      }
      CTRPluginFramework::g_progressLoop = 0;
      CTRPluginFramework::Task::Wait((CTRPluginFramework::Task *)&v21);
      CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
        (int *)&v23,
        (unsigned __int8 *)&CTRPluginFramework::Color::LimeGreen);
      CTRPluginFramework::operator<<(&v24, &v23, "Info");
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v25,
        "Dump finished !");
      CTRPluginFramework::MessageBox::MessageBox(&v22, &v24, &v25, 0, 0);
      CTRPluginFramework::MessageBox::operator()(&v22);
      CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v22);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v25);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v24);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v23);
      CTRPluginFramework::File::Flush(v2);
      CTRPluginFramework::File::Close(v2);
      CTRPluginFramework::Heap::Free(v8, v20);
LABEL_24:
      CTRPluginFramework::Task::~Task((CTRPluginFramework::Task *)&v21);
    }
  }
  return 1;
}
// 20: using guessed type char CTRPluginFramework::g_progressLoop;
// F0C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// F78: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// FC8: using guessed type int __fastcall CTRPluginFramework::File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// FD0: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// FD4: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// FDC: using guessed type int __fastcall CTRPluginFramework::PluginMenuImpl::GetRegionsList(_DWORD);
// FF4: using guessed type int __fastcall CTRPluginFramework::Controller::IsKeyPressed(_DWORD);
// 1000: using guessed type int __fastcall CTRPluginFramework::File::Remove(_DWORD);

// ALL OK, 12 function(s) have been successfully decompiled
