/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

bool __fastcall CTRPluginFramework::ThreadPredicate(unsigned __int8 *a1);
void **__fastcall std::vector<MemInfo,std::allocator<MemInfo>>::~vector(void **a1);
int __fastcall CTRPluginFramework::ProcessImpl::Initialize(CTRPluginFramework::ProcessImpl *this);
signed int IsPaused();
int __fastcall CTRPluginFramework::ProcessImpl::Play(int result, int a2);
int __fastcall CTRPluginFramework::ProcessImpl::PatchProcess(CTRPluginFramework::ProcessImpl *this, void *a2, unsigned __int8 *a3, unsigned int a4, unsigned __int8 *a5);
int __fastcall CTRPluginFramework::ProcessImpl::LockGameThreads(CTRPluginFramework::ProcessImpl *this, int a2, int a3, int a4, int a5);
int __fastcall CTRPluginFramework::ProcessImpl::UnlockGameThreads(CTRPluginFramework::ProcessImpl *this, int a2, int a3, int a4, int a5);
signed int __fastcall CTRPluginFramework::ProcessImpl::IsValidAddress(CTRPluginFramework::ProcessImpl *this, unsigned int a2, int a3);
int __fastcall CTRPluginFramework::ProcessImpl::GetPAFromVA(CTRPluginFramework::ProcessImpl *this, unsigned int a2, int a3);
CTRPluginFramework::ProcessImpl *__fastcall CTRPluginFramework::ProcessImpl::GetMemRegion(CTRPluginFramework::ProcessImpl *this, unsigned int a2);
_DWORD *__fastcall CTRPluginFramework::ProcessImpl::GetNextRegion(int a1, int a2);
_DWORD *__fastcall CTRPluginFramework::ProcessImpl::GetPreviousRegion(int a1, int a2);
void __fastcall std::vector<KThread *,std::allocator<KThread *>>::_M_realloc_insert<KThread * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall std::vector<KThread *,std::allocator<KThread *>>::push_back(_DWORD *a1, _DWORD *a2);
void __fastcall std::vector<MemInfo,std::allocator<MemInfo>>::_M_realloc_insert<MemInfo const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
int __fastcall CTRPluginFramework::ProcessImpl::UpdateMemRegions(CTRPluginFramework::ProcessImpl *this);
int __fastcall CTRPluginFramework::ProcessImpl::Pause(int result, int a2);
int __fastcall std::__uninitialized_default_n_1<true>::__uninit_default_n<HandleDescriptor *,unsigned int>(_DWORD *a1, int a2);
int __fastcall CTRPluginFramework::ProcessImpl::GetHandleTable(CTRPluginFramework::System *a1, int a2);
void __fastcall CTRPluginFramework::ProcessImpl::GetGameThreads(_DWORD *a1);
int GLOBAL__sub_I__ZN18CTRPluginFramework11ProcessImpl13ProcessHandleE();
// void __cdecl operator delete(void *); idb
// void *memset(void *s, int c, size_t n);
// _DWORD CTRPluginFramework::System::IsNew3DS(CTRPluginFramework::System *__hidden this); idb
// _DWORD KProcess::GetCurrent(KProcess *__hidden this); idb
// _DWORD __cdecl Kernel::Memcpy(Kernel *__hidden this, void *, const void *, unsigned int); idb
// _DWORD KProcess::PatchCore2Access(KProcess *__hidden this); idb
// int __fastcall svcOpenProcess(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::OSDImpl::ResumeFrame(CTRPluginFramework::OSDImpl *__hidden this, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Process::CopyMemory(CTRPluginFramework::Process *__hidden this, void *, const void *, unsigned int); idb
// int __fastcall svcControlProcess(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *); weak
// _DWORD __cdecl CTRPluginFramework::Lock::~Lock(CTRPluginFramework::Lock *__hidden this); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall svcQueryProcessMemory(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall svcSignalEvent(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::OSDImpl::WaitFramePaused(CTRPluginFramework::OSDImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::Acquire(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD CTRPluginFramework::OSDImpl::UpdateScreens(CTRPluginFramework::OSDImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::ApplyFading(CTRPluginFramework::ScreenImpl *__hidden this); idb
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// _DWORD KAutoObject::GetType(KAutoObject *__hidden this); idb
// _DWORD KThread::IsPluginThread(KThread *__hidden this); idb
// _DWORD CTRPluginFramework::Mutex::Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_1; // weak
int CTRPluginFramework::ProcessImpl::KProcessPtr; // weak
_UNKNOWN CTRPluginFramework::ProcessImpl::CodeSet; // weak
_UNKNOWN unk_64; // weak
char byte_68; // weak
char byte_69; // weak
char byte_6A; // weak
char byte_6B; // weak
char byte_6C; // weak
char byte_6D; // weak
char byte_6E; // weak
char byte_6F; // weak
int CTRPluginFramework::ProcessImpl::ProcessId; // weak
int CTRPluginFramework::ProcessImpl::MainThread; // weak
_UNKNOWN CTRPluginFramework::ProcessImpl::TitleId; // weak
int CTRPluginFramework::ProcessImpl::ProcessHandle; // weak
int CTRPluginFramework::ProcessImpl::IsPaused; // weak
_UNKNOWN CTRPluginFramework::ProcessImpl::MemoryMutex; // weak
int CTRPluginFramework::ProcessImpl::MemRegions; // weak
int dword_98; // weak
int dword_9C; // weak
_UNKNOWN locret_100; // weak
_UNKNOWN loc_158; // weak
// extern _UNKNOWN gspEvent; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Bottom; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Top; weak
// extern _UNKNOWN _dso_handle; weak


//----- (000000B0) --------------------------------------------------------
bool __fastcall CTRPluginFramework::ThreadPredicate(unsigned __int8 *a1)
{
  return *(_DWORD *)(a1[148] | (a1[149] << 8) | (a1[150] << 16) | (a1[151] << 24)) != 559175204;
}

//----- (000000E4) --------------------------------------------------------
void **__fastcall std::vector<MemInfo,std::allocator<MemInfo>>::~vector(void **a1)
{
  void **v1; // r4
  void *v2; // r0

  v1 = a1;
  v2 = *a1;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (00000104) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::Initialize(CTRPluginFramework::ProcessImpl *this)
{
  CTRPluginFramework::System *v1; // r0
  KProcess *v2; // r5
  unsigned int v3; // r3
  unsigned int v4; // r3
  __int64 v5; // r2
  int v7; // [sp+0h] [bp-110h]
  void *v8; // [sp+B0h] [bp-60h]
  int v9; // [sp+B4h] [bp-5Ch]
  void *v10; // [sp+B8h] [bp-58h]
  int v11; // [sp+BCh] [bp-54h]
  int v12; // [sp+C0h] [bp-50h]
  int v13; // [sp+C8h] [bp-48h]

  v1 = (CTRPluginFramework::System *)memset(&v7, 0, 0x100u);
  v2 = (KProcess *)CTRPluginFramework::System::IsNew3DS(v1);
  CTRPluginFramework::ProcessImpl::KProcessPtr = KProcess::GetCurrent(v2);
  Kernel::Memcpy((Kernel *)&v7, (void *)CTRPluginFramework::ProcessImpl::KProcessPtr, &locret_100, v3);
  if ( v2 )
  {
    Kernel::Memcpy((Kernel *)&CTRPluginFramework::ProcessImpl::CodeSet, v10, &unk_64, v4);
    CTRPluginFramework::ProcessImpl::ProcessId = v11;
    CTRPluginFramework::ProcessImpl::MainThread = v13;
    KProcess::PatchCore2Access((KProcess *)CTRPluginFramework::ProcessImpl::KProcessPtr);
  }
  else
  {
    Kernel::Memcpy((Kernel *)&CTRPluginFramework::ProcessImpl::CodeSet, v8, &unk_64, v4);
    CTRPluginFramework::ProcessImpl::ProcessId = v9;
    CTRPluginFramework::ProcessImpl::MainThread = v12;
  }
  LODWORD(v5) = (unsigned __int8)byte_68 | ((unsigned __int8)byte_69 << 8) | ((unsigned __int8)byte_6A << 16) | ((unsigned __int8)byte_6B << 24);
  HIDWORD(v5) = (unsigned __int8)byte_6C | ((unsigned __int8)byte_6D << 8) | ((unsigned __int8)byte_6E << 16) | ((unsigned __int8)byte_6F << 24);
  CTRPluginFramework::ProcessImpl::TitleId = v5;
  return svcOpenProcess(&CTRPluginFramework::ProcessImpl::ProcessHandle, CTRPluginFramework::ProcessImpl::ProcessId);
}
// 8: using guessed type int CTRPluginFramework::ProcessImpl::KProcessPtr;
// 68: using guessed type char byte_68;
// 69: using guessed type char byte_69;
// 6A: using guessed type char byte_6A;
// 6B: using guessed type char byte_6B;
// 6C: using guessed type char byte_6C;
// 6D: using guessed type char byte_6D;
// 6E: using guessed type char byte_6E;
// 6F: using guessed type char byte_6F;
// 70: using guessed type int CTRPluginFramework::ProcessImpl::ProcessId;
// 74: using guessed type int CTRPluginFramework::ProcessImpl::MainThread;
// 80: using guessed type int CTRPluginFramework::ProcessImpl::ProcessHandle;
// B34: using guessed type int __fastcall svcOpenProcess(_DWORD, _DWORD);

//----- (000001E8) --------------------------------------------------------
signed int IsPaused()
{
  signed int result; // r0

  result = CTRPluginFramework::ProcessImpl::IsPaused;
  if ( CTRPluginFramework::ProcessImpl::IsPaused )
    result = 1;
  return result;
}
// 84: using guessed type int CTRPluginFramework::ProcessImpl::IsPaused;

//----- (00000200) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::Play(int result, int a2)
{
  int v2; // r3

  if ( CTRPluginFramework::ProcessImpl::IsPaused )
  {
    v2 = CTRPluginFramework::ProcessImpl::IsPaused-- - 1;
    if ( result )
    {
      CTRPluginFramework::ProcessImpl::IsPaused = 0;
    }
    else if ( v2 )
    {
      return result;
    }
    result = CTRPluginFramework::OSDImpl::ResumeFrame(0, a2);
  }
  return result;
}
// 84: using guessed type int CTRPluginFramework::ProcessImpl::IsPaused;

//----- (0000023C) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::PatchProcess(CTRPluginFramework::ProcessImpl *this, void *a2, unsigned __int8 *a3, unsigned int a4, unsigned __int8 *a5)
{
  CTRPluginFramework::Process *v5; // r4
  void *v6; // r5
  unsigned __int8 *v7; // r6
  int result; // r0

  v5 = this;
  v6 = a2;
  v7 = a3;
  if ( !a4
    || (result = CTRPluginFramework::Process::CopyMemory((CTRPluginFramework::Process *)a4, (void *)this, a3, a4)) != 0 )
  {
    result = CTRPluginFramework::Process::CopyMemory(v5, v6, v7, a4);
  }
  return result;
}

//----- (0000027C) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::LockGameThreads(CTRPluginFramework::ProcessImpl *this, int a2, int a3, int a4, int a5)
{
  return svcControlProcess(-32767, 5, 1, CTRPluginFramework::ThreadPredicate, a5);
}
// B40: using guessed type int __fastcall svcControlProcess(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000298) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::UnlockGameThreads(CTRPluginFramework::ProcessImpl *this, int a2, int a3, int a4, int a5)
{
  return svcControlProcess(-32767, 5, 0, CTRPluginFramework::ThreadPredicate, a5);
}
// B40: using guessed type int __fastcall svcControlProcess(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000002B4) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::ProcessImpl::IsValidAddress(CTRPluginFramework::ProcessImpl *this, unsigned int a2, int a3)
{
  CTRPluginFramework::ProcessImpl *v3; // r5
  int v4; // r3
  _DWORD *v5; // r2
  signed int v6; // r4
  CTRPluginFramework::ProcessImpl *v8; // [sp+0h] [bp-18h]
  unsigned int v9; // [sp+4h] [bp-14h]
  int v10; // [sp+8h] [bp-10h]

  v8 = this;
  v9 = a2;
  v10 = a3;
  v3 = this;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v8,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::ProcessImpl::MemoryMutex);
  v4 = CTRPluginFramework::ProcessImpl::MemRegions;
  while ( 1 )
  {
    v5 = (_DWORD *)v4;
    if ( dword_98 == v4 )
      break;
    v4 += 16;
    if ( (unsigned int)v3 - *v5 < *(_DWORD *)(v4 - 12) )
    {
      v6 = 1;
      goto LABEL_5;
    }
  }
  v6 = 0;
LABEL_5:
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v8);
  return v6;
}
// 94: using guessed type int CTRPluginFramework::ProcessImpl::MemRegions;
// 98: using guessed type int dword_98;
// B44: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);

//----- (0000031C) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::GetPAFromVA(CTRPluginFramework::ProcessImpl *this, unsigned int a2, int a3)
{
  int v4; // [sp+4h] [bp-Ch]
  int v5; // [sp+8h] [bp-8h]

  v5 = a3;
  v4 = 0;
  svcControlProcess(CTRPluginFramework::ProcessImpl::ProcessHandle, 4, &v4, this, this);
  return v4;
}
// 80: using guessed type int CTRPluginFramework::ProcessImpl::ProcessHandle;
// B40: using guessed type int __fastcall svcControlProcess(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000350) --------------------------------------------------------
CTRPluginFramework::ProcessImpl *__fastcall CTRPluginFramework::ProcessImpl::GetMemRegion(CTRPluginFramework::ProcessImpl *this, unsigned int a2)
{
  CTRPluginFramework::ProcessImpl *v2; // r4
  unsigned int v3; // r6
  int v4; // r2
  int *v5; // r3
  int v6; // r0
  int v7; // r1
  int v8; // r2
  int v9; // r3
  CTRPluginFramework::ProcessImpl *v11; // [sp+0h] [bp-18h]
  unsigned int v12; // [sp+4h] [bp-14h]

  v11 = this;
  v12 = a2;
  v2 = this;
  v3 = a2;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v11,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::ProcessImpl::MemoryMutex);
  v4 = CTRPluginFramework::ProcessImpl::MemRegions;
  while ( 1 )
  {
    v5 = (int *)v4;
    if ( dword_98 == v4 )
      break;
    v4 += 16;
    if ( v3 - *v5 < *(_DWORD *)(v4 - 12) )
    {
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v9 = v5[3];
      *(_DWORD *)v2 = v6;
      *((_DWORD *)v2 + 1) = v7;
      *((_DWORD *)v2 + 2) = v8;
      *((_DWORD *)v2 + 3) = v9;
      goto LABEL_5;
    }
  }
  memset((void *)v2, 0, 0x10u);
LABEL_5:
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v11);
  return v2;
}
// 94: using guessed type int CTRPluginFramework::ProcessImpl::MemRegions;
// 98: using guessed type int dword_98;
// B44: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);

//----- (000003CC) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::ProcessImpl::GetNextRegion(int a1, int a2)
{
  _DWORD *v2; // r4
  int *v3; // r5
  int *i; // r3
  int v5; // r2
  bool v6; // zf
  int v7; // r0
  int v8; // r1
  int v9; // r2
  int v10; // r3
  int v12; // [sp+0h] [bp-18h]
  int v13; // [sp+4h] [bp-14h]

  v12 = a1;
  v13 = a2;
  v2 = (_DWORD *)a1;
  v3 = (int *)a2;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v12,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::ProcessImpl::MemoryMutex);
  for ( i = (int *)CTRPluginFramework::ProcessImpl::MemRegions; i != (int *)dword_98; i += 4 )
  {
    v5 = *i;
    if ( *i > (unsigned int)*v3 || *i == *v3 && i[1] > (unsigned int)v3[1] )
    {
      v6 = v5 == 31981568;
      if ( v5 != 31981568 )
        v6 = (v5 & 0xFEFFFFFF) == 100663296;
      if ( !v6 && i[3] != 6 )
      {
        v7 = *i;
        v8 = i[1];
        v9 = i[2];
        v10 = i[3];
        goto LABEL_11;
      }
    }
  }
  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  v10 = v3[3];
LABEL_11:
  *v2 = v7;
  v2[1] = v8;
  v2[2] = v9;
  v2[3] = v10;
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v12);
  return v2;
}
// 94: using guessed type int CTRPluginFramework::ProcessImpl::MemRegions;
// 98: using guessed type int dword_98;
// B44: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);

//----- (00000468) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::ProcessImpl::GetPreviousRegion(int a1, int a2)
{
  _DWORD *v2; // r4
  int *v3; // r5
  int *v4; // r3
  int *v5; // r2
  int *v6; // r0
  int v7; // r1
  bool v8; // zf
  int v9; // r0
  int v10; // r1
  int v11; // r2
  int v12; // r3
  int v14; // [sp+0h] [bp-18h]
  int v15; // [sp+4h] [bp-14h]

  v14 = a1;
  v15 = a2;
  v2 = (_DWORD *)a1;
  v3 = (int *)a2;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v14,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::ProcessImpl::MemoryMutex);
  v4 = 0;
  v5 = (int *)CTRPluginFramework::ProcessImpl::MemRegions;
  while ( 1 )
  {
    v6 = v5;
    if ( v5 == (int *)dword_98 )
    {
      v9 = *v3;
      v10 = v3[1];
      v11 = v3[2];
      v12 = v3[3];
      goto LABEL_13;
    }
    v7 = *v5;
    if ( *v5 > (unsigned int)*v3 || *v5 == *v3 && v5[1] >= (unsigned int)v3[1] )
    {
      v8 = v7 == 31981568;
      if ( v7 != 31981568 )
        v8 = (v7 & 0xFEFFFFFF) == 100663296;
      if ( !v8 && v5[3] != 6 )
        break;
    }
    v5 += 4;
    v4 = v6;
  }
  if ( !v4 )
    v4 = v5;
  v9 = *v4;
  v10 = v4[1];
  v11 = v4[2];
  v12 = v4[3];
LABEL_13:
  *v2 = v9;
  v2[1] = v10;
  v2[2] = v11;
  v2[3] = v12;
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v14);
  return v2;
}
// 94: using guessed type int CTRPluginFramework::ProcessImpl::MemRegions;
// 98: using guessed type int dword_98;
// B44: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);

//----- (00000518) --------------------------------------------------------
void __fastcall std::vector<KThread *,std::allocator<KThread *>>::_M_realloc_insert<KThread * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (000005DC) --------------------------------------------------------
void __fastcall std::vector<KThread *,std::allocator<KThread *>>::push_back(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2; // r2
  _BYTE *v3; // r1

  v2 = a2;
  v3 = (_BYTE *)a1[1];
  if ( v3 == (_BYTE *)a1[2] )
  {
    std::vector<KThread *,std::allocator<KThread *>>::_M_realloc_insert<KThread * const&>(a1, v3, v2);
  }
  else
  {
    *(_DWORD *)v3 = *v2;
    a1[1] += 4;
  }
}

//----- (00000610) --------------------------------------------------------
void __fastcall std::vector<MemInfo,std::allocator<MemInfo>>::_M_realloc_insert<MemInfo const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r6
  _BYTE *v4; // r9
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r7
  _BYTE *v10; // r8
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r10
  int v14; // r1
  int v15; // r2
  int v16; // r3
  char *v17; // r12
  char *v18; // r5
  int v19; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 4;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 4;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0xFFFFFFF )
  {
    v8 = 0xFFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(16 * v8);
LABEL_8:
  v14 = v11[1];
  v15 = v11[2];
  v16 = v11[3];
  v17 = &v13[v12];
  *(_DWORD *)v17 = *v11;
  *((_DWORD *)v17 + 1) = v14;
  *((_DWORD *)v17 + 2) = v15;
  *((_DWORD *)v17 + 3) = v16;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v18 = &v13[v12 + 16];
  if ( v10 != v4 )
    memcpy(v18, v10, v4 - v10);
  v19 = (int)&v18[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v19;
  v9[2] = &v13[16 * v8];
}

//----- (000006D8) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::UpdateMemRegions(CTRPluginFramework::ProcessImpl *this)
{
  unsigned int v1; // r5
  _DWORD *v3; // r12
  int v4; // r1
  int v5; // r2
  int v6; // r3
  char v7; // [sp+4h] [bp-34h]
  char v8; // [sp+8h] [bp-30h]
  int v9; // [sp+10h] [bp-28h]
  int v10; // [sp+14h] [bp-24h]
  int v11; // [sp+18h] [bp-20h]
  int v12; // [sp+1Ch] [bp-1Ch]

  v1 = 0x100000;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v8,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::ProcessImpl::MemoryMutex);
  if ( CTRPluginFramework::ProcessImpl::MemRegions != dword_98 )
    dword_98 = CTRPluginFramework::ProcessImpl::MemRegions;
  do
  {
    if ( svcQueryProcessMemory(&v9, &v7, CTRPluginFramework::ProcessImpl::ProcessHandle, v1) >= 0 )
    {
      if ( v12 & 0xFFFFFFFD && v11 & 1 )
      {
        v3 = (_DWORD *)dword_98;
        if ( dword_98 == dword_9C )
        {
          std::vector<MemInfo,std::allocator<MemInfo>>::_M_realloc_insert<MemInfo const&>(
            &CTRPluginFramework::ProcessImpl::MemRegions,
            (_BYTE *)dword_98,
            &v9);
        }
        else
        {
          v4 = v10;
          v5 = v11;
          v6 = v12;
          *(_DWORD *)dword_98 = v9;
          v3[1] = v4;
          v3[2] = v5;
          v3[3] = v6;
          dword_98 += 16;
        }
      }
      v1 = v9 + v10;
    }
    else
    {
      v1 += 4096;
    }
  }
  while ( v1 <= 0x3FFFFFFF );
  return CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v8);
}
// 80: using guessed type int CTRPluginFramework::ProcessImpl::ProcessHandle;
// 94: using guessed type int CTRPluginFramework::ProcessImpl::MemRegions;
// 98: using guessed type int dword_98;
// 9C: using guessed type int dword_9C;
// B44: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// B58: using guessed type int __fastcall svcQueryProcessMemory(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000007AC) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::Pause(int result, int a2)
{
  bool v2; // cf
  bool v3; // zf
  int v4; // r7
  CTRPluginFramework::OSDImpl *v5; // r0
  int i; // r4
  unsigned int v7; // r1
  CTRPluginFramework::ProcessImpl *v8; // r0

  v2 = (unsigned int)CTRPluginFramework::ProcessImpl::IsPaused < 0xFFFFFFFF;
  v3 = CTRPluginFramework::ProcessImpl::IsPaused++ == 0;
  if ( v3 || !v2 )
  {
    v4 = result;
    v5 = (CTRPluginFramework::OSDImpl *)svcSignalEvent(gspEvent, a2);
    CTRPluginFramework::OSDImpl::WaitFramePaused(v5);
    for ( i = CTRPluginFramework::ScreenImpl::Acquire(CTRPluginFramework::ScreenImpl::Bottom);
          i | CTRPluginFramework::ScreenImpl::Acquire(CTRPluginFramework::ScreenImpl::Top);
          i = CTRPluginFramework::ScreenImpl::Acquire(CTRPluginFramework::ScreenImpl::Bottom) )
    {
      CTRPluginFramework::OSDImpl::ResumeFrame((CTRPluginFramework::OSDImpl *)&unk_1, v7);
    }
    v8 = (CTRPluginFramework::ProcessImpl *)CTRPluginFramework::OSDImpl::UpdateScreens(0);
    result = CTRPluginFramework::ProcessImpl::UpdateMemRegions(v8);
    if ( v4 )
      result = CTRPluginFramework::ScreenImpl::ApplyFading((CTRPluginFramework::ScreenImpl *)result);
  }
  return result;
}
// 84: using guessed type int CTRPluginFramework::ProcessImpl::IsPaused;
// B5C: using guessed type int __fastcall svcSignalEvent(_DWORD, _DWORD);

//----- (00000844) --------------------------------------------------------
int __fastcall std::__uninitialized_default_n_1<true>::__uninit_default_n<HandleDescriptor *,unsigned int>(_DWORD *a1, int a2)
{
  int v2; // r2
  _DWORD *v3; // r3

  v2 = a2;
  v3 = a1;
  while ( v2 )
  {
    *v3 = 0;
    v3[1] = 0;
    --v2;
    v3 += 2;
  }
  return (int)&a1[2 * a2];
}

//----- (00000874) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessImpl::GetHandleTable(CTRPluginFramework::System *a1, int a2)
{
  unsigned __int8 *v2; // r6
  int v3; // r7
  unsigned int v4; // r3
  _DWORD *v5; // r0
  unsigned int v6; // r5
  unsigned int v7; // r3
  signed int v8; // r2
  unsigned int v9; // r8
  int v10; // r3
  int v12; // r1
  unsigned __int8 v13; // cf
  unsigned int v14; // r3
  int v15; // r4
  char *v16; // r0
  int v17; // r3
  char *v18; // r9
  int v19; // r10
  int v20; // r8
  int v21; // r3

  v2 = (unsigned __int8 *)a1;
  v3 = a2;
  if ( CTRPluginFramework::System::IsNew3DS(a1) )
    v4 = 220;
  else
    v4 = 212;
  Kernel::Memcpy((Kernel *)v2, (void *)(CTRPluginFramework::ProcessImpl::KProcessPtr + v4), &loc_158, v4);
  v5 = *(_DWORD **)(v3 + 4);
  v6 = (signed __int16)(v2[14] | (unsigned __int16)(v2[15] << 8));
  v7 = ((signed int)v5 - *(_DWORD *)v3) >> 3;
  if ( v6 <= v7 )
  {
    if ( v6 < v7 )
    {
      v21 = *(_DWORD *)v3 + 8 * v6;
      if ( v5 != (_DWORD *)v21 )
        *(_DWORD *)(v3 + 4) = v21;
    }
  }
  else
  {
    v8 = 0x1FFFFFFF;
    v9 = v6 - v7;
    if ( v6 - v7 > (*(_DWORD *)(v3 + 8) - (signed int)v5) >> 3 )
    {
      if ( v9 > 0x1FFFFFFF - v7 )
        std::__throw_length_error("vector::_M_default_append");
      if ( v7 < v9 )
        v12 = v6 - v7;
      else
        v12 = ((signed int)v5 - *(_DWORD *)v3) >> 3;
      v13 = __CFADD__(v7, v12);
      v14 = v7 + v12;
      if ( !v13 && v14 < 0x1FFFFFFF )
        v8 = v14;
      v15 = 8 * v8;
      v16 = (char *)operator new(8 * v8);
      v17 = *(_DWORD *)(v3 + 4);
      v18 = v16;
      v19 = v17 - *(_DWORD *)v3;
      if ( *(_DWORD *)v3 != v17 )
        memmove(v16, *(const void **)v3, v17 - *(_DWORD *)v3);
      v20 = std::__uninitialized_default_n_1<true>::__uninit_default_n<HandleDescriptor *,unsigned int>(&v18[v19], v9);
      if ( *(_DWORD *)v3 )
        operator delete(*(void **)v3);
      *(_DWORD *)v3 = v18;
      *(_DWORD *)(v3 + 4) = v20;
      *(_DWORD *)(v3 + 8) = &v18[v15];
    }
    else
    {
      *(_DWORD *)(v3 + 4) = std::__uninitialized_default_n_1<true>::__uninit_default_n<HandleDescriptor *,unsigned int>(
                              v5,
                              v6 - v7);
    }
  }
  v10 = *v2 | (v2[1] << 8) | (v2[2] << 16);
  return Kernel::Memcpy(*(Kernel **)v3, (void *)(v10 | (v2[3] << 24)), (const void *)(8 * v6), v10);
}
// 8: using guessed type int CTRPluginFramework::ProcessImpl::KProcessPtr;

//----- (000009C8) --------------------------------------------------------
void __fastcall CTRPluginFramework::ProcessImpl::GetGameThreads(_DWORD *a1)
{
  _DWORD *v1; // r5
  unsigned __int8 *v2; // r4
  int v3; // r6
  KThread *v4; // [sp+0h] [bp-178h]
  void *v5; // [sp+4h] [bp-174h]
  int v6; // [sp+8h] [bp-170h]
  int v7; // [sp+Ch] [bp-16Ch]
  char v8; // [sp+10h] [bp-168h]

  v1 = a1;
  if ( *a1 != a1[1] )
    a1[1] = *a1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  CTRPluginFramework::ProcessImpl::GetHandleTable((CTRPluginFramework::System *)&v8, (int)&v5);
  std::vector<KThread *,std::allocator<KThread *>>::push_back(v1, &CTRPluginFramework::ProcessImpl::MainThread);
  v2 = (unsigned __int8 *)v5;
  v3 = v6;
  while ( (unsigned __int8 *)v3 != v2 )
  {
    if ( KAutoObject::GetType((KAutoObject *)(v2[4] | (v2[5] << 8) | (v2[6] << 16) | (v2[7] << 24))) == 141 )
    {
      v4 = (KThread *)(v2[4] | (v2[5] << 8) | (v2[6] << 16) | (v2[7] << 24));
      if ( !KThread::IsPluginThread(v4) )
        std::vector<KThread *,std::allocator<KThread *>>::push_back(v1, &v4);
    }
    v2 += 8;
  }
  if ( v5 )
    operator delete(v5);
}
// 74: using guessed type int CTRPluginFramework::ProcessImpl::MainThread;

//----- (00000AA0) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework11ProcessImpl13ProcessHandleE()
{
  CTRPluginFramework::Mutex::Mutex((CTRPluginFramework::Mutex *)&CTRPluginFramework::ProcessImpl::MemoryMutex);
  _aeabi_atexit(&CTRPluginFramework::ProcessImpl::MemoryMutex, &CTRPluginFramework::Mutex::~Mutex, &_dso_handle);
  CTRPluginFramework::ProcessImpl::MemRegions = 0;
  dword_98 = 0;
  dword_9C = 0;
  return _aeabi_atexit(
           &CTRPluginFramework::ProcessImpl::MemRegions,
           std::vector<MemInfo,std::allocator<MemInfo>>::~vector,
           &_dso_handle);
}
// 94: using guessed type int CTRPluginFramework::ProcessImpl::MemRegions;
// 98: using guessed type int dword_98;
// 9C: using guessed type int dword_9C;
// B8C: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// B94: using guessed type _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this);

// ALL OK, 22 function(s) have been successfully decompiled
