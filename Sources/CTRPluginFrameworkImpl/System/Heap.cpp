/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

signed int __fastcall addrMapNodeComparator(int a1, int a2);
void addrMapNodeDestructor(void *ptr);
int __fastcall CTRPluginFramework::Heap::MemAlign(CTRPluginFramework::Heap *this, unsigned int a2, unsigned int a3);
int __fastcall CTRPluginFramework::Heap::Alloc(CTRPluginFramework::Heap *this, unsigned int a2, unsigned int a3);
void *__fastcall CTRPluginFramework::Heap::Realloc(CTRPluginFramework::Heap *this, void *a2, unsigned int a3);
int __fastcall CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *this, void *a2);
int __fastcall CTRPluginFramework::Heap::SpaceFree(CTRPluginFramework::Heap *this);
int GLOBAL__sub_I__ZN18CTRPluginFramework4Heap12__ctrpf_heapE();
// _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *); weak
// _DWORD __cdecl CTRPluginFramework::Lock::~Lock(CTRPluginFramework::Lock *__hidden this); idb
// void *malloc(size_t size);
// int __fastcall rbtree_init(_DWORD, _DWORD); weak
// int __fastcall MemPool::Allocate(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall MemPool::Deallocate(_DWORD, _DWORD); weak
// int __fastcall rbtree_insert(_DWORD, _DWORD); weak
// void abort(void);
// int __fastcall rbtree_find(_DWORD, _DWORD); weak
// void *memcpy(void *dest, const void *src, size_t n);
// int __fastcall rbtree_remove(_DWORD, _DWORD, _DWORD); weak
// _DWORD MemPool::GetFreeSpace(MemPool *__hidden this); weak
// _DWORD CTRPluginFramework::Mutex::Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN CTRPluginFramework::Heap::_mutex; // weak
int CTRPluginFramework::Heap::__ctrpf_heap; // weak
int CTRPluginFramework::Heap::__ctrpf_heap_size; // weak
int CTRPluginFramework::Heap::g_heapPool; // weak
int dword_1C; // weak
_UNKNOWN sAddrMap; // weak
// extern _UNKNOWN _dso_handle; weak


//----- (0000002C) --------------------------------------------------------
signed int __fastcall addrMapNodeComparator(int a1, int a2)
{
  unsigned int v2; // r2
  unsigned int v3; // r3
  signed int result; // r0

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a2 + 12);
  if ( v2 < v3 )
    result = -1;
  else
    result = v2 > v3;
  return result;
}

//----- (00000054) --------------------------------------------------------
int __fastcall CTRPluginFramework::Heap::MemAlign(CTRPluginFramework::Heap *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3; // r4
  CTRPluginFramework::Heap *v4; // r7
  signed int v5; // r5
  int v6; // r4
  _DWORD *v8; // r0
  int v9; // r3
  char *v10; // r0
  _DWORD *v11; // r3
  int v12; // r1
  int v13; // r6
  int v14; // r9
  int v15; // r8
  int v16; // [sp+0h] [bp-30h]
  int v17; // [sp+8h] [bp-28h]
  int v18; // [sp+Ch] [bp-24h]

  v3 = a2;
  v4 = this;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v16,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::Heap::_mutex);
  if ( v3 < 0x10 )
    v3 = 16;
  v5 = 4;
  while ( v3 != 1 << v5 )
  {
    if ( ++v5 == 32 )
      goto LABEL_6;
  }
  v13 = CTRPluginFramework::Heap::g_heapPool;
  if ( !CTRPluginFramework::Heap::g_heapPool )
  {
    v14 = CTRPluginFramework::Heap::__ctrpf_heap;
    if ( !CTRPluginFramework::Heap::__ctrpf_heap || (v15 = CTRPluginFramework::Heap::__ctrpf_heap_size) == 0 )
      abort();
    v8 = malloc(0x10u);
    if ( !v8 )
      goto LABEL_6;
    v9 = dword_1C;
    v8[1] = v13;
    v8[2] = v14;
    v8[3] = v15;
    *v8 = v9;
    CTRPluginFramework::Heap::g_heapPool = (int)v8;
    if ( v9 )
      *(_DWORD *)(v9 + 4) = v8;
    dword_1C = (int)v8;
    rbtree_init(&sAddrMap, addrMapNodeComparator);
  }
  if ( !MemPool::Allocate(&CTRPluginFramework::Heap::g_heapPool, &v17, v4, v5) )
  {
LABEL_6:
    v6 = 0;
    goto LABEL_7;
  }
  v10 = (char *)malloc(0x14u);
  v6 = (int)v10;
  if ( v10 )
  {
    v11 = v10 + 12;
    v12 = v18;
    *v11 = v17;
    v11[1] = v12;
    rbtree_insert(&sAddrMap, v10);
    v6 = v17;
  }
  else
  {
    MemPool::Deallocate(&CTRPluginFramework::Heap::g_heapPool, &v17);
  }
LABEL_7:
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v16);
  return v6;
}
// 10: using guessed type int CTRPluginFramework::Heap::__ctrpf_heap;
// 14: using guessed type int CTRPluginFramework::Heap::__ctrpf_heap_size;
// 18: using guessed type int CTRPluginFramework::Heap::g_heapPool;
// 1C: using guessed type int dword_1C;
// 33C: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 348: using guessed type int __fastcall rbtree_init(_DWORD, _DWORD);
// 34C: using guessed type int __fastcall MemPool::Allocate(_DWORD, _DWORD, _DWORD, _DWORD);
// 350: using guessed type int __fastcall MemPool::Deallocate(_DWORD, _DWORD);
// 354: using guessed type int __fastcall rbtree_insert(_DWORD, _DWORD);

//----- (00000184) --------------------------------------------------------
int __fastcall CTRPluginFramework::Heap::Alloc(CTRPluginFramework::Heap *this, unsigned int a2, unsigned int a3)
{
  return CTRPluginFramework::Heap::MemAlign(this, 0x80u, a3);
}

//----- (0000018C) --------------------------------------------------------
void *__fastcall CTRPluginFramework::Heap::Realloc(CTRPluginFramework::Heap *this, void *a2, unsigned int a3)
{
  CTRPluginFramework::Heap *v3; // r5
  void *v4; // r4
  int v5; // r0
  int v6; // r5
  void *v7; // r4
  void **v9; // r0
  void **v10; // r3
  int v11; // r1
  char v12; // [sp+4h] [bp-34h]
  void *dest; // [sp+Ch] [bp-2Ch]
  int v14; // [sp+10h] [bp-28h]
  CTRPluginFramework::Heap *v15; // [sp+18h] [bp-20h]

  v3 = this;
  v4 = a2;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v12,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::Heap::_mutex);
  v15 = v3;
  v5 = rbtree_find(&sAddrMap, &dest);
  v6 = v5;
  if ( !v5 )
    goto LABEL_12;
  if ( *(_DWORD *)(v5 + 16) > (unsigned int)v4 )
  {
    v7 = *(void **)(v5 + 12);
    goto LABEL_3;
  }
  if ( MemPool::Allocate(&CTRPluginFramework::Heap::g_heapPool, &dest, v4, 4) )
  {
    v9 = (void **)malloc(0x14u);
    v7 = v9;
    if ( v9 )
    {
      v10 = v9 + 3;
      v11 = v14;
      *v10 = dest;
      v10[1] = (void *)v11;
      rbtree_insert(&sAddrMap, v9);
      memcpy(dest, *(const void **)(v6 + 12), *(_DWORD *)(v6 + 16));
      MemPool::Deallocate(&CTRPluginFramework::Heap::g_heapPool, v6 + 12);
      rbtree_remove(&sAddrMap, v6, addrMapNodeDestructor);
      v7 = dest;
    }
    else
    {
      MemPool::Deallocate(&CTRPluginFramework::Heap::g_heapPool, v6 + 12);
    }
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
LABEL_3:
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v12);
  return v7;
}
// 18: using guessed type int CTRPluginFramework::Heap::g_heapPool;
// 33C: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 34C: using guessed type int __fastcall MemPool::Allocate(_DWORD, _DWORD, _DWORD, _DWORD);
// 350: using guessed type int __fastcall MemPool::Deallocate(_DWORD, _DWORD);
// 354: using guessed type int __fastcall rbtree_insert(_DWORD, _DWORD);
// 35C: using guessed type int __fastcall rbtree_find(_DWORD, _DWORD);
// 364: using guessed type int __fastcall rbtree_remove(_DWORD, _DWORD, _DWORD);

//----- (00000288) --------------------------------------------------------
int __fastcall CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *this, void *a2)
{
  CTRPluginFramework::Heap *v2; // r4
  int v3; // r0
  int v4; // r4
  char v6; // [sp+4h] [bp-24h]
  char v7; // [sp+Ch] [bp-1Ch]
  CTRPluginFramework::Heap *v8; // [sp+18h] [bp-10h]

  v2 = this;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v6,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::Heap::_mutex);
  v8 = v2;
  v3 = rbtree_find(&sAddrMap, &v7);
  v4 = v3;
  if ( v3 )
  {
    MemPool::Deallocate(&CTRPluginFramework::Heap::g_heapPool, v3 + 12);
    rbtree_remove(&sAddrMap, v4, addrMapNodeDestructor);
  }
  return CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v6);
}
// 18: using guessed type int CTRPluginFramework::Heap::g_heapPool;
// 33C: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 350: using guessed type int __fastcall MemPool::Deallocate(_DWORD, _DWORD);
// 35C: using guessed type int __fastcall rbtree_find(_DWORD, _DWORD);
// 364: using guessed type int __fastcall rbtree_remove(_DWORD, _DWORD, _DWORD);

//----- (000002F8) --------------------------------------------------------
int __fastcall CTRPluginFramework::Heap::SpaceFree(CTRPluginFramework::Heap *this)
{
  return MemPool::GetFreeSpace((MemPool *)&CTRPluginFramework::Heap::g_heapPool);
}
// 18: using guessed type int CTRPluginFramework::Heap::g_heapPool;
// 368: using guessed type _DWORD MemPool::GetFreeSpace(MemPool *__hidden this);

//----- (00000304) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework4Heap12__ctrpf_heapE()
{
  CTRPluginFramework::Mutex::Mutex((CTRPluginFramework::Mutex *)&CTRPluginFramework::Heap::_mutex);
  return _aeabi_atexit(&CTRPluginFramework::Heap::_mutex, &CTRPluginFramework::Mutex::~Mutex, &_dso_handle);
}
// 370: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 378: using guessed type _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this);

// ALL OK, 7 function(s) have been successfully decompiled
