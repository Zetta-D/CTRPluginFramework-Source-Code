/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include "BMPImage.hpp"
#include "Preferences.hpp"
#include "OSD.hpp"
#include "svc.h"
#include "PrivColor.hpp"
#include "vram.h"
#include "System.hpp"
#include "gspgpu.h"

namespace CTRPluginFramework {
  class ScreenImpl
{
private:
  // this
  u8 _isTop; // 60
  u8 _format; // 61
  u16 _width; // 22
  u16 _height; // 23
  u32 _stride; // 12
  u32 _rowSize; // 13
  u32 _bytesPerPixel; // 14
  static int Top, Bottom;
};

//-------------------------------------------------------------------------
// Data declarations

char algn_1;
_UNKNOWN _topBuf;
int ScreenImpl::Top;
_UNKNOWN _botBuf;
int ScreenImpl::Bottom;
_UNKNOWN loc_140;
_UNKNOWN loc_190;
int _sleepThread[2] = { 5000000, 0 };
u8 _bpp[3] = { 4u, 3u, 2u }; // idb

//----- (0000008C) --------------------------------------------------------
char * memcpy32(u32 *a2, u32 *a3, u32 a4)
{
  char *result; // r0
  u32 *v5; // r2
  u32 v6; // t1

  result = (char *)this - 4;
  v5 = (u32 *)((char *)a3 + (u32)a2);
  while ( a2 != v5 )
  {
    v6 = *a2;
    ++a2;
    *((u32 *)result + 1) = v6;
    result += 4;
  }
  return result;
}
/*
void *memcpy32 (void *dst, const void *src, size_t n)
{
  u32 *d = dst;
  const u32 *s = src;
  n /= sizeof(*d);
  while (n-- != 0) *d++ = *s++;
  return dst;
}
*/
//----- (000000A8) --------------------------------------------------------
BMPImage * CreateBMP(CTRPluginFramework *this, u32 a2, u32 a3)
{
  CTRPluginFramework *v3; // r5
  u32 v4; // r6
  BMPImage *v5; // r4
  char v6; // r7
  int v7; // r0
  char v8; // r5
  int v10; // [sp+4h] [bp-34h]
  int *v11; // [sp+8h] [bp-30h]
  int v12; // [sp+Ch] [bp-2Ch]
  int v13; // [sp+10h] [bp-28h]

  v3 = this;
  v4 = a2;
  v5 = (BMPImage *)operator new(0x34u);
  BMPImage::BMPImage(v5, (u32)v3, v4, 0);
  if ( !BMPImage::data(v5) )
  {
    v6 = SystemImpl::v6;
    if ( !SystemImpl::v6 )
    {
      Preferences::UnloadBackgrounds(0);
      BMPImage::~BMPImage(v5);
      operator delete((void *)v5);
      v5 = (BMPImage *)operator new(0x34u);
      BMPImage::BMPImage(v5, (u32)v3, v4, v6);
      v7 = BMPImage::data(v5);
      v8 = v7;
      if ( !v7 )
      {
        v11 = &v13;
        v10 = 48;
        v11 = (int *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(
                       &v11,
                       &v10,
                       0);
        v13 = v10;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
        v12 = v10;
        *((u8 *)v11 + v10) = v8;
        OSD::Notify(&v11, &Color::White, &Color::Black);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v11);
      }
    }
  }
  return v5;
}

u32 FromPhysicalToVirtual(u32 address)
{
  if ( address - 402653184 <= 0x8000000 )
    return address + 0x7000000;
  if ( address - 0x20000000 > 0x10000000 )
    return 0;
  svcGetProcessInfo(&address, Process::GetHandle(), 20);
  if ( address == -268435456 )
    result = address + 0x10000000;
  return 0;
}

int  GetBPP(u32 a1)
{
  return (a1 > 4) ? 3 : _bpp[a1];
}


  u8 _format; // 61
  u16 _width; // 22
  u16 _height; // 23
  u32 _stride; // 12
  u32 _rowSize; // 13

//----- (00000228) --------------------------------------------------------
int  ScreenImpl::ScreenImpl(int result, u32 a2, u32 a3, bool a4)
{
  *(u32 *)result = a2;
  *(u32 *)(result + 4) = a3;
  *(u32 *)(result + 8) = a2 + 120;
  _width = 0;
  _height = 0;
  _stride = 0;
  _rowSize = 0;
  *(_BYTE *)(result + 60) = a4;
  _format = 0;
}

//----- (0000026C) --------------------------------------------------------
int  ScreenImpl::Initialize(ScreenImpl *this)
{
  int result; // r0

  ScreenImpl::ScreenImpl((int)&_topBuf, 0x90400400, 0x90202204, 1);
  ScreenImpl::Top = (int)&_topBuf;
  result = ScreenImpl::ScreenImpl((int)&_botBuf, 0x90400500, 0x90202A04, 0);
  ScreenImpl::Bottom = (int)&_botBuf;
  return result;
}
// 44: using guessed type int ScreenImpl::Top;
// 88: using guessed type int ScreenImpl::Bottom;

//----- (000002C0) --------------------------------------------------------
int  ScreenImpl::Fade(ScreenImpl *this, float a2, int a3)
{
  int v3; // r1
  signed int v4; // r3
  int v5; // r5
  signed int v6; // r4
  int result; // r0
  int v8; // r6
  int ( *v9)(int, int); // r7
  double v10; // r2
  int v11; // r0
  int v12; // [sp+4h] [bp-24h]

  if ( *((u32 *)this + 10) )
    v4 = 8;
  else
    v4 = 12;
  v5 = *(u32 *)((char *)this + v4 + 4);
  v6 = _stride * (u32)*((unsigned __int16 *)this + 22) / *((u32 *)_bytesPerPixel);
  result = PrivColor::SetFormat(*((u8 *)this + 61), v3, a3);
  v8 = __mrc(15, 0, 13, 0, 3);
  while ( v6 > 0 )
  {
    if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
      result = ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(result);
    v9 = *(int ( **)(int, int))((char *)&PrivColor::ToFramebuffer + v8);
    if ( &ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE )
      ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(result);
    --v6;
    v12 = (*(int ( **)(int))((char *)&PrivColor::FromFramebuffer + v8))(v5);
    v11 = Color::Fade((Color *)&v12, v10);
    result = v9(v5, v11);
    v5 = result;
  }
  return result;
}
// FA8: using guessed type int  PrivColor::SetFormat(u32, u32, u32);
// FAC: using guessed type int  ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(u32);
// FB0: using guessed type int  ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(u32);

//----- (000003A0) --------------------------------------------------------
signed int  ScreenImpl::Acquire(ScreenImpl *this, u32 a2)
{
  u32 *v2; // r5
  int v3; // r7
  int v4; // r6
  u32 v5; // r7
  u32 v6; // r6
  ScreenImpl *v7; // r4
  u32 v8; // r3
  u32 v9; // r2
  u8 *v10; // r2
  u32 v11; // r0
  int v12; // r0
  int v13; // r1
  int v14; // r3
  u32 *v15; // r5
  CTRPluginFramework *v16; // r0
  signed int v17; // r3
  int v18; // r0
  signed int v19; // r3

  v2 = *(u32 **)this;
  v3 = *(u32 *)(*(u32 *)this + 104);
  *((u32 *)this + 7) = v3;
  v4 = v2[27];
  v5 = v3 | 0x80000000;
  *((u32 *)this + 8) = v4;
  v6 = v4 | 0x80000000;
  if ( v5 == v6 )
    return 1;
  v7 = this;
  *((u32 *)this + 10) = **((u32 **)this + 2) & 1;
  v8 = v2[28] & 7;
  if ( v8 > 4 )
    a2 = 3;
  *((u8 *)this + 61) = v8;
  v9 = v2[23];
  *((_WORD *)this + 23) = v9;
  v10 = (u8 *)(v9 >> 16);
  *((_WORD *)this + 22) = (_WORD)v10;
  if ( v8 <= 4 )
    v10 = _bpp;
  v11 = v2[36];
  if ( v8 <= 4 )
    a2 = v10[v8];
  *((u32 *)v7 + 12) = v11;
  *((u32 *)v7 + 14) = a2;
  v12 = v11 / a2;
  v14 = *((u8 *)v7 + 60);
  *((u32 *)v7 + 13) = v12;
  *((u32 *)v7 + 3) = v5;
  *((u32 *)v7 + 4) = v6;
  if ( v14 )
  {
    *((u32 *)v7 + 5) = v5;
    *((u32 *)v7 + 6) = v6;
    v2[37] = v2[26];
    *(u32 *)(*(u32 *)v7 + 152) = *(u32 *)(*(u32 *)v7 + 108);
  }
  v15 = (u32 *)(*((u32 *)v7 + 12) * *((unsigned __int16 *)v7 + 22));
  if ( !*((u32 *)v7 + 9) )
  {
    v16 = (CTRPluginFramework *)vramAlloc(*((u32 *)v7 + 12) * *((unsigned __int16 *)v7 + 22), v13);
    *((u32 *)v7 + 9) = v16;
    if ( v16 )
    {
      if ( *((u32 *)v7 + 10) )
        v17 = 8;
      else
        v17 = 12;
      memcpy32(v16, *(u32 **)((char *)v7 + v17 + 4), v15, (u32)v7 + v17);
    }
  }
  v18 = *((u32 *)v7 + 10);
  if ( v18 )
    v19 = 8;
  else
    v19 = 12;
  memcpy32(
    *((CTRPluginFramework **)v7 + v18 + 3),
    *(u32 **)((char *)v7 + v19 + 4),
    v15,
    (u32)v7 + v19);
  return 0;
}
// FB8: using guessed type int  vramAlloc(u32, u32);

//----- (000004D8) --------------------------------------------------------
u32  ScreenImpl::Acquire(ScreenImpl *this, int a2, u32 a3, u32 a4, u32 a5, bool a6)
{
  u32 v6; // r6
  u32 *v7; // r5
  u8 *v8; // r3
  u32 v9; // r1
  bool v10; // cf
  bool v11; // zf
  ScreenImpl *v12; // r4
  u32 result; // r0
  int v14; // r1
  u32 *v15; // r1
  u32 v16; // r2
  u32 v17; // r2

  v6 = a4;
  v7 = (u32 *)a2;
  v8 = (u8 *)&algn_1;
  *((u32 *)this + 10) = 1;
  v9 = a5 & 7;
  v10 = v9 >= 4;
  v11 = v9 == 4;
  *((u8 *)this + 61) = v9;
  if ( v9 <= 4 )
    v8 = _bpp;
  else
    v9 = 3u;
  v12 = this;
  if ( v11 || !v10 )
    v9 = v8[v9];
  _stride = v6;
  *((u32 *)_bytesPerPixel) = v9;
  result = v6 / v9;
  v14 = *(u32 *)v12;
  *((u32 *)v12 + 13) = result;
  *((u32 *)v12 + 3) = v7;
  *((u32 *)v12 + 5) = a3;
  v15 = (u32 *)((v14 + 92) | 0x80000000);
  v16 = *v15;
  *((_WORD *)v12 + 23) = *v15;
  v17 = v16 >> 16;
  *((_WORD *)v12 + 22) = v17;
  if ( a6 )
  {
    result = *((u32 *)v12 + 9);
    if ( result )
      result = (u32)memcpy32(
                               (CTRPluginFramework *)result,
                               v7,
                               (u32 *)(v6 * v17),
                               (u32)v8);
  }
  return result;
}
// 1: using guessed type char;

//----- (00000574) --------------------------------------------------------
char * ScreenImpl::Copy(ScreenImpl *this)
{
  int v1; // r3
  u32 **v2; // r1
  u32 v3; // r3

  v1 = *((u32 *)this + 10);
  v2 = (u32 **)((char *)this + 4 * v1);
  if ( v1 )
    v3 = 8;
  else
    v3 = 12;
  return memcpy32(
           *(CTRPluginFramework **)((char *)this + v3 + 4),
           v2[3],
           (u32 *)(_stride * *((unsigned __int16 *)this + 22)),
           v3);
}

//----- (000005A8) --------------------------------------------------------
int  ScreenImpl::IsTopScreen(ScreenImpl *this)
{
  return *((u8 *)_isTop);
}

//----- (000005B0) --------------------------------------------------------
int  ScreenToBMP_BGR8(int result, Pixel *a2, u32 a3, u8 *a4, u32 a5, u32 a6)
{
  u32 v6; // r5
  int v7; // r1
  int v8; // lr
  u8 *v9; // r4
  _BYTE *v10; // r12
  char v11; // r7

  v6 = a3 + 720;
  v7 = 3 * ((u32)a2 + (u32)a4);
  while ( a3 != v6 )
  {
    v8 = result;
    v9 = a4;
    v10 = (_BYTE *)a3;
    while ( 1 )
    {
      v8 += 3;
      if ( !v9 )
        break;
      --v9;
      *(_BYTE *)(v8 - 3) = *v10;
      *(_BYTE *)(v8 - 2) = v10[1];
      v11 = v10[2];
      v10 += a5;
      *(_BYTE *)(v8 - 1) = v11;
    }
    a3 += 3;
    result += v7;
  }
  return result;
}

//----- (00000614) --------------------------------------------------------
int  ScreenToBMP_RGBA8(int result, Pixel *a2, u32 a3, u8 *a4, u32 a5, u32 a6)
{
  u32 v6; // r5
  int v7; // r1
  _BYTE *v8; // r12
  int v9; // lr
  u8 *v10; // r4
  char v11; // r7

  v6 = a3 + 960;
  v7 = 3 * ((u32)a2 + (u32)a4);
  while ( a3 != v6 )
  {
    v8 = (_BYTE *)a3;
    v9 = result;
    v10 = a4;
    while ( 1 )
    {
      v9 += 3;
      if ( !v10 )
        break;
      --v10;
      *(_BYTE *)(v9 - 3) = v8[1];
      *(_BYTE *)(v9 - 2) = v8[2];
      v11 = v8[3];
      v8 += a5;
      *(_BYTE *)(v9 - 1) = v11;
    }
    a3 += 4;
    result += v7;
  }
  return result;
}

//----- (00000678) --------------------------------------------------------
int  ScreenToBMP_RGB565(int result, Pixel *a2, u32 a3, u8 *a4, u32 a5, u32 a6)
{
  u32 v6; // r6
  int v7; // r1
  int v8; // lr
  u8 *v9; // r7
  unsigned __int16 *v10; // r8
  int v11; // t1

  v6 = a3 + 480;
  v7 = 3 * ((u32)a2 + (u32)a4);
  while ( a3 != v6 )
  {
    v8 = result;
    v9 = a4;
    v10 = (unsigned __int16 *)a3;
    while ( 1 )
    {
      v8 += 3;
      if ( !v9 )
        break;
      v11 = *v10;
      v10 = (unsigned __int16 *)((char *)v10 + (a5 & 0xFFFFFFFE));
      --v9;
      *(_BYTE *)(v8 - 3) = 8 * v11;
      *(_BYTE *)(v8 - 2) = (v11 >> 3) & 0xFC;
      *(_BYTE *)(v8 - 1) = BYTE1(v11) & 0xF8;
    }
    a3 += 2;
    result += v7;
  }
  return result;
}

//----- (000006E8) --------------------------------------------------------
int  ScreenToBMP_RGB5A1(int result, Pixel *a2, u32 a3, u8 *a4, u32 a5, u32 a6)
{
  u32 v6; // r7
  int v7; // r1
  int v8; // lr
  u8 *v9; // r4
  unsigned __int16 *v10; // r8
  int v11; // t1

  v6 = a3 + 480;
  v7 = 3 * ((u32)a2 + (u32)a4);
  while ( a3 != v6 )
  {
    v8 = result;
    v9 = a4;
    v10 = (unsigned __int16 *)a3;
    while ( 1 )
    {
      v8 += 3;
      if ( !v9 )
        break;
      v11 = *v10;
      v10 = (unsigned __int16 *)((char *)v10 + (a5 & 0xFFFFFFFE));
      --v9;
      *(_BYTE *)(v8 - 3) = 4 * v11 & 0xF8;
      *(_BYTE *)(v8 - 2) = (v11 >> 3) & 0xF8;
      *(_BYTE *)(v8 - 1) = BYTE1(v11) & 0xF8;
    }
    a3 += 2;
    result += v7;
  }
  return result;
}

//----- (0000075C) --------------------------------------------------------
int  ScreenToBMP_RGBA4(int result, Pixel *a2, u32 a3, u8 *a4, u32 a5, u32 a6)
{
  u32 v6; // r6
  int v7; // r1
  int v8; // lr
  u8 *v9; // r7
  unsigned __int16 *v10; // r8
  int v11; // t1

  v6 = a3 + 480;
  v7 = 3 * ((u32)a2 + (u32)a4);
  while ( a3 != v6 )
  {
    v8 = result;
    v9 = a4;
    v10 = (unsigned __int16 *)a3;
    while ( 1 )
    {
      v8 += 3;
      if ( !v9 )
        break;
      v11 = *v10;
      v10 = (unsigned __int16 *)((char *)v10 + (a5 & 0xFFFFFFFE));
      --v9;
      *(_BYTE *)(v8 - 3) = v11 & 0xF0;
      *(_BYTE *)(v8 - 2) = (v11 >> 4) & 0xF0;
      *(_BYTE *)(v8 - 1) = BYTE1(v11) & 0xF0;
    }
    a3 += 2;
    result += v7;
  }
  return result;
}

//----- (000007CC) --------------------------------------------------------
Pixel * ScreenImpl::ScreenToBMP(ScreenImpl *this, Pixel *a2, u32 a3)
{
  ScreenImpl *v3; // r3
  Pixel *result; // r0
  u32 v5; // r12
  u32 v6; // r2
  signed int v7; // r2
  Pixel *v8; // r1
  int v9; // r12
  Pixel *v10; // [sp+4h] [bp-Ch]

  v10 = a2;
  v3 = this;
  result = a2;
  if ( a2 )
  {
    v5 = a3;
    v6 = *((u32 *)v3 + 9);
    if ( !v6 )
    {
      if ( *((u32 *)v3 + 10) )
        v7 = 8;
      else
        v7 = 12;
      v6 = *(u32 *)((char *)v3 + v7 + 4);
    }
    v8 = (Pixel *)v5;
    v9 = *((u8 *)v3 + 61);
    if ( *((u8 *)v3 + 61) )
    {
      switch ( v9 )
      {
        case 1:
          result = (Pixel *)ScreenToBMP_BGR8(
                              (int)result,
                              v8,
                              v6,
                              (u8 *)*((unsigned __int16 *)v3 + 22),
                              *((u32 *)v3 + 12),
                              (u32)v10);
          break;
        case 2:
          result = (Pixel *)ScreenToBMP_RGB565(
                              (int)result,
                              v8,
                              v6,
                              (u8 *)*((unsigned __int16 *)v3 + 22),
                              *((u32 *)v3 + 12),
                              (u32)v10);
          break;
        case 3:
          result = (Pixel *)ScreenToBMP_RGB5A1(
                              (int)result,
                              v8,
                              v6,
                              (u8 *)*((unsigned __int16 *)v3 + 22),
                              *((u32 *)v3 + 12),
                              (u32)v10);
          break;
        case 4:
          result = (Pixel *)ScreenToBMP_RGBA4(
                              (int)result,
                              v8,
                              v6,
                              (u8 *)*((unsigned __int16 *)v3 + 22),
                              *((u32 *)v3 + 12),
                              (u32)v10);
          break;
      }
    }
    else
    {
      result = (Pixel *)ScreenToBMP_RGBA8(
                          (int)result,
                          v8,
                          v6,
                          (u8 *)*((unsigned __int16 *)v3 + 22),
                          *((u32 *)v3 + 12),
                          (u32)v10);
    }
  }
  return result;
}

//----- (0000089C) --------------------------------------------------------
BMPImage * ScreenImpl::Screenshot(ScreenImpl *this, int a2, BMPImage *a3)
{
  BMPImage *v3; // r4
  int v4; // r5
  Pixel *v5; // r1
  ScreenImpl *v6; // r0
  int v8; // r6

  v3 = (BMPImage *)a2;
  if ( this == (ScreenImpl *)&algn_1 )
  {
    if ( !a2 )
      v3 = CreateBMP((CTRPluginFramework *)&loc_190, 0xF0u, (u32)a3);
    v4 = ScreenImpl::Top;
LABEL_5:
    v5 = (Pixel *)BMPImage::data(v3);
    v6 = (ScreenImpl *)v4;
    goto LABEL_6;
  }
  if ( this == (ScreenImpl *)2 )
  {
    if ( !a2 )
      v3 = CreateBMP((CTRPluginFramework *)&loc_140, 0xF0u, (u32)a3);
    v4 = ScreenImpl::Bottom;
    goto LABEL_5;
  }
  if ( !a2 )
    v3 = CreateBMP((CTRPluginFramework *)&loc_190, 0x1E0u, (u32)a3);
  v8 = BMPImage::data(v3);
  ScreenImpl::ScreenToBMP(
    (ScreenImpl *)ScreenImpl::Bottom,
    (Pixel *)(v8 + 120),
    0x50u);
  v5 = (Pixel *)(v8 + 288000);
  v6 = (ScreenImpl *)ScreenImpl::Top;
LABEL_6:
  ScreenImpl::ScreenToBMP(v6, v5, 0);
  return v3;
}
// 1: using guessed type char algn_1;
// 44: using guessed type int ScreenImpl::Top;
// 88: using guessed type int ScreenImpl::Bottom;

//----- (00000960) --------------------------------------------------------
int  ScreenImpl::Is3DEnabled(ScreenImpl *this)
{
  int v1; // r3
  char *v2; // r0
  int v3; // r3
  int v4; // r0
  bool v5; // zf

  v1 = *((u8 *)_isTop);
  if ( *((u8 *)_isTop) )
  {
    v2 = (char *)this + 4 * (*((u32 *)this + 10) == 0);
    v3 = *((u32 *)v2 + 5);
    v4 = *((u32 *)v2 + 3);
    v5 = v4 == v3;
    if ( v4 != v3 )
      v5 = v3 == 0;
    if ( v5 )
      v1 = 0;
    else
      v1 = MEMORY[0x1FF81080] > 0.0;
  }
  return v1;
}

//----- (000009BC) --------------------------------------------------------
Process * ScreenImpl::Flush(ScreenImpl *this)
{
  ScreenImpl *v1; // r4
  int v2; // r5
  int v3; // r0
  Process *v4; // r0
  int v5; // r0
  signed int v6; // r3
  Process *result; // r0
  int v8; // r0
  Process *v9; // r0
  int v10; // r0
  signed int v11; // r3

  v1 = this;
  v2 = _stride * *((unsigned __int16 *)this + 22);
  v3 = Process::GetHandle(this);
  v4 = (Process *)svcFlushProcessDataCache(v3, *((u32 *)v1 + *((u32 *)v1 + 10) + 3), v2);
  v5 = Process::GetHandle(v4);
  if ( *((u32 *)v1 + 10) )
    v6 = 8;
  else
    v6 = 12;
  svcFlushProcessDataCache(v5, *(u32 *)((char *)v1 + v6 + 4), v2);
  result = (Process *)ScreenImpl::Is3DEnabled(v1);
  if ( result )
  {
    v8 = Process::GetHandle(result);
    v9 = (Process *)svcFlushProcessDataCache(v8, *((u32 *)v1 + *((u32 *)v1 + 10) + 5), v2);
    v10 = Process::GetHandle(v9);
    if ( *((u32 *)v1 + 10) )
      v11 = 16;
    else
      v11 = 20;
    result = (Process *)svcFlushProcessDataCache(v10, *(u32 *)((char *)v1 + v11 + 4), v2);
  }
  return result;
}
// FBC: using guessed type int  svcFlushProcessDataCache(u32, u32, u32);

//----- (00000A5C) --------------------------------------------------------
Process * ScreenImpl::Invalidate(ScreenImpl *this)
{
  ScreenImpl *v1; // r4
  int v2; // r5
  int v3; // r0
  Process *v4; // r0
  int v5; // r0
  signed int v6; // r3
  Process *result; // r0
  int v8; // r0
  Process *v9; // r0
  int v10; // r0
  signed int v11; // r3

  v1 = this;
  v2 = _stride * *((unsigned __int16 *)this + 22);
  v3 = Process::GetHandle(this);
  v4 = (Process *)svcInvalidateProcessDataCache(v3, *((u32 *)v1 + *((u32 *)v1 + 10) + 3), v2);
  v5 = Process::GetHandle(v4);
  if ( *((u32 *)v1 + 10) )
    v6 = 8;
  else
    v6 = 12;
  svcInvalidateProcessDataCache(v5, *(u32 *)((char *)v1 + v6 + 4), v2);
  result = (Process *)ScreenImpl::Is3DEnabled(v1);
  if ( result )
  {
    v8 = Process::GetHandle(result);
    v9 = (Process *)svcInvalidateProcessDataCache(
                                          v8,
                                          *((u32 *)v1 + *((u32 *)v1 + 10) + 5),
                                          v2);
    v10 = Process::GetHandle(v9);
    if ( *((u32 *)v1 + 10) )
      v11 = 16;
    else
      v11 = 20;
    result = (Process *)svcInvalidateProcessDataCache(v10, *(u32 *)((char *)v1 + v11 + 4), v2);
  }
  return result;
}
// FC0: using guessed type int  svcInvalidateProcessDataCache(u32, u32, u32);

//----- (00000B00) --------------------------------------------------------
int  ScreenImpl::Flash(ScreenImpl *this, Color *a2)
{
  ScreenImpl *v2; // r6
  signed int v3; // r4
  int v4; // r5
  int result; // r0

  v2 = this;
  v3 = 100;
  v4 = Color::ToU32(a2) & 0xFFFFFF | 0x1000000;
  do
  {
    **((u32 **)v2 + 1) = v4;
    result = svcSleepThread(_sleepThread[0], _sleepThread[1]);
    --v3;
  }
  while ( v3 );
  **((u32 **)v2 + 1) = 0;
  return result;
}
// B50: using guessed type int _sleepThread[2];
// FC8: using guessed type int  svcSleepThread(u32, u32);

//----- (00000B58) --------------------------------------------------------
Process * ScreenImpl::Clean(ScreenImpl *this)
{
  Process *result; // r0
  u32 *v2; // r5
  u32 *v3; // r5

  result = (Process *)System::v6(this);
  if ( result )
  {
    __mcr(15, 0, 0, 7, 10, 4);
    v2 = *(u32 **)(ScreenImpl::Top + 36);
    if ( v2 )
    {
      memcpy32(
        *(CTRPluginFramework **)(ScreenImpl::Top + 12),
        *(u32 **)(ScreenImpl::Top + 36),
        (u32 *)(*(u32 *)(ScreenImpl::Top + 48)
                       * *(unsigned __int16 *)(ScreenImpl::Top + 44)),
        ScreenImpl::Top);
      memcpy32(
        *(CTRPluginFramework **)(ScreenImpl::Top + 16),
        v2,
        (u32 *)(*(u32 *)(ScreenImpl::Top + 48)
                       * *(unsigned __int16 *)(ScreenImpl::Top + 44)),
        ScreenImpl::Top);
    }
    v3 = *(u32 **)(ScreenImpl::Bottom + 36);
    if ( v3 )
    {
      memcpy32(
        *(CTRPluginFramework **)(ScreenImpl::Bottom + 12),
        *(u32 **)(ScreenImpl::Bottom + 36),
        (u32 *)(*(u32 *)(ScreenImpl::Bottom + 48)
                       * *(unsigned __int16 *)(ScreenImpl::Bottom + 44)),
        ScreenImpl::Bottom);
      memcpy32(
        *(CTRPluginFramework **)(ScreenImpl::Bottom + 16),
        v3,
        (u32 *)(*(u32 *)(ScreenImpl::Bottom + 48)
                       * *(unsigned __int16 *)(ScreenImpl::Bottom + 44)),
        ScreenImpl::Bottom);
    }
    ScreenImpl::Flush((ScreenImpl *)ScreenImpl::Top);
    result = ScreenImpl::Flush((ScreenImpl *)ScreenImpl::Bottom);
  }
  return result;
}
// 44: using guessed type int ScreenImpl::Top;
// 88: using guessed type int ScreenImpl::Bottom;

//----- (00000C14) --------------------------------------------------------
char * ScreenImpl::SwapBuffer(ScreenImpl *this, bool a2, int a3)
{
  ScreenImpl *v3; // r4
  signed int v4; // r3
  int v5; // r5
  char *result; // r0
  bool v7; // zf
  u32 *v8; // r3
  u32 v9; // r1
  u32 v10; // r1
  signed int v11; // r0

  v3 = this;
  if ( *((u32 *)this + 10) )
    v4 = 8;
  else
    v4 = 12;
  v5 = a3;
  result = (char *)svcFlushDataCacheRange(
                     *(u32 *)((char *)this + v4 + 4),
                     _stride * *((unsigned __int16 *)this + 22));
  v7 = *((u32 *)v3 + 10) == 0;
  *((u32 *)v3 + 10) = v7;
  v8 = (u32 *)*((u32 *)v3 + 2);
  v9 = *v8;
  if ( v7 )
    v10 = v9 | 1;
  else
    v10 = v9 & 0xFFFFFFFE;
  *v8 = v10;
  if ( *((u8 *)v3 + 60) )
  {
    *(u32 *)(*(u32 *)v3 + 104) = *((u32 *)v3 + 7);
    *(u32 *)(*(u32 *)v3 + 108) = *((u32 *)v3 + 8);
    *(u32 *)(*(u32 *)v3 + 148) = *(u32 *)(*(u32 *)v3 + 104);
    *(u32 *)(*(u32 *)v3 + 152) = *(u32 *)(*(u32 *)v3 + 108);
    if ( !v5 )
      return result;
    if ( *((u8 *)v3 + 60) )
    {
      v11 = 3;
LABEL_12:
      gspWaitForEvent(v11, 1);
      return ScreenImpl::Copy(v3);
    }
LABEL_11:
    v11 = 2;
    goto LABEL_12;
  }
  if ( v5 )
    goto LABEL_11;
  return result;
}
// FD0: using guessed type int  svcFlushDataCacheRange(u32, u32);
// FD4: using guessed type int  gspWaitForEvent(u32, u32);

//----- (00000CEC) --------------------------------------------------------
char * ScreenImpl::ApplyFading(ScreenImpl *this, int a2, int a3)
{
  int v3; // r2

  ScreenImpl::Fade((ScreenImpl *)ScreenImpl::Top, 0.0, a3);
  ScreenImpl::Fade(
    (ScreenImpl *)ScreenImpl::Bottom,
    0.0,
    v3);
  __mcr(15, 0, 0, 7, 10, 4);
  ScreenImpl::SwapBuffer(
    (ScreenImpl *)ScreenImpl::Top,
    1,
    1);
  return ScreenImpl::SwapBuffer(
           (ScreenImpl *)ScreenImpl::Bottom,
           1,
           1);
}

u16  ScreenImpl::GetFormat(void) const
{
  return _format;
}

u16  ScreenImpl::GetWidth(void) const
{
  return _width;
}

u16  ScreenImpl::GetHeight(void) const
{
  return _height;
}

u32  ScreenImpl::GetStride(void) const
{
  return _stride;
}

u32  ScreenImpl::GetRowSize(void) const
{
  return _rowSize;
}

u32  ScreenImpl::GetBytesPerPixel(void) const 
{
  return _bytesPerPixel;
}

int  ScreenImpl::GetFramebufferSize(ScreenImpl *this)
{
  return _stride * *((unsigned __int16 *)this + 22);
}

//----- (00000D94) --------------------------------------------------------
int  ScreenImpl::GetFramebufferInfos(int result, u32 *a2, u32 *a3, u8 &format)
{
  *a2 = *(u32 *)(result + 48);
  *a3 = *(u32 *)(result + 56);
  format = _format;
  return result;
}

//----- (00000DB0) --------------------------------------------------------
int  ScreenImpl::GetLeftFramebuffer(int a2)
{
  int v2; // r3

  v2 = *((u32 *)this + 10);
  if ( !a2 )
    v2 = v2 == 0;
  return *((u32 *)this + v2 + 3);
}

//----- (00000DCC) --------------------------------------------------------
int  ScreenImpl::GetLeftFramebuffer(ScreenImpl *this, int a2, int a3)
{
  int v3; // r1
  signed int v4; // r3
  int v5; // r2
  int v6; // r1
  signed int v7; // r3

  v3 = a2 & ~(a2 >> 31);
  if ( *((u8 *)_isTop) )
    v4 = 400;
  else
    v4 = 320;
  v5 = a3 & ~(a3 >> 31);
  if ( v4 >= v3 )
    v4 = v3;
  if ( v5 >= 240 )
    v5 = 240;
  v6 = 239 - v5 + _rowSize * v4;
  if ( *((u32 *)this + 10) )
    v7 = 8;
  else
    v7 = 12;
  return *(u32 *)((char *)this + v7 + 4) + _bytesPerPixel * v6;
}

//----- (00000E24) --------------------------------------------------------
int  ScreenImpl::GetRightFramebuffer(bool useRightFb)
{
  int v2; // r3

  if (!_isTop)
    return _isTop;
  v2 = *((u32 *)this + 10);
  if ( !useRightFb )
    v2 = v2 == 0;
  return *((u32 *)this + v2 + 5);
}

//----- (00000E54) --------------------------------------------------------
u32  ScreenImpl::GetRightFramebuffer(u16 width, u16 height)
{
  u16 top_width; // r1
  u16 top_height; // r2
  int v5; // r1
  signed int v6; // r2

  if ( !*((u8 *)_isTop) )
    return *((u8 *)_isTop);
  top_width = width & ~(width >> 31);
  top_height = height & ~(height >> 31);
  if ( top_width >= 400 )
    top_width = 400;
  if ( top_height >= 240 )
    top_height = 240;
  v5 = 239 - top_height + _rowSize * top_width;
  if ( *((u32 *)this + 10) )
    v6 = 16;
  else
    v6 = 20;
  return *(u32 *)((char *)this + v6 + 4) + _bytesPerPixel * v5;
}

int  ScreenImpl::GetPosFromAddress(u32 address, int *a3, int *a4)
{
  u32 v6;
  int v7;
  int v8;
  int result;
  v6 = address - *(u32 *)((char *)this + (*((u32 *)this + 10) ? 8 : 12) + 4);
  v7 = v6 / (_bytesPerPixel * _rowSize);
  *a3 = v7;
  v8 = _rowSize - 1 + _rowSize * v7 - v6 / _bytesPerPixel;
  *a4 = v8;
  result = 240 - _rowSize + v8;
  *a4 = result;
  return result;
}

}