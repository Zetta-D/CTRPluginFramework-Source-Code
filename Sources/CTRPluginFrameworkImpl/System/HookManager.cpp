/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

signed int __fastcall CTRPluginFramework::HookManager::Init(__int64 this, int a2);
int __fastcall CTRPluginFramework::HookManager::Lock(__int64 this, int a2);
signed int __fastcall CTRPluginFramework::HookManager::AllocNewHook(__int64 this, int a2);
signed int __fastcall CTRPluginFramework::HookManager::FreeHook(__int64 this, int a2);
// _DWORD __cdecl operator new(unsigned int); idb
// _DWORD CTRPluginFramework::Mutex::Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// void *memset(void *s, int c, size_t n);
// _DWORD __cdecl CTRPluginFramework::Microseconds(CTRPluginFramework *__hidden this, __int64); idb
// _DWORD __cdecl CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this, Time); idb
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::HookManager::instance; // weak


//----- (00000008) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::HookManager::Init(__int64 this, int a2)
{
  int v2; // r3
  int *v3; // r2
  CTRPluginFramework::Mutex *v4; // r6
  int v5; // r5
  int v6; // r4
  Time v7; // r1
  signed int v8; // r3
  __int64 v10; // [sp+0h] [bp-28h]
  int v11; // [sp+8h] [bp-20h]

  v10 = this;
  v11 = a2;
  v2 = CTRPluginFramework::HookManager::instance;
  if ( !CTRPluginFramework::HookManager::instance )
  {
    v3 = (int *)31981568;
    do
    {
      *v3 = v2;
      ++v3;
    }
    while ( v3 != (int *)31985664 );
    v4 = (CTRPluginFramework::Mutex *)operator new(0x8C8u);
    v5 = (int)v4 + 16;
    CTRPluginFramework::Mutex::Mutex(v4);
    v6 = (int)v4 + 16;
    do
    {
      memset((void *)v6, 0, 0x18u);
      CTRPluginFramework::Microseconds((CTRPluginFramework *)&v10, 0LL);
      CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(v6 + 8), v7);
      v6 += 24;
      *(_DWORD *)(v6 - 8) = 0;
    }
    while ( (CTRPluginFramework::Mutex *)v6 != (CTRPluginFramework::Mutex *)((char *)v4 + 2248) );
    v8 = 31981568;
    CTRPluginFramework::HookManager::instance = (int)v4;
    while ( 1 )
    {
      v5 += 24;
      if ( v8 == 31985660 )
        break;
      *(_DWORD *)(v5 - 8) = v8;
      v8 += 44;
    }
  }
  return 1;
}
// 4: using guessed type int CTRPluginFramework::HookManager::instance;

//----- (000000D0) --------------------------------------------------------
int __fastcall CTRPluginFramework::HookManager::Lock(__int64 this, int a2)
{
  CTRPluginFramework::HookManager::Init(this, a2);
  return CTRPluginFramework::HookManager::instance;
}
// 4: using guessed type int CTRPluginFramework::HookManager::instance;

//----- (000000E8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::HookManager::AllocNewHook(__int64 this, int a2)
{
  int v2; // r6
  float v3; // r1
  signed int v4; // r4
  int i; // r5
  Time v6; // r1
  __int64 v8; // [sp+0h] [bp-20h]

  v2 = this;
  if ( !CTRPluginFramework::HookManager::Init(this, a2) )
    return -1;
  v4 = -1;
  for ( i = CTRPluginFramework::HookManager::instance + 16; ; i += 24 )
  {
    if ( v4 == 92 )
      return -3;
    ++v4;
    if ( !*(_BYTE *)i )
    {
      CTRPluginFramework::Seconds((CTRPluginFramework *)&v8, v3);
      if ( CTRPluginFramework::Clock::HasTimePassed((CTRPluginFramework::Clock *)(i + 8), v6) )
        break;
    }
  }
  if ( v2 && *(_DWORD *)(i + 4) == v2 )
    v4 = -2;
  return v4;
}
// 4: using guessed type int CTRPluginFramework::HookManager::instance;

//----- (00000190) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::HookManager::FreeHook(__int64 this, int a2)
{
  _DWORD *v2; // r4
  signed int result; // r0
  int v4; // r5
  __int64 v5; // [sp+0h] [bp-18h]

  v5 = this;
  v2 = (_DWORD *)this;
  result = CTRPluginFramework::HookManager::Init(this, a2);
  if ( result )
  {
    if ( *v2 <= 0x5Cu )
    {
      v4 = CTRPluginFramework::HookManager::instance + 24 * *v2;
      *(_BYTE *)(v4 + 16) = 0;
      result = CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v5);
      *(_DWORD *)(v4 + 20) = 0;
      *v2 = -1;
    }
  }
  return result;
}
// 4: using guessed type int CTRPluginFramework::HookManager::instance;

// ALL OK, 4 function(s) have been successfully decompiled
