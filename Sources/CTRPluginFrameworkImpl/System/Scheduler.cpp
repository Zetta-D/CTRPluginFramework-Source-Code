/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

CTRPluginFramework::Scheduler *__fastcall CTRPluginFramework::Scheduler::~Scheduler(CTRPluginFramework::Scheduler *this);
CTRPluginFramework::Scheduler::Core *__fastcall CTRPluginFramework::Scheduler::Core::Core(CTRPluginFramework::Scheduler::Core *this);
unsigned int __fastcall CTRPluginFramework::Scheduler::Core::Assign(unsigned int result, int *a2);
signed int __fastcall CTRPluginFramework::Scheduler::Schedule(int a1, int a2, int a3);
int __fastcall CTRPluginFramework::Scheduler::Initialize(CTRPluginFramework::Scheduler *this);
int __fastcall CTRPluginFramework::Scheduler::Exit(CTRPluginFramework::Scheduler *this, int a2, int a3);
CTRPluginFramework::Scheduler *__fastcall CTRPluginFramework::Scheduler::Scheduler(CTRPluginFramework::Scheduler *this);
int __fastcall CTRPluginFramework::Scheduler::_PollTask(CTRPluginFramework::Scheduler *this, unsigned int a2);
void __fastcall CTRPluginFramework::Scheduler__CoreHandler(CTRPluginFramework *this, void *a2);
int GLOBAL__sub_I__ZN18CTRPluginFramework9Scheduler10_singletonE();
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int LightEvent_Init(void); weak
// int __fastcall LightEvent_Signal(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *); idb
// _DWORD __cdecl CTRPluginFramework::Lock::~Lock(CTRPluginFramework::Lock *__hidden this); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int std::__detail::_List_node_base::_M_hook(void); weak
// int __fastcall threadCreate(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::System::IsNew3DS(CTRPluginFramework::System *__hidden this); idb
// _DWORD CTRPluginFramework::Mutex::Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// _DWORD CTRPluginFramework::Mutex::TryLock(CTRPluginFramework::Mutex *__hidden this); idb
// _DWORD CTRPluginFramework::Mutex::Unlock(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall LightEvent_Wait(_DWORD); weak
// int __fastcall LightEvent_Clear(_DWORD); weak
// _DWORD CTRPluginFramework::SystemImpl::Status(CTRPluginFramework::SystemImpl *__hidden this); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::Scheduler::_singleton; // weak
int dword_C; // weak
int dword_1C; // weak
int dword_24; // weak
int dword_34; // weak
int dword_38; // weak
int dword_3C; // weak
int dword_4C; // weak
int dword_50; // weak
int dword_54; // weak
_UNKNOWN unk_64; // weak
int dword_70; // weak
int dword_78; // weak
// extern _UNKNOWN CTRPluginFramework::SystemImpl::IsNew3DS; weak
// extern _UNKNOWN _dso_handle; weak


//----- (0000007C) --------------------------------------------------------
CTRPluginFramework::Scheduler *__fastcall CTRPluginFramework::Scheduler::~Scheduler(CTRPluginFramework::Scheduler *this)
{
  CTRPluginFramework::Scheduler *v1; // r4
  char *i; // r0
  char *v3; // r5
  char *v4; // r6

  v1 = this;
  v3 = (char *)this + 108;
  for ( i = (char *)*((_DWORD *)this + 27); i != v3; i = v4 )
  {
    v4 = *(char **)i;
    operator delete(i);
  }
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::Scheduler *)((char *)v1 + 96));
  return v1;
}

//----- (000000B4) --------------------------------------------------------
CTRPluginFramework::Scheduler::Core *__fastcall CTRPluginFramework::Scheduler::Core::Core(CTRPluginFramework::Scheduler::Core *this)
{
  CTRPluginFramework::Scheduler::Core *v1; // r4

  v1 = this;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  LightEvent_Init();
  return v1;
}
// 524: using guessed type int LightEvent_Init(void);

//----- (000000EC) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::Scheduler::Core::Assign(unsigned int result, int *a2)
{
  int v2; // r3
  unsigned int *v3; // r3
  unsigned int v4; // r2

  if ( !*(_DWORD *)(result + 4) )
  {
    *(_DWORD *)(result + 4) = 1;
    v2 = *a2;
    *(_DWORD *)(result + 12) = *a2;
    *(_DWORD *)(v2 + 4) = 1;
    v3 = *(unsigned int **)(result + 12);
    __mcr(15, 0, result, 7, 10, 5);
    do
      v4 = __ldrex(v3);
    while ( __strex(v4 + 1, v3) );
    __mcr(15, 0, result, 7, 10, 5);
    result = LightEvent_Signal(result + 16);
  }
  return result;
}
// 528: using guessed type int __fastcall LightEvent_Signal(_DWORD);

//----- (00000134) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Scheduler::Schedule(int a1, int a2, int a3)
{
  int *v3; // r6
  unsigned int *v4; // r4
  signed int v5; // r5
  unsigned int v6; // r3
  bool v7; // zf
  bool v8; // nf
  unsigned __int8 v9; // vf
  int *v10; // r3
  signed int v11; // r2
  unsigned int v12; // r0
  unsigned int v14; // r3
  int v15; // [sp+0h] [bp-20h]
  int v16; // [sp+4h] [bp-1Ch]
  int v17; // [sp+8h] [bp-18h]

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v3 = (int *)a1;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v15, (CTRPluginFramework::Mutex *)&unk_64);
  v4 = (unsigned int *)*v3;
  if ( *v3 )
  {
    v6 = v4[2];
    if ( CTRPluginFramework::SystemImpl::IsNew3DS )
    {
      v9 = __OFSUB__(v6, 15);
      v7 = v6 == 15;
      v8 = (signed int)(v6 - 15) < 0;
    }
    else
    {
      v9 = __OFSUB__(v6, 3);
      v7 = v6 == 3;
      v8 = (signed int)(v6 - 3) < 0;
    }
    if ( !((unsigned __int8)(v8 ^ v9) | v7) || v6 == -1 )
      v4[2] = 15;
    v10 = &CTRPluginFramework::Scheduler::_singleton;
    v11 = 3;
    do
    {
      v5 = v10[19];
      v12 = (unsigned int)(v10 + 18);
      if ( !v5 && v10[18] & v4[2] )
      {
        CTRPluginFramework::Scheduler::Core::Assign(v12, v3);
        goto LABEL_13;
      }
      --v11;
      v10 -= 6;
    }
    while ( v11 != -1 );
    __mcr(15, 0, v12, 7, 10, 5);
    do
      v14 = __ldrex(v4);
    while ( __strex(v14 + 1, v4) );
    __mcr(15, 0, v12, 7, 10, 5);
    v4[1] = 1;
    *(_DWORD *)(operator new(0xCu) + 8) = v4;
    std::__detail::_List_node_base::_M_hook();
    v5 = 0;
    ++dword_78;
  }
  else
  {
    v5 = -1;
  }
LABEL_13:
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v15);
  return v5;
}
// 4: using guessed type int CTRPluginFramework::Scheduler::_singleton;
// 78: using guessed type int dword_78;
// 538: using guessed type int std::__detail::_List_node_base::_M_hook(void);

//----- (00000240) --------------------------------------------------------
int __fastcall CTRPluginFramework::Scheduler::Initialize(CTRPluginFramework::Scheduler *this)
{
  CTRPluginFramework::System *v1; // r0
  int result; // r0
  int v3; // r0

  CTRPluginFramework::Scheduler::_singleton = 1;
  dword_C = threadCreate(
              CTRPluginFramework::Scheduler__CoreHandler,
              &CTRPluginFramework::Scheduler::_singleton,
              4096,
              32,
              0,
              1);
  dword_1C = 2;
  v1 = (CTRPluginFramework::System *)threadCreate(CTRPluginFramework::Scheduler__CoreHandler, &dword_1C, 4096, 10, 1, 1);
  dword_24 = (int)v1;
  result = CTRPluginFramework::System::IsNew3DS(v1);
  if ( result )
  {
    dword_34 = 4;
    v3 = threadCreate(CTRPluginFramework::Scheduler__CoreHandler, &dword_34, 4096, 24, 2, 1);
    dword_4C = 8;
    dword_3C = v3;
    result = threadCreate(CTRPluginFramework::Scheduler__CoreHandler, &dword_4C, 4096, 24, 3, 1);
    dword_54 = result;
  }
  else
  {
    dword_38 = 2;
    dword_50 = 2;
  }
  return result;
}
// 4: using guessed type int CTRPluginFramework::Scheduler::_singleton;
// C: using guessed type int dword_C;
// 1C: using guessed type int dword_1C;
// 24: using guessed type int dword_24;
// 34: using guessed type int dword_34;
// 38: using guessed type int dword_38;
// 3C: using guessed type int dword_3C;
// 4C: using guessed type int dword_4C;
// 50: using guessed type int dword_50;
// 54: using guessed type int dword_54;
// 540: using guessed type int __fastcall threadCreate(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000314) --------------------------------------------------------
int __fastcall CTRPluginFramework::Scheduler::Exit(CTRPluginFramework::Scheduler *this, int a2, int a3)
{
  signed int v3; // r5
  int *v4; // r4
  CTRPluginFramework::Scheduler *v6; // [sp+0h] [bp-18h]
  int v7; // [sp+4h] [bp-14h]
  int v8; // [sp+8h] [bp-10h]

  v6 = this;
  v7 = a2;
  v8 = a3;
  CTRPluginFramework::Lock::Lock((CTRPluginFramework::Lock *)&v6, (CTRPluginFramework::Mutex *)&unk_64);
  v3 = 4;
  v4 = &CTRPluginFramework::Scheduler::_singleton;
  do
  {
    v4[1] |= 2u;
    LightEvent_Signal(v4 + 4);
    --v3;
    v4 += 6;
  }
  while ( v3 );
  return CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v6);
}
// 4: using guessed type int CTRPluginFramework::Scheduler::_singleton;
// 528: using guessed type int __fastcall LightEvent_Signal(_DWORD);

//----- (00000364) --------------------------------------------------------
CTRPluginFramework::Scheduler *__fastcall CTRPluginFramework::Scheduler::Scheduler(CTRPluginFramework::Scheduler *this)
{
  CTRPluginFramework::Scheduler *v1; // r4
  CTRPluginFramework::Scheduler *v2; // r5
  CTRPluginFramework::Mutex *v3; // r6
  CTRPluginFramework::Scheduler::Core *v4; // r0
  CTRPluginFramework::Scheduler *result; // r0

  v1 = this;
  v2 = this;
  v3 = (CTRPluginFramework::Scheduler *)((char *)this + 96);
  do
  {
    v4 = v2;
    v2 = (CTRPluginFramework::Scheduler *)((char *)v2 + 24);
    CTRPluginFramework::Scheduler::Core::Core(v4);
  }
  while ( v3 != v2 );
  CTRPluginFramework::Mutex::Mutex(v3);
  *((_DWORD *)v1 + 28) = (char *)v1 + 108;
  *((_DWORD *)v1 + 27) = (char *)v1 + 108;
  result = v1;
  *((_DWORD *)v1 + 29) = 0;
  return result;
}

//----- (000003AC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Scheduler::_PollTask(CTRPluginFramework::Scheduler *this, unsigned int a2)
{
  CTRPluginFramework::Scheduler *v2; // r5
  int *i; // r2
  int v4; // r4

  v2 = this;
  if ( !CTRPluginFramework::Mutex::TryLock((CTRPluginFramework::Mutex *)&unk_64) )
  {
    for ( i = (int *)dword_70; i != &dword_70; i = (int *)*i )
    {
      v4 = i[2];
      if ( (unsigned int)v2 & *(_DWORD *)(v4 + 8) )
      {
        CTRPluginFramework::Mutex::Unlock((CTRPluginFramework::Mutex *)&unk_64);
        return v4;
      }
    }
    CTRPluginFramework::Mutex::Unlock((CTRPluginFramework::Mutex *)&unk_64);
  }
  return 0;
}
// 70: using guessed type int dword_70;

//----- (00000418) --------------------------------------------------------
void __fastcall CTRPluginFramework::Scheduler__CoreHandler(CTRPluginFramework *this, void *a2)
{
  CTRPluginFramework *v2; // r5
  char *v3; // r6
  CTRPluginFramework::SystemImpl *v4; // r0
  unsigned int v5; // r0
  unsigned int *v6; // r4
  unsigned int v7; // r3
  unsigned int v8; // r3
  int (__fastcall *v9)(unsigned int); // r3

  v2 = this;
  *((_DWORD *)this + 1) = 0;
  v3 = (char *)this + 16;
  do
  {
    v4 = (CTRPluginFramework::SystemImpl *)CTRPluginFramework::Scheduler::_PollTask(
                                             *(CTRPluginFramework::Scheduler **)v2,
                                             (unsigned int)a2);
    *((_DWORD *)v2 + 3) = v4;
    if ( !v4 )
    {
      *((_DWORD *)v2 + 1) = 0;
      LightEvent_Wait(v3);
      v4 = (CTRPluginFramework::SystemImpl *)LightEvent_Clear(v3);
    }
    v5 = CTRPluginFramework::SystemImpl::Status(v4);
    if ( v5 )
      break;
    v6 = (unsigned int *)*((_DWORD *)v2 + 3);
    *((_DWORD *)v2 + 1) = 1;
    if ( v6 )
    {
      v9 = (int (__fastcall *)(unsigned int))v6[5];
      if ( v9 )
      {
        v6[1] = 2;
        v5 = v9(v6[4]);
        v6[3] = v5;
      }
    }
    __mcr(15, 0, v5, 7, 10, 5);
    do
    {
      v7 = __ldrex(v6);
      v8 = v7 - 1;
    }
    while ( __strex(v8, v6) );
    __mcr(15, 0, v5, 7, 10, 5);
    if ( v8 )
    {
      v6[1] = 4;
      LightEvent_Signal(v6 + 6);
    }
    else
    {
      operator delete(v6);
    }
  }
  while ( *((_DWORD *)v2 + 1) != 2 );
}
// 528: using guessed type int __fastcall LightEvent_Signal(_DWORD);
// 554: using guessed type int __fastcall LightEvent_Wait(_DWORD);
// 558: using guessed type int __fastcall LightEvent_Clear(_DWORD);

//----- (000004E8) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework9Scheduler10_singletonE()
{
  CTRPluginFramework::Scheduler::Scheduler((CTRPluginFramework::Scheduler *)&CTRPluginFramework::Scheduler::_singleton);
  return _aeabi_atexit(
           &CTRPluginFramework::Scheduler::_singleton,
           CTRPluginFramework::Scheduler::~Scheduler,
           &_dso_handle);
}
// 4: using guessed type int CTRPluginFramework::Scheduler::_singleton;
// 560: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);

// ALL OK, 10 function(s) have been successfully decompiled
