/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall L2MMUTable__CreateL2Table(int a1);
unsigned int __fastcall L1Descriptor__GetType(unsigned int a1);
signed int __fastcall L2Descriptor__GetType(unsigned int a1);
signed int __fastcall L2MMUTable__RWXForAll(unsigned int *a1);
unsigned int __fastcall L1MMUTable__RWXForAll(unsigned int *a1);
int __fastcall L1MMUTable__MapHookWrappers(unsigned int a1, int a2, int a3);
// int __fastcall svcConvertVAToPA(_DWORD, _DWORD); weak
// int __fastcall svcGetProcessInfo(_DWORD, _DWORD, _DWORD); weak
// int __fastcall svcBreak(_DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN HookL2Table; // weak
int dword_1200; // weak


//----- (00001400) --------------------------------------------------------
int __fastcall L2MMUTable__CreateL2Table(int a1)
{
  int v1; // r4
  int v2; // r0

  v1 = a1;
  v2 = svcConvertVAToPA(&HookL2Table, 0);
  dword_1200 = v1 & 0xFFFFF000 | 0xDB6;
  return v2 & 0x7FFFFC00 | 1;
}
// 1200: using guessed type int dword_1200;
// 1610: using guessed type int __fastcall svcConvertVAToPA(_DWORD, _DWORD);

//----- (00001440) --------------------------------------------------------
unsigned int __fastcall L1Descriptor__GetType(unsigned int a1)
{
  unsigned int v1; // r3

  v1 = a1 & 3;
  if ( !(a1 & 3) || v1 == 1 )
    return a1 & 3;
  if ( v1 != 2 )
    return 4;
  if ( a1 & 0x40000 )
    return 3;
  return 2;
}

//----- (00001478) --------------------------------------------------------
signed int __fastcall L2Descriptor__GetType(unsigned int a1)
{
  if ( (a1 & 3) == 1 )
    return 5;
  if ( a1 & 2 )
    return 6;
  return 0;
}

//----- (000014A0) --------------------------------------------------------
signed int __fastcall L2MMUTable__RWXForAll(unsigned int *a1)
{
  int v1; // r1
  unsigned int *v2; // r4
  signed int result; // r0
  int v4; // r1
  __int64 v5; // r2

  v1 = 0;
  v2 = a1;
  do
  {
    result = L2Descriptor__GetType(v2[v1]);
    if ( result == 5 )
    {
      HIDWORD(v5) = v5 & 0x7DCF;
    }
    else
    {
      if ( result != 6 )
        goto LABEL_4;
      HIDWORD(v5) = v5 & 0xFFFFFDCE;
    }
    HIDWORD(v5) |= 0x30u;
    v2[v4] = __ROR4__(v5 >> 16, 16);
LABEL_4:
    v1 = v4 + 1;
  }
  while ( v1 != 256 );
  return result;
}

//----- (0000150C) --------------------------------------------------------
unsigned int __fastcall L1MMUTable__RWXForAll(unsigned int *a1)
{
  unsigned int *v1; // r7
  int v2; // r6
  unsigned int result; // r0
  __int64 v4; // r2

  v1 = a1;
  v2 = 0;
  do
  {
    result = L1Descriptor__GetType(v1[v2]);
    switch ( result )
    {
      case 2u:
        HIDWORD(v4) = v4 & 0x73EF;
LABEL_9:
        HIDWORD(v4) |= 0xC00u;
        v1[v2] = __ROR4__(v4 >> 16, 16);
        break;
      case 3u:
        HIDWORD(v4) = v4 & 0xFFFFF3EF;
        goto LABEL_9;
      case 1u:
        result = L2MMUTable__RWXForAll((unsigned int *)(((((unsigned int)v4 >> 10) & 0x1FFFFF) << 10) - 0x40000000));
        break;
    }
    ++v2;
  }
  while ( v2 != 1024 );
  return result;
}

//----- (00001590) --------------------------------------------------------
int __fastcall L1MMUTable__MapHookWrappers(unsigned int a1, int a2, int a3)
{
  unsigned int v3; // r5
  int v4; // r4
  unsigned int v5; // r0
  unsigned int v6; // r2
  int v7; // r0
  int result; // r0
  unsigned int v9; // [sp+0h] [bp-18h]
  int v10; // [sp+4h] [bp-14h]
  int v11; // [sp+8h] [bp-10h]

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v3 = a1;
  svcGetProcessInfo(&v9, -32767, 65545);
  v4 = v10;
  v5 = L1Descriptor__GetType(*(_DWORD *)(v10 + 4 * (v3 >> 20)));
  switch ( v5 )
  {
    case 2u:
      v7 = v6 >> 20 << 20;
      break;
    case 3u:
      v7 = v6 & 0xFF000000;
      break;
    case 1u:
      v7 = v6 & 0x7FFFFC00;
      break;
    default:
      return svcBreak(0);
  }
  result = L2MMUTable__CreateL2Table(v7);
  *(_DWORD *)(v4 + 120) = result;
  return result;
}
// 1614: using guessed type int __fastcall svcGetProcessInfo(_DWORD, _DWORD, _DWORD);
// 1618: using guessed type int __fastcall svcBreak(_DWORD);

// ALL OK, 6 function(s) have been successfully decompiled
