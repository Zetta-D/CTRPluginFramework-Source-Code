/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void *__fastcall CTRPluginFramework::Renderer::GetContext(CTRPluginFramework::Renderer *this);
int __fastcall CTRPluginFramework::Renderer::FontCalcGlyphPos(int a1, _DWORD *a2, int a3);
int __fastcall CTRPluginFramework::Renderer::GetTextSize(int result, const char *a2);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::GetLineCount(CTRPluginFramework::Renderer *this, const char *a2, float a3);
int __fastcall CTRPluginFramework::Renderer::GetTextInfos(int result, const char *a2, int *a3, float *a4, float a5);
int __fastcall CTRPluginFramework::Renderer::DrawGlyph(CTRPluginFramework::ScreenImpl *a1, int a2, signed int a3, int a4, int a5, unsigned int a6);
int __fastcall CTRPluginFramework::Renderer::DrawGlyph(CTRPluginFramework::Renderer *a1, unsigned int a2, int a3, int a4);
int __fastcall CTRPluginFramework::Renderer::DrawGlyph(CTRPluginFramework::ScreenImpl *a1, int a2, signed int a3, int a4, float *a5, int a6);
int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(CTRPluginFramework::Renderer *a1, int a2, int *a3, signed int a4, int a5, int a6);
int CTRPluginFramework::Renderer::DrawSysString(int, unsigned __int8 **, int, int, int, float, int, int); // idb
int __fastcall CTRPluginFramework::Renderer::DrawSysCheckBox(int, CTRPluginFramework::Icon *this, int, int, int, int); // idb
int __fastcall CTRPluginFramework::Renderer::DrawSysFolder(int, CTRPluginFramework::Icon *this, int, int, int); // idb
void GLOBAL__sub_I__ZN18CTRPluginFramework8Renderer16FontCalcGlyphPosEP14fontGlyphPos_sPP15charWidthInfo_siff();
// int __fastcall threadGetCurrent(_DWORD); weak
// int __fastcall fontGetCharWidthInfo(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *__hidden this, unsigned __int8 **); idb
// _DWORD CTRPluginFramework::Glyph::Width(CTRPluginFramework::Glyph *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(CTRPluginFramework::ScreenImpl *__hidden this, int, int); idb
// int __fastcall ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(_DWORD); weak
// int __fastcall CTRPluginFramework::Color::Blend(_DWORD, _DWORD, _DWORD); weak
// int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void); weak
// _DWORD __cdecl CTRPluginFramework::Icon::DrawCheckBox(CTRPluginFramework::Icon *__hidden this, int, int, bool); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawFolder(CTRPluginFramework::Icon *__hidden this, int, int); idb

//-------------------------------------------------------------------------
// Data declarations

char algn_1; // weak
int CTRPluginFramework::RendererPriv::g_customColor; // weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::FromFramebuffer; weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::ToFramebuffer; weak
// extern _UNKNOWN CTRPluginFramework::Renderer::hookContext; weak
// extern _UNKNOWN g_sharedFont; weak
// extern _UNKNOWN charPerSheet; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb


//----- (00000008) --------------------------------------------------------
void *__fastcall CTRPluginFramework::Renderer::GetContext(CTRPluginFramework::Renderer *this)
{
  int v1; // r0
  void *result; // r0

  v1 = threadGetCurrent(this);
  if ( v1 )
    result = (void *)(v1 + 1148);
  else
    result = &CTRPluginFramework::Renderer::hookContext;
  return result;
}
// C60: using guessed type int __fastcall threadGetCurrent(_DWORD);

//----- (00000028) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::FontCalcGlyphPos(int a1, _DWORD *a2, int a3)
{
  float v3; // s0
  int v4; // r4
  unsigned __int8 *v5; // r6
  int v6; // r7
  _DWORD *v7; // r8
  char *v8; // r0
  char *v9; // r5
  int v10; // r1
  int v11; // r0
  int v12; // r1
  int result; // r0
  int v14; // r1
  int v15; // t0
  unsigned int v16; // r2
  float v17; // s12
  float v18; // s13
  float v19; // s14
  float v20; // s15
  float v21; // s10

  v4 = a1;
  v5 = *(unsigned __int8 **)(g_sharedFont + 36);
  v6 = a3;
  v7 = a2;
  v8 = (char *)fontGetCharWidthInfo(a3);
  *v7 = v8;
  v9 = v8;
  v10 = v6 % charPerSheet;
  *(_DWORD *)v4 = v6 / charPerSheet;
  *(float *)(v4 + 4) = (float)*v8 * v3;
  v11 = v10;
  *(float *)(v4 + 8) = (float)(unsigned __int8)v9[2] * v3;
  *(float *)(v4 + 12) = (float)(unsigned __int8)v9[1] * v3;
  v12 = *((unsigned __int16 *)v5 + 6);
  v15 = v11 / v12;
  v14 = v11 % v12;
  result = v15;
  v16 = v5[1];
  v17 = (float)*((unsigned __int16 *)v5 + 8);
  v18 = (float)(v14 + *v5 * v14 + 1) / v17;
  v19 = (float)*((unsigned __int16 *)v5 + 9);
  v20 = 1.0 - (float)((float)(signed int)(v16 + 1 + v15 * (v16 + 1) + 1) / v19);
  v21 = (float)(unsigned __int8)v9[1] / v17;
  *(float *)(v4 + 16) = v18;
  *(float *)(v4 + 24) = v18 + v21;
  *(float *)(v4 + 20) = v20;
  *(float *)(v4 + 28) = (float)((float)v16 / v19) + v20;
  return result;
}
// C6C: using guessed type int __fastcall fontGetCharWidthInfo(_DWORD);

//----- (00000158) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::GetTextSize(int result, const char *a2)
{
  float v2; // s0
  int v3; // r3
  float v4; // s16
  int v5; // r2
  bool v6; // zf
  _BYTE *v7; // r3
  _BYTE *v8; // [sp+4h] [bp-14h]

  if ( result )
  {
    v3 = *(unsigned __int8 *)result;
    v8 = (_BYTE *)result;
    if ( v3 == 239 && *(unsigned __int8 *)(result + 1) == 187 && *(unsigned __int8 *)(result + 2) == 191 )
    {
      result += 3;
      v8 = (_BYTE *)result;
    }
    while ( *v8 == 10 )
      ++v8;
    v4 = 0.0;
    while ( 1 )
    {
      v5 = (unsigned __int8)*v8;
      if ( !*v8 )
        return result;
      v6 = v5 == 10;
      if ( v5 != 10 )
        v6 = v5 == 13;
      if ( v6 || v5 == 24 )
        break;
      if ( v5 == 27 )
      {
        v7 = v8 + 4;
LABEL_15:
        v8 = v7;
      }
      else
      {
        result = CTRPluginFramework::Font::GetGlyph((CTRPluginFramework::Font *)&v8, (unsigned __int8 **)a2);
        if ( !result )
          return result;
        result = CTRPluginFramework::Glyph::Width((CTRPluginFramework::Glyph *)result);
        v4 = v4 + v2;
      }
    }
    v7 = v8 + 1;
    goto LABEL_15;
  }
  return result;
}

//----- (00000224) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::GetLineCount(CTRPluginFramework::Renderer *this, const char *a2, float a3)
{
  float v3; // s0
  CTRPluginFramework::Renderer *v4; // r4
  int v5; // r3
  float v6; // s16
  int v7; // r2
  CTRPluginFramework::Renderer *v8; // r3
  CTRPluginFramework::Glyph *v9; // r0
  CTRPluginFramework::Renderer *v11; // [sp+4h] [bp-14h]

  v4 = this;
  if ( this )
  {
    v5 = *(unsigned __int8 *)this;
    v11 = this;
    if ( v5 == 239 && *((unsigned __int8 *)this + 1) == 187 && *((unsigned __int8 *)this + 2) == 191 )
      v11 = (CTRPluginFramework::Renderer *)((char *)this + 3);
    v6 = 0.0;
    v4 = (CTRPluginFramework::Renderer *)&algn_1;
    while ( 1 )
    {
      v7 = *(unsigned __int8 *)v11;
      if ( !*(_BYTE *)v11 )
        return v4;
      if ( v7 == 13 )
        break;
      switch ( v7 )
      {
        case 10:
          v4 = (CTRPluginFramework::Renderer *)((char *)v4 + 1);
          v11 = (CTRPluginFramework::Renderer *)((char *)v11 + 1);
          v6 = 0.0;
          break;
        case 24:
          goto LABEL_9;
        case 27:
          v8 = (CTRPluginFramework::Renderer *)((char *)v11 + 4);
LABEL_10:
          v11 = v8;
          break;
        default:
          v9 = (CTRPluginFramework::Glyph *)CTRPluginFramework::Font::GetGlyph(
                                              (CTRPluginFramework::Font *)&v11,
                                              (unsigned __int8 **)a2);
          if ( !v9 )
            return v4;
          CTRPluginFramework::Glyph::Width(v9);
          v6 = v6 + v3;
          if ( v6 > v3 )
          {
            v4 = (CTRPluginFramework::Renderer *)((char *)v4 + 1);
            v6 = v3;
          }
          break;
      }
    }
LABEL_9:
    v8 = (CTRPluginFramework::Renderer *)((char *)v11 + 1);
    goto LABEL_10;
  }
  return v4;
}
// 1: using guessed type char;

//----- (00000304) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::GetTextInfos(int result, const char *a2, int *a3, float *a4, float a5)
{
  float v5; // s0
  __int64 v6; // d8
  __int64 v7; // d9
  int v8; // r3
  float v9; // s16
  float v10; // s17
  int *v11; // r4
  const char *v12; // r5
  _BYTE *v13; // r3
  int v14; // r2
  _BYTE *v15; // r3
  _BYTE *v16; // [sp+0h] [bp-24h]
  __int64 v17; // [sp+8h] [bp-1Ch]
  __int64 v18; // [sp+10h] [bp-14h]

  *(_DWORD *)a2 = 0;
  *a3 = 0;
  if ( !result || !*(_BYTE *)result )
    return result;
  v17 = v6;
  v18 = v7;
  *(_DWORD *)a2 = 1;
  v8 = *(unsigned __int8 *)result;
  v16 = (_BYTE *)result;
  if ( v8 == 239 && *(unsigned __int8 *)(result + 1) == 187 && *(unsigned __int8 *)(result + 2) == 191 )
  {
    result += 3;
    v16 = (_BYTE *)result;
  }
  v9 = 0.0;
  v10 = v5;
  v11 = a3;
  v12 = a2;
  while ( 1 )
  {
    v13 = v16;
    v14 = (unsigned __int8)*v16;
    if ( !*v16 )
      break;
    switch ( v14 )
    {
      case 10:
        v5 = 0.0;
        ++*(_DWORD *)v12;
        if ( *(float *)v11 < v9 )
          *(float *)v11 = v9;
        v16 = v13 + 1;
        break;
      case 24:
        v15 = v16 + 1;
LABEL_18:
        v16 = v15;
        v5 = v9;
        break;
      case 27:
        v15 = v16 + 4;
        goto LABEL_18;
      default:
        result = CTRPluginFramework::Font::GetGlyph((CTRPluginFramework::Font *)&v16, (unsigned __int8 **)a2);
        if ( !result )
          goto LABEL_25;
        result = CTRPluginFramework::Glyph::Width((CTRPluginFramework::Glyph *)result);
        if ( (float)(v9 + v5) > v10 )
        {
          ++*(_DWORD *)v12;
          if ( *(float *)v11 < v9 )
            *(float *)v11 = v9;
        }
        else
        {
          v5 = v9 + v5;
        }
        break;
    }
    v9 = v5;
  }
LABEL_25:
  if ( *(float *)v11 < v9 )
    *(float *)v11 = v9;
  return result;
}

//----- (00000450) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawGlyph(CTRPluginFramework::ScreenImpl *a1, int a2, signed int a3, int a4, int a5, unsigned int a6)
{
  int v6; // r6
  _BOOL4 v7; // r1
  signed int v8; // r4
  int v9; // s16
  int v10; // ST04_4
  int v11; // r9
  int v12; // r10
  int v13; // r0
  int v14; // r8
  int v15; // r5
  int v16; // r7
  unsigned int v17; // r3
  signed int v19; // [sp+0h] [bp-40h]
  int v20; // [sp+8h] [bp-38h]
  int v21; // [sp+Ch] [bp-34h]

  v6 = a2;
  v7 = a2 == 0;
  if ( a1 )
    v8 = v7;
  else
    v8 = 1;
  v19 = a4;
  if ( !v8 )
  {
    v9 = (signed int)(float)((float)a3 + *(float *)v6);
    v10 = *((_DWORD *)a1 + 12);
    v11 = *((_DWORD *)a1 + 14);
    v12 = *(_DWORD *)(v6 + 8);
    v13 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(a1, v9, a4);
    v14 = __mrc(15, 0, 13, 0, 3);
    v15 = v13;
    v16 = v13;
    while ( 1 )
    {
      v17 = *(unsigned __int8 *)(v12 + v8);
      if ( v17 > 0x19 )
      {
        HIBYTE(a5) = *(_BYTE *)(v12 + v8);
        if ( &ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE )
          ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(v13);
        v20 = (*(int (__fastcall **)(int))((char *)&CTRPluginFramework::PrivColor::FromFramebuffer + v14))(v15);
        v21 = CTRPluginFramework::Color::Blend(&v20, &a5, 0);
        if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
          ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE();
        (*(void (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v14))(v15, &v21);
      }
      if ( ++v8 == 208 )
        break;
      v13 = v8 / 13;
      if ( v8 % 13 )
        v17 = a6;
      else
        v16 -= v11;
      if ( v8 % 13 )
        v15 += v17;
      else
        v15 = v16;
    }
    v19 = (signed int)(float)((float)v9 + *(float *)(v6 + 4));
  }
  return v19;
}
// C88: using guessed type int __fastcall ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(_DWORD);
// C8C: using guessed type int __fastcall CTRPluginFramework::Color::Blend(_DWORD, _DWORD, _DWORD);
// C90: using guessed type int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void);

//----- (00000594) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawGlyph(CTRPluginFramework::Renderer *a1, unsigned int a2, int a3, int a4)
{
  unsigned int v4; // ST04_4
  int v5; // r7
  signed int v6; // r5
  int v7; // r6
  int v8; // r4
  CTRPluginFramework::ScreenImpl **v9; // r0

  v4 = a2;
  v5 = a4;
  v6 = a2;
  v7 = a3;
  v8 = (int)a1;
  v9 = (CTRPluginFramework::ScreenImpl **)CTRPluginFramework::Renderer::GetContext(a1);
  return CTRPluginFramework::Renderer::DrawGlyph(v9[1], v8, v6, v7, v5, v4);
}

//----- (000005CC) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawGlyph(CTRPluginFramework::ScreenImpl *a1, int a2, signed int a3, int a4, float *a5, int a6)
{
  bool v6; // zf
  int v7; // s16
  int v8; // r10
  int v9; // r5
  int v10; // r0
  int v11; // r7
  signed int v12; // r9
  int v13; // r4
  int v14; // r8
  unsigned int v15; // r3
  int v17; // [sp+4h] [bp-44h]
  int v18; // [sp+8h] [bp-40h]
  int v19; // [sp+Ch] [bp-3Ch]
  int v20; // [sp+10h] [bp-38h]
  int v21; // [sp+14h] [bp-34h]

  v6 = a2 == 0;
  if ( a2 )
    v6 = a1 == 0;
  v17 = a4;
  if ( !v6 )
  {
    v7 = (signed int)(float)((float)a3 + *(float *)a2);
    v18 = *((_DWORD *)a1 + 12);
    v8 = *(_DWORD *)(a2 + 8);
    v9 = a2;
    v19 = *((_DWORD *)a1 + 14);
    v10 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(a1, v7, a4);
    v11 = v10;
    v12 = (signed int)*a5;
    v13 = v10;
    v14 = __mrc(15, 0, 13, 0, 3);
    while ( v12 <= 207 )
    {
      if ( v12 )
      {
        v10 = v12 / 13;
        if ( !(v12 % 13) )
        {
          if ( *a5 != 0.0 )
            v12 = (signed int)(float)((float)v12 + *a5);
          v11 -= v19;
          v13 = v11;
        }
      }
      v15 = *(unsigned __int8 *)(v8 + v12);
      if ( v15 > 0x19 )
      {
        HIBYTE(a6) = *(_BYTE *)(v8 + v12);
        if ( &ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE )
          ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(v10);
        v20 = (*(int (__fastcall **)(int))((char *)&CTRPluginFramework::PrivColor::FromFramebuffer + v14))(v13);
        v21 = CTRPluginFramework::Color::Blend(&v20, &a6, 0);
        if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
          ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE();
        v10 = (*(int (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v14))(
                v13,
                &v21);
      }
      ++v12;
      v13 += v18;
    }
    if ( *a5 > 0.0 )
    {
      v7 = (signed int)(float)((float)v7 - *a5);
      *a5 = 0.0;
    }
    v17 = (signed int)(float)((float)v7 + *(float *)(v9 + 4));
  }
  return v17;
}
// C88: using guessed type int __fastcall ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(_DWORD);
// C8C: using guessed type int __fastcall CTRPluginFramework::Color::Blend(_DWORD, _DWORD, _DWORD);
// C90: using guessed type int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void);

//----- (0000076C) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawSysStringReturn(CTRPluginFramework::Renderer *a1, int a2, int *a3, signed int a4, int a5, int a6)
{
  float v6; // s0
  int v7; // r6
  int v8; // r4
  signed int v9; // r11
  int *v10; // r5
  CTRPluginFramework::Renderer *v11; // r0
  CTRPluginFramework::ScreenImpl *v12; // r8
  signed int v13; // r3
  int v14; // r7
  int v15; // r1
  int v16; // r3
  int v17; // r2
  CTRPluginFramework::Renderer *v18; // r1
  unsigned int v20; // r4
  unsigned int v21; // r4
  CTRPluginFramework::Glyph *v22; // r0
  int v23; // r9
  int v24; // r3
  unsigned int v25; // [sp+4h] [bp-34h]
  CTRPluginFramework::Renderer *v26; // [sp+Ch] [bp-2Ch]

  v7 = a2;
  v8 = a5;
  if ( a1 )
  {
    v9 = a4;
    if ( *(_BYTE *)a1 )
    {
      v10 = a3;
      v26 = a1;
      v11 = (CTRPluginFramework::Renderer *)CTRPluginFramework::Renderer::GetContext(a1);
      v12 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)v11 + 1);
      if ( !v12 )
        return *v10;
      if ( *(_BYTE *)CTRPluginFramework::Renderer::GetContext(v11) == 1 )
        v13 = 400;
      else
        v13 = 320;
      if ( v13 < v9 )
        v9 = v13;
      if ( *(unsigned __int8 *)v26 == 239
        && *((unsigned __int8 *)v26 + 1) == 187
        && *((unsigned __int8 *)v26 + 2) == 191 )
      {
        v26 = (CTRPluginFramework::Renderer *)((char *)v26 + 3);
      }
      v14 = v7;
      while ( 1 )
      {
        v15 = (int)v26;
        v16 = *v10;
        v17 = *(unsigned __int8 *)v26;
        switch ( v17 )
        {
          case 13:
            v15 = (int)v26 + 1;
            v26 = (CTRPluginFramework::Renderer *)((char *)v26 + 1);
            break;
          case 10:
            v14 = v7;
            v18 = (CTRPluginFramework::Renderer *)((char *)v26 + 1);
            *v10 = v16 + 16;
            v26 = v18;
            goto LABEL_19;
          case 24:
            v8 = CTRPluginFramework::Preferences::Settings[4];
            v26 = (CTRPluginFramework::Renderer *)((char *)v26 + 1);
            goto LABEL_19;
          case 27:
            v26 = (CTRPluginFramework::Renderer *)((char *)v26 + 2);
            v20 = *(unsigned __int8 *)(v15 + 1) | v8 & 0xFFFFFF00;
            v26 = (CTRPluginFramework::Renderer *)(v15 + 3);
            v21 = v20 & 0xFFFF00FF | (*(unsigned __int8 *)(v15 + 2) << 8);
            v26 = (CTRPluginFramework::Renderer *)(v15 + 4);
            v8 = v21 & 0xFF00FFFF | (*(unsigned __int8 *)(v15 + 3) << 16);
            goto LABEL_19;
        }
        if ( v16 >= a6
          || (v22 = (CTRPluginFramework::Glyph *)CTRPluginFramework::Font::GetGlyph(
                                                   (CTRPluginFramework::Font *)&v26,
                                                   (unsigned __int8 **)v15),
              (v23 = (int)v22) == 0) )
        {
LABEL_20:
          v7 = v14;
          *v10 += 16;
          return v7;
        }
        CTRPluginFramework::Glyph::Width(v22);
        v6 = (float)v14 + v6;
        if ( v6 >= (float)v9 )
        {
          v14 = v7;
          v24 = *v10;
        }
        if ( v6 >= (float)v9 )
          *v10 = v24 + 16;
        v14 = CTRPluginFramework::Renderer::DrawGlyph(v12, v23, v14, *v10, v8, v25);
LABEL_19:
        if ( !*(_BYTE *)v26 )
          goto LABEL_20;
      }
    }
  }
  return v7;
}

//----- (00000930) --------------------------------------------------------
#error "B50: call analysis failed (funcsize=139)"

//----- (00000B64) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawSysCheckBox(int a1, CTRPluginFramework::Icon *this, int a3, int a4, int a5, int a6)
{
  _DWORD *v6; // r4
  CTRPluginFramework::Icon *v7; // r5
  int v8; // r6
  int v9; // r7
  int result; // r0
  int v11; // [sp+8h] [bp-20h]
  int v12; // [sp+Ch] [bp-1Ch]

  v6 = (_DWORD *)a3;
  v7 = this;
  v8 = a1;
  v9 = a4;
  CTRPluginFramework::Icon::DrawCheckBox(this, *(_DWORD *)a3, (unsigned __int8)a6, a4);
  result = CTRPluginFramework::Renderer::DrawSysString(v8, (unsigned __int8 **)v7 + 5, (int)v6, v9, a5, 0.0, v11, v12);
  ++*v6;
  return result;
}

//----- (00000BD4) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawSysFolder(int a1, CTRPluginFramework::Icon *this, int a3, int a4, int a5)
{
  CTRPluginFramework::Icon *v5; // r5
  int v6; // r6
  _DWORD *v7; // r4
  int v8; // r7
  int result; // r0
  int v10; // [sp+8h] [bp-20h]
  int v11; // [sp+Ch] [bp-1Ch]

  v5 = this;
  v6 = a1;
  v7 = (_DWORD *)a3;
  v8 = a4;
  CTRPluginFramework::Icon::DrawFolder(this, *(_DWORD *)a3, a3);
  result = CTRPluginFramework::Renderer::DrawSysString(v6, (unsigned __int8 **)v5 + 5, (int)v7, v8, a5, 0.0, v10, v11);
  ++*v7;
  return result;
}

//----- (00000C40) --------------------------------------------------------
void GLOBAL__sub_I__ZN18CTRPluginFramework8Renderer16FontCalcGlyphPosEP14fontGlyphPos_sPP15charWidthInfo_siff()
{
  CTRPluginFramework::RendererPriv::g_customColor = -16777216;
}
// 4: using guessed type int CTRPluginFramework::RendererPriv::g_customColor;

#error "There were 1 decompilation failure(s) on 13 function(s)"
