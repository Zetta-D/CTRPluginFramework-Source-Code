/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int CTRPluginFramework::Drawable::operator()();
int __fastcall CTRPluginFramework::TouchKey::Update(int result, int a2, int *a3);
int __fastcall CTRPluginFramework::TouchKey::TouchKey(int a1, _DWORD *a2);
int __fastcall CTRPluginFramework::TouchKey::TouchKey(int a1, int a2, int a3, int a4, int a5, int a6, char a7);
int __fastcall CTRPluginFramework::TouchKey::TouchKey(int result, int a2, int a3, int a4, int a5, int a6, int a7, char a8);
void __fastcall CTRPluginFramework::TouchKey::Clear(CTRPluginFramework::TouchKey *this);
CTRPluginFramework::TouchKey *__fastcall CTRPluginFramework::TouchKey::~TouchKey(CTRPluginFramework::TouchKey *this);
CTRPluginFramework::TouchKey *__fastcall CTRPluginFramework::TouchKey::~TouchKey(CTRPluginFramework::TouchKey *this);
int __fastcall CTRPluginFramework::TouchKey::Enable(int result, bool a2);
int __fastcall CTRPluginFramework::TouchKey::DrawCharacter(int result, _DWORD *a2);
int __fastcall CTRPluginFramework::TouchKey::Draw(CTRPluginFramework::TouchKey *this);
signed int __fastcall CTRPluginFramework::TouchKey::operator()(int a1, int a2);
void __fastcall std::vector<CTRPluginFramework::Glyph *,std::allocator<CTRPluginFramework::Glyph *>>::_M_realloc_insert<CTRPluginFramework::Glyph * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::TouchKey::TouchKey(CTRPluginFramework::Renderer *a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8);
// _DWORD __cdecl CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *__hidden this, char); idb
// _DWORD CTRPluginFramework::Glyph::Width(CTRPluginFramework::Glyph *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::Renderer::DrawGlyph(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::GetTextSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// _DWORD __cdecl CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *__hidden this, unsigned __int8 **); idb

//-------------------------------------------------------------------------
// Data declarations

_DWORD (__fastcall *off_684[2])(CTRPluginFramework::TouchKey *__hidden this) =
{
  &CTRPluginFramework::TouchKey::~TouchKey,
  &CTRPluginFramework::TouchKey::~TouchKey
}; // weak
// extern _UNKNOWN CTRPluginFramework::Preferences::Settings; weak


//----- (00000004) --------------------------------------------------------
int CTRPluginFramework::Drawable::operator()()
{
  return 0;
}

//----- (0000000C) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::Update(int result, int a2, int *a3)
{
  int v3; // r12
  int v4; // r6
  int v5; // r3
  _BOOL4 v6; // r4
  int v7; // r5
  int v8; // lr
  int v9; // r2
  int v10; // r3
  int v11; // r2
  bool v12; // zf
  char v13; // r1

  if ( *(_BYTE *)(result + 42) )
  {
    v3 = *(_DWORD *)(result + 20);
    v4 = *a3;
    if ( v3 < v3 + *(_DWORD *)(result + 28) )
    {
      v5 = *(_DWORD *)(result + 20);
      v3 += *(_DWORD *)(result + 28);
    }
    else
    {
      v5 = v3 + *(_DWORD *)(result + 28);
    }
    v6 = v4 >= v5;
    if ( v4 >= v3 )
      v6 = 0;
    v7 = a3[1];
    v8 = *(_DWORD *)(result + 32);
    v9 = *(_DWORD *)(result + 24);
    if ( v6 )
    {
      if ( v9 >= v9 + v8 )
        v10 = v9 + v8;
      else
        v10 = *(_DWORD *)(result + 24);
      if ( v9 < v9 + v8 )
        v9 += v8;
      LOBYTE(v6) = v7 >= v10;
      if ( v7 >= v9 )
        LOBYTE(v6) = 0;
    }
    v11 = *(unsigned __int8 *)(result + 40) ^ 1;
    v12 = (a2 | v11) == 0;
    if ( !(a2 | v11) )
      LOBYTE(v11) = 1;
    v13 = a2 & v6;
    if ( v12 )
      *(_BYTE *)(result + 41) = v11;
    *(_BYTE *)(result + 40) = v13;
  }
  return result;
}

//----- (000000AC) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::TouchKey(int a1, _DWORD *a2)
{
  _DWORD *v2; // lr
  int v3; // r12
  _DWORD *v4; // r5
  int v5; // r3
  int v6; // r0
  int v7; // r1
  int v8; // r2
  int v9; // r3
  int result; // r0

  *(_DWORD *)a1 = off_684;
  v2 = a2;
  v3 = a1;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 1;
  v4 = (_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = a2[3];
  *(_DWORD *)(a1 + 16) = a2[4];
  v5 = (int)(a2 + 5);
  v6 = a2[5];
  v7 = a2[6];
  v8 = *(_DWORD *)(v5 + 8);
  v9 = *(_DWORD *)(v5 + 12);
  *v4 = v6;
  v4[1] = v7;
  v4[2] = v8;
  v4[3] = v9;
  result = v3;
  *(_WORD *)(v3 + 36) = *((_WORD *)v2 + 18);
  *(_WORD *)(v3 + 38) = *((_WORD *)v2 + 19);
  *(_BYTE *)(v3 + 40) = *((_BYTE *)v2 + 40);
  *(_BYTE *)(v3 + 42) = *((_BYTE *)v2 + 42);
  *(_BYTE *)(v3 + 41) = *((_BYTE *)v2 + 41);
  v2[3] = 0;
  return result;
}
// 684: using guessed type _DWORD (__fastcall *off_684[2])(CTRPluginFramework::TouchKey *__hidden this);

//----- (0000015C) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::TouchKey(int a1, int a2, int a3, int a4, int a5, int a6, char a7)
{
  float v7; // s0
  int v8; // r4
  _DWORD *v9; // r12
  CTRPluginFramework::Glyph *v10; // r0
  __int16 v12; // [sp+10h] [bp-8h]
  __int16 v13; // [sp+14h] [bp-4h]

  v12 = a3;
  v13 = a4;
  v8 = a1;
  *(_DWORD *)a1 = off_684;
  v9 = (_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 4) = a2;
  *v9 = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  *(_BYTE *)(a1 + 42) = a7;
  v10 = (CTRPluginFramework::Glyph *)CTRPluginFramework::Font::GetGlyph(
                                       (CTRPluginFramework::Font *)(unsigned __int8)a2,
                                       a4);
  *(_DWORD *)(v8 + 8) = v10;
  if ( v10 )
  {
    CTRPluginFramework::Glyph::Width(v10);
    *(_WORD *)(v8 + 36) = v12 + ((a5 - (signed int)v7) >> 1);
    *(_WORD *)(v8 + 38) = v13 + ((a6 - 16) >> 1);
  }
  return v8;
}
// 684: using guessed type _DWORD (__fastcall *off_684[2])(CTRPluginFramework::TouchKey *__hidden this);

//----- (00000208) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::TouchKey(int result, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  int v8; // r12
  _DWORD *v9; // lr

  v8 = result;
  *(_DWORD *)result = off_684;
  v9 = (_DWORD *)(result + 20);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_WORD *)(result + 40) = 0;
  *(_DWORD *)(result + 4) = a2;
  *(_DWORD *)(result + 16) = a3;
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  *(_BYTE *)(result + 42) = a8;
  *(_WORD *)(v8 + 36) = a4 + ((*(_DWORD *)(v8 + 28) - 15) >> 1);
  *(_WORD *)(v8 + 38) = *(_WORD *)(v8 + 24) + ((*(_DWORD *)(v8 + 32) - 15) >> 1);
  return result;
}
// 684: using guessed type _DWORD (__fastcall *off_684[2])(CTRPluginFramework::TouchKey *__hidden this);

//----- (00000288) --------------------------------------------------------
void __fastcall CTRPluginFramework::TouchKey::Clear(CTRPluginFramework::TouchKey *this)
{
  void **v1; // r5
  CTRPluginFramework::TouchKey *v2; // r4

  v1 = (void **)*((_DWORD *)this + 3);
  if ( v1 )
  {
    v2 = this;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1 + 3);
    if ( *v1 )
      operator delete(*v1);
    operator delete(v1);
    *((_DWORD *)v2 + 3) = 0;
  }
}
// 6A0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000002C8) --------------------------------------------------------
CTRPluginFramework::TouchKey *__fastcall CTRPluginFramework::TouchKey::~TouchKey(CTRPluginFramework::TouchKey *this)
{
  CTRPluginFramework::TouchKey *v1; // r4

  v1 = this;
  *(_DWORD *)this = off_684;
  CTRPluginFramework::TouchKey::Clear(this);
  return v1;
}
// 684: using guessed type _DWORD (__fastcall *off_684[2])(CTRPluginFramework::TouchKey *__hidden this);

//----- (000002E8) --------------------------------------------------------
CTRPluginFramework::TouchKey *__fastcall CTRPluginFramework::TouchKey::~TouchKey(CTRPluginFramework::TouchKey *this)
{
  CTRPluginFramework::TouchKey *v1; // r4

  v1 = this;
  CTRPluginFramework::TouchKey::~TouchKey(this);
  operator delete((void *)v1);
  return v1;
}

//----- (00000304) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::Enable(int result, bool a2)
{
  *(_BYTE *)(result + 42) = a2;
  return result;
}

//----- (0000030C) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::DrawCharacter(int result, _DWORD *a2)
{
  __int64 *v2; // r3
  int v3; // r4
  __int64 v4; // r6
  _DWORD *v5; // r5
  int v6; // r1
  int v7; // t1

  v2 = *(__int64 **)(result + 12);
  if ( v2 )
  {
    v3 = result;
    v4 = *v2;
    v5 = a2;
    v6 = *(unsigned __int16 *)(result + 36);
    while ( HIDWORD(v4) != (_DWORD)v4 )
    {
      v7 = *(_DWORD *)v4;
      LODWORD(v4) = v4 + 4;
      result = CTRPluginFramework::Renderer::DrawGlyph(v7, v6, *(unsigned __int16 *)(v3 + 38), *v5);
      v6 = result;
    }
  }
  else if ( *(_DWORD *)(result + 8) )
  {
    result = CTRPluginFramework::Renderer::DrawGlyph(
               *(_DWORD *)(result + 8),
               *(unsigned __int16 *)(result + 36),
               *(unsigned __int16 *)(result + 38),
               *a2);
  }
  return result;
}
// 6A8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawGlyph(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0000036C) --------------------------------------------------------
int __fastcall CTRPluginFramework::TouchKey::Draw(CTRPluginFramework::TouchKey *this)
{
  CTRPluginFramework::TouchKey *v1; // r4
  char *v2; // r1
  _DWORD *v3; // r5
  int (__fastcall *v4)(_DWORD, _DWORD, _DWORD); // r3
  int result; // r0

  v1 = this;
  if ( *((_BYTE *)this + 40) )
    v2 = (char *)&CTRPluginFramework::Preferences::Settings + 56;
  else
    v2 = (char *)&CTRPluginFramework::Preferences::Settings + 52;
  v3 = v2 + 8;
  CTRPluginFramework::Renderer::DrawRect((char *)this + 20);
  v4 = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))*((_DWORD *)v1 + 4);
  if ( v4 )
    result = v4(*((unsigned __int16 *)v1 + 18), *((unsigned __int16 *)v1 + 19), 0);
  else
    result = CTRPluginFramework::TouchKey::DrawCharacter((int)v1, v3);
  return result;
}
// 6AC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD);

//----- (000003CC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::TouchKey::operator()(int a1, int a2)
{
  int v2; // r2
  int v3; // r4
  int v4; // r0
  int v5; // r1

  if ( *(_BYTE *)(a1 + 42) )
  {
    v2 = *(_DWORD *)(a1 + 4);
    v3 = a1;
    if ( v2 == 8 )
    {
      if ( *(_BYTE *)(a1 + 40) )
        return v2;
      if ( *(_BYTE *)(a1 + 41) )
      {
        *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
        return -9;
      }
    }
    else if ( *(_BYTE *)(a1 + 41) )
    {
      v4 = a2;
      v5 = *(_DWORD *)(v3 + 12);
      *(_BYTE *)(v3 + 41) = 0;
      if ( v5 )
      {
        if ( v2 == 305419896 )
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(v4, v5 + 12);
      }
      return *(_DWORD *)(v3 + 4);
    }
    return -1;
  }
  return -1;
}
// 6B4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);

//----- (00000468) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Glyph *,std::allocator<CTRPluginFramework::Glyph *>>::_M_realloc_insert<CTRPluginFramework::Glyph * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (0000052C) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::TouchKey::TouchKey(CTRPluginFramework::Renderer *a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  int v8; // s0
  CTRPluginFramework::Renderer *v9; // r4
  CTRPluginFramework::Renderer **v10; // r8
  float *v11; // r5
  const char *v12; // r1
  unsigned __int8 **v13; // r1
  int v14; // r0
  int v15; // r0
  int v16; // r1
  signed int v17; // s15
  int *v18; // r12
  CTRPluginFramework::Renderer *result; // r0
  CTRPluginFramework::Renderer *v20; // [sp+0h] [bp-20h]
  int v21; // [sp+4h] [bp-1Ch]
  int vars0; // [sp+20h] [bp+0h]
  int vars4; // [sp+24h] [bp+4h]

  v20 = a1;
  v21 = a2;
  vars0 = a3;
  vars4 = a4;
  *(_DWORD *)a1 = off_684;
  *((_BYTE *)a1 + 42) = 1;
  *((_DWORD *)a1 + 2) = 0;
  *((_DWORD *)a1 + 1) = a7;
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 4) = 0;
  *((_DWORD *)a1 + 5) = 0;
  *((_DWORD *)a1 + 6) = 0;
  *((_DWORD *)a1 + 7) = 0;
  *((_DWORD *)a1 + 8) = 0;
  *((_DWORD *)a1 + 9) = 0;
  *((_WORD *)a1 + 20) = 0;
  v9 = a1;
  v10 = (CTRPluginFramework::Renderer **)a2;
  v11 = (float *)operator new(0x28u);
  *v11 = 0.0;
  v11[1] = 0.0;
  v11[2] = 0.0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v11 + 3, v10);
  CTRPluginFramework::Renderer::GetTextSize(*v10, v12);
  *((_DWORD *)v11 + 9) = v8;
  v20 = *v10;
  do
  {
    v14 = CTRPluginFramework::Font::GetGlyph((CTRPluginFramework::Font *)&v20, v13);
    v21 = v14;
    if ( !v14 )
      break;
    v13 = (unsigned __int8 **)*((_DWORD *)v11 + 1);
    if ( v13 == *((unsigned __int8 ***)v11 + 2) )
    {
      std::vector<CTRPluginFramework::Glyph *,std::allocator<CTRPluginFramework::Glyph *>>::_M_realloc_insert<CTRPluginFramework::Glyph * const&>(
        v11,
        v13,
        &v21);
    }
    else
    {
      *v13 = (unsigned __int8 *)v14;
      *((_DWORD *)v11 + 1) += 4;
    }
  }
  while ( *(_BYTE *)v20 );
  v15 = vars0;
  v16 = vars4;
  v17 = (signed int)v11[9];
  v18 = (int *)((char *)v9 + 20);
  *((_DWORD *)v9 + 3) = v11;
  *((_DWORD *)v9 + 4) = 0;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = a5;
  v18[3] = a6;
  result = v9;
  *((_BYTE *)v9 + 42) = a8;
  *((_WORD *)v9 + 20) = 0;
  *((_WORD *)v9 + 18) = vars0 + ((a5 - v17) >> 1);
  *((_WORD *)v9 + 19) = vars4 + ((a6 - 16) >> 1);
  return result;
}
// 684: using guessed type _DWORD (__fastcall *off_684[2])(CTRPluginFramework::TouchKey *__hidden this);
// 6C4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);

// ALL OK, 14 function(s) have been successfully decompiled
