/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

float __fastcall CTRPluginFramework::MessageBoxImpl::MessageBoxImpl(float a1, CTRPluginFramework::Renderer **a2, int a3, int a4, int a5);
int __fastcall CTRPluginFramework::MessageBoxImpl::MessageBoxImpl(int a1, int a2, int a3, int a4);
int __fastcall CTRPluginFramework::MessageBoxImpl::_ProcessEvent(int result, Event *a2);
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1);
_DWORD CTRPluginFramework::MessageBoxImpl::_Draw(CTRPluginFramework::MessageBoxImpl *this); // idb
bool __fastcall CTRPluginFramework::MessageBoxImpl::operator()(int a1, bool a2);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::TextBox::TextBox(CTRPluginFramework::TextBox *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::GetTextInfos(CTRPluginFramework::Renderer *__hidden this, const char *, int *, float *, float); idb
// int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::TextBox::Open(CTRPluginFramework::TextBox *__hidden this); idb
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect2(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::TextBox::Draw(CTRPluginFramework::TextBox *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::GetTextSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Pause(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb
// _DWORD CTRPluginFramework::EventManager::EventManager(CTRPluginFramework::EventManager *__hidden this); idb
// _DWORD CTRPluginFramework::Controller::Update(CTRPluginFramework::Controller *__hidden this); idb
// _DWORD CTRPluginFramework::Controller::GetKeysDown(CTRPluginFramework::Controller *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::EventManager::PollEvent(CTRPluginFramework::EventManager *__hidden this, Event *); idb
// _DWORD CTRPluginFramework::Window::Draw(CTRPluginFramework::Window *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::TextBox::ProcessEvent(CTRPluginFramework::TextBox *__hidden this, Event *); idb
// _DWORD CTRPluginFramework::PluginMenu::GetRunningInstance(CTRPluginFramework::PluginMenu *__hidden this); idb
// _DWORD CTRPluginFramework::PluginMenu::IsOpen(CTRPluginFramework::PluginMenu *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::Clean(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ProcessImpl::Play(CTRPluginFramework::ProcessImpl *__hidden this, bool); idb

//-------------------------------------------------------------------------
// Data declarations

// extern _UNKNOWN CTRPluginFramework::ProcessImpl::IsPaused; weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak


//----- (00000004) --------------------------------------------------------
float __fastcall CTRPluginFramework::MessageBoxImpl::MessageBoxImpl(float a1, CTRPluginFramework::Renderer **a2, int a3, int a4, int a5)
{
  float v5; // r4
  CTRPluginFramework::Renderer **v6; // r7
  int v7; // r8
  int v8; // r6
  CTRPluginFramework::Renderer **v9; // r9
  signed int v10; // r10
  float *v11; // r3
  float v12; // ST00_4
  int v13; // s15
  int v14; // s15
  signed int v15; // s15
  signed int v16; // r12
  int v17; // r7
  int v18; // r8
  int v19; // r9
  int v20; // lr
  _DWORD *v21; // r10
  int v22; // r1
  int v23; // r2
  int v24; // r3
  float result; // r0
  float v26; // [sp+0h] [bp-30h]
  char v27[4]; // [sp+4h] [bp-2Ch]
  int v28; // [sp+8h] [bp-28h]
  int v29; // [sp+Ch] [bp-24h]

  v26 = a1;
  *(_DWORD *)v27 = a2;
  v28 = a3;
  v29 = a4;
  v5 = a1;
  v6 = (CTRPluginFramework::Renderer **)a3;
  v7 = a4;
  v8 = LODWORD(a1) + 24;
  v9 = a2;
  ((void (*)(void))std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string)();
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v8, v6);
  *(_DWORD *)(LODWORD(v5) + 48) = v7;
  *(_DWORD *)(LODWORD(v5) + 52) = a5;
  CTRPluginFramework::TextBox::TextBox((CTRPluginFramework::TextBox *)(LODWORD(v5) + 56));
  *(_BYTE *)(LODWORD(v5) + 176) = 0;
  *(_DWORD *)(LODWORD(v5) + 180) = 0;
  *(_DWORD *)(LODWORD(v5) + 184) = 0;
  *(_DWORD *)(LODWORD(v5) + 188) = 0;
  *(_DWORD *)(LODWORD(v5) + 192) = 0;
  *(_DWORD *)(LODWORD(v5) + 196) = 0;
  if ( v7 )
    v10 = 200;
  else
    v10 = 100;
  CTRPluginFramework::Renderer::GetTextInfos(*v9, v27, &v29, 0, v26);
  CTRPluginFramework::Renderer::GetTextInfos(*v6, v27, &v28, v11, v12);
  v13 = v29;
  if ( *(float *)&v29 <= *(float *)&v28 )
    v13 = v28;
  *(float *)&v14 = *(float *)&v13 + 10.0;
  v28 = v14;
  v15 = (signed int)(float)(*(float *)&v14 + 11.0);
  v16 = v15;
  if ( *(_DWORD *)v27 > 10 )
    *(_DWORD *)v27 = 10;
  if ( v15 < v10 )
    v16 = v10;
  v17 = 16 * *(_DWORD *)v27;
  v18 = 16 * *(_DWORD *)v27 + 72;
  v19 = (168 - 16 * *(_DWORD *)v27) >> 1;
  v20 = (400 - v16) / 2;
  *(_DWORD *)(LODWORD(v5) + 196) = 16 * *(_DWORD *)v27 + 47;
  *(_DWORD *)(LODWORD(v5) + 184) = v20;
  *(_DWORD *)(LODWORD(v5) + 192) = v16;
  *(_DWORD *)(LODWORD(v5) + 188) = v19;
  v21 = (_DWORD *)(LODWORD(v5) + 100);
  v22 = *(_DWORD *)(LODWORD(v5) + 188);
  v23 = *(_DWORD *)(LODWORD(v5) + 192);
  v24 = *(_DWORD *)(LODWORD(v5) + 196);
  *v21 = *(_DWORD *)(LODWORD(v5) + 184);
  v21[1] = v22;
  v21[2] = v23;
  v21[3] = v24;
  *(_DWORD *)(LODWORD(v5) + 120) = v19 + 2;
  *(_DWORD *)(LODWORD(v5) + 128) = v17 + 43;
  *(_DWORD *)(LODWORD(v5) + 116) = v20 + 2;
  *(_DWORD *)(LODWORD(v5) + 124) = v16 - 4;
  *(_DWORD *)(LODWORD(v5) + 196) = v18;
  CTRPluginFramework::TextBox::Update(LODWORD(v5) + 56, LODWORD(v5), v8);
  CTRPluginFramework::TextBox::Open((CTRPluginFramework::TextBox *)(LODWORD(v5) + 56));
  result = v5;
  *(_WORD *)(LODWORD(v5) + 134) = 0;
  return result;
}
// 7F4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 800: using guessed type int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD);

//----- (0000017C) --------------------------------------------------------
int __fastcall CTRPluginFramework::MessageBoxImpl::MessageBoxImpl(int a1, int a2, int a3, int a4)
{
  int v4; // r4
  int v5; // r5
  int v6; // r8
  CTRPluginFramework::Renderer **v7; // r10
  int v8; // r6
  float *v9; // r3
  signed int v10; // r9
  int v11; // s15
  signed int v12; // s15
  signed int v13; // r12
  int v14; // r7
  int v15; // r8
  int v16; // lr
  _DWORD *v17; // r9
  int v18; // r1
  int v19; // r2
  int v20; // r3
  int result; // r0
  float v22; // [sp+0h] [bp-28h]
  int v23; // [sp+4h] [bp-24h]

  v22 = *(float *)&a1;
  v23 = a2;
  v4 = a1;
  v5 = a4;
  v6 = a3;
  v7 = (CTRPluginFramework::Renderer **)a2;
  v8 = a1 + 24;
  *(_DWORD *)a1 = a1 + 8;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1 + 24, a2);
  *(_DWORD *)(v4 + 52) = v5;
  *(_DWORD *)(v4 + 48) = v6;
  CTRPluginFramework::TextBox::TextBox((CTRPluginFramework::TextBox *)(v4 + 56));
  *(_BYTE *)(v4 + 176) = 0;
  *(_DWORD *)(v4 + 180) = 0;
  *(_DWORD *)(v4 + 184) = 0;
  *(_DWORD *)(v4 + 188) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_DWORD *)(v4 + 196) = 0;
  if ( v6 )
    v10 = 200;
  else
    v10 = 100;
  CTRPluginFramework::Renderer::GetTextInfos(*v7, (const char *)&v22, &v23, v9, v22);
  *(float *)&v11 = *(float *)&v23 + 10.0;
  v23 = v11;
  v12 = (signed int)(float)(*(float *)&v11 + 11.0);
  v13 = v12;
  if ( SLODWORD(v22) > 10 )
    LODWORD(v22) = 10;
  if ( v12 < v10 )
    v13 = v10;
  v14 = 16 * (LODWORD(v22) + 3);
  v15 = (240 - v14) >> 1;
  v16 = (400 - v13) / 2;
  *(_DWORD *)(v4 + 196) = v14 - 25;
  *(_DWORD *)(v4 + 184) = v16;
  *(_DWORD *)(v4 + 188) = v15;
  *(_DWORD *)(v4 + 192) = v13;
  v17 = (_DWORD *)(v4 + 100);
  v18 = *(_DWORD *)(v4 + 188);
  v19 = *(_DWORD *)(v4 + 192);
  v20 = *(_DWORD *)(v4 + 196);
  *v17 = *(_DWORD *)(v4 + 184);
  v17[1] = v18;
  v17[2] = v19;
  v17[3] = v20;
  *(_DWORD *)(v4 + 128) = v14 - 29;
  *(_DWORD *)(v4 + 116) = v16 + 2;
  *(_DWORD *)(v4 + 124) = v13 - 4;
  *(_DWORD *)(v4 + 120) = v15 + 2;
  *(_DWORD *)(v4 + 196) = v14;
  CTRPluginFramework::TextBox::Update(v4 + 56, v4, v8);
  CTRPluginFramework::TextBox::Open((CTRPluginFramework::TextBox *)(v4 + 56));
  result = v4;
  *(_WORD *)(v4 + 134) = 0;
  return result;
}
// 7F4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 800: using guessed type int __fastcall CTRPluginFramework::TextBox::Update(_DWORD, _DWORD, _DWORD);

//----- (000002D4) --------------------------------------------------------
int __fastcall CTRPluginFramework::MessageBoxImpl::_ProcessEvent(int result, Event *a2)
{
  signed int v2; // r3

  if ( !LOBYTE(a2->modifiers) )
  {
    v2 = a2->modifierMask;
    if ( v2 == 2 )
    {
      LOBYTE(v2) = 1;
      *(_DWORD *)(result + 180) = 1;
LABEL_5:
      *(_BYTE *)(result + 176) = v2;
      return result;
    }
    if ( v2 <= 2 )
    {
      if ( v2 != 1 )
        return result;
      goto LABEL_5;
    }
    if ( v2 == 16 )
    {
      if ( !*(_DWORD *)(result + 180) && *(_DWORD *)(result + 48) )
        *(_DWORD *)(result + 180) = 1;
    }
    else if ( v2 == 32 && *(_DWORD *)(result + 180) == 1 )
    {
      *(_DWORD *)(result + 180) = LOBYTE(a2->modifiers);
    }
  }
  return result;
}

//----- (0000034C) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (00000390) --------------------------------------------------------
#error "4A4: call analysis failed (funcsize=158)"

//----- (00000644) --------------------------------------------------------
bool __fastcall CTRPluginFramework::MessageBoxImpl::operator()(int a1, bool a2)
{
  int v2; // r4
  signed int v3; // r6
  CTRPluginFramework::Controller *v4; // r0
  CTRPluginFramework::Controller *v5; // r0
  signed int i; // r5
  bool v7; // r1
  CTRPluginFramework::Controller *v8; // r0
  CTRPluginFramework::Renderer *v9; // r5
  bool v10; // r1
  CTRPluginFramework::Controller *v11; // r0
  CTRPluginFramework::PluginMenu *v12; // r0
  bool v13; // r1
  _BOOL4 v14; // r4
  int v16; // [sp+0h] [bp-58h]
  char v17; // [sp+Ch] [bp-4Ch]

  v2 = a1;
  if ( CTRPluginFramework::ProcessImpl::IsPaused )
  {
    v3 = 0;
  }
  else
  {
    CTRPluginFramework::ProcessImpl::Pause(CTRPluginFramework::ProcessImpl::IsPaused, a2);
    v3 = 1;
  }
  v4 = (CTRPluginFramework::Controller *)CTRPluginFramework::EventManager::EventManager((CTRPluginFramework::EventManager *)&v17);
  do
  {
    v5 = (CTRPluginFramework::Controller *)CTRPluginFramework::Controller::Update(v4);
    v4 = (CTRPluginFramework::Controller *)CTRPluginFramework::Controller::GetKeysDown(v5);
  }
  while ( v4 );
  CTRPluginFramework::Controller::Update(0);
  while ( CTRPluginFramework::EventManager::PollEvent((CTRPluginFramework::EventManager *)&v17, (Event *)&v16) )
    ;
  for ( i = 2; ; i = 1 )
  {
    CTRPluginFramework::Renderer::SetTarget(1);
    if ( *(_DWORD *)(v2 + 52) & 2 )
      CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::TopWindow);
    CTRPluginFramework::Renderer::SetTarget(0);
    if ( *(_DWORD *)(v2 + 52) & 4 )
      CTRPluginFramework::Window::Draw((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
    v8 = (CTRPluginFramework::Controller *)CTRPluginFramework::Renderer::EndFrame(0, v7);
    if ( i == 1 )
      break;
  }
  while ( !*(_BYTE *)(v2 + 176) )
  {
    while ( 1 )
    {
      v8 = (CTRPluginFramework::Controller *)CTRPluginFramework::EventManager::PollEvent(
                                               (CTRPluginFramework::EventManager *)&v17,
                                               (Event *)&v16);
      if ( !v8 )
        break;
      CTRPluginFramework::MessageBoxImpl::_ProcessEvent(v2, (Event *)&v16);
      CTRPluginFramework::TextBox::ProcessEvent((CTRPluginFramework::TextBox *)(v2 + 56), (Event *)&v16);
    }
    v9 = (CTRPluginFramework::Renderer *)*(unsigned __int8 *)(v2 + 176);
    if ( *(_BYTE *)(v2 + 176) )
      break;
    CTRPluginFramework::MessageBoxImpl::_Draw((CTRPluginFramework::MessageBoxImpl *)v2);
    CTRPluginFramework::Renderer::SetTarget(v9);
    v8 = (CTRPluginFramework::Controller *)CTRPluginFramework::Renderer::EndFrame(v9, v10);
  }
  do
  {
    v11 = (CTRPluginFramework::Controller *)CTRPluginFramework::Controller::Update(v8);
    v8 = (CTRPluginFramework::Controller *)CTRPluginFramework::Controller::GetKeysDown(v11);
  }
  while ( v8 );
  CTRPluginFramework::Controller::Update(0);
  while ( CTRPluginFramework::EventManager::PollEvent((CTRPluginFramework::EventManager *)&v17, (Event *)&v16) )
    ;
  v12 = (CTRPluginFramework::PluginMenu *)CTRPluginFramework::PluginMenu::GetRunningInstance(0);
  if ( v12 && !CTRPluginFramework::PluginMenu::IsOpen(v12) )
    CTRPluginFramework::ScreenImpl::Clean(0);
  if ( v3 )
    CTRPluginFramework::ProcessImpl::Play(0, v13);
  v14 = *(_DWORD *)(v2 + 180) == 0;
  std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base((void **)&v17);
  return v14;
}
// 80C: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);

#error "There were 1 decompilation failure(s) on 6 function(s)"
