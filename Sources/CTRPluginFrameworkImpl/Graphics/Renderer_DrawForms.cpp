/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

unsigned int __fastcall CTRPluginFramework::DrawLineV(unsigned int result, unsigned __int8 *a2, int a3, int a4);
int __fastcall std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Line<int> *,CTRPluginFramework::Line<int> *,std::allocator<CTRPluginFramework::Line<int>>>(int a1, int a2, int a3);
void **__fastcall std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::~vector(void **a1);
void *__fastcall CTRPluginFramework::Renderer::GetContext(CTRPluginFramework::Renderer *this);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawLine(CTRPluginFramework::Renderer *result, int a2, int a3, unsigned __int8 *a4, int a5);
int *__fastcall CTRPluginFramework::Renderer::DrawLine(int *result, int *a2, unsigned __int8 *a3);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawStippledLine(CTRPluginFramework::Renderer *result, int a2, int a3, int a4, int a5);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawRect(CTRPluginFramework::Renderer *a1, int a2, int a3, int a4, int a5, char a6, int a7);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawRect(__int64 *a1, unsigned __int8 *a2, int a3);
int __fastcall CTRPluginFramework::Renderer::DrawRect2(int *a1, int a2, unsigned __int8 *a3);
void **__fastcall std::_Deque_base<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::~_Deque_base(void **a1);
void __fastcall std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::pop_front(int a1);
int __fastcall std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(void **a1, int *a2);
void __fastcall std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::_M_realloc_insert<CTRPluginFramework::Line<int>>(int *a1, int a2, _DWORD *a3);
void __fastcall std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(int *a1, int *a2);
void **__fastcall CTRPluginFramework::Renderer::ComputeRoundedRectangle(int *a1, int *a2, signed int a3);
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawRoundedRectangle(unsigned int a1, unsigned __int8 *a2, unsigned __int8 *a3);
// void __cdecl operator delete(void *); idb
// int __fastcall threadGetCurrent(_DWORD); weak
// int ZTHN18CTRPluginFramework9PrivColor9_useClampE(void); weak
// int __fastcall ZTHN18CTRPluginFramework9PrivColor10_clampAreaE(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(CTRPluginFramework::ScreenImpl *__hidden this, int, int); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetStride(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetFormat(CTRPluginFramework::ScreenImpl *__hidden this); idb
// int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void); weak
// _DWORD __cdecl operator new(unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// void __noreturn std::__throw_bad_alloc(void); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD); weak
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawPixel(_DWORD, _DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

char `guard variable for'CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines; // weak
int CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines; // weak
int dword_C; // weak
int dword_10; // weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::_useClamp; weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::_clampArea; weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::ToFramebuffer; weak
// extern _UNKNOWN CTRPluginFramework::Renderer::hookContext; weak
// extern _UNKNOWN _dso_handle; weak


//----- (00000014) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::DrawLineV(unsigned int result, unsigned __int8 *a2, int a3, int a4)
{
  unsigned int v4; // r1
  unsigned int v5; // r1
  unsigned int v6; // r1

  switch ( result )
  {
    case 0u:
      while ( 1 )
      {
        --a4;
        a3 += 4;
        if ( a4 == -1 )
          break;
        *(_BYTE *)(a3 - 4) = a2[3];
        *(_BYTE *)(a3 - 3) = a2[2];
        *(_BYTE *)(a3 - 2) = a2[1];
        result = *a2;
        *(_BYTE *)(a3 - 1) = result;
      }
      break;
    case 1u:
      while ( 1 )
      {
        --a4;
        a3 += 3;
        if ( a4 == -1 )
          break;
        *(_BYTE *)(a3 - 3) = a2[2];
        *(_BYTE *)(a3 - 2) = a2[1];
        result = *a2;
        *(_BYTE *)(a3 - 1) = result;
      }
      break;
    case 2u:
      v4 = (*a2 << 8) & 0xF800 | 8 * a2[1] & 0x7E0 | ((unsigned int)a2[2] >> 3);
      result = v4 >> 8;
      while ( 1 )
      {
        --a4;
        a3 += 2;
        if ( a4 == -1 )
          break;
        *(_WORD *)(a3 - 2) = v4;
      }
      break;
    case 3u:
      v5 = 8 * a2[1] & 0x7C0 | ((signed int)a2[2] >> 2) & 0x3E | (*a2 << 8) & 0xF800 | 1;
      result = v5 >> 8;
      while ( 1 )
      {
        --a4;
        a3 += 2;
        if ( a4 == -1 )
          break;
        *(_WORD *)(a3 - 2) = v5;
      }
      break;
    case 4u:
      v6 = a2[2] & 0xF0 | 16 * a2[1] & 0xF00 | (*a2 << 8) & 0xF000 | 0xF;
      result = v6 >> 8;
      while ( 1 )
      {
        --a4;
        a3 += 2;
        if ( a4 == -1 )
          break;
        *(_WORD *)(a3 - 2) = v6;
      }
      break;
    default:
      return result;
  }
  return result;
}

//----- (00000180) --------------------------------------------------------
int __fastcall std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Line<int> *,CTRPluginFramework::Line<int> *,std::allocator<CTRPluginFramework::Line<int>>>(int a1, int a2, int a3)
{
  int v3; // r12
  int v4; // r6
  int v5; // r5
  int i; // lr
  int *v7; // r3
  int v8; // r0
  int v9; // r1
  int v10; // r2
  int v11; // r3
  _DWORD *v12; // r4

  v3 = a2;
  v4 = a1;
  v5 = a3;
  for ( i = 0; ; i += 16 )
  {
    v7 = (int *)(i + v4);
    if ( v3 == i + v4 )
      break;
    v8 = *v7;
    v9 = v7[1];
    v10 = v7[2];
    v11 = v7[3];
    v12 = (_DWORD *)(v5 + i);
    *v12 = v8;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
  }
  return v5 + v3 - v4;
}

//----- (000001C0) --------------------------------------------------------
void **__fastcall std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::~vector(void **a1)
{
  void **v1; // r4
  void *v2; // r0

  v1 = a1;
  v2 = *a1;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (000001E0) --------------------------------------------------------
void *__fastcall CTRPluginFramework::Renderer::GetContext(CTRPluginFramework::Renderer *this)
{
  int v1; // r0
  void *result; // r0

  v1 = threadGetCurrent(this);
  if ( v1 )
    result = (void *)(v1 + 1148);
  else
    result = &CTRPluginFramework::Renderer::hookContext;
  return result;
}
// 14D8: using guessed type int __fastcall threadGetCurrent(_DWORD);

//----- (00000200) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawLine(CTRPluginFramework::Renderer *result, int a2, int a3, unsigned __int8 *a4, int a5)
{
  int v5; // r5
  int v6; // r7
  int v7; // r6
  unsigned __int8 *v8; // r8
  int v9; // r4
  int v10; // r9
  int v11; // r3
  int v12; // r3
  int v13; // r3
  char *v14; // r9
  int v15; // r3
  CTRPluginFramework::ScreenImpl *v16; // r9
  int v17; // r5
  int v18; // r7
  unsigned int v19; // r9

  v5 = a2;
  v6 = (int)result;
  v7 = a3;
  v8 = a4;
  v9 = a5;
  if ( a2 >= 0 )
  {
LABEL_4:
    while ( v9 + v5 > 240 )
    {
      if ( v9 <= 0 )
        return result;
      --v9;
    }
    if ( &ZTHN18CTRPluginFramework9PrivColor9_useClampE )
      result = (CTRPluginFramework::Renderer *)ZTHN18CTRPluginFramework9PrivColor9_useClampE();
    v10 = __mrc(15, 0, 13, 0, 3);
    if ( *((_BYTE *)&CTRPluginFramework::PrivColor::_useClamp + v10) )
    {
      result = (CTRPluginFramework::Renderer *)ZTHN18CTRPluginFramework9PrivColor10_clampAreaE(result);
      v11 = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v10 + 4);
      if ( v11 > v5 )
      {
        v9 -= v11 - v5;
        if ( v9 <= 0 )
          return result;
        v5 = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v10 + 4);
      }
      v12 = v11 + *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v10 + 12);
      if ( v5 + v9 > v12 )
        v9 = v12 - v5;
      v13 = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v10);
      v14 = (char *)&CTRPluginFramework::PrivColor::_clampArea + v10;
      if ( v13 > v6 )
      {
        v7 -= v13 - v6;
        v6 = v13;
      }
      v15 = v13 + *((_DWORD *)v14 + 2);
      if ( v6 + v7 > v15 )
        v7 = v15 - v6;
    }
    v16 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)CTRPluginFramework::Renderer::GetContext(result) + 1);
    v17 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v16, v6, v5 + v9 - 1);
    v18 = CTRPluginFramework::ScreenImpl::GetStride(v16);
    result = (CTRPluginFramework::Renderer *)CTRPluginFramework::ScreenImpl::GetFormat(v16);
    v19 = (unsigned int)result;
    while ( v7 > 0 )
    {
      result = (CTRPluginFramework::Renderer *)CTRPluginFramework::DrawLineV(v19, v8, v17, v9);
      v17 += v18;
      --v7;
    }
  }
  else
  {
    v9 = a5 + a2;
    if ( a5 + a2 >= 0 )
    {
      v5 = 0;
      goto LABEL_4;
    }
  }
  return result;
}
// 14E0: using guessed type int ZTHN18CTRPluginFramework9PrivColor9_useClampE(void);
// 14E4: using guessed type int __fastcall ZTHN18CTRPluginFramework9PrivColor10_clampAreaE(_DWORD);

//----- (00000370) --------------------------------------------------------
int *__fastcall CTRPluginFramework::Renderer::DrawLine(int *result, int *a2, unsigned __int8 *a3)
{
  int v3; // r5
  int i; // r4
  unsigned __int8 *v5; // r7
  int v6; // r9
  int v7; // r10
  int v8; // r8
  int v9; // r6
  int v10; // r3
  int v11; // r3
  int v12; // r3
  char *v13; // r8
  bool v14; // zf
  bool v15; // nf
  unsigned __int8 v16; // vf
  int v17; // r3
  CTRPluginFramework::ScreenImpl *v18; // r10
  int v19; // r8
  int v20; // r9
  unsigned int v21; // r10

  v3 = result[1];
  for ( i = a2[1] + 1 - v3; v3 + i > 240; --i )
  {
    if ( i <= 0 )
      return result;
  }
  v5 = a3;
  v6 = *result;
  v7 = *a2;
  if ( &ZTHN18CTRPluginFramework9PrivColor9_useClampE )
    result = (int *)ZTHN18CTRPluginFramework9PrivColor9_useClampE();
  v8 = __mrc(15, 0, 13, 0, 3);
  v9 = v7 - v6;
  if ( *((_BYTE *)&CTRPluginFramework::PrivColor::_useClamp + v8) )
  {
    result = (int *)ZTHN18CTRPluginFramework9PrivColor10_clampAreaE(result);
    v10 = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v8 + 4);
    if ( v10 > v3 )
    {
      i -= v10 - v3;
      if ( i <= 0 )
        return result;
      v3 = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v8 + 4);
    }
    v11 = v10 + *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v8 + 12);
    if ( v3 + i > v11 )
      i = v11 - v3;
    v12 = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::_clampArea + v8);
    v13 = (char *)&CTRPluginFramework::PrivColor::_clampArea + v8;
    v16 = __OFSUB__(v12, v6);
    v14 = v12 == v6;
    v15 = v12 - v6 < 0;
    if ( v12 > v6 )
      v6 = v12;
    if ( !((unsigned __int8)(v15 ^ v16) | v14) )
      v9 = v7 - v12;
    v17 = v12 + *((_DWORD *)v13 + 2);
    if ( v7 > v17 )
      v9 = v17 - v6;
  }
  v18 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)CTRPluginFramework::Renderer::GetContext((CTRPluginFramework::Renderer *)result)
                                          + 1);
  v19 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v18, v6, v3 + i - 1);
  v20 = CTRPluginFramework::ScreenImpl::GetStride(v18);
  result = (int *)CTRPluginFramework::ScreenImpl::GetFormat(v18);
  v21 = (unsigned int)result;
  while ( v9 > 0 )
  {
    result = (int *)CTRPluginFramework::DrawLineV(v21, v5, v19, i);
    v19 += v20;
    --v9;
  }
  return result;
}
// 14E0: using guessed type int ZTHN18CTRPluginFramework9PrivColor9_useClampE(void);
// 14E4: using guessed type int __fastcall ZTHN18CTRPluginFramework9PrivColor10_clampAreaE(_DWORD);

//----- (000004D4) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawStippledLine(CTRPluginFramework::Renderer *result, int a2, int a3, int a4, int a5)
{
  int v5; // r8
  int v6; // r6
  int v7; // r9
  int v8; // r4
  int v9; // r7
  CTRPluginFramework::ScreenImpl *v10; // r5
  CTRPluginFramework::Renderer *v11; // r7
  signed int v12; // r5
  int v13; // r11
  int v14; // r8
  CTRPluginFramework::Renderer *v15; // ST04_4
  CTRPluginFramework::Renderer *v16; // [sp+0h] [bp-30h]

  v5 = (int)result;
  v6 = a3;
  v7 = a4;
  v8 = a5;
  if ( a2 >= 0 )
  {
LABEL_4:
    while ( 1 )
    {
      v9 = v8 + a2;
      if ( v8 + a2 <= 240 )
        break;
      if ( v8 <= 0 )
        return result;
      --v8;
    }
    v10 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)CTRPluginFramework::Renderer::GetContext(result) + 1);
    v11 = (CTRPluginFramework::Renderer *)CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v10, v5, v9 - 1);
    result = (CTRPluginFramework::Renderer *)CTRPluginFramework::ScreenImpl::GetStride(v10);
    v12 = 5;
    v13 = __mrc(15, 0, 13, 0, 3);
    v16 = result;
    while ( v6 > 0 )
    {
      if ( v12 > 0 )
      {
        result = v11;
        v14 = 0;
        while ( v8 > v14 )
        {
          if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
          {
            v15 = result;
            ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE();
            result = v15;
          }
          ++v14;
          result = (CTRPluginFramework::Renderer *)(*(int (__fastcall **)(CTRPluginFramework::Renderer *, int))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v13))(
                                                     result,
                                                     v7);
        }
      }
      --v12;
      if ( (unsigned __int8)((v12 + 5 < 0) ^ __OFADD__(v12, 5)) | (v12 == -5) )
        v12 = 5;
      v11 = (CTRPluginFramework::Renderer *)((char *)v16 + (_DWORD)v11);
      --v6;
    }
  }
  else
  {
    v8 = a5 + a2;
    if ( a5 + a2 >= 0 )
    {
      a2 = 0;
      goto LABEL_4;
    }
  }
  return result;
}
// 14F4: using guessed type int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void);

//----- (000005C8) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawRect(CTRPluginFramework::Renderer *a1, int a2, int a3, int a4, int a5, char a6, int a7)
{
  unsigned __int8 *v7; // r8
  unsigned __int8 *v8; // r3
  int v9; // r6
  int v10; // r5
  CTRPluginFramework::Renderer *v11; // r4
  int v12; // r9

  v7 = (unsigned __int8 *)a5;
  if ( a6 )
    a5 = a4;
  if ( a6 )
  {
    v8 = v7;
  }
  else
  {
    v9 = a2;
    v10 = a4;
    v11 = a1;
    v12 = a3;
    CTRPluginFramework::Renderer::DrawLine(a1, a2, a3, v7, a7);
    CTRPluginFramework::Renderer::DrawLine(v11, v9 + v10 - a7, v12, v7, a7);
    CTRPluginFramework::Renderer::DrawLine(v11, v9, a7, v7, v10);
    v8 = v7;
    a3 = a7;
    a2 = v9;
    a5 = v10;
    a1 = (CTRPluginFramework::Renderer *)((char *)v11 + v12 - a7);
  }
  return CTRPluginFramework::Renderer::DrawLine(a1, a2, a3, v8, a5);
}

//----- (0000065C) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawRect(__int64 *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v3; // r6
  __int64 v4; // r4
  int v5; // r9
  int v6; // r8

  v3 = a2;
  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 3);
  if ( a3 )
    return CTRPluginFramework::Renderer::DrawLine(
             (CTRPluginFramework::Renderer *)v4,
             SHIDWORD(v4),
             *((_DWORD *)a1 + 2),
             a2,
             v6);
  CTRPluginFramework::Renderer::DrawLine((CTRPluginFramework::Renderer *)v4, SHIDWORD(v4), *((_DWORD *)a1 + 2), a2, 1);
  CTRPluginFramework::Renderer::DrawLine((CTRPluginFramework::Renderer *)v4, HIDWORD(v4) + v6 - 1, v5, v3, 1);
  CTRPluginFramework::Renderer::DrawLine((CTRPluginFramework::Renderer *)v4, SHIDWORD(v4), 1, v3, v6);
  return CTRPluginFramework::Renderer::DrawLine((CTRPluginFramework::Renderer *)(v4 + v5 - 1), SHIDWORD(v4), 1, v3, v6);
}

//----- (00000704) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::DrawRect2(int *a1, int a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3; // r4
  int v4; // r7
  int v5; // r10
  int v6; // r8
  unsigned __int8 *v7; // r5
  unsigned int v8; // r6
  CTRPluginFramework::ScreenImpl *v9; // r9
  _DWORD *v10; // r7
  int v11; // r8
  int result; // r0
  int i; // r1
  unsigned int v14; // r3
  int k; // r2
  bool v16; // cf
  _BYTE *v17; // r9
  _DWORD *j; // r2
  _DWORD *v19; // r9
  __int16 v20; // r9
  int l; // r2
  int *v22; // r9
  char v23; // r10
  char v24; // r9
  int m; // r2
  int *v26; // r9
  char v27; // r10
  char v28; // r9
  int n; // r2
  int *v30; // r9
  char v31; // r10
  char v32; // r9
  int *v33; // [sp+0h] [bp-28h]
  int v34; // [sp+4h] [bp-24h]

  v33 = a1;
  v34 = a2;
  v3 = (unsigned __int8 *)a2;
  v4 = a1[1];
  v5 = a1[2];
  v6 = *a1;
  v7 = a3;
  v8 = a1[3];
  v9 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)CTRPluginFramework::Renderer::GetContext((CTRPluginFramework::Renderer *)a1)
                                         + 1);
  v10 = (_DWORD *)CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v9, v6, v8 + v4 - 1);
  v11 = CTRPluginFramework::ScreenImpl::GetStride(v9);
  result = CTRPluginFramework::ScreenImpl::GetFormat(v9);
  for ( i = v5; i > 0; --i )
  {
    v14 = v8;
    switch ( result )
    {
      case 0:
        for ( j = v10; ; ++j )
        {
          v16 = v14-- >= 1;
          if ( !v16 )
            break;
          if ( v14 & 1 )
            v19 = v3;
          else
            v19 = v7;
          *j = *v19;
        }
        break;
      case 1:
        for ( k = (int)v10 + 3; ; *(_BYTE *)(k - 4) = *v17 )
        {
          v16 = v14-- >= 1;
          if ( !v16 )
            break;
          if ( v14 & 1 )
            v17 = v3;
          else
            v17 = v7;
          k += 3;
          *(_BYTE *)(k - 6) = v17[2];
          *(_BYTE *)(k - 5) = v17[1];
        }
        break;
      case 2:
        v20 = v7[1];
        LOWORD(v33) = (*v3 << 8) & 0xF800 | 8 * v3[1] & 0x7E0 | ((unsigned int)v3[2] >> 3);
        LOWORD(v34) = (*v7 << 8) & 0xF800 | 8 * v20 & 0x7E0 | ((unsigned int)v7[2] >> 3);
        for ( l = (int)v10 + 2; ; l += 2 )
        {
          v16 = v14-- >= 1;
          if ( !v16 )
            break;
          if ( v14 & 1 )
            v22 = (int *)&v33;
          else
            v22 = &v34;
          v23 = *(_BYTE *)v22;
          v24 = *((_BYTE *)v22 + 1);
          *(_BYTE *)(l - 2) = v23;
          *(_BYTE *)(l - 1) = v24;
        }
        break;
      case 3:
        LOWORD(v33) = 8 * v3[1] & 0x7C0 | ((signed int)v3[2] >> 2) & 0x3E | (*v3 << 8) & 0xF800 | 1;
        LOWORD(v34) = 8 * v7[1] & 0x7C0 | ((signed int)v7[2] >> 2) & 0x3E | (*v7 << 8) & 0xF800 | 1;
        for ( m = (int)v10 + 2; ; m += 2 )
        {
          v16 = v14-- >= 1;
          if ( !v16 )
            break;
          if ( v14 & 1 )
            v26 = (int *)&v33;
          else
            v26 = &v34;
          v27 = *(_BYTE *)v26;
          v28 = *((_BYTE *)v26 + 1);
          *(_BYTE *)(m - 2) = v27;
          *(_BYTE *)(m - 1) = v28;
        }
        break;
      case 4:
        LOWORD(v33) = v3[2] & 0xF0 | 16 * v3[1] & 0xF00 | (*v3 << 8) & 0xF000 | 0xF;
        LOWORD(v34) = v7[2] & 0xF0 | 16 * v7[1] & 0xF00 | (*v7 << 8) & 0xF000 | 0xF;
        for ( n = (int)v10 + 2; ; n += 2 )
        {
          v16 = v14-- >= 1;
          if ( !v16 )
            break;
          if ( v14 & 1 )
            v30 = (int *)&v33;
          else
            v30 = &v34;
          v31 = *(_BYTE *)v30;
          v32 = *((_BYTE *)v30 + 1);
          *(_BYTE *)(n - 2) = v31;
          *(_BYTE *)(n - 1) = v32;
        }
        break;
      default:
        break;
    }
    v10 = (_DWORD *)((char *)v10 + v11);
  }
  return result;
}

//----- (00000990) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (000009D4) --------------------------------------------------------
void __fastcall std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::pop_front(int a1)
{
  int v1; // r3
  _DWORD *v2; // r4
  int v3; // r3
  int v4; // r3

  v1 = *(_DWORD *)(a1 + 8);
  if ( v1 == *(_DWORD *)(a1 + 16) - 8 )
  {
    v2 = (_DWORD *)a1;
    operator delete(*(void **)(a1 + 12));
    v3 = v2[5];
    v2[5] = v3 + 4;
    v4 = *(_DWORD *)(v3 + 4);
    v2[3] = v4;
    v2[4] = v4 + 512;
    v2[2] = v4;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = v1 + 8;
  }
}

//----- (00000A28) --------------------------------------------------------
int __fastcall std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(void **a1, int *a2)
{
  _DWORD *v2; // r3
  void **v3; // r4
  int result; // r0
  int v5; // r1
  int v6; // r3
  unsigned int v7; // r3
  _BYTE *v8; // r2
  _BYTE *v9; // r0
  int *v10; // r7
  void **v11; // r1
  int v12; // r6
  int v13; // r5
  void **v14; // r5
  int v15; // r3
  size_t v16; // r2
  void **v17; // r0
  char *v18; // r3
  int v19; // r6
  char *v20; // r3
  _DWORD *v21; // r5
  int *v22; // r3
  int v23; // r1
  _DWORD *v24; // r3
  signed int v25; // r8
  unsigned int v26; // r8
  char *v27; // r0
  const void *v28; // r1
  int v29; // r2
  void *v30; // r9

  v2 = a1[6];
  v3 = a1;
  if ( v2 == (_DWORD *)((char *)a1[8] - 8) )
  {
    v7 = (unsigned int)a1[1];
    v8 = a1[9];
    v9 = *a1;
    v10 = a2;
    if ( v7 - ((v8 - v9) >> 2) > 1 )
    {
LABEL_10:
      v21 = v3[9];
      v21[1] = operator new(0x200u);
      v22 = (int *)v3[6];
      result = *v10;
      v23 = v10[1];
      *v22 = *v10;
      v22[1] = v23;
      v24 = v3[9];
      v3[9] = v24 + 1;
      v6 = v24[1];
      v3[7] = (void *)v6;
      v3[8] = (void *)(v6 + 512);
      goto LABEL_3;
    }
    v11 = (void **)v3[5];
    v12 = (v8 - (_BYTE *)v11) >> 2;
    v13 = v12 + 2;
    if ( v7 <= 2 * (v12 + 2) )
    {
      if ( v7 )
        v25 = v7;
      else
        v25 = 1;
      v26 = v7 + 2 + v25;
      if ( v26 > 0x3FFFFFFF )
        std::__throw_bad_alloc();
      v27 = (char *)operator new(4 * v26);
      v28 = v3[5];
      v29 = (int)v3[9] + 4;
      v30 = v27;
      v14 = (void **)&v27[4 * ((v26 - v13) >> 1)];
      if ( v28 != (const void *)v29 )
        memmove(v14, v28, v29 - (_DWORD)v28);
      operator delete(*v3);
      *v3 = v30;
      v3[1] = (void *)v26;
      goto LABEL_9;
    }
    v14 = (void **)&v9[4 * ((v7 - v13) >> 1)];
    v15 = (int)(v8 + 4);
    v16 = v8 + 4 - (_BYTE *)v11;
    if ( v11 <= v14 )
    {
      if ( v11 != (void **)v15 )
      {
        v17 = (void **)((char *)v14 + 4 * (v12 + 1) - v16);
        goto LABEL_13;
      }
    }
    else if ( v11 != (void **)v15 )
    {
      v17 = v14;
LABEL_13:
      memmove(v17, v11, v16);
      goto LABEL_9;
    }
LABEL_9:
    v3[5] = v14;
    v18 = (char *)*v14;
    v19 = v12 + 0x40000000;
    v3[3] = *v14;
    v3[4] = v18 + 512;
    v3[9] = &v14[v19];
    v20 = (char *)v14[v19];
    v3[7] = v20;
    v3[8] = v20 + 512;
    goto LABEL_10;
  }
  result = *a2;
  v5 = a2[1];
  *v2 = result;
  v2[1] = v5;
  v6 = (int)v3[6] + 8;
LABEL_3:
  v3[6] = (void *)v6;
  return result;
}

//----- (00000BB0) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::_M_realloc_insert<CTRPluginFramework::Line<int>>(int *a1, int a2, _DWORD *a3)
{
  void *v3; // r5
  int v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int *v9; // r6
  int v10; // r7
  _DWORD *v11; // r10
  int v12; // r11
  int v13; // r9
  int v14; // r1
  int v15; // r2
  int v16; // r3
  _DWORD *v17; // r12
  int v18; // r0
  int v19; // r7

  v3 = (void *)*a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if ( v5 )
    v6 = (v4 - *a1) >> 4;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - (_DWORD)v3;
  if ( v7 || v8 > 0xFFFFFFF )
  {
    v8 = 0xFFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = operator new(16 * v8);
LABEL_8:
  v14 = v11[1];
  v15 = v11[2];
  v16 = v11[3];
  v17 = (_DWORD *)(v13 + v12);
  *v17 = *v11;
  v17[1] = v14;
  v17[2] = v15;
  v17[3] = v16;
  v18 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Line<int> *,CTRPluginFramework::Line<int> *,std::allocator<CTRPluginFramework::Line<int>>>(
          (int)v3,
          v10,
          v13);
  v19 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Line<int> *,CTRPluginFramework::Line<int> *,std::allocator<CTRPluginFramework::Line<int>>>(
          v10,
          v4,
          v18 + 16);
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v19;
  v9[2] = v13 + 16 * v8;
}

//----- (00000C5C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(int *a1, int *a2)
{
  _DWORD *v2; // r12
  int *v3; // lr
  int v4; // r0
  int *v5; // t0
  int v6; // r1
  int v7; // r2
  int v8; // r3

  v2 = (_DWORD *)a1[1];
  if ( v2 == (_DWORD *)a1[2] )
  {
    std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::_M_realloc_insert<CTRPluginFramework::Line<int>>(
      a1,
      a1[1],
      a2);
  }
  else
  {
    v3 = a1;
    v4 = *a2;
    v5 = a2 + 1;
    v6 = a2[1];
    ++v5;
    v7 = *v5;
    v8 = v5[1];
    *v2 = v4;
    v2[1] = v6;
    v2[2] = v7;
    v2[3] = v8;
    v3[1] += 16;
  }
}

//----- (00000CA0) --------------------------------------------------------
void **__fastcall CTRPluginFramework::Renderer::ComputeRoundedRectangle(int *a1, int *a2, signed int a3)
{
  float v3; // s0
  signed int v4; // s16
  int *v5; // r10
  int *v6; // r5
  int v7; // r6
  _DWORD *v8; // r7
  _DWORD *v9; // r0
  __int64 v10; // r8
  float v11; // s29
  float v12; // s28
  double v13; // d11
  float v14; // s17
  double v15; // d10
  float v16; // s12
  signed int v17; // r6
  int v18; // r7
  signed int v19; // r3
  int v20; // r1
  double v21; // d7
  bool v22; // nf
  int v23; // r2
  int v24; // r1
  int v25; // r2
  bool v26; // zf
  bool v27; // nf
  unsigned __int8 v28; // vf
  float v29; // s15
  float v30; // s16
  float v31; // s18
  float v32; // s31
  float v33; // s26
  float v34; // s19
  signed int v35; // s16
  signed int v36; // r3
  int v37; // r5
  _BOOL4 v38; // r1
  float v39; // s15
  signed int v40; // r3
  float v41; // s27
  float v42; // s14
  signed int v43; // s20
  signed int v44; // r4
  signed int v45; // r5
  int v46; // r3
  bool v47; // zf
  bool v48; // nf
  unsigned __int8 v49; // vf
  float v50; // s14
  float v51; // s17
  int v52; // ST0C_4
  float v53; // ST04_4
  int v54; // r11
  int v55; // r4
  int v56; // r6
  signed int v58; // [sp+4h] [bp-BCh]
  int v59; // [sp+4h] [bp-BCh]
  float v60; // [sp+8h] [bp-B8h]
  signed int v61; // [sp+Ch] [bp-B4h]
  int v62; // [sp+14h] [bp-ACh]
  int v63; // [sp+18h] [bp-A8h]
  int v64; // [sp+20h] [bp-A0h]
  int v65; // [sp+24h] [bp-9Ch]
  int v66; // [sp+28h] [bp-98h]
  int v67; // [sp+2Ch] [bp-94h]
  int v68; // [sp+30h] [bp-90h]
  int v69; // [sp+34h] [bp-8Ch]
  _DWORD *v70; // [sp+38h] [bp-88h]
  _DWORD *v71; // [sp+3Ch] [bp-84h]
  _DWORD *v72; // [sp+40h] [bp-80h]
  _DWORD *v73; // [sp+44h] [bp-7Ch]
  _DWORD *v74; // [sp+48h] [bp-78h]
  _DWORD *v75; // [sp+4Ch] [bp-74h]
  _DWORD *v76; // [sp+50h] [bp-70h]
  _DWORD *v77; // [sp+54h] [bp-6Ch]

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v5 = a1;
  v6 = a2;
  v69 = 8;
  v61 = a3;
  v7 = operator new(0x20u);
  v8 = (_DWORD *)(v7 + 12);
  v68 = v7;
  v9 = (_DWORD *)operator new(0x200u);
  v10 = *((_QWORD *)v6 + 1);
  v11 = v3 * v3;
  v12 = (float)(v3 * v3) * v3;
  v58 = (signed int)v3;
  v13 = (float)(v3 * v3);
  *v8 = v9;
  v71 = v9;
  v75 = v9;
  v70 = v9;
  v74 = v9;
  v14 = (float)((float)(v3 * v3) - v12) + (float)((float)(v3 * v3) * 0.25);
  v15 = (v3 - 0.5) * v13;
  v16 = (float)((float)(v3 * v3) - v12) + (float)((float)(v3 * v3) * 0.25);
  v17 = 0;
  v73 = v8;
  v72 = v9 + 128;
  v77 = v8;
  v76 = v9 + 128;
  v18 = *v6;
  v60 = *((float *)v6 + 1);
  if ( (signed int)v10 < 0 )
  {
    v18 += v10;
    LODWORD(v10) = -(signed int)v10;
  }
  if ( v10 < 0 )
    LODWORD(v60) += HIDWORD(v10);
  v19 = (signed int)v3;
  if ( v10 < 0 )
    HIDWORD(v10) = -HIDWORD(v10);
  while ( 1 )
  {
    v20 = v17 + 1;
    v21 = (float)((float)(v17 + 1) * v11);
    if ( v15 <= v21 )
      break;
    if ( v17 >= v61 )
      goto LABEL_26;
    v22 = v16 < 0.0;
    v23 = 2 * v20 + 1;
    if ( v16 >= 0.0 )
      v23 = -2 * v19 + 2;
    if ( v16 >= 0.0 )
      HIDWORD(v21) = v23;
    *(float *)&v21 = (float)(2 * v20 + 1) * v11;
    if ( v16 < 0.0 )
      v16 = v16 + *(float *)&v21;
    else
      *(float *)&v21 = *(float *)&v21 + (float)((float)SHIDWORD(v21) * v11);
    if ( !v22 )
    {
      v16 = v16 + *(float *)&v21;
      --v19;
    }
    ++v17;
  }
  v24 = v17 + v19;
  while ( 1 )
  {
    v25 = v24 - v19;
    v28 = 0;
    v26 = v19 == 0;
    v27 = v19 < 0;
    if ( v19 > 0 )
    {
      v28 = __OFSUB__(v61, v25);
      v26 = v61 == v25;
      v27 = v61 - v25 < 0;
    }
    if ( (unsigned __int8)(v27 ^ v28) | v26 )
      break;
    v29 = (float)(-2 * v19-- + 3) * v11;
    if ( v4 < 0 )
      v29 = v29 + (float)((float)(2 * ++v17) * v11);
    v4 = (signed int)(float)((float)v4 + v29);
  }
LABEL_26:
  v30 = (float)v19;
  v31 = (float)SLODWORD(v60);
  v32 = v3 - (float)v58;
  LODWORD(v10) = v10 - v17;
  v62 = v17 + v18;
  v64 = v17 + v18;
  v65 = (signed int)(float)((float)SLODWORD(v60) + v32);
  std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
    (void **)&v68,
    &v64);
  v64 = v18 + v10;
  v65 = (signed int)(float)((float)SLODWORD(v60) + v32);
  std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
    (void **)&v68,
    &v64);
  v33 = (float)SHIDWORD(v10);
  v64 = v17 + v18;
  v65 = (signed int)(float)((float)((float)SLODWORD(v60) - v32) + (float)SHIDWORD(v10));
  std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
    (void **)&v68,
    &v64);
  v34 = (float)(HIDWORD(v10) + LODWORD(v60));
  v64 = v18 + v10;
  v65 = (signed int)(float)(v34 - v32);
  v35 = (signed int)(float)(v3 - v30);
  std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
    (void **)&v68,
    &v64);
  v36 = 0;
  v63 = v17 + v18;
  while ( 1 )
  {
    v37 = v36 + 1;
    v38 = v15 <= (float)((float)(v36 + 1) * v11);
    if ( v36 >= v61 )
      v38 = 1;
    if ( v38 )
      break;
    v39 = (float)(2 * v37 + 1) * v11;
    if ( v14 >= 0.0 )
    {
      v40 = v58--;
      v14 = v14 + (float)(v39 + (float)((float)(-2 * v40 + 2) * v11));
    }
    else
    {
      v14 = v14 + v39;
    }
    v41 = v3 - (float)v58;
    v64 = v63 - v37;
    v65 = (signed int)(float)(v31 + v41);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v64 = v10 + v18 + v37;
    v65 = (signed int)(float)(v31 + v41);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v64 = v63 - v37;
    v65 = (signed int)(float)((float)(v31 - v41) + v33);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v64 = v10 + v18 + v37;
    v65 = (signed int)(float)(v34 - v41);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v36 = v37;
  }
  v42 = (float)((float)(v11 * (float)(v58 - 1)) * (float)(v58 - 1))
      + v13 * ((double)v36 + 0.5) * ((double)v36 + 0.5)
      - (float)(v12 * v3);
  v43 = (signed int)v42;
  v44 = v58;
  v45 = v36;
  v59 = v36 + v58;
  while ( 1 )
  {
    v46 = v59 - v44;
    v49 = 0;
    v47 = v44 == 0;
    v48 = v44 < 0;
    if ( v44 > 0 )
    {
      v49 = __OFSUB__(v61, v46);
      v47 = v61 == v46;
      v48 = v61 - v46 < 0;
    }
    if ( (unsigned __int8)(v48 ^ v49) | v47 )
      break;
    v50 = (float)(-2 * v44-- + 3) * v11;
    if ( v43 < 0 )
      v50 = v50 + (float)((float)(2 * ++v45) * v11);
    v51 = v3 - (float)v44;
    v64 = v18 - v45 + v17;
    v65 = (signed int)(float)(v31 + v51);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v64 = v45 + v18 + v10;
    v65 = (signed int)(float)(v31 + v51);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v64 = v18 - v45 + v17;
    v65 = (signed int)(float)((float)(v31 - v51) + v33);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
    v43 = (signed int)(float)(v50 + (float)v43);
    v64 = v45 + v18 + v10;
    v65 = (signed int)(float)(v34 - v51);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::emplace_back<CTRPluginFramework::Vector<int>>(
      (void **)&v68,
      &v64);
  }
  while ( v74 != v70 )
  {
    v52 = *v70;
    v53 = *((float *)v70 + 1);
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::pop_front((int)&v68);
    v54 = *v70;
    v55 = v70[1];
    std::deque<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::pop_front((int)&v68);
    v64 = v52;
    *(float *)&v65 = v53;
    v66 = v54;
    v67 = v55;
    std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(
      v5,
      &v64);
  }
  v64 = v62 - 1;
  *(float *)&v65 = v60;
  v66 = v10 - v17 + 3;
  v67 = 1;
  std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(
    v5,
    &v64);
  v64 = v62 - 1;
  v65 = HIDWORD(v10) + LODWORD(v60);
  v66 = v10 - v17 + 3;
  v67 = 1;
  std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(
    v5,
    &v64);
  v56 = v18 - v45 + v17;
  HIDWORD(v10) -= 2 * v35;
  v64 = v56;
  v65 = LODWORD(v60) + v35;
  v66 = 1;
  v67 = HIDWORD(v10);
  std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(
    v5,
    &v64);
  v64 = v45 + v18 + v10;
  v65 = LODWORD(v60) + v35;
  v66 = 1;
  v67 = HIDWORD(v10);
  std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(
    v5,
    &v64);
  v64 = v56 + 1;
  v65 = LODWORD(v60) + v35;
  v66 = v45 + v10 - 1;
  v67 = HIDWORD(v10);
  std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::emplace_back<CTRPluginFramework::Line<int>>(
    v5,
    &v64);
  return std::_Deque_base<CTRPluginFramework::Vector<int>,std::allocator<CTRPluginFramework::Vector<int>>>::~_Deque_base((void **)&v68);
}

//----- (00001320) --------------------------------------------------------
CTRPluginFramework::Renderer *__fastcall CTRPluginFramework::Renderer::DrawRoundedRectangle(unsigned int a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3; // r6
  int v4; // r5
  unsigned __int8 *v5; // r10
  unsigned __int8 *v6; // r11
  int v7; // r2
  __int64 v8; // r8
  unsigned int v9; // r6
  unsigned int v10; // r5
  int v11; // r7
  _DWORD *v12; // r3
  int v13; // r2
  CTRPluginFramework::Renderer *v14; // r0
  int v15; // r1
  int v17; // [sp+0h] [bp-48h]
  int v18; // [sp+Ch] [bp-3Ch]
  int v19; // [sp+10h] [bp-38h]
  int v20; // [sp+14h] [bp-34h]
  int v21; // [sp+18h] [bp-30h]
  int v22; // [sp+1Ch] [bp-2Ch]

  v3 = a1;
  v4 = `guard variable for'CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines & 1;
  v5 = a2;
  v6 = a3;
  __mcr(15, 0, a1, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines) )
  {
    CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines = v4;
    dword_C = v4;
    dword_10 = v4;
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines);
    _aeabi_atexit(
      &CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines,
      std::vector<CTRPluginFramework::Line<int>,std::allocator<CTRPluginFramework::Line<int>>>::~vector,
      &_dso_handle);
  }
  if ( dword_C == CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines )
  {
    v7 = *(_DWORD *)(v3 + 12);
    v21 = *(_DWORD *)(v3 + 8);
    v22 = v7;
    v19 = 0;
    v20 = 0;
    CTRPluginFramework::Renderer::ComputeRoundedRectangle(
      &CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines,
      &v19,
      50);
  }
  v8 = *(_QWORD *)v3;
  v9 = 0;
  v10 = ((dword_C
        - CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines) >> 4)
      - 5;
  while ( 1 )
  {
    v11 = CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines
        + 16 * v9;
    v18 = CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines;
    if ( v10 <= v9 )
      break;
    CTRPluginFramework::Renderer::DrawPixel(v8 + *(_DWORD *)v11, HIDWORD(v8) + *(_DWORD *)(v11 + 4), v5);
    CTRPluginFramework::Renderer::DrawPixel(
      v8 + *(unsigned __int64 *)(v11 + 8),
      HIDWORD(v8) + (*(_QWORD *)(v11 + 8) >> 32),
      v5);
    CTRPluginFramework::Renderer::DrawLine(
      (CTRPluginFramework::Renderer *)(v8 + 1 + *(_DWORD *)(v18 + 16 * v9)),
      HIDWORD(v8) + *(_DWORD *)(v11 + 4),
      *(_DWORD *)(v11 + 8) - *(_DWORD *)(v18 + 16 * v9) - 1,
      v6,
      1);
    ++v9;
  }
  while ( 1 )
  {
    v12 = (_DWORD *)(CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines
                   + 16 * v10);
    v13 = v12[2];
    v14 = (CTRPluginFramework::Renderer *)(v8
                                         + *(_DWORD *)(CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines
                                                     + 16 * v10));
    v15 = HIDWORD(v8) + v12[1];
    v17 = v12[3];
    if ( ((dword_C
         - CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines) >> 4)
       - 1 <= v10 )
      break;
    CTRPluginFramework::Renderer::DrawLine(v14, v15, v13, v5, v17);
    ++v10;
  }
  return CTRPluginFramework::Renderer::DrawLine(v14, v15, v13, v6, v17);
}
// 4: using guessed type char `guard variable for'CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines;
// 8: using guessed type int CTRPluginFramework::Renderer::DrawRoundedRectangle(CTRPluginFramework::Rect<int> const&,CTRPluginFramework::Color const&,CTRPluginFramework::Color const&)::_lines;
// C: using guessed type int dword_C;
// 10: using guessed type int dword_10;
// 1504: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 1508: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 150C: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 1510: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawPixel(_DWORD, _DWORD, _DWORD);

// ALL OK, 17 function(s) have been successfully decompiled
