/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

CTRPluginFramework::NumericTextBox *__fastcall CTRPluginFramework::NumericTextBox::~NumericTextBox(CTRPluginFramework::NumericTextBox *this);
CTRPluginFramework::NumericTextBox *__fastcall CTRPluginFramework::NumericTextBox::~NumericTextBox(CTRPluginFramework::NumericTextBox *this);
int __fastcall CTRPluginFramework::NumericTextBox::Draw(int result, int a2);
int __fastcall CTRPluginFramework::NumericTextBox::_UpdateVal(int a1);
int __fastcall CTRPluginFramework::NumericTextBox::_UpdateVal(CTRPluginFramework::NumericTextBox *this);
int __fastcall CTRPluginFramework::NumericTextBox::operator()(int a1);
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, int a2);
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, int a2);
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, unsigned int a2);
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, float a2);
int __fastcall CTRPluginFramework::NumericTextBox::UseHexadecimal(CTRPluginFramework::NumericTextBox *this, bool a2);
int __fastcall CTRPluginFramework::NumericTextBox::Clear(CTRPluginFramework::NumericTextBox *this);
CTRPluginFramework::NumericTextBox *__fastcall CTRPluginFramework::NumericTextBox::NumericTextBox(CTRPluginFramework::NumericTextBox *this, int a2, __int64 a3, int a4);
bool __fastcall CTRPluginFramework::Rect<int>::Contains(int *a1, int a2, int a3);
int __fastcall CTRPluginFramework::NumericTextBox::Update(int result, int a2, int *a3);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, _DWORD, _DWORD); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void); weak
// int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Keyboard::IsHexadecimal(CTRPluginFramework::Keyboard *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned __int8 *); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::~Keyboard(CTRPluginFramework::Keyboard *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned __int16 *); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, unsigned int *); idb
// _DWORD __cdecl CTRPluginFramework::Keyboard::Open(CTRPluginFramework::Keyboard *__hidden this, float *); idb

//-------------------------------------------------------------------------
// Data declarations

_DWORD (__fastcall *off_3FC[2])(CTRPluginFramework::NumericTextBox *__hidden this) =
{
  &CTRPluginFramework::NumericTextBox::~NumericTextBox,
  &CTRPluginFramework::NumericTextBox::~NumericTextBox
}; // weak
_UNKNOWN unk_410; // weak
_UNKNOWN unk_413; // weak
// extern _UNKNOWN CTRPluginFramework::Color::Gray; weak
// extern _UNKNOWN CTRPluginFramework::Color::Gainsboro; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak


//----- (00000004) --------------------------------------------------------
CTRPluginFramework::NumericTextBox *__fastcall CTRPluginFramework::NumericTextBox::~NumericTextBox(CTRPluginFramework::NumericTextBox *this)
{
  CTRPluginFramework::NumericTextBox *v1; // r4

  v1 = this;
  *(_DWORD *)this = off_3FC;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 36);
  return v1;
}
// 3FC: using guessed type _DWORD (__fastcall *off_3FC[2])(CTRPluginFramework::NumericTextBox *__hidden this);
// 418: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000024) --------------------------------------------------------
CTRPluginFramework::NumericTextBox *__fastcall CTRPluginFramework::NumericTextBox::~NumericTextBox(CTRPluginFramework::NumericTextBox *this)
{
  CTRPluginFramework::NumericTextBox *v1; // r4

  v1 = this;
  CTRPluginFramework::NumericTextBox::~NumericTextBox(this);
  operator delete((void *)v1);
  return v1;
}

//----- (00000040) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::Draw(int result, int a2)
{
  _DWORD *v2; // r4
  bool v3; // zf
  void *v4; // r1
  int v5; // r0
  int v6; // [sp+0h] [bp-10h]
  int v7; // [sp+4h] [bp-Ch]

  if ( *(_BYTE *)(result + 5) )
  {
    v6 = result;
    v7 = a2;
    v2 = (_DWORD *)result;
    v3 = *(_BYTE *)(result + 4) == 0;
    v4 = &CTRPluginFramework::Color::Gainsboro;
    v5 = result + 20;
    if ( v3 )
      v4 = &CTRPluginFramework::Color::Gray;
    CTRPluginFramework::Renderer::DrawRect(v5, v4, 1);
    result = CTRPluginFramework::Renderer::DrawString(
               v2[9],
               v2[5] + 5,
               &v7,
               CTRPluginFramework::Color::Black,
               v6,
               v2[6] + (v2[8] - 10) / 2);
  }
  return result;
}
// 420: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD);
// 424: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000000BC) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::_UpdateVal(int a1)
{
  int v1; // r4
  int v2; // s0
  int v4; // [sp+0h] [bp-20h]

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 12);
  ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(&v4, 4);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v1 + 36, &v4);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
}
// 418: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 434: using guessed type int __fastcall ZN18CTRPluginFramework5Utils8ToStringB5cxx11Efi(_DWORD, _DWORD);
// 438: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);

//----- (000000F4) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::_UpdateVal(CTRPluginFramework::NumericTextBox *this)
{
  char *v2; // r4
  void *v3; // r1
  int v4; // [sp+0h] [bp-20h]

  if ( *((_DWORD *)this + 2) == 3 )
    return CTRPluginFramework::NumericTextBox::_UpdateVal((int)this);
  v2 = (char *)this + 36;
  v3 = &unk_410;
  if ( !*((_BYTE *)this + 18) )
    v3 = &unk_413;
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v4, v3, *((_DWORD *)this + 3));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v2, &v4);
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v4);
}
// 418: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 438: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 43C: using guessed type int __fastcall ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, _DWORD, _DWORD);

//----- (0000015C) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::operator()(int a1)
{
  int v1; // r5
  int v2; // r4
  char v3; // r1
  int v4; // r0
  char v6; // [sp+4h] [bp-34h]
  char *v7; // [sp+10h] [bp-28h]
  int v8; // [sp+14h] [bp-24h]
  char v9; // [sp+18h] [bp-20h]

  v1 = *(unsigned __int8 *)(a1 + 4);
  if ( *(_BYTE *)(a1 + 4) )
  {
    v1 = *(unsigned __int8 *)(a1 + 16);
    if ( *(_BYTE *)(a1 + 16) )
    {
      v2 = a1;
      v7 = &v9;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
      v8 = 0;
      v9 = 0;
      CTRPluginFramework::Keyboard::Keyboard(&v6, &v7);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v7);
      v3 = *(_BYTE *)(v2 + 18);
      v6 = 0;
      CTRPluginFramework::Keyboard::IsHexadecimal((CTRPluginFramework::Keyboard *)&v6, v3);
      switch ( *(_DWORD *)(v2 + 8) )
      {
        case 0:
          v4 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v6, (unsigned __int8 *)(v2 + 12));
          goto LABEL_5;
        case 1:
          v4 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v6, (unsigned __int16 *)(v2 + 12));
          goto LABEL_5;
        case 2:
          v4 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v6, (unsigned int *)(v2 + 12));
          goto LABEL_5;
        case 3:
          v4 = CTRPluginFramework::Keyboard::Open((CTRPluginFramework::Keyboard *)&v6, (float *)(v2 + 12));
LABEL_5:
          if ( v4 != -1 )
            CTRPluginFramework::NumericTextBox::_UpdateVal((CTRPluginFramework::NumericTextBox *)v2);
          break;
        default:
          break;
      }
      *(_BYTE *)(v2 + 16) = 0;
      CTRPluginFramework::Keyboard::~Keyboard((CTRPluginFramework::Keyboard *)&v6);
    }
  }
  return v1;
}
// 418: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 440: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void);
// 444: using guessed type int __fastcall CTRPluginFramework::Keyboard::Keyboard(_DWORD, _DWORD);

//----- (00000254) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, int a2)
{
  *((_DWORD *)this + 3) = a2;
  *((_DWORD *)this + 2) = 0;
  return CTRPluginFramework::NumericTextBox::_UpdateVal(this);
}

//----- (00000264) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, int a2)
{
  *((_DWORD *)this + 3) = a2;
  *((_DWORD *)this + 2) = 1;
  return CTRPluginFramework::NumericTextBox::_UpdateVal(this);
}

//----- (00000274) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, unsigned int a2)
{
  *((_DWORD *)this + 3) = a2;
  *((_DWORD *)this + 2) = 2;
  return CTRPluginFramework::NumericTextBox::_UpdateVal(this);
}

//----- (00000284) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::SetValue(CTRPluginFramework::NumericTextBox *this, float a2)
{
  int v2; // s0

  *((_DWORD *)this + 3) = v2;
  *((_DWORD *)this + 2) = 3;
  return CTRPluginFramework::NumericTextBox::_UpdateVal((int)this);
}

//----- (00000294) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::UseHexadecimal(CTRPluginFramework::NumericTextBox *this, bool a2)
{
  *((_BYTE *)this + 18) = a2;
  return CTRPluginFramework::NumericTextBox::_UpdateVal(this);
}

//----- (0000029C) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::Clear(CTRPluginFramework::NumericTextBox *this)
{
  *((_DWORD *)this + 3) = 0;
  return CTRPluginFramework::NumericTextBox::_UpdateVal(this);
}

//----- (000002A8) --------------------------------------------------------
CTRPluginFramework::NumericTextBox *__fastcall CTRPluginFramework::NumericTextBox::NumericTextBox(CTRPluginFramework::NumericTextBox *this, int a2, __int64 a3, int a4)
{
  CTRPluginFramework::NumericTextBox *v4; // r4

  *(_DWORD *)this = off_3FC;
  *((_WORD *)this + 2) = 257;
  *((_DWORD *)this + 2) = 2;
  v4 = this;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = a4;
  *((_WORD *)this + 8) = 0;
  *((_BYTE *)this + 18) = 1;
  *((_DWORD *)this + 5) = a2;
  *((_DWORD *)this + 9) = (char *)this + 44;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  CTRPluginFramework::NumericTextBox::Clear(this);
  return v4;
}
// 3FC: using guessed type _DWORD (__fastcall *off_3FC[2])(CTRPluginFramework::NumericTextBox *__hidden this);

//----- (00000310) --------------------------------------------------------
bool __fastcall CTRPluginFramework::Rect<int>::Contains(int *a1, int a2, int a3)
{
  int v3; // r12
  int v4; // r3
  int v5; // r4
  int v6; // lr
  int v7; // r0
  _BOOL4 v8; // r4
  int v9; // r0
  bool v10; // zf
  bool v11; // nf
  unsigned __int8 v12; // vf

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1 + a1[2];
  v6 = a1[3];
  if ( *a1 < v5 )
  {
    v7 = *a1;
    v3 = v5;
  }
  else
  {
    v7 = *a1 + a1[2];
  }
  v8 = a2 >= v7;
  if ( a2 >= v3 )
    v8 = 0;
  if ( v8 )
  {
    if ( v4 >= v4 + v6 )
      v9 = v4 + v6;
    else
      v9 = v4;
    if ( v4 < v4 + v6 )
      v4 += v6;
    v12 = __OFSUB__(a3, v9);
    v10 = a3 == v9;
    v11 = a3 - v9 < 0;
    if ( a3 >= v9 )
    {
      v12 = __OFSUB__(v4, a3);
      v10 = v4 == a3;
      v11 = v4 - a3 < 0;
    }
    if ( (unsigned __int8)(v11 ^ v12) | v10 )
      v8 = 0;
    else
      v8 = 1;
  }
  return v8;
}

//----- (00000380) --------------------------------------------------------
int __fastcall CTRPluginFramework::NumericTextBox::Update(int result, int a2, int *a3)
{
  int *v3; // r5
  int v4; // r2
  int v5; // r4

  if ( *(_BYTE *)(result + 4) )
  {
    v3 = a3;
    v4 = *(unsigned __int8 *)(result + 17);
    v5 = result;
    if ( a2 & (v4 ^ 1) )
    {
      result = CTRPluginFramework::Rect<int>::Contains((int *)(result + 20), *v3, v3[1]);
      if ( !result )
        return result;
      *(_BYTE *)(v5 + 17) = 1;
      goto LABEL_6;
    }
    if ( a2 & v4 )
    {
LABEL_6:
      result = CTRPluginFramework::Rect<int>::Contains((int *)(v5 + 20), *v3, v3[1]);
      if ( !result )
        *(_BYTE *)(v5 + 17) = 0;
      return result;
    }
    if ( !(a2 | v4 ^ 1) )
      *(_WORD *)(result + 16) = 1;
  }
  return result;
}

// ALL OK, 15 function(s) have been successfully decompiled
