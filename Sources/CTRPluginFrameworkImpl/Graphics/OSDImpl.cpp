/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

_DWORD *__fastcall std::__cxx11::list<CTRPluginFramework::OSDImpl::OSDMessage *,std::allocator<CTRPluginFramework::OSDImpl::OSDMessage *>>::~list(_DWORD **a1);
void **__fastcall std::vector<bool (*)(CTRPluginFramework::Screen const&),std::allocator<bool (*)(CTRPluginFramework::Screen const&)>>::~vector(void **a1);
int __fastcall CTRPluginFramework::memsearch(void *s1, int a2, int a3);
unsigned int __fastcall CTRPluginFramework::SearchStmfd(unsigned int result, int a2, _BYTE *a3);
int __fastcall CTRPluginFramework::OSDImpl::OSDMessage::OSDMessage(__int64 a1, _DWORD *a2, _DWORD *a3);
int __fastcall CTRPluginFramework::OSDImpl::Lock(CTRPluginFramework::OSDImpl *this);
bool __fastcall CTRPluginFramework::OSDImpl::TryLock(CTRPluginFramework::OSDImpl *this);
int __fastcall CTRPluginFramework::OSDImpl::Unlock(CTRPluginFramework::OSDImpl *this);
signed int __fastcall CTRPluginFramework::OSDImpl::Draw(CTRPluginFramework::OSDImpl *this);
int __fastcall CTRPluginFramework::OSDImpl::UpdateScreens(CTRPluginFramework::OSDImpl *this);
int __fastcall CTRPluginFramework::OSDImpl::WaitFramePaused(CTRPluginFramework::OSDImpl *this);
int __fastcall CTRPluginFramework::OSDImpl::ResumeFrame(int result, unsigned int a2);
int __fastcall CTRPluginFramework::InstallOSD(CTRPluginFramework *this);
int __fastcall CTRPluginFramework::OSDImpl::_Initialize(CTRPluginFramework::OSDImpl *this);
int GLOBAL__sub_I__ZN18CTRPluginFramework7OSDImpl12DrawSaveIconE();
int __fastcall CTRPluginFramework::OSDImpl::Update(CTRPluginFramework::OSDImpl *this);
_DWORD __fastcall CTRPluginFramework::OSDImpl::CallbackGlobal(CTRPluginFramework::OSDImpl *this, unsigned int, void *, void *, int, int); // idb
int __fastcall CTRPluginFramework::OSDImpl::MainCallback(CTRPluginFramework::OSDImpl *this, unsigned int a2, int a3, void *a4, void *a5, int a6, int a7, int a8);
int __fastcall CTRPluginFramework::OSDImpl::MainCallback2(CTRPluginFramework::OSDImpl *this, unsigned int a2, unsigned int *a3, unsigned int a4, unsigned int a5, int a6, int a7);
// void __cdecl operator delete(void *); idb
// int memcmp(const void *s1, const void *s2, size_t n);
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Renderer::LinuxFontSize(CTRPluginFramework::Renderer *__hidden this, const char *); idb
// int __fastcall RecursiveLock_Lock(_DWORD); weak
// int __fastcall RecursiveLock_TryLock(_DWORD); weak
// int __fastcall RecursiveLock_Unlock(_DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::Is3DEnabled(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(CTRPluginFramework::ScreenImpl *__hidden this, bool); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::GetRightFramebuffer(CTRPluginFramework::ScreenImpl *__hidden this, bool); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetStride(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetBytesPerPixel(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetFormat(CTRPluginFramework::ScreenImpl *__hidden this); idb
// int __fastcall LightEvent_Wait(_DWORD); weak
// int __fastcall LightEvent_Clear(_DWORD); weak
// _DWORD CTRPluginFramework::ScreenImpl::Clean(CTRPluginFramework::ScreenImpl *__hidden this); idb
// int __fastcall LightEvent_Pulse(_DWORD); weak
// _DWORD CTRPluginFramework::Process::GetTextSize(CTRPluginFramework::Process *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Process::CopyMemory(CTRPluginFramework::Process *__hidden this, void *, const void *, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Hook::Initialize(CTRPluginFramework::Hook *__hidden this, unsigned int, unsigned int, unsigned int); idb
// _DWORD CTRPluginFramework::Hook::Enable(CTRPluginFramework::Hook *__hidden this); idb
// int __fastcall RecursiveLock_Init(_DWORD); weak
// int __fastcall LightEvent_Init(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Hook::Hook(CTRPluginFramework::Hook *__hidden this); idb
// int __fastcall CTRPluginFramework::FloatingButton::FloatingButton(_DWORD, _DWORD, _DWORD); weak
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD CTRPluginFramework::Time::AsSeconds(CTRPluginFramework::Time *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawRocket(CTRPluginFramework::Icon *__hidden this, int, int); weak
// _DWORD __cdecl CTRPluginFramework::FloatingButton::~FloatingButton(CTRPluginFramework::FloatingButton *__hidden this); weak
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall CTRPluginFramework::FloatingButton::Update(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::FloatingButton::operator()(_DWORD); weak
// _DWORD CTRPluginFramework::PluginMenuImpl::ForceOpen(CTRPluginFramework::PluginMenuImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::Clock::HasTimePassed(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD std::__detail::_List_node_base::_M_unhook(std::__detail::_List_node_base *__hidden this); idb
// _DWORD CTRPluginFramework::SystemImpl::Status(CTRPluginFramework::SystemImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Screenshot::OSDCallback(CTRPluginFramework::Screenshot *__hidden this, unsigned int, void *, void *, int, int); idb
// _DWORD CTRPluginFramework::ProcessImpl::LockGameThreads(CTRPluginFramework::ProcessImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ProcessImpl::UnlockGameThreads(CTRPluginFramework::ProcessImpl *__hidden this); idb
// _DWORD CTRPluginFramework::Process::GetHandle(CTRPluginFramework::Process *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::Acquire(CTRPluginFramework::ScreenImpl *__hidden this, unsigned int, unsigned int, unsigned int, unsigned int, bool); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawSave(CTRPluginFramework::Icon *__hidden this, int, int); idb
// _DWORD CTRPluginFramework::FloatingButton::Draw(CTRPluginFramework::FloatingButton *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Icon::DrawHandCursor(CTRPluginFramework::Icon *__hidden this, int, int); idb

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN CTRPluginFramework::OSDImpl::RecLock; // weak
int ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E; // weak
int dword_18; // weak
int dword_1C; // weak
char CTRPluginFramework::OSDImpl::TopScreen; // weak
char byte_21; // weak
int dword_24; // weak
int dword_28; // weak
int dword_2C; // weak
int dword_30; // weak
char byte_34; // weak
char CTRPluginFramework::OSDImpl::BottomScreen; // weak
char byte_39; // weak
int dword_3C; // weak
int dword_40; // weak
int dword_44; // weak
int dword_48; // weak
char byte_4C; // weak
char CTRPluginFramework::OSDImpl::IsFramePaused; // weak
_UNKNOWN CTRPluginFramework::OSDImpl::OnFramePaused; // weak
int CTRPluginFramework::OSDImpl::FramesToPlay; // weak
_UNKNOWN CTRPluginFramework::OSDImpl::OnFrameResume; // weak
char CTRPluginFramework::OSDImpl::OSDHook; // weak
_UNKNOWN CTRPluginFramework::InstallOSD(void)::returnCode; // weak
int dword_88; // weak
int dword_8C; // weak
int (__fastcall *CTRPluginFramework::OSDImpl::HookReturn)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
_UNKNOWN CTRPluginFramework::OSDImpl::OnNewFrameEvent; // weak
_UNKNOWN CTRPluginFramework::OSDImpl::FloatingBtn; // weak
int CTRPluginFramework::OSDImpl::Callbacks; // weak
int dword_C4; // weak
int dword_C8; // weak
_UNKNOWN CTRPluginFramework::g_second; // weak
_UNKNOWN CTRPluginFramework::g_fpsClock; // weak
_UNKNOWN unk_D8; // weak
_UNKNOWN CTRPluginFramework::g_OSDPattern; // weak
_UNKNOWN unk_10B8; // weak
_UNKNOWN unk_10C8; // weak
_UNKNOWN unk_10DC; // weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Top; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Bottom; weak
// extern _UNKNOWN _dso_handle; weak
// extern _UNKNOWN CTRPluginFramework::Preferences::UseFloatingBtn; weak


//----- (000000E8) --------------------------------------------------------
_DWORD *__fastcall std::__cxx11::list<CTRPluginFramework::OSDImpl::OSDMessage *,std::allocator<CTRPluginFramework::OSDImpl::OSDMessage *>>::~list(_DWORD **a1)
{
  _DWORD *v1; // r4
  _DWORD *i; // r0
  _DWORD *v3; // r5

  v1 = a1;
  for ( i = *a1; v1 != i; i = v3 )
  {
    v3 = (_DWORD *)*i;
    operator delete(i);
  }
  return v1;
}

//----- (00000114) --------------------------------------------------------
void **__fastcall std::vector<bool (*)(CTRPluginFramework::Screen const&),std::allocator<bool (*)(CTRPluginFramework::Screen const&)>>::~vector(void **a1)
{
  void **v1; // r4
  void *v2; // r0

  v1 = a1;
  v2 = *a1;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (00000134) --------------------------------------------------------
int __fastcall CTRPluginFramework::memsearch(void *s1, int a2, int a3)
{
  char *v3; // r9
  int v4; // r3
  int *v5; // r0
  size_t v6; // r6
  unsigned int v7; // r4
  int v8; // r0
  int v9; // t1
  int v10; // r10
  unsigned int v11; // r8
  int v12; // r5
  int v13; // r7
  int v15; // [sp+0h] [bp-420h]
  _DWORD v16[1]; // [sp+400h] [bp-20h]

  v3 = (char *)s1;
  v4 = 0;
  v5 = &v15;
  do
  {
    ++v4;
    *v5 = a3;
    ++v5;
  }
  while ( v4 != 256 );
  v6 = a3 - 1;
  v7 = a3 - 1;
  v8 = (int)(v3 - 1);
  while ( v7 )
  {
    v9 = *(unsigned __int8 *)(v8++ + 1);
    v16[v9 - 256] = v7--;
  }
  v10 = (unsigned __int8)v3[v6];
  v11 = a2 - a3;
  while ( 1 )
  {
    v12 = *(unsigned __int8 *)(v7 + v6 + 0x100000);
    if ( v12 == v10 )
    {
      v13 = v7 + 0x100000;
      if ( !memcmp(v3, (const void *)(v7 + 0x100000), v6) )
        break;
    }
    v7 += v16[v12 - 256];
    if ( v11 < v7 )
      return 0;
  }
  return v13;
}

//----- (000001E4) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::SearchStmfd(unsigned int result, int a2, _BYTE *a3)
{
  unsigned int v3; // r12

  if ( result )
  {
    v3 = result - 1024;
    while ( v3 < result )
    {
      if ( a2 == *(_DWORD *)result )
        return result;
      if ( *(_DWORD *)result == -450891772 && *(_BYTE *)(result + 7) == 6 )
      {
        *a3 = 1;
        return result;
      }
      result -= 4;
    }
    result = 0;
  }
  return result;
}

//----- (00000240) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::OSDMessage::OSDMessage(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3; // r6
  int v4; // r4
  int v5; // r8
  _DWORD *v6; // r7
  const char *v7; // r1
  int v8; // r0
  int result; // r0
  __int64 v10; // [sp+0h] [bp-20h]

  v10 = a1;
  v3 = a3;
  v4 = a1;
  *(_DWORD *)a1 = a1 + 8;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v5 = HIDWORD(a1);
  *(_DWORD *)(a1 + 32) = -16777216;
  *(_DWORD *)(a1 + 36) = -16777216;
  v6 = a2;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)(a1 + 40));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v4, v5);
  v8 = CTRPluginFramework::Renderer::LinuxFontSize(*(CTRPluginFramework::Renderer **)v4, v7);
  *(_BYTE *)(v4 + 28) = 0;
  *(_DWORD *)(v4 + 24) = v8;
  *(_DWORD *)(v4 + 32) = *v6;
  *(_DWORD *)(v4 + 36) = *v3;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&v10);
  result = v4;
  *(_QWORD *)(v4 + 40) = v10;
  return result;
}
// 114C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);

//----- (000002C4) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::Lock(CTRPluginFramework::OSDImpl *this)
{
  return RecursiveLock_Lock(&CTRPluginFramework::OSDImpl::RecLock);
}
// 1154: using guessed type int __fastcall RecursiveLock_Lock(_DWORD);

//----- (000002D0) --------------------------------------------------------
bool __fastcall CTRPluginFramework::OSDImpl::TryLock(CTRPluginFramework::OSDImpl *this)
{
  return RecursiveLock_TryLock(&CTRPluginFramework::OSDImpl::RecLock) != 0;
}
// 1158: using guessed type int __fastcall RecursiveLock_TryLock(_DWORD);

//----- (000002EC) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::Unlock(CTRPluginFramework::OSDImpl *this)
{
  return RecursiveLock_Unlock(&CTRPluginFramework::OSDImpl::RecLock);
}
// 115C: using guessed type int __fastcall RecursiveLock_Unlock(_DWORD);

//----- (000002F8) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::OSDImpl::Draw(CTRPluginFramework::OSDImpl *this)
{
  CTRPluginFramework::OSDImpl *v1; // r0
  int *v2; // r6
  signed int result; // r0
  signed int v4; // r3
  signed int v5; // r7
  int v6; // r4
  CTRPluginFramework::OSDImpl *v7; // r0
  char v8; // [sp+8h] [bp-28h]
  int v9; // [sp+14h] [bp-1Ch]

  v1 = (CTRPluginFramework::OSDImpl *)CTRPluginFramework::OSDImpl::Lock(this);
  v2 = (int *)ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
  if ( (int *)ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E == &ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E )
  {
    CTRPluginFramework::OSDImpl::Unlock(v1);
    result = 0;
  }
  else
  {
    v4 = dword_1C;
    v5 = 15;
    if ( (unsigned int)dword_1C >= 0xF )
      v4 = 15;
    v9 = -15 * v4 + 230;
    do
    {
      v6 = v2[2];
      v7 = (CTRPluginFramework::OSDImpl *)CTRPluginFramework::Renderer::DrawString(
                                            *(_DWORD *)v6,
                                            390 - *(_DWORD *)(v6 + 24),
                                            &v9,
                                            *(_DWORD *)(v6 + 32),
                                            *(_DWORD *)(v6 + 36));
      v9 += 5;
      if ( !*(_BYTE *)(v6 + 28) )
        v7 = (CTRPluginFramework::OSDImpl *)CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v8);
      --v5;
      *(_BYTE *)(v6 + 28) = 1;
      if ( !v5 )
        break;
      v2 = (int *)*v2;
    }
    while ( v2 != &ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E );
    CTRPluginFramework::OSDImpl::Unlock(v7);
    result = 1;
  }
  return result;
}
// 14: using guessed type int ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
// 1C: using guessed type int dword_1C;
// 1160: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (000003C4) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::UpdateScreens(CTRPluginFramework::OSDImpl *this)
{
  CTRPluginFramework::ScreenImpl *v1; // r5
  CTRPluginFramework::ScreenImpl *v2; // r5
  int result; // r0

  v1 = (CTRPluginFramework::ScreenImpl *)CTRPluginFramework::ScreenImpl::Top;
  CTRPluginFramework::OSDImpl::TopScreen = 1;
  byte_21 = CTRPluginFramework::ScreenImpl::Is3DEnabled(CTRPluginFramework::ScreenImpl::Top);
  dword_24 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v1, 0);
  dword_28 = CTRPluginFramework::ScreenImpl::GetRightFramebuffer(v1, 0);
  dword_2C = CTRPluginFramework::ScreenImpl::GetStride(v1);
  dword_30 = CTRPluginFramework::ScreenImpl::GetBytesPerPixel(v1);
  byte_34 = CTRPluginFramework::ScreenImpl::GetFormat(v1);
  v2 = (CTRPluginFramework::ScreenImpl *)CTRPluginFramework::ScreenImpl::Bottom;
  CTRPluginFramework::OSDImpl::BottomScreen = 0;
  byte_39 = CTRPluginFramework::ScreenImpl::Is3DEnabled(CTRPluginFramework::ScreenImpl::Bottom);
  dword_3C = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v2, 0);
  dword_40 = CTRPluginFramework::ScreenImpl::GetRightFramebuffer(v2, 0);
  dword_44 = CTRPluginFramework::ScreenImpl::GetStride(v2);
  dword_48 = CTRPluginFramework::ScreenImpl::GetBytesPerPixel(v2);
  result = CTRPluginFramework::ScreenImpl::GetFormat(v2);
  byte_4C = result;
  return result;
}
// 18: using guessed type int dword_18;
// 20: using guessed type char CTRPluginFramework::OSDImpl::TopScreen;
// 21: using guessed type char byte_21;
// 24: using guessed type int dword_24;
// 28: using guessed type int dword_28;
// 2C: using guessed type int dword_2C;
// 30: using guessed type int dword_30;
// 34: using guessed type char byte_34;
// 38: using guessed type char CTRPluginFramework::OSDImpl::BottomScreen;
// 39: using guessed type char byte_39;
// 3C: using guessed type int dword_3C;
// 40: using guessed type int dword_40;
// 44: using guessed type int dword_44;
// 48: using guessed type int dword_48;
// 4C: using guessed type char byte_4C;

//----- (0000049C) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::WaitFramePaused(CTRPluginFramework::OSDImpl *this)
{
  int result; // r0

  if ( !CTRPluginFramework::OSDImpl::IsFramePaused )
  {
    LightEvent_Wait(&CTRPluginFramework::OSDImpl::OnFramePaused);
    result = LightEvent_Clear(&CTRPluginFramework::OSDImpl::OnFramePaused);
  }
  return result;
}
// 50: using guessed type char CTRPluginFramework::OSDImpl::IsFramePaused;
// 1188: using guessed type int __fastcall LightEvent_Wait(_DWORD);
// 118C: using guessed type int __fastcall LightEvent_Clear(_DWORD);

//----- (000004C8) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::ResumeFrame(int result, unsigned int a2)
{
  int v2; // r5

  if ( CTRPluginFramework::OSDImpl::IsFramePaused )
  {
    v2 = result;
    CTRPluginFramework::OSDImpl::FramesToPlay = result;
    CTRPluginFramework::ScreenImpl::Clean((CTRPluginFramework::ScreenImpl *)result);
    result = LightEvent_Pulse(&CTRPluginFramework::OSDImpl::OnFrameResume);
    if ( v2 )
    {
      LightEvent_Wait(&CTRPluginFramework::OSDImpl::OnFramePaused);
      result = LightEvent_Clear(&CTRPluginFramework::OSDImpl::OnFramePaused);
    }
  }
  return result;
}
// 50: using guessed type char CTRPluginFramework::OSDImpl::IsFramePaused;
// 5C: using guessed type int CTRPluginFramework::OSDImpl::FramesToPlay;
// 1188: using guessed type int __fastcall LightEvent_Wait(_DWORD);
// 118C: using guessed type int __fastcall LightEvent_Clear(_DWORD);
// 1194: using guessed type int __fastcall LightEvent_Pulse(_DWORD);

//----- (00000510) --------------------------------------------------------
int __fastcall CTRPluginFramework::InstallOSD(CTRPluginFramework *this)
{
  int v1; // r0
  int v2; // r0
  int v3; // r0
  _DWORD *v4; // r8
  int v5; // r0
  int v6; // r0
  int v7; // r0
  int v8; // r0
  _DWORD *v9; // r4
  int result; // r0
  int v11; // r3
  void *v12; // r6
  int (__fastcall *v13)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // r3
  unsigned __int8 v14; // [sp+3h] [bp-3Dh]
  int v15; // [sp+4h] [bp-3Ch]
  int *v16; // [sp+8h] [bp-38h]
  int v17; // [sp+Ch] [bp-34h]
  int v18; // [sp+10h] [bp-30h]

  v14 = 0;
  v1 = CTRPluginFramework::Process::GetTextSize(this);
  v2 = CTRPluginFramework::memsearch(&CTRPluginFramework::g_OSDPattern, v1, 20);
  if ( !v2 )
  {
    v3 = CTRPluginFramework::Process::GetTextSize(0);
    v2 = CTRPluginFramework::memsearch(&unk_10B8, v3, 16);
  }
  v4 = (_DWORD *)CTRPluginFramework::SearchStmfd(v2, -382902288, &v14);
  if ( v4
    || (v5 = CTRPluginFramework::Process::GetTextSize(0),
        v6 = CTRPluginFramework::memsearch(&unk_10C8, v5, 20),
        (v4 = (_DWORD *)CTRPluginFramework::SearchStmfd(v6, -382908432, &v14)) != 0) )
  {
    v9 = 0;
  }
  else
  {
    v7 = CTRPluginFramework::Process::GetTextSize(0);
    v8 = CTRPluginFramework::memsearch(&unk_10DC, v7, 16);
    v9 = (_DWORD *)CTRPluginFramework::SearchStmfd(v8, -382910352, &v14);
    if ( !v9 )
    {
      v16 = &v18;
      v15 = 31;
      v16 = (int *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(
                     &v16,
                     &v15,
                     0);
      v18 = v15;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars();
      v17 = v15;
      *((_BYTE *)v16 + v15) = 0;
      CTRPluginFramework::MessageBox::MessageBox(&v15, &v16, 0, 0);
      CTRPluginFramework::MessageBox::operator()(&v15);
      CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v15);
      return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v16);
    }
  }
  v11 = CTRPluginFramework::OSDImpl::OSDHook & 0xF9;
  CTRPluginFramework::OSDImpl::OSDHook &= 0xF9u;
  v12 = &CTRPluginFramework::InstallOSD(void)::returnCode;
  if ( v9 )
  {
    CTRPluginFramework::Process::CopyMemory(
      (CTRPluginFramework::Process *)&CTRPluginFramework::InstallOSD(void)::returnCode,
      v9,
      &CTRPluginFramework::OSDImpl::RecLock,
      v11);
    dword_8C = (int)(v9 + 2);
    dword_88 = -450891772;
    CTRPluginFramework::Hook::Initialize(
      (CTRPluginFramework::Hook *)&CTRPluginFramework::OSDImpl::OSDHook,
      (unsigned int)v9,
      (unsigned int)CTRPluginFramework::OSDImpl::MainCallback2,
      0);
    result = CTRPluginFramework::Hook::Enable((CTRPluginFramework::Hook *)&CTRPluginFramework::OSDImpl::OSDHook);
    v13 = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))v14;
    if ( v14 )
      v13 = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))v9[1];
    else
      CTRPluginFramework::OSDImpl::HookReturn = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))&CTRPluginFramework::InstallOSD(void)::returnCode;
    if ( v14 )
      CTRPluginFramework::OSDImpl::HookReturn = v13;
  }
  else
  {
    CTRPluginFramework::Process::CopyMemory(
      (CTRPluginFramework::Process *)&CTRPluginFramework::InstallOSD(void)::returnCode,
      v4,
      &CTRPluginFramework::OSDImpl::RecLock,
      v11);
    dword_8C = (int)(v4 + 2);
    dword_88 = -450891772;
    CTRPluginFramework::Hook::Initialize(
      (CTRPluginFramework::Hook *)&CTRPluginFramework::OSDImpl::OSDHook,
      (unsigned int)v4,
      (unsigned int)CTRPluginFramework::OSDImpl::MainCallback,
      0);
    result = CTRPluginFramework::Hook::Enable((CTRPluginFramework::Hook *)&CTRPluginFramework::OSDImpl::OSDHook);
    if ( v14 )
      v12 = (void *)v4[1];
    CTRPluginFramework::OSDImpl::HookReturn = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))v12;
  }
  return result;
}
// 68: using guessed type char CTRPluginFramework::OSDImpl::OSDHook;
// 88: using guessed type int dword_88;
// 8C: using guessed type int dword_8C;
// 90: using guessed type int (__fastcall *CTRPluginFramework::OSDImpl::HookReturn)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 119C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 11A0: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(void);
// 11A4: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD);
// 11A8: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);
// 11B0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000071C) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::_Initialize(CTRPluginFramework::OSDImpl *this)
{
  CTRPluginFramework *v1; // r0

  RecursiveLock_Init(&CTRPluginFramework::OSDImpl::RecLock);
  LightEvent_Init(&CTRPluginFramework::OSDImpl::OnNewFrameEvent, 1);
  LightEvent_Init(&CTRPluginFramework::OSDImpl::OnFramePaused, 1);
  v1 = (CTRPluginFramework *)LightEvent_Init(&CTRPluginFramework::OSDImpl::OnFrameResume, 1);
  CTRPluginFramework::OSDImpl::IsFramePaused = 0;
  return CTRPluginFramework::InstallOSD(v1);
}
// 50: using guessed type char CTRPluginFramework::OSDImpl::IsFramePaused;
// 11C0: using guessed type int __fastcall RecursiveLock_Init(_DWORD);
// 11C4: using guessed type int __fastcall LightEvent_Init(_DWORD, _DWORD);

//----- (00000764) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework7OSDImpl12DrawSaveIconE()
{
  float v0; // r1
  int v2; // [sp+0h] [bp-28h]
  int v3; // [sp+4h] [bp-24h]
  int v4; // [sp+8h] [bp-20h]
  int v5; // [sp+Ch] [bp-1Ch]

  CTRPluginFramework::Hook::Hook((CTRPluginFramework::Hook *)&CTRPluginFramework::OSDImpl::OSDHook);
  v4 = 40;
  v5 = 40;
  v2 = 0;
  v3 = 0;
  CTRPluginFramework::FloatingButton::FloatingButton(
    &CTRPluginFramework::OSDImpl::FloatingBtn,
    &v2,
    &CTRPluginFramework::Icon::DrawRocket);
  _aeabi_atexit(
    &CTRPluginFramework::OSDImpl::FloatingBtn,
    &CTRPluginFramework::FloatingButton::~FloatingButton,
    &_dso_handle);
  dword_18 = (int)&ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
  ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E = (int)&ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
  dword_1C = 0;
  _aeabi_atexit(
    &ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E,
    std::__cxx11::list<CTRPluginFramework::OSDImpl::OSDMessage *,std::allocator<CTRPluginFramework::OSDImpl::OSDMessage *>>::~list,
    &_dso_handle);
  CTRPluginFramework::OSDImpl::Callbacks = 0;
  dword_C4 = 0;
  dword_C8 = 0;
  _aeabi_atexit(
    &CTRPluginFramework::OSDImpl::Callbacks,
    std::vector<bool (*)(CTRPluginFramework::Screen const&),std::allocator<bool (*)(CTRPluginFramework::Screen const&)>>::~vector,
    &_dso_handle);
  CTRPluginFramework::Seconds((CTRPluginFramework *)&v2, v0);
  CTRPluginFramework::Time::AsSeconds((CTRPluginFramework::Time *)&v2);
  CTRPluginFramework::g_second = 1065353216;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&CTRPluginFramework::g_fpsClock);
  return CTRPluginFramework::Clock::Clock((CTRPluginFramework::Clock *)&unk_D8);
}
// 14: using guessed type int ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
// 18: using guessed type int dword_18;
// 1C: using guessed type int dword_1C;
// 68: using guessed type char CTRPluginFramework::OSDImpl::OSDHook;
// C0: using guessed type int CTRPluginFramework::OSDImpl::Callbacks;
// C4: using guessed type int dword_C4;
// C8: using guessed type int dword_C8;
// 11CC: using guessed type int __fastcall CTRPluginFramework::FloatingButton::FloatingButton(_DWORD, _DWORD, _DWORD);
// 11D0: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 11E0: using guessed type _DWORD __cdecl CTRPluginFramework::Icon::DrawRocket(CTRPluginFramework::Icon *__hidden this, int, int);
// 11E4: using guessed type _DWORD __cdecl CTRPluginFramework::FloatingButton::~FloatingButton(CTRPluginFramework::FloatingButton *__hidden this);

//----- (00000840) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::Update(CTRPluginFramework::OSDImpl *this)
{
  int v1; // r4
  int result; // r0
  float v3; // r1
  _BYTE *v4; // r5
  int v5; // r1
  void *v6; // r5
  __int64 v7; // [sp+0h] [bp-30h]
  int v8; // [sp+8h] [bp-28h]
  int v9; // [sp+Ch] [bp-24h]
  int v10; // [sp+10h] [bp-20h]
  int v11; // [sp+14h] [bp-1Ch]

  if ( CTRPluginFramework::Preferences::UseFloatingBtn )
  {
    v1 = CTRPluginFramework::Touch::IsDown(this);
    CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v8);
    v10 = v8;
    v11 = v9;
    CTRPluginFramework::FloatingButton::Update(&CTRPluginFramework::OSDImpl::FloatingBtn, v1, &v10);
    this = (CTRPluginFramework::OSDImpl *)CTRPluginFramework::FloatingButton::operator()(&CTRPluginFramework::OSDImpl::FloatingBtn);
    if ( this )
      this = (CTRPluginFramework::OSDImpl *)CTRPluginFramework::PluginMenuImpl::ForceOpen(this);
  }
  result = CTRPluginFramework::OSDImpl::TryLock(this);
  if ( !result )
  {
    while ( dword_1C )
    {
      v4 = *(_BYTE **)(ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E + 8);
      if ( !v4[28] )
        break;
      CTRPluginFramework::Seconds((CTRPluginFramework *)&v7, v3);
      result = CTRPluginFramework::Clock::HasTimePassed(v4 + 40, v5, v7, HIDWORD(v7));
      if ( !result )
        break;
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4);
      operator delete(v4);
      v6 = (void *)ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
      --dword_1C;
      std::__detail::_List_node_base::_M_unhook((std::__detail::_List_node_base *)ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E);
      operator delete(v6);
    }
    result = CTRPluginFramework::OSDImpl::Unlock((CTRPluginFramework::OSDImpl *)result);
  }
  return result;
}
// 14: using guessed type int ZN18CTRPluginFramework7OSDImpl13NotificationsB5cxx11E;
// 1C: using guessed type int dword_1C;
// 11B0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 11F0: using guessed type int __fastcall CTRPluginFramework::FloatingButton::Update(_DWORD, _DWORD, _DWORD);
// 11F4: using guessed type int __fastcall CTRPluginFramework::FloatingButton::operator()(_DWORD);
// 11FC: using guessed type int __fastcall CTRPluginFramework::Clock::HasTimePassed(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000948) --------------------------------------------------------
#error "C68: call analysis failed (funcsize=396)"

//----- (00000FD0) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::MainCallback(CTRPluginFramework::OSDImpl *this, unsigned int a2, int a3, void *a4, void *a5, int a6, int a7, int a8)
{
  int v8; // r4
  CTRPluginFramework::OSDImpl *v9; // r8
  unsigned int v10; // r9
  void *v11; // r5

  v8 = a3;
  v9 = this;
  v10 = a2;
  v11 = a4;
  if ( a3 )
    CTRPluginFramework::OSDImpl::CallbackGlobal(this, a3, a4, a5, a6, a2);
  return CTRPluginFramework::OSDImpl::HookReturn(v9, v10, v8, v11, a5, a6, a7);
}
// 90: using guessed type int (__fastcall *CTRPluginFramework::OSDImpl::HookReturn)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001038) --------------------------------------------------------
int __fastcall CTRPluginFramework::OSDImpl::MainCallback2(CTRPluginFramework::OSDImpl *this, unsigned int a2, unsigned int *a3, unsigned int a4, unsigned int a5, int a6, int a7)
{
  unsigned int v7; // r4
  CTRPluginFramework::OSDImpl *v8; // r6
  unsigned int *v9; // r5
  unsigned int v10; // r7
  unsigned int v11; // r1
  int v13; // [sp+4h] [bp-1Ch]

  v13 = a2;
  v7 = a2;
  v8 = this;
  v9 = a3;
  v10 = a4;
  if ( a2 )
  {
    v11 = *(_DWORD *)(a2 + 4);
    if ( v11 )
      CTRPluginFramework::OSDImpl::CallbackGlobal(
        (CTRPluginFramework::OSDImpl *)a3,
        v11,
        0,
        *(void **)(v7 + 12),
        *(_DWORD *)(v7 + 16) & 0xF,
        v13);
  }
  return CTRPluginFramework::OSDImpl::HookReturn(v8, v7, v9, v10, a5, a6, a7);
}
// 90: using guessed type int (__fastcall *CTRPluginFramework::OSDImpl::HookReturn)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

#error "There were 1 decompilation failure(s) on 19 function(s)"
