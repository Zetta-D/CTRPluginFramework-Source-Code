/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
_BYTE *__fastcall CTRPluginFramework::memset32(_BYTE *result, int a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this);
_BYTE *__fastcall CTRPluginFramework::BMPImage::BitmapFileHeader::Clear(CTRPluginFramework::BMPImage::BitmapFileHeader *this);
bool __fastcall CTRPluginFramework::BMPImage::BitmapFileHeader::Read(CTRPluginFramework::BMPImage::BitmapFileHeader *this, CTRPluginFramework::File *a2);
_BYTE *__fastcall CTRPluginFramework::BMPImage::BitmapInformationHeader::Clear(CTRPluginFramework::BMPImage::BitmapInformationHeader *this);
bool __fastcall CTRPluginFramework::BMPImage::BitmapInformationHeader::Read(CTRPluginFramework::BMPImage::BitmapInformationHeader *this, CTRPluginFramework::File *a2);
int __fastcall CTRPluginFramework::BMPImage::BMPImage(int result);
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::~BMPImage(CTRPluginFramework::BMPImage *this, void *a2);
int __fastcall CTRPluginFramework::BMPImage::IsLoaded(CTRPluginFramework::BMPImage *this);
int __fastcall CTRPluginFramework::BMPImage::Width(CTRPluginFramework::BMPImage *this);
int __fastcall CTRPluginFramework::BMPImage::Height(CTRPluginFramework::BMPImage *this);
int __fastcall CTRPluginFramework::BMPImage::BytesPerPixel(CTRPluginFramework::BMPImage *this);
char *__fastcall CTRPluginFramework::BMPImage::GetDimensions(CTRPluginFramework::BMPImage *this);
int __fastcall CTRPluginFramework::BMPImage::data(CTRPluginFramework::BMPImage *this);
int __fastcall CTRPluginFramework::BMPImage::end(CTRPluginFramework::BMPImage *this);
_BYTE *__fastcall CTRPluginFramework::BMPImage::DataClear(CTRPluginFramework::BMPImage *this);
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::BMPImage(CTRPluginFramework::BMPImage *this, unsigned int a2, unsigned int a3, int a4);
CTRPluginFramework::Heap *__fastcall CTRPluginFramework::BMPImage::Unload(CTRPluginFramework::BMPImage *this, void *a2);
int __fastcall CTRPluginFramework::BMPImage::Draw(CTRPluginFramework::BMPImage *this, int a2, int a3);
int __fastcall CTRPluginFramework::BMPImage::Draw(CTRPluginFramework::BMPImage *a1, int *a2);
int __fastcall CTRPluginFramework::BMPImage::Draw(int a1, int *a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::BMPImage::SaveImage(int a1, int a2);
int __fastcall CTRPluginFramework::BMPImage::ReverseChannels(int result);
int __fastcall CTRPluginFramework::BMPImage::BGRtoRGB(int result);
int __fastcall CTRPluginFramework::BMPImage::RGBtoBGR(int result);
int __fastcall CTRPluginFramework::BMPImage::FillWithImg(int result, const CTRPluginFramework::BMPImage *a2);
signed int __fastcall CTRPluginFramework::BMPImage::_CreateBitmap(CTRPluginFramework::BMPImage *this, void *a2);
int __fastcall CTRPluginFramework::BMPImage::SetWidthHeight(int result, unsigned int a2, unsigned int a3);
int __fastcall CTRPluginFramework::BMPImage::Resample(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2, int a3, int a4);
int __fastcall CTRPluginFramework::BMPImage::SubSample(int result, CTRPluginFramework::BMPImage *a2);
unsigned int __fastcall CTRPluginFramework::BMPImage::UpSample(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2);
signed int __fastcall CTRPluginFramework::BMPImage::Region(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2, const unsigned int *a3, const unsigned int *a4, const unsigned int *a5, CTRPluginFramework::BMPImage *a6);
signed int __fastcall CTRPluginFramework::BMPImage::RoiFromCenter(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2, unsigned int a3, const unsigned int *a4, const unsigned int *a5, CTRPluginFramework::BMPImage *a6);
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::BMPImage(CTRPluginFramework::BMPImage *this, const CTRPluginFramework::BMPImage *a2, unsigned int a3, unsigned int a4);
CTRPluginFramework::File *__fastcall CTRPluginFramework::BMPImage::_LoadBitmap(CTRPluginFramework::BMPImage *this, void *a2);
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::BMPImage(int a1);
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::File::Read(CTRPluginFramework::File *__hidden this, void *, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Heap::Free(CTRPluginFramework::Heap *__hidden this, void *); idb
// int vramFree(void); weak
// _DWORD __cdecl CTRPluginFramework::Heap::Alloc(CTRPluginFramework::Heap *__hidden this, unsigned int); idb
// int __fastcall vramAlloc(_DWORD); weak
// int threadGetCurrent(void); weak
// _DWORD CTRPluginFramework::ScreenImpl::IsTopScreen(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(CTRPluginFramework::ScreenImpl *__hidden this, int, int); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetBytesPerPixel(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::GetStride(CTRPluginFramework::ScreenImpl *__hidden this); idb
// int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void); weak
// _DWORD __cdecl CTRPluginFramework::Color::Fade(CTRPluginFramework::Color *__hidden this, double); idb
// int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::IsOpen(CTRPluginFramework::File *__hidden this); idb
// int __fastcall CTRPluginFramework::OSD::Notify(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::File::Write(CTRPluginFramework::File *__hidden this, const void *, unsigned int); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memset(void *s, int c, size_t n);
// _DWORD CTRPluginFramework::File::GetSize(CTRPluginFramework::File *__hidden this); idb
// int __fastcall ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// void *memcpy(void *dest, const void *src, size_t n);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::ToFramebuffer; weak
// extern _UNKNOWN CTRPluginFramework::Renderer::hookContext; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN CTRPluginFramework::Color::Red; weak


//----- (00000004) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 1720: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 1724: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (0000007C) --------------------------------------------------------
_BYTE *__fastcall CTRPluginFramework::memset32(_BYTE *result, int a2)
{
  _BOOL4 v2; // r3
  _BYTE *v3; // r2
  _BYTE *v4; // r1

  while ( (unsigned __int8)result & 3 )
  {
    if ( !a2 )
      return result;
    *result++ = 0;
    --a2;
  }
  v2 = result == 0;
  if ( !a2 )
    v2 = 1;
  if ( !v2 )
  {
    v3 = &result[a2 & 0xFFFFFFFC];
    while ( v3 != result )
    {
      *(_DWORD *)result = 0;
      result += 4;
    }
    if ( result )
    {
      v4 = &result[a2 & 3];
      while ( result != v4 )
        *result++ = 0;
    }
  }
  return result;
}

//----- (000000EC) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this)
{
  CTRPluginFramework::File *v1; // r4

  v1 = this;
  CTRPluginFramework::File::Close(this);
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::File *)((char *)v1 + 48));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// 1730: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000110) --------------------------------------------------------
_BYTE *__fastcall CTRPluginFramework::BMPImage::BitmapFileHeader::Clear(CTRPluginFramework::BMPImage::BitmapFileHeader *this)
{
  return CTRPluginFramework::memset32(this, 14);
}

//----- (00000118) --------------------------------------------------------
bool __fastcall CTRPluginFramework::BMPImage::BitmapFileHeader::Read(CTRPluginFramework::BMPImage::BitmapFileHeader *this, CTRPluginFramework::File *a2)
{
  return CTRPluginFramework::File::Read(a2, (void *)this, 0xEu) != 0;
}

//----- (0000013C) --------------------------------------------------------
_BYTE *__fastcall CTRPluginFramework::BMPImage::BitmapInformationHeader::Clear(CTRPluginFramework::BMPImage::BitmapInformationHeader *this)
{
  return CTRPluginFramework::memset32(this, 40);
}

//----- (00000144) --------------------------------------------------------
bool __fastcall CTRPluginFramework::BMPImage::BitmapInformationHeader::Read(CTRPluginFramework::BMPImage::BitmapInformationHeader *this, CTRPluginFramework::File *a2)
{
  return CTRPluginFramework::File::Read(a2, (void *)this, 0x28u) != 0;
}

//----- (00000168) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::BMPImage(int result)
{
  *(_DWORD *)(result + 12) = 196608;
  *(_WORD *)(result + 24) = 256;
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 28) = result + 36;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 0;
  return result;
}

//----- (000001A4) --------------------------------------------------------
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::~BMPImage(CTRPluginFramework::BMPImage *this, void *a2)
{
  CTRPluginFramework::BMPImage *v2; // r4
  CTRPluginFramework::Heap *v3; // r0

  v2 = this;
  v3 = *(CTRPluginFramework::Heap **)this;
  if ( v3 )
  {
    if ( (unsigned int)v3 > 0xFFFFFFF )
      vramFree();
    else
      CTRPluginFramework::Heap::Free(v3, a2);
    *(_DWORD *)v2 = 0;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)v2 + 28);
  return v2;
}
// 1730: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 173C: using guessed type int vramFree(void);

//----- (000001E4) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::IsLoaded(CTRPluginFramework::BMPImage *this)
{
  return *((unsigned __int8 *)this + 24);
}

//----- (000001EC) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::Width(CTRPluginFramework::BMPImage *this)
{
  return *((unsigned __int16 *)this + 4);
}

//----- (000001F4) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::Height(CTRPluginFramework::BMPImage *this)
{
  return *((unsigned __int16 *)this + 5);
}

//----- (000001FC) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::BytesPerPixel(CTRPluginFramework::BMPImage *this)
{
  return *((unsigned __int16 *)this + 7);
}

//----- (00000204) --------------------------------------------------------
char *__fastcall CTRPluginFramework::BMPImage::GetDimensions(CTRPluginFramework::BMPImage *this)
{
  return (char *)this + 16;
}

//----- (0000020C) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::data(CTRPluginFramework::BMPImage *this)
{
  int result; // r0

  result = *(_DWORD *)this;
  if ( result )
    result += 54;
  return result;
}

//----- (0000021C) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::end(CTRPluginFramework::BMPImage *this)
{
  int v1; // r3

  v1 = *(_DWORD *)this;
  if ( *(_DWORD *)this )
    v1 += *((_DWORD *)this + 1) + 54;
  return v1;
}

//----- (00000238) --------------------------------------------------------
_BYTE *__fastcall CTRPluginFramework::BMPImage::DataClear(CTRPluginFramework::BMPImage *this)
{
  return CTRPluginFramework::memset32((_BYTE *)(*(_DWORD *)this + 54), *((_DWORD *)this + 1));
}

//----- (00000248) --------------------------------------------------------
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::BMPImage(CTRPluginFramework::BMPImage *this, unsigned int a2, unsigned int a3, int a4)
{
  CTRPluginFramework::BMPImage *v4; // r4
  int v5; // r1
  unsigned int v6; // r1
  int v7; // r0
  int v9; // r0

  v4 = this;
  *((_WORD *)this + 7) = 3;
  *((_WORD *)this + 4) = a2;
  v5 = (unsigned __int16)(3 * a2);
  *((_WORD *)this + 6) = v5;
  v6 = a3 * v5;
  *((_WORD *)this + 12) = 256;
  *(_DWORD *)this = 0;
  *((_WORD *)this + 5) = a3;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)v4 + 7) = (char *)v4 + 36;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 0;
  *((_DWORD *)this + 1) = v6;
  if ( a4 && (v9 = vramAlloc(v6 + 54), (*(_DWORD *)v4 = v9) != 0)
    || (v7 = CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(*((_DWORD *)v4 + 1) + 54), v6),
        (*(_DWORD *)v4 = v7) != 0) )
  {
    CTRPluginFramework::BMPImage::DataClear(v4);
    *((_BYTE *)v4 + 24) = 1;
  }
  return v4;
}
// 1744: using guessed type int __fastcall vramAlloc(_DWORD);

//----- (000002F0) --------------------------------------------------------
CTRPluginFramework::Heap *__fastcall CTRPluginFramework::BMPImage::Unload(CTRPluginFramework::BMPImage *this, void *a2)
{
  CTRPluginFramework::BMPImage *v2; // r4
  CTRPluginFramework::Heap *result; // r0

  v2 = this;
  result = *(CTRPluginFramework::Heap **)this;
  if ( result )
  {
    if ( (unsigned int)result > 0xFFFFFFF )
      result = (CTRPluginFramework::Heap *)vramFree();
    else
      result = (CTRPluginFramework::Heap *)CTRPluginFramework::Heap::Free(result, a2);
  }
  *(_DWORD *)v2 = 0;
  *((_DWORD *)v2 + 1) = 0;
  *((_BYTE *)v2 + 24) = 0;
  return result;
}
// 173C: using guessed type int vramFree(void);

//----- (0000032C) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::Draw(CTRPluginFramework::BMPImage *this, int a2, int a3)
{
  unsigned __int16 *v3; // r7
  int v4; // r0
  bool v5; // zf
  char *v6; // r0
  CTRPluginFramework::ScreenImpl *v7; // r5
  int v8; // r3
  int v9; // r2
  int v10; // r6
  int v11; // r1
  int v12; // r2
  int v13; // r8
  int v14; // r4
  unsigned int v15; // r9
  int result; // r0
  int v17; // r11
  int v18; // r4
  int v19; // r7
  bool v20; // cf
  int v21; // r10
  _BYTE *i; // r5
  int v23; // [sp+0h] [bp-38h]
  int v24; // [sp+4h] [bp-34h]
  int v25; // [sp+Ch] [bp-2Ch]

  v3 = (unsigned __int16 *)this;
  v4 = threadGetCurrent();
  v5 = v4 == 0;
  if ( v4 )
    v6 = (char *)(v4 + 1136);
  else
    v6 = (char *)&CTRPluginFramework::Renderer::hookContext;
  if ( !v5 )
    v6 += 12;
  v7 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)v6 + 1);
  CTRPluginFramework::ScreenImpl::IsTopScreen(*((CTRPluginFramework::ScreenImpl **)v6 + 1));
  v8 = v3[4];
  v9 = v3[5];
  v10 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v3);
  v13 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v7, v11, v12);
  v23 = CTRPluginFramework::ScreenImpl::GetBytesPerPixel(v7);
  v14 = v3[4];
  v15 = v3[5];
  result = CTRPluginFramework::ScreenImpl::GetStride(v7);
  v25 = -16777216;
  v17 = result;
  v18 = 3 * v14;
  v19 = v10 + v18;
  v24 = __mrc(15, 0, 13, 0, 3);
  while ( 1 )
  {
    v20 = v15-- >= 1;
    if ( !v20 )
      break;
    v21 = v13;
    for ( i = (_BYTE *)v10; i != (_BYTE *)v19; i += 3 )
    {
      LOBYTE(v25) = i[2];
      BYTE1(v25) = i[1];
      BYTE2(v25) = *i;
      if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
        ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE();
      result = (*(int (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v24))(
                 v21,
                 &v25);
      v21 += v17;
    }
    v10 += v18;
    v13 -= v23;
    v19 += v18;
  }
  return result;
}
// 1748: using guessed type int threadGetCurrent(void);
// 175C: using guessed type int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void);

//----- (00000468) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::Draw(CTRPluginFramework::BMPImage *a1, int *a2)
{
  return CTRPluginFramework::BMPImage::Draw(a1, *a2, a2[1]);
}

//----- (00000470) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::Draw(int a1, int *a2)
{
  float v2; // s0
  int *v3; // r4
  int v4; // r8
  int v5; // r0
  int v6; // r9
  int v7; // r10
  int v8; // r6
  int v9; // r5
  void *v10; // r0
  bool v11; // zf
  bool v12; // nf
  unsigned __int8 v13; // vf
  CTRPluginFramework::ScreenImpl *v14; // r7
  int v15; // r11
  int v16; // r5
  int v17; // r4
  int v18; // r4
  CTRPluginFramework::ScreenImpl *v19; // r0
  int result; // r0
  int v21; // r9
  int v22; // r11
  int v23; // r10
  int v24; // r7
  int v25; // r9
  int v26; // r10
  int v27; // r11
  int v28; // r7
  double v29; // r2
  int (__fastcall *v30)(int, int); // ST14_4
  int v31; // r0
  int v32; // [sp+4h] [bp-4Ch]
  int v33; // [sp+8h] [bp-48h]
  int v34; // [sp+Ch] [bp-44h]
  int v35; // [sp+10h] [bp-40h]
  int v36; // [sp+10h] [bp-40h]
  int v37; // [sp+1Ch] [bp-34h]

  v3 = a2;
  v4 = a1;
  v5 = threadGetCurrent();
  v6 = *v3;
  v7 = v3[1];
  v8 = v3[2];
  v9 = *(unsigned __int16 *)(v4 + 8);
  if ( v5 )
    v10 = (void *)(v5 + 1148);
  else
    v10 = &CTRPluginFramework::Renderer::hookContext;
  v13 = __OFSUB__(v9, v8);
  v11 = v9 == v8;
  v12 = v9 - v8 < 0;
  if ( v9 < v8 )
  {
    v8 -= v9;
    v6 += v8 >> 1;
  }
  v14 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)v10 + 1);
  v15 = v3[3];
  if ( v12 ^ v13 )
  {
    v8 = *(unsigned __int16 *)(v4 + 8);
  }
  else if ( !((unsigned __int8)(v12 ^ v13) | v11) )
  {
    v16 = 3 * ((v9 - v8) >> 1);
    goto LABEL_11;
  }
  v16 = 0;
LABEL_11:
  v17 = *(unsigned __int16 *)(v4 + 10);
  if ( v17 >= v15 )
  {
    if ( v17 > v15 )
    {
      v18 = (v17 - v15) >> 1;
      goto LABEL_16;
    }
  }
  else
  {
    v7 += (v15 - v17) >> 1;
    v15 = *(unsigned __int16 *)(v4 + 10);
  }
  v18 = 0;
LABEL_16:
  v19 = (CTRPluginFramework::ScreenImpl *)*((_DWORD *)v10 + 1);
  v37 = -16777216;
  v32 = CTRPluginFramework::ScreenImpl::GetBytesPerPixel(v19);
  v33 = CTRPluginFramework::ScreenImpl::GetStride(v14);
  v34 = v15 + v18;
  if ( v2 == 0.0 )
  {
    result = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v14, v6, v7);
    v21 = result;
    v35 = __mrc(15, 0, 13, 0, 3);
    while ( v34 != v18 )
    {
      v22 = v21;
      v23 = 0;
      v24 = *(_DWORD *)v4 + v16 + v18 * *(unsigned __int16 *)(v4 + 12) + 57;
      while ( v8 > v23 )
      {
        LOBYTE(v37) = *(_BYTE *)(v24 - 1);
        BYTE1(v37) = *(_BYTE *)(v24 - 2);
        BYTE2(v37) = *(_BYTE *)(v24 - 3);
        if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
          ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE();
        result = (*(int (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v35))(
                   v22,
                   &v37);
        ++v23;
        v22 += v33;
        v24 += 3;
      }
      ++v18;
      v21 -= v32;
    }
  }
  else
  {
    result = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v14, v6, v7);
    v25 = result;
    v36 = __mrc(15, 0, 13, 0, 3);
    while ( v18 != v34 )
    {
      v26 = v25;
      v27 = 0;
      v28 = *(_DWORD *)v4 + v16 + v18 * *(unsigned __int16 *)(v4 + 12) + 57;
      while ( v8 > v27 )
      {
        LOBYTE(v37) = *(_BYTE *)(v28 - 1);
        BYTE1(v37) = *(_BYTE *)(v28 - 2);
        BYTE2(v37) = *(_BYTE *)(v28 - 3);
        if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
          ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE();
        LODWORD(v29) = v36;
        HIDWORD(v29) = *(_DWORD *)((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v36);
        v30 = *(int (__fastcall **)(int, int))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v36);
        v31 = CTRPluginFramework::Color::Fade((CTRPluginFramework::Color *)&v37, v29);
        result = v30(v26, v31);
        ++v27;
        v26 += v33;
        v28 += 3;
      }
      ++v18;
      v25 -= v32;
    }
  }
  return result;
}
// 1748: using guessed type int threadGetCurrent(void);
// 175C: using guessed type int ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(void);

//----- (000006C0) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::BMPImage::SaveImage(int a1, int a2)
{
  int v2; // r4
  int v4; // r0
  _WORD *v5; // r3
  int v6; // r1
  __int16 v7; // r12
  int v8; // r12
  int v9; // r1
  int v10; // [sp+0h] [bp-60h]
  char v11; // [sp+18h] [bp-48h]

  v2 = a1;
  CTRPluginFramework::File::File(&v11, a2, 23);
  if ( CTRPluginFramework::File::IsOpen((CTRPluginFramework::File *)&v11) )
  {
    v4 = *(unsigned __int16 *)(v2 + 8);
    v5 = *(_WORD **)v2;
    v5[9] = v4;
    *((_BYTE *)v5 + 20) = 0;
    *((_BYTE *)v5 + 21) = HIBYTE(v4);
    v6 = *(unsigned __int16 *)(v2 + 10);
    *((_BYTE *)v5 + 24) = 0;
    v5[11] = v6;
    *((_BYTE *)v5 + 25) = HIBYTE(v6);
    v7 = *(_WORD *)(v2 + 14);
    *((_BYTE *)v5 + 50) = 0;
    v5[14] = 8 * v7;
    *((_BYTE *)v5 + 26) = 1;
    *((_BYTE *)v5 + 51) = 0;
    *((_BYTE *)v5 + 52) = 0;
    *((_BYTE *)v5 + 53) = 0;
    *((_BYTE *)v5 + 46) = 0;
    *((_BYTE *)v5 + 47) = 0;
    *((_BYTE *)v5 + 48) = 0;
    *((_BYTE *)v5 + 49) = 0;
    *((_BYTE *)v5 + 30) = 0;
    *((_BYTE *)v5 + 31) = 0;
    *((_BYTE *)v5 + 32) = 0;
    *((_BYTE *)v5 + 33) = 0;
    *((_BYTE *)v5 + 27) = 0;
    *((_BYTE *)v5 + 14) = 40;
    *((_BYTE *)v5 + 15) = 0;
    *((_BYTE *)v5 + 16) = 0;
    *((_BYTE *)v5 + 17) = 0;
    *((_BYTE *)v5 + 38) = 0;
    *((_BYTE *)v5 + 39) = 0;
    *((_BYTE *)v5 + 40) = 0;
    *((_BYTE *)v5 + 41) = 0;
    *((_BYTE *)v5 + 42) = 0;
    *((_BYTE *)v5 + 43) = 0;
    *((_BYTE *)v5 + 44) = 0;
    *((_BYTE *)v5 + 45) = 0;
    v8 = *(unsigned __int16 *)(v2 + 14);
    *((_BYTE *)v5 + 6) = 0;
    v9 = v6 * ((v4 * v8 + 3) & 0xFFFC);
    *((_BYTE *)v5 + 35) = BYTE1(v9);
    *((_BYTE *)v5 + 36) = BYTE2(v9);
    *((_BYTE *)v5 + 37) = HIBYTE(v9);
    *(_BYTE *)v5 = 66;
    *((_BYTE *)v5 + 34) = v9;
    v9 += 54;
    *((_BYTE *)v5 + 1) = 77;
    v5[1] = v9;
    *((_BYTE *)v5 + 5) = HIBYTE(v9);
    *((_BYTE *)v5 + 4) = BYTE2(v9);
    *((_BYTE *)v5 + 7) = 0;
    *((_BYTE *)v5 + 8) = 0;
    *((_BYTE *)v5 + 9) = 0;
    *((_BYTE *)v5 + 10) = 54;
    *((_BYTE *)v5 + 11) = 0;
    *((_BYTE *)v5 + 12) = 0;
    *((_BYTE *)v5 + 13) = 0;
    CTRPluginFramework::File::Write((CTRPluginFramework::File *)&v11, *(const void **)v2, *(_DWORD *)(v2 + 4) + 54);
  }
  else
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      &v10,
      "BMP Error: couldn't open the file");
    CTRPluginFramework::OSD::Notify(&v10, &CTRPluginFramework::Color::White, &CTRPluginFramework::Color::Black);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  }
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v11);
}
// 1730: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1768: using guessed type int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD);
// 1770: using guessed type int __fastcall CTRPluginFramework::OSD::Notify(_DWORD, _DWORD, _DWORD);

//----- (00000894) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::ReverseChannels(int result)
{
  unsigned __int16 *v1; // r4
  _BYTE *v2; // r1
  char v3; // r2
  int v4; // r1

  if ( *(_WORD *)(result + 14) == 3 )
  {
    v1 = (unsigned __int16 *)result;
    CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)result);
    while ( 1 )
    {
      result = CTRPluginFramework::BMPImage::end((CTRPluginFramework::BMPImage *)v1);
      if ( (unsigned int)v2 >= result )
        break;
      v3 = v2[2];
      v2[2] = *v2;
      *v2 = v3;
      v4 = (int)&v2[v1[7]];
    }
  }
  return result;
}

//----- (000008DC) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::BGRtoRGB(int result)
{
  int v1; // r4

  if ( *(_BYTE *)(result + 25) == 1 )
  {
    v1 = result;
    if ( *(_WORD *)(result + 14) == 3 )
    {
      result = CTRPluginFramework::BMPImage::ReverseChannels(result);
      *(_BYTE *)(v1 + 25) = 0;
    }
  }
  return result;
}

//----- (0000090C) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::RGBtoBGR(int result)
{
  int v1; // r4

  if ( !*(_BYTE *)(result + 25) )
  {
    v1 = result;
    if ( *(_WORD *)(result + 14) == 3 )
    {
      result = CTRPluginFramework::BMPImage::ReverseChannels(result);
      *(_BYTE *)(v1 + 25) = 1;
    }
  }
  return result;
}

//----- (0000093C) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::FillWithImg(int result, const CTRPluginFramework::BMPImage *a2)
{
  int v2; // r4
  const CTRPluginFramework::BMPImage *v3; // r5
  unsigned int v4; // r3
  unsigned int v5; // r12
  unsigned int v6; // r2
  bool v7; // cf
  unsigned int v8; // lr
  int v9; // r3
  bool v10; // cf
  signed int v11; // r6
  int v12; // r3
  int v13; // r1
  signed int v14; // r7

  if ( *((_BYTE *)a2 + 24) )
  {
    v2 = result;
    v3 = a2;
    *(_BYTE *)(result + 24) = 1;
    result = (int)CTRPluginFramework::BMPImage::DataClear((CTRPluginFramework::BMPImage *)result);
    v4 = *(unsigned __int16 *)(v2 + 8);
    v5 = *((unsigned __int16 *)v3 + 4);
    v6 = *(unsigned __int16 *)(v2 + 10);
    v7 = v5 >= v4;
    if ( v5 < v4 )
      v4 = v4 - v5 + ((v4 - v5) >> 31);
    v8 = *((unsigned __int16 *)v3 + 5);
    if ( v7 )
      v9 = 0;
    else
      v9 = 3 * ((signed int)v4 >> 1);
    v10 = v8 >= v6;
    if ( v8 >= v6 )
      v6 = 0;
    v11 = 0;
    if ( !v10 )
      v6 = (signed int)(v6 - v8) / 2;
    v12 = v9 + 54;
    while ( (signed int)v8 > v11 )
    {
      result = *(_DWORD *)v3 + v11 * *((unsigned __int16 *)v3 + 6) + 54;
      v13 = *(_DWORD *)v2 + v12 + (v6 + v11) * *(unsigned __int16 *)(v2 + 12);
      v14 = 0;
      while ( 1 )
      {
        result += 3;
        v13 += 3;
        if ( (signed int)v5 <= v14 )
          break;
        ++v14;
        *(_BYTE *)(v13 - 3) = *(_BYTE *)(result - 3);
        *(_BYTE *)(v13 - 2) = *(_BYTE *)(result - 2);
        *(_BYTE *)(v13 - 1) = *(_BYTE *)(result - 1);
      }
      ++v11;
    }
  }
  return result;
}

//----- (00000A10) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::BMPImage::_CreateBitmap(CTRPluginFramework::BMPImage *this, void *a2)
{
  CTRPluginFramework::BMPImage *v2; // r4
  int v3; // r3
  int v4; // r0
  int v5; // r0
  int v6; // r0
  unsigned int v7; // r1
  int v8; // r0
  signed int result; // r0

  v2 = this;
  CTRPluginFramework::BMPImage::Unload(this, a2);
  v3 = *((unsigned __int16 *)v2 + 5);
  v4 = (unsigned __int16)(*((_WORD *)v2 + 4) * *((_WORD *)v2 + 7));
  *((_WORD *)v2 + 6) = v4;
  v5 = v4 * v3;
  *((_DWORD *)v2 + 1) = v5;
  v6 = vramAlloc(v5 + 54);
  *(_DWORD *)v2 = v6;
  if ( v6
    || (v8 = CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(*((_DWORD *)v2 + 1) + 54), v7),
        (*(_DWORD *)v2 = v8) != 0) )
  {
    CTRPluginFramework::BMPImage::DataClear(v2);
    result = 0;
    *((_BYTE *)v2 + 24) = 1;
  }
  else
  {
    *((_DWORD *)v2 + 1) = 0;
    *((_BYTE *)v2 + 24) = 0;
    result = -1;
  }
  return result;
}
// 1744: using guessed type int __fastcall vramAlloc(_DWORD);

//----- (00000A90) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::SetWidthHeight(int result, unsigned int a2, unsigned int a3)
{
  if ( *(unsigned __int16 *)(result + 8) != a2 || *(unsigned __int16 *)(result + 10) != a3 )
  {
    *(_WORD *)(result + 8) = a2;
    *(_WORD *)(result + 10) = a3;
    result = CTRPluginFramework::BMPImage::_CreateBitmap((CTRPluginFramework::BMPImage *)result, (void *)a2);
  }
  return result;
}

//----- (00000AB4) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::Resample(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2, int a3, int a4)
{
  unsigned __int8 *v4; // r7
  int v5; // r5
  CTRPluginFramework::BMPImage *v6; // r4
  int v7; // r6
  int v8; // r8
  int v9; // r0
  double v10; // d5
  int v11; // r2
  double v12; // d4
  signed int v13; // r3
  signed int v14; // lr
  int i; // r12
  signed int v16; // r9
  int v17; // r1

  if ( !*((_BYTE *)this + 24) )
    return 0;
  v4 = (unsigned __int8 *)a2;
  v5 = a3;
  v6 = this;
  v7 = a4;
  CTRPluginFramework::BMPImage::SetWidthHeight((int)a2, a3, a4);
  v8 = v4[24];
  if ( !v4[24] )
    return 0;
  v9 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v4);
  v10 = (double)v5 / (double)*((unsigned __int16 *)v6 + 4);
  v11 = 0;
  v12 = (double)v7 / (double)*((unsigned __int16 *)v6 + 5);
  v13 = 0;
  while ( v13 < v7 )
  {
    v14 = 0;
    for ( i = v9 + 3 * v11; ; *(_BYTE *)(i - 1) = *(_BYTE *)(*(_DWORD *)v6 + v17 + 2) )
    {
      i += 3;
      if ( v14 >= v5 )
        break;
      v16 = (signed int)((double)v14++ / v10);
      v17 = 3 * (v16 + *((unsigned __int16 *)v6 + 4) * (signed int)((double)v13 / v12));
      *(_BYTE *)(i - 3) = *(_BYTE *)(*(_DWORD *)v6 + v17);
      *(_BYTE *)(i - 2) = *(_BYTE *)(*(_DWORD *)v6 + v17 + 1);
    }
    ++v13;
    v11 += v5;
  }
  return v8;
}

//----- (00000BD0) --------------------------------------------------------
int __fastcall CTRPluginFramework::BMPImage::SubSample(int result, CTRPluginFramework::BMPImage *a2)
{
  int v2; // r2
  unsigned int v3; // r3
  unsigned int v4; // r5
  bool v5; // zf
  int v6; // r7
  unsigned int v7; // r3
  unsigned int v8; // r6
  int v9; // r5
  int v10; // r8
  unsigned int v11; // r2
  CTRPluginFramework::BMPImage *v12; // r9
  unsigned __int16 *v13; // r4
  int v14; // r0
  int v15; // r3
  int v16; // r1
  int v17; // r3
  unsigned int v18; // r12
  int *v19; // r10
  int *v20; // r9
  int *i; // lr
  unsigned int v22; // r2
  int v23; // r2
  char v24; // r3
  _BYTE *v25; // r2
  unsigned int v26; // r2
  int *v27; // r9
  int *v28; // r12
  unsigned int v29; // r3
  int v30; // r10
  int v31; // r11
  int v32; // r3
  int v33; // lr
  _BYTE *v34; // lr
  unsigned int v35; // r3
  unsigned int v36; // r12
  int *v37; // r2
  unsigned int v38; // r3
  int *v39; // r2
  int j; // r1
  int *v41; // r5
  int *v42; // lr
  int *k; // r12
  unsigned int v44; // r9
  int v45; // r3
  int v46; // r6
  int v47; // r2
  int v48; // r9
  _BYTE *v49; // r2
  unsigned int v50; // r3
  char v51; // r1
  _BYTE *v52; // r2
  int v53; // [sp+Ch] [bp-4Ch]
  int v54; // [sp+10h] [bp-48h]
  int v55; // [sp+14h] [bp-44h]
  int v56; // [sp+18h] [bp-40h]
  int v57; // [sp+1Ch] [bp-3Ch]
  int v58; // [sp+20h] [bp-38h]
  int v59; // [sp+24h] [bp-34h]
  int v60; // [sp+28h] [bp-30h]
  int v61; // [sp+2Ch] [bp-2Ch]

  v2 = *(unsigned __int8 *)(result + 24);
  if ( !*(_BYTE *)(result + 24) )
    return result;
  *((_BYTE *)a2 + 24) = 1;
  v3 = *(unsigned __int16 *)(result + 8);
  v4 = *(unsigned __int16 *)(result + 10);
  v6 = v3 & 1;
  v5 = v6 == 0;
  v7 = v3 >> 1;
  if ( v5 )
  {
    v7 = (unsigned __int16)v7;
  }
  else
  {
    ++v7;
    v6 = v2;
  }
  v8 = v4 >> 1;
  v9 = v4 & 1;
  if ( v9 )
  {
    ++v8;
    if ( !v6 )
    {
      v10 = v7;
      goto LABEL_9;
    }
    v9 = v6;
  }
  else if ( !v6 )
  {
    v10 = v7;
    v9 = 0;
LABEL_20:
    v11 = v8;
    goto LABEL_10;
  }
  v10 = v7 - 1;
  if ( !v9 )
    goto LABEL_20;
LABEL_9:
  v9 = v2;
  v11 = v8--;
LABEL_10:
  v12 = a2;
  v13 = (unsigned __int16 *)result;
  CTRPluginFramework::BMPImage::SetWidthHeight((int)a2, v7, v11);
  v53 = CTRPluginFramework::BMPImage::data(v12);
  v54 = CTRPluginFramework::BMPImage::data(v12) + 1;
  v55 = CTRPluginFramework::BMPImage::data(v12) + 2;
  v56 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v13);
  v57 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v13) + 1;
  v58 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v13) + 2;
  v59 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v13) + v13[6];
  v14 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v13);
  v60 = v14 + v15 + 1;
  result = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v13);
  v16 = 0;
  v61 = result + v17 + 2;
  while ( v16 != v8 )
  {
    for ( result = 0; result != v10; ++result )
    {
      v18 = 0;
      v19 = &v56;
      v20 = &v59;
      for ( i = &v53; ; ++i )
      {
        v22 = v13[7];
        if ( v22 <= v18 )
          break;
        v23 = 2 * v22;
        ++v18;
        v24 = (*(unsigned __int8 *)*v19 + (unsigned int)*(unsigned __int8 *)*v20) >> 1;
        *v19 += v23;
        ++v19;
        *v20 += v23;
        ++v20;
        v25 = (_BYTE *)*i;
        *v25 = v24;
        *i = (int)&v25[v13[7]];
      }
    }
    if ( v6 )
    {
      v26 = 0;
      v27 = &v56;
      v28 = &v59;
      for ( result = (int)&v53; ; result += 4 )
      {
        v29 = v13[7];
        if ( v29 <= v26 )
          break;
        ++v26;
        v30 = *v27 + v29;
        v31 = *(unsigned __int8 *)*v27;
        v33 = *v28 + v29;
        v32 = *(unsigned __int8 *)*v28;
        *v27 = v30;
        ++v27;
        *v28 = v33;
        ++v28;
        v34 = *(_BYTE **)result;
        *v34 = (unsigned int)(v31 + v32) >> 1;
        *(_DWORD *)result = &v34[v13[7]];
      }
    }
    v35 = 0;
    v36 = v13[7];
    v37 = &v56;
    while ( v36 > v35 )
    {
      ++v35;
      result = *v37 + v13[6];
      *v37 = result;
      ++v37;
    }
    if ( v8 - 1 != v16 )
    {
      v38 = 0;
      v39 = &v59;
      while ( v36 > v38 )
      {
        ++v38;
        result = *v39 + v13[6];
        *v39 = result;
        ++v39;
      }
    }
    ++v16;
  }
  if ( v9 )
  {
    for ( j = 0; j != v10; ++j )
    {
      result = 0;
      v41 = &v56;
      v42 = &v59;
      for ( k = &v53; ; ++k )
      {
        v44 = v13[7];
        if ( v44 <= result )
          break;
        ++result;
        v46 = *v41 + v44;
        v45 = *(unsigned __int8 *)*v41;
        v47 = *v42 + v44;
        v48 = *(unsigned __int8 *)*v42;
        *v41 = v46;
        ++v41;
        *v42 = v47;
        ++v42;
        v49 = (_BYTE *)*k;
        *v49 = (unsigned int)(v45 + v48) >> 1;
        *k = (int)&v49[v13[7]];
      }
    }
    if ( v6 )
    {
      v50 = 0;
      result = (int)&v53;
      while ( v13[7] > v50 )
      {
        v51 = *(_BYTE *)*(&v56 + v50);
        v52 = (_BYTE *)*(&v53 + v50++);
        *v52 = v51;
      }
    }
  }
  return result;
}

//----- (00000F14) --------------------------------------------------------
unsigned int __fastcall CTRPluginFramework::BMPImage::UpSample(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2)
{
  unsigned __int16 *v2; // r5
  unsigned __int16 *v3; // r4
  int v4; // r0
  int v5; // r3
  unsigned int result; // r0
  unsigned int v7; // r2
  int v8; // r3
  unsigned int i; // r1
  int *v10; // r12
  int *v11; // r8
  int *v12; // lr
  _BYTE *v13; // r3
  _BYTE *v14; // r7
  int v15; // r9
  _BYTE *v16; // r7
  _BYTE *v17; // r6
  int v18; // r7
  unsigned int v19; // r3
  unsigned int v20; // r7
  int *v21; // r12
  int *v22; // r1
  int v23; // r6
  int v24; // [sp+4h] [bp-44h]
  int v25; // [sp+8h] [bp-40h]
  int v26; // [sp+Ch] [bp-3Ch]
  int v27; // [sp+10h] [bp-38h]
  int v28; // [sp+14h] [bp-34h]
  int v29; // [sp+18h] [bp-30h]
  int v30; // [sp+1Ch] [bp-2Ch]
  int v31; // [sp+20h] [bp-28h]
  unsigned int v32; // [sp+24h] [bp-24h]

  v2 = (unsigned __int16 *)a2;
  v3 = (unsigned __int16 *)this;
  CTRPluginFramework::BMPImage::SetWidthHeight(
    (int)a2,
    2 * *((unsigned __int16 *)this + 4),
    2 * *((unsigned __int16 *)this + 5));
  v24 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v3);
  v25 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v3) + 1;
  v26 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v3) + 2;
  v27 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v2);
  v28 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v2) + 1;
  v29 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v2) + 2;
  v30 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v2) + v2[6];
  v4 = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v2);
  v31 = v4 + v5 + 1;
  result = CTRPluginFramework::BMPImage::data((CTRPluginFramework::BMPImage *)v2);
  v7 = 0;
  v32 = result + v8 + 2;
  while ( v3[5] > v7 )
  {
    for ( i = 0; v3[4] > i; ++i )
    {
      result = 0;
      v10 = &v24;
      v11 = &v27;
      v12 = &v30;
      while ( v3[7] > result )
      {
        v13 = (_BYTE *)*v10;
        v14 = (_BYTE *)*v11;
        ++result;
        *v14 = *(_BYTE *)*v10;
        v15 = v3[7];
        v14[v15] = *v13;
        *v11 = (int)&v14[v15 + v3[7]];
        ++v11;
        v16 = (_BYTE *)*v12;
        *v16 = *v13;
        v17 = &v16[v3[7]];
        *v17 = *v13;
        v18 = v3[7];
        *v12 = (int)&v17[v18];
        ++v12;
        *v10 = (int)&v13[v18];
        ++v10;
      }
    }
    v19 = 0;
    v20 = v3[7];
    v21 = &v27;
    v22 = &v30;
    while ( v20 > v19 )
    {
      v23 = v2[6];
      result = *v22 + v23;
      *v21 += v23;
      ++v21;
      *v22 = result;
      ++v22;
      ++v19;
    }
    ++v7;
  }
  return result;
}

//----- (000010C4) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::BMPImage::Region(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2, const unsigned int *a3, const unsigned int *a4, const unsigned int *a5, CTRPluginFramework::BMPImage *a6)
{
  unsigned int v6; // lr
  unsigned int v7; // r11
  const unsigned int *v8; // r9
  unsigned int v9; // r3
  const unsigned int *v10; // r8
  CTRPluginFramework::BMPImage *v11; // r7
  CTRPluginFramework::BMPImage *v12; // r4
  unsigned int i; // r6
  int v14; // r0
  signed int result; // r0

  v6 = *a4;
  v7 = *((unsigned __int16 *)this + 4);
  if ( *a4 + *(_DWORD *)a2 > v7 )
    return 0;
  v8 = a4;
  v9 = *((unsigned __int16 *)this + 5);
  if ( *a5 + *a3 > v9 )
    return 0;
  v10 = a3;
  v11 = a2;
  v12 = this;
  if ( *((unsigned __int16 *)a6 + 4) < v7 || *((unsigned __int16 *)a6 + 5) < v9 )
    CTRPluginFramework::BMPImage::SetWidthHeight((int)a6, v6, *a5);
  for ( i = 0; *a5 > i; ++i )
  {
    v14 = *((unsigned __int16 *)v12 + 7);
    if ( *v8 * v14 )
      memmove(
        (void *)(*(_DWORD *)a6 + i * *((unsigned __int16 *)a6 + 6) + 54),
        (const void *)(*(_DWORD *)v12 + *(_DWORD *)v11 * v14 + 54 + *((unsigned __int16 *)v12 + 6) * (i + *v10)),
        *v8 * v14);
  }
  result = 1;
  *((_BYTE *)a6 + 24) = 1;
  return result;
}

//----- (000011B0) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::BMPImage::RoiFromCenter(CTRPluginFramework::BMPImage *this, CTRPluginFramework::BMPImage *a2, unsigned int a3, const unsigned int *a4, const unsigned int *a5, CTRPluginFramework::BMPImage *a6)
{
  CTRPluginFramework::BMPImage *v7; // [sp+8h] [bp-10h]
  unsigned int v8; // [sp+Ch] [bp-Ch]

  v7 = (CTRPluginFramework::BMPImage *)a3;
  v8 = (unsigned int)a4;
  v7 = (CTRPluginFramework::BMPImage *)((char *)a2 - (*a4 >> 1));
  v8 = a3 - (*a5 >> 1);
  return CTRPluginFramework::BMPImage::Region(this, (CTRPluginFramework::BMPImage *)&v7, &v8, a4, a5, a6);
}

//----- (000011F0) --------------------------------------------------------
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::BMPImage(CTRPluginFramework::BMPImage *this, const CTRPluginFramework::BMPImage *a2, unsigned int a3, unsigned int a4)
{
  CTRPluginFramework::BMPImage *v4; // r4
  const CTRPluginFramework::BMPImage *v5; // r5

  *(_QWORD *)((char *)this + 12) = 196608LL;
  v4 = this;
  v5 = a2;
  *((_WORD *)this + 12) = 256;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = 0;
  *(_QWORD *)((char *)this + 28) = (unsigned int)this + 36;
  *((_BYTE *)this + 36) = 0;
  CTRPluginFramework::BMPImage::_CreateBitmap(this, (void *)a2);
  CTRPluginFramework::BMPImage::FillWithImg((int)v4, v5);
  return v4;
}

//----- (00001244) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::BMPImage::_LoadBitmap(CTRPluginFramework::BMPImage *this, void *a2)
{
  CTRPluginFramework::BMPImage *v2; // r4
  unsigned int v3; // r0
  int v4; // r1
  bool v5; // cf
  bool v6; // zf
  const char *v7; // r1
  const char *v8; // r1
  void *v9; // r1
  unsigned __int16 v11; // r1
  unsigned __int16 v12; // r2
  __int16 v13; // r0
  bool v14; // cf
  bool v15; // zf
  signed int v16; // r3
  void *v17; // r1
  unsigned int v18; // r1
  signed int v19; // r8
  signed int v20; // r6
  int v21; // r5
  char *v22; // r7
  int i; // r9
  unsigned int v24; // r2
  signed int v25; // r10
  char *j; // r3
  _BOOL4 v27; // r2
  char *v28; // ST14_4
  char *v29; // r10
  void *v30; // r1
  signed int v31; // r6
  int v32; // [sp+Ch] [bp-C4h]
  __int16 s; // [sp+18h] [bp-B8h]
  unsigned __int16 v34; // [sp+22h] [bp-AEh]
  unsigned __int16 v35; // [sp+24h] [bp-ACh]
  char v36; // [sp+28h] [bp-A8h]
  char v37; // [sp+40h] [bp-90h]
  int v38; // [sp+44h] [bp-8Ch]
  int v39; // [sp+48h] [bp-88h]
  __int16 v40; // [sp+4Eh] [bp-82h]
  char v41; // [sp+68h] [bp-68h]

  v2 = this;
  CTRPluginFramework::BMPImage::Unload(this, a2);
  *((_DWORD *)v2 + 2) = 0;
  CTRPluginFramework::File::File(&v41, (char *)v2 + 28, 1);
  memset(&s, 0, 0xEu);
  memset(&v37, 0, 0x28u);
  if ( CTRPluginFramework::File::IsOpen((CTRPluginFramework::File *)&v41) )
  {
    v3 = CTRPluginFramework::File::GetSize((CTRPluginFramework::File *)&v41);
    v5 = 1;
    v6 = v4 == 0;
    if ( !v4 )
    {
      v5 = v3 >= 0x4FFFF;
      v6 = v3 == 327679;
    }
    if ( !v6 && v5 )
    {
      v7 = "BMP Error: The file is too big.";
LABEL_27:
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v36, v7);
      goto LABEL_15;
    }
    if ( CTRPluginFramework::BMPImage::BitmapFileHeader::Read(
           (CTRPluginFramework::BMPImage::BitmapFileHeader *)&s,
           (CTRPluginFramework::File *)&v41) )
    {
      v7 = "BMP Error: Error while reading BFH";
      goto LABEL_27;
    }
    if ( CTRPluginFramework::BMPImage::BitmapInformationHeader::Read(
           (CTRPluginFramework::BMPImage::BitmapInformationHeader *)&v37,
           (CTRPluginFramework::File *)&v41) )
    {
      v7 = "BMP Error: Error while reading BIH";
      goto LABEL_27;
    }
    if ( s != 19778 )
    {
      v8 = "BMP Error: Unexpected type value: %d";
LABEL_14:
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v36, v8);
LABEL_15:
      v9 = &CTRPluginFramework::Color::Red;
LABEL_16:
      CTRPluginFramework::OSD::Notify(&v36, v9, &CTRPluginFramework::Color::Black);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v36);
      return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v41);
    }
    if ( v40 != 24 )
    {
      v8 = "BMP Error: Unexpected bit depth: %d";
      goto LABEL_14;
    }
    v11 = v38;
    v12 = v39;
    v13 = v39;
    v14 = (unsigned __int16)v39 >= 0xC8u;
    v15 = (unsigned __int16)v39 == 200;
    if ( (unsigned __int16)v39 <= 0xC8u )
    {
      v14 = (unsigned __int16)v38 >= 0x154u;
      v15 = (unsigned __int16)v38 == 340;
    }
    *((_WORD *)v2 + 4) = v38;
    *((_WORD *)v2 + 5) = v13;
    if ( !v15 && v14 )
      v16 = 1;
    else
      v16 = 0;
    if ( !v15 && v14 )
    {
      v7 = "BMP Error: file should not be higher than 340px * 200px";
      goto LABEL_27;
    }
    *((_DWORD *)v2 + 5) = v12;
    *((_DWORD *)v2 + 4) = v11;
    *((_WORD *)v2 + 7) = 3;
    CTRPluginFramework::File::Seek(&v41, v35, v34 | (v35 << 16), v16, 1);
    v19 = CTRPluginFramework::BMPImage::_CreateBitmap(v2, v17);
    if ( v19 )
    {
      v7 = "BMP Error: Error while allocating required space.";
      goto LABEL_27;
    }
    v20 = *((_WORD *)v2 + 5) / 5u;
    v21 = (-3 * *((unsigned __int16 *)v2 + 4) & 3) + *((unsigned __int16 *)v2 + 6);
    v32 = 5 * v20;
    v22 = (char *)CTRPluginFramework::Heap::Alloc((CTRPluginFramework::Heap *)(v20 * v21), v18);
    if ( !v22 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
        (int *)&v36,
        "BMP Error: temp buffer allocation failed");
      v9 = &CTRPluginFramework::Color::White;
      goto LABEL_16;
    }
    for ( i = 0; ; i += v25 )
    {
      v24 = v20 * v21;
      if ( i >= v32 )
        break;
      CTRPluginFramework::File::Read((CTRPluginFramework::File *)&v41, v22, v24);
      v25 = 0;
      for ( j = v22; ; j = &v28[v21] )
      {
        v27 = v32 <= i + v25;
        if ( v25 >= v20 )
          v27 = 1;
        if ( v27 )
          break;
        v28 = j;
        memcpy(
          (void *)(*(_DWORD *)v2 + *((unsigned __int16 *)v2 + 6) * (*((unsigned __int16 *)v2 + 5) - (i + v25++) - 1)
                                 + 54),
          j,
          *((unsigned __int16 *)v2 + 6));
      }
    }
    v29 = v22;
    CTRPluginFramework::File::Read((CTRPluginFramework::File *)&v41, v22, v24);
    v31 = *((_WORD *)v2 + 5) % 5u;
    while ( v19 < v31 )
    {
      memcpy(
        (void *)(*(_DWORD *)v2 + *((unsigned __int16 *)v2 + 6) * (*((unsigned __int16 *)v2 + 5) - (v19++ + i) - 1) + 54),
        v29,
        *((unsigned __int16 *)v2 + 6));
      v29 += v21;
    }
    CTRPluginFramework::Heap::Free((CTRPluginFramework::Heap *)v22, v30);
    *((_BYTE *)v2 + 24) = 1;
  }
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v41);
}
// 1730: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 1768: using guessed type int __fastcall CTRPluginFramework::File::File(_DWORD, _DWORD, _DWORD);
// 1770: using guessed type int __fastcall CTRPluginFramework::OSD::Notify(_DWORD, _DWORD, _DWORD);
// 178C: using guessed type int __fastcall ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, _DWORD);
// 1790: using guessed type int __fastcall CTRPluginFramework::File::Seek(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00001564) --------------------------------------------------------
CTRPluginFramework::BMPImage *__fastcall CTRPluginFramework::BMPImage::BMPImage(int a1)
{
  CTRPluginFramework::BMPImage *v1; // r4
  void *v2; // r1

  *(_QWORD *)(a1 + 12) = 196608LL;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  v1 = (CTRPluginFramework::BMPImage *)a1;
  *(_WORD *)(a1 + 24) = 256;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1 + 28);
  CTRPluginFramework::BMPImage::_LoadBitmap(v1, v2);
  CTRPluginFramework::BMPImage::RGBtoBGR((int)v1);
  return v1;
}
// 179C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD);

// ALL OK, 37 function(s) have been successfully decompiled
