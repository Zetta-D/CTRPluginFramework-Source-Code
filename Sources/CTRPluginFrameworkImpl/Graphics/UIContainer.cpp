/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::UIContainer::UIContainer(int result);
CTRPluginFramework::UIContainer *__fastcall CTRPluginFramework::UIContainer::~UIContainer(CTRPluginFramework::UIContainer *this);
int __fastcall CTRPluginFramework::UIContainer::Draw(int result);
int __fastcall CTRPluginFramework::UIContainer::Update(int result);
int __fastcall CTRPluginFramework::UIContainer::ExecuteAll(int result);
void __fastcall std::vector<CTRPluginFramework::Drawable *,std::allocator<CTRPluginFramework::Drawable *>>::_M_realloc_insert<CTRPluginFramework::Drawable * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall CTRPluginFramework::UIContainer::operator+=(_DWORD *a1, int a2, int a3);
// void __cdecl operator delete(void *); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// _DWORD __cdecl operator new(unsigned int); idb


//----- (00000004) --------------------------------------------------------
int __fastcall CTRPluginFramework::UIContainer::UIContainer(int result)
{
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

//----- (00000018) --------------------------------------------------------
CTRPluginFramework::UIContainer *__fastcall CTRPluginFramework::UIContainer::~UIContainer(CTRPluginFramework::UIContainer *this)
{
  CTRPluginFramework::UIContainer *v1; // r4
  void *v2; // r0

  v1 = this;
  v2 = *(void **)this;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (00000038) --------------------------------------------------------
int __fastcall CTRPluginFramework::UIContainer::Draw(int result)
{
  __int64 v1; // r4
  int v2; // t1

  v1 = *(_QWORD *)result;
  while ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = *(_DWORD *)v1;
    LODWORD(v1) = v1 + 4;
    result = (*(int (**)(void))(*(_DWORD *)v2 + 8))();
  }
  return result;
}

//----- (0000005C) --------------------------------------------------------
int __fastcall CTRPluginFramework::UIContainer::Update(int result)
{
  int *v1; // r4
  int *v2; // r7
  int v3; // t1

  v1 = *(int **)result;
  v2 = *(int **)(result + 4);
  while ( v1 != v2 )
  {
    v3 = *v1;
    ++v1;
    result = (*(int (**)(void))(*(_DWORD *)v3 + 16))();
  }
  return result;
}

//----- (00000090) --------------------------------------------------------
int __fastcall CTRPluginFramework::UIContainer::ExecuteAll(int result)
{
  __int64 v1; // r4
  int v2; // t1

  v1 = *(_QWORD *)result;
  while ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = *(_DWORD *)v1;
    LODWORD(v1) = v1 + 4;
    result = (*(int (**)(void))(*(_DWORD *)v2 + 12))();
  }
  return result;
}

//----- (000000B4) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Drawable *,std::allocator<CTRPluginFramework::Drawable *>>::_M_realloc_insert<CTRPluginFramework::Drawable * const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r7
  _BYTE *v4; // r10
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r8
  _BYTE *v10; // r9
  _DWORD *v11; // r11
  size_t v12; // r5
  char *v13; // r6
  char *v14; // r5
  int v15; // r5

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = (signed int)&v4[-*a1] >> 2;
  if ( v5 )
    v6 = (signed int)&v4[-*a1] >> 2;
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x3FFFFFFF )
  {
    v8 = 0x3FFFFFFF;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(4 * v8);
LABEL_8:
  *(_DWORD *)&v13[v12] = *v11;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v14 = &v13[v12 + 4];
  if ( v10 != v4 )
    memcpy(v14, v10, v4 - v10);
  v15 = (int)&v14[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v15;
  v9[2] = &v13[4 * v8];
}

//----- (00000178) --------------------------------------------------------
void __fastcall CTRPluginFramework::UIContainer::operator+=(_DWORD *a1, int a2, int a3)
{
  int v3; // r2
  _BYTE *v4; // r1
  int v5; // [sp+4h] [bp-Ch]
  int v6; // [sp+8h] [bp-8h]

  v6 = a3;
  v3 = a2;
  v5 = a2;
  if ( a2 )
  {
    v4 = (_BYTE *)a1[1];
    if ( v4 == (_BYTE *)a1[2] )
    {
      std::vector<CTRPluginFramework::Drawable *,std::allocator<CTRPluginFramework::Drawable *>>::_M_realloc_insert<CTRPluginFramework::Drawable * const&>(
        a1,
        v4,
        &v5);
    }
    else
    {
      *(_DWORD *)v4 = v3;
      a1[1] += 4;
    }
  }
}

// ALL OK, 7 function(s) have been successfully decompiled
