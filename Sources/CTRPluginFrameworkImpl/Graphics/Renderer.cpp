/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Renderer::SetTarget(int a1);
int __fastcall CTRPluginFramework::Renderer::MenuSelector(CTRPluginFramework::Renderer *this, int a2, int a3, int a4, int a5);
int __fastcall CTRPluginFramework::ProcessingLogo::Reset(CTRPluginFramework::ProcessingLogo *this, int a2, int a3);
int __fastcall CTRPluginFramework::ProcessingLogo::Draw(CTRPluginFramework::ProcessingLogo *this, int a2, int a3);
bool __fastcall CTRPluginFramework::Rect<int>::Contains(int *a1, int a2, int a3);
int __fastcall CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *this, bool a2, int a3, int a4);
// int threadGetCurrent(void); weak
// _DWORD CTRPluginFramework::ScreenImpl::GetFormat(CTRPluginFramework::ScreenImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::PrivColor::SetFormat(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(CTRPluginFramework::ScreenImpl *__hidden this, int, int); idb
// int __fastcall CTRPluginFramework::ScreenImpl::GetFramebufferInfos(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Color::Fade(CTRPluginFramework::Color *__hidden this, double); idb
// int __fastcall ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Color::Color(CTRPluginFramework::Color *__hidden this, unsigned __int8, unsigned __int8, unsigned __int8, unsigned __int8); idb
// int __fastcall CTRPluginFramework::Color::operator<=(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// _DWORD CTRPluginFramework::Window::GetRect(CTRPluginFramework::Window *__hidden this); idb
// int __fastcall _cxa_guard_release(_DWORD); weak
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::SwapBuffer(CTRPluginFramework::ScreenImpl *__hidden this, bool, bool); idb
// int __fastcall gspWaitForEvent(_DWORD, _DWORD); weak

//-------------------------------------------------------------------------
// Data declarations

char CTRPluginFramework::Renderer::hookContext[]; // weak
char CTRPluginFramework::Renderer::EndFrame(bool)::background; // weak
int CTRPluginFramework::Renderer::EndFrame(bool)::background; // weak
_UNKNOWN unk_610; // weak
_UNKNOWN unk_614; // weak
_UNKNOWN unk_618; // weak
_UNKNOWN unk_61C; // weak
_UNKNOWN unk_620; // weak
_UNKNOWN unk_624; // weak
_UNKNOWN unk_628; // weak
_UNKNOWN unk_62C; // weak
_UNKNOWN unk_630; // weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::FromFramebuffer; weak
// extern __thread _UNKNOWN CTRPluginFramework::PrivColor::ToFramebuffer; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Bottom; weak
// extern _UNKNOWN CTRPluginFramework::ScreenImpl::Top; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[12]; idb
// extern _UNKNOWN CTRPluginFramework::Color::SkyBlue; weak
// extern _UNKNOWN CTRPluginFramework::Window::BottomWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak


//----- (00000014) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::SetTarget(int a1)
{
  int v1; // r4
  int v2; // r0
  int v3; // r3
  CTRPluginFramework::ScreenImpl **v4; // r2
  CTRPluginFramework::ScreenImpl *v5; // r0
  int v6; // r0

  v1 = a1;
  v2 = threadGetCurrent();
  if ( v2 )
    v3 = v2 + 1148;
  else
    v3 = (int)CTRPluginFramework::Renderer::hookContext;
  if ( v1 )
    v4 = (CTRPluginFramework::ScreenImpl **)&CTRPluginFramework::ScreenImpl::Top;
  else
    v4 = (CTRPluginFramework::ScreenImpl **)&CTRPluginFramework::ScreenImpl::Bottom;
  *(_BYTE *)v3 = v1;
  v5 = *v4;
  *(_DWORD *)&CTRPluginFramework::Renderer::hookContext[v3] = *v4;
  v6 = CTRPluginFramework::ScreenImpl::GetFormat(v5);
  return CTRPluginFramework::PrivColor::SetFormat(v6);
}
// 63C: using guessed type int threadGetCurrent(void);
// 644: using guessed type int __fastcall CTRPluginFramework::PrivColor::SetFormat(_DWORD);

//----- (00000060) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::MenuSelector(CTRPluginFramework::Renderer *this, int a2, int a3, int a4, int a5)
{
  int v5; // r11
  int v6; // r4
  int v7; // r10
  CTRPluginFramework::Renderer *v8; // r9
  int v9; // r0
  bool v10; // zf
  int v11; // r0
  CTRPluginFramework::ScreenImpl *v12; // r7
  int v13; // r0
  int v14; // r6
  int v15; // s16
  int v16; // r8
  int i; // r5
  double v18; // r2
  int v19; // r0
  int v20; // r5
  int v21; // r6
  int v22; // r7
  double v23; // r2
  int v24; // r8
  int v25; // r9
  float v26; // s16
  int v27; // r4
  int v28; // r11
  int v29; // r8
  int v30; // r9
  int result; // r0
  double v32; // r2
  float v33; // s16
  int v34; // r9
  int v35; // [sp+8h] [bp-58h]
  int v36; // [sp+Ch] [bp-54h]
  char v37; // [sp+17h] [bp-49h]
  int v38; // [sp+18h] [bp-48h]
  int v39; // [sp+1Ch] [bp-44h]
  int v40; // [sp+20h] [bp-40h]
  int v41; // [sp+24h] [bp-3Ch]
  char v42; // [sp+28h] [bp-38h]
  int v43; // [sp+2Ch] [bp-34h]

  v5 = a2;
  v6 = a3;
  v7 = a4;
  v8 = this;
  v9 = threadGetCurrent();
  v10 = v9 == 0;
  if ( v9 )
    v11 = v9 + 1136;
  else
    v11 = (int)CTRPluginFramework::Renderer::hookContext;
  if ( !v10 )
    v11 += 12;
  v12 = *(CTRPluginFramework::ScreenImpl **)&CTRPluginFramework::Renderer::hookContext[v11];
  v36 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(
          *(CTRPluginFramework::ScreenImpl **)&CTRPluginFramework::Renderer::hookContext[v11],
          (int)v8,
          v5 + 1);
  v13 = CTRPluginFramework::ScreenImpl::GetFramebufferInfos(v12, &v39, &v38, &v37);
  v14 = v6;
  v15 = CTRPluginFramework::Preferences::Settings[11];
  v35 = __mrc(15, 0, 13, 0, 3);
  while ( --v14 >= 0 )
  {
    v16 = v7;
    for ( i = v36 + v39 * v14; --v16 >= 0; i -= v38 )
    {
      if ( &ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE )
        ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(v13);
      v40 = (*(int (__fastcall **)(int))((char *)&CTRPluginFramework::PrivColor::FromFramebuffer + v35))(i);
      v19 = CTRPluginFramework::Color::Fade((CTRPluginFramework::Color *)&v40, v18);
      if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
        ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(v19);
      v13 = (*(int (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v35))(i, &v40);
    }
  }
  v20 = v6 / 3;
  v21 = v6 / 30;
  CTRPluginFramework::Color::Color((CTRPluginFramework::Color *)&v41, 0xFFu, 0xFFu, 0xFFu, 0xFFu);
  v22 = CTRPluginFramework::ScreenImpl::GetLeftFramebuffer(v12, (int)v8 + v6 - v6 / 3, v5 + v7);
  CTRPluginFramework::Color::Color((CTRPluginFramework::Color *)&v42, 0x3Cu, 0x3Cu, 0x3Cu, 0xFFu);
  v24 = v6 / 3;
  v25 = v22;
  v26 = 0.0;
  v27 = 0;
  v28 = __mrc(15, 0, 13, 0, 3);
  while ( v24 > 0 )
  {
    CTRPluginFramework::Color::Fade((CTRPluginFramework::Color *)&v41, v23);
    if ( CTRPluginFramework::Color::operator<=(&v41, &v42) )
      break;
    if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
      ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(0);
    (*(void (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v28))(v25, &v41);
    ++v27;
    HIDWORD(v23) = v39;
    if ( v21 == v27 )
    {
      v26 = v26 - 0.01;
      v27 = 0;
    }
    v25 += v39;
    --v24;
  }
  v29 = 0;
  v30 = __mrc(15, 0, 13, 0, 3);
  result = CTRPluginFramework::Color::Color((CTRPluginFramework::Color *)&v43, 0xFFu, 0xFFu, 0xFFu, 0xFFu);
  HIDWORD(v32) = v43;
  v41 = v43;
  while ( v29 < v20 )
  {
    if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
      ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(result);
    result = (*(int (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v30))(
               v22,
               &v41);
    HIDWORD(v32) = v39;
    ++v29;
    v22 -= v39;
  }
  v33 = 0.0;
  v34 = __mrc(15, 0, 13, 0, 3);
  while ( v20 > 0 )
  {
    CTRPluginFramework::Color::Fade((CTRPluginFramework::Color *)&v41, v32);
    result = CTRPluginFramework::Color::operator<=(&v41, &v42);
    if ( result )
      break;
    if ( &ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE )
      ((void (*)(void))ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE)();
    result = (*(int (__fastcall **)(int, int *))((char *)&CTRPluginFramework::PrivColor::ToFramebuffer + v34))(
               v22,
               &v41);
    ++v27;
    HIDWORD(v32) = v39;
    v22 -= v39;
    if ( v21 == v27 )
    {
      v33 = v33 - 0.01;
      v27 = 0;
    }
    --v20;
  }
  return result;
}
// 63C: using guessed type int threadGetCurrent(void);
// 658: using guessed type int __fastcall CTRPluginFramework::ScreenImpl::GetFramebufferInfos(_DWORD, _DWORD, _DWORD, _DWORD);
// 65C: using guessed type int __fastcall ZTHN18CTRPluginFramework9PrivColor15FromFramebufferE(_DWORD);
// 664: using guessed type int __fastcall ZTHN18CTRPluginFramework9PrivColor13ToFramebufferE(_DWORD);
// 66C: using guessed type int __fastcall CTRPluginFramework::Color::operator<=(_DWORD, _DWORD);

//----- (00000370) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessingLogo::Reset(CTRPluginFramework::ProcessingLogo *this, int a2, int a3)
{
  CTRPluginFramework::ProcessingLogo *v4; // [sp+0h] [bp-10h]
  int v5; // [sp+4h] [bp-Ch]
  int v6; // [sp+8h] [bp-8h]

  v4 = this;
  v5 = a2;
  v6 = a3;
  *((_DWORD *)this + 2) = 0;
  return CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v4);
}

//----- (00000390) --------------------------------------------------------
int __fastcall CTRPluginFramework::ProcessingLogo::Draw(CTRPluginFramework::ProcessingLogo *this, int a2, int a3)
{
  CTRPluginFramework::ProcessingLogo *v3; // r4
  float v4; // r1
  Time v5; // r1
  int result; // r0
  __int64 v7; // [sp+8h] [bp-40h]
  int v8; // [sp+14h] [bp-34h]
  void *v9; // [sp+18h] [bp-30h]
  void *v10; // [sp+1Ch] [bp-2Ch]
  void *v11; // [sp+20h] [bp-28h]
  void *v12; // [sp+24h] [bp-24h]
  void *v13; // [sp+28h] [bp-20h]
  void *v14; // [sp+2Ch] [bp-1Ch]
  void *v15; // [sp+30h] [bp-18h]
  void *v16; // [sp+34h] [bp-14h]
  _DWORD v17[1]; // [sp+38h] [bp-10h]

  v3 = this;
  v8 = a3;
  v9 = &unk_614;
  v10 = &unk_618;
  v11 = &unk_61C;
  v12 = &unk_620;
  v13 = &unk_624;
  v14 = &unk_628;
  v15 = &unk_62C;
  v16 = &unk_630;
  CTRPluginFramework::Renderer::DrawSysString(
    v17[*((_DWORD *)this + 2) - 8],
    a2,
    &v8,
    300,
    CTRPluginFramework::Color::SkyBlue,
    0);
  CTRPluginFramework::Seconds((CTRPluginFramework *)&v7, v4);
  result = CTRPluginFramework::Clock::HasTimePassed(v3, v5);
  if ( result )
  {
    ++*((_DWORD *)v3 + 2);
    result = CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v7);
    if ( *((_DWORD *)v3 + 2) > 7u )
      *((_DWORD *)v3 + 2) = 0;
  }
  return result;
}
// 678: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00000450) --------------------------------------------------------
bool __fastcall CTRPluginFramework::Rect<int>::Contains(int *a1, int a2, int a3)
{
  int v3; // r12
  int v4; // r3
  int v5; // r4
  int v6; // lr
  int v7; // r0
  _BOOL4 v8; // r4
  int v9; // r0
  bool v10; // zf
  bool v11; // nf
  unsigned __int8 v12; // vf

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1 + a1[2];
  v6 = a1[3];
  if ( *a1 < v5 )
  {
    v7 = *a1;
    v3 = v5;
  }
  else
  {
    v7 = *a1 + a1[2];
  }
  v8 = a2 >= v7;
  if ( a2 >= v3 )
    v8 = 0;
  if ( v8 )
  {
    if ( v4 >= v4 + v6 )
      v9 = v4 + v6;
    else
      v9 = v4;
    if ( v4 < v4 + v6 )
      v4 += v6;
    v12 = __OFSUB__(a3, v9);
    v10 = a3 == v9;
    v11 = a3 - v9 < 0;
    if ( a3 >= v9 )
    {
      v12 = __OFSUB__(v4, a3);
      v10 = v4 == a3;
      v11 = v4 - a3 < 0;
    }
    if ( (unsigned __int8)(v11 ^ v12) | v10 )
      v8 = 0;
    else
      v8 = 1;
  }
  return v8;
}

//----- (000004C0) --------------------------------------------------------
int __fastcall CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *this, bool a2, int a3, int a4)
{
  char v4; // r7
  int v5; // r8
  int v6; // r5
  int v7; // r6
  int *v8; // r4
  int v10; // [sp+8h] [bp-20h]
  int v11; // [sp+Ch] [bp-1Ch]

  v10 = a3;
  v11 = a4;
  v4 = (char)this;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(CTRPluginFramework::Renderer::EndFrame(bool)::background & 1) )
  {
    this = (CTRPluginFramework::Renderer *)_cxa_guard_acquire(&CTRPluginFramework::Renderer::EndFrame(bool)::background);
    if ( this )
    {
      CTRPluginFramework::Renderer::EndFrame(bool)::background = CTRPluginFramework::Window::GetRect((CTRPluginFramework::Window *)&CTRPluginFramework::Window::BottomWindow);
      this = (CTRPluginFramework::Renderer *)_cxa_guard_release(&CTRPluginFramework::Renderer::EndFrame(bool)::background);
    }
  }
  v5 = CTRPluginFramework::Touch::IsDown(this);
  CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v10);
  v6 = v10;
  v7 = v11;
  if ( v5 )
  {
    v8 = (int *)CTRPluginFramework::Renderer::EndFrame(bool)::background;
    if ( CTRPluginFramework::Rect<int>::Contains(
           (int *)CTRPluginFramework::Renderer::EndFrame(bool)::background,
           v10,
           v11) )
    {
      v10 = v7 - 1;
      if ( CTRPluginFramework::Rect<int>::Contains(v8, v6 + 10, v7 + 15) )
      {
        CTRPluginFramework::Renderer::SetTarget(0);
        CTRPluginFramework::Renderer::DrawSysString(&unk_610, v6 - 2, &v10, 320, CTRPluginFramework::Color::White, 0);
      }
    }
  }
  __mcr(15, 0, 0, 7, 10, 4);
  CTRPluginFramework::ScreenImpl::SwapBuffer(CTRPluginFramework::ScreenImpl::Top, 1, v4);
  CTRPluginFramework::ScreenImpl::SwapBuffer(CTRPluginFramework::ScreenImpl::Bottom, 1, v4);
  return gspWaitForEvent(2, 1);
}
// C: using guessed type char CTRPluginFramework::Renderer::EndFrame(bool)::background;
// 10: using guessed type int CTRPluginFramework::Renderer::EndFrame(bool)::background;
// 678: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 688: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 690: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 6A0: using guessed type int __fastcall gspWaitForEvent(_DWORD, _DWORD);

// ALL OK, 6 function(s) have been successfully decompiled
