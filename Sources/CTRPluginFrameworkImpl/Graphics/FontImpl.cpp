/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __fastcall CTRPluginFramework::Glyph::Width(int result);
void *__fastcall CTRPluginFramework::Font::Initialize(CTRPluginFramework::Font *this);
int __fastcall CTRPluginFramework::GetOriginalGlyph(CTRPluginFramework *this, unsigned int a2);
int __fastcall CTRPluginFramework::ShrinkGlyph(__int64 this, unsigned __int8 *a2);
float *__fastcall CTRPluginFramework::Font::CacheGlyph(CTRPluginFramework::Font *this, unsigned int a2);
float *__fastcall CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *this, unsigned __int8 **a2);
float *__fastcall CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *this, int a2, int a3);
int GLOBAL__sub_I__ZN18CTRPluginFramework15g_fontAllocatedE();
// int __fastcall fontEnsureMapped(_DWORD); weak
// void __cdecl operator delete[](void *); idb
// _DWORD __cdecl operator new[](unsigned int); idb
// void *memset(void *s, int c, size_t n);
// int __fastcall log2(_DWORD, _DWORD); weak
// double ceil(double x);
// double floor(double x);
// _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall CTRPluginFramework::Renderer::FontCalcGlyphPos(_DWORD, _DWORD, _DWORD); weak
// int __fastcall roundf(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Lock::~Lock(CTRPluginFramework::Lock *__hidden this); idb
// int __fastcall decode_utf8(_DWORD, _DWORD); weak
// int fontGlyphIndexFromCodePoint(void); weak
// _DWORD CTRPluginFramework::Mutex::Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); weak

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::defaultSysFont; // weak
int CTRPluginFramework::g_fontAllocated; // weak
int CTRPluginFramework::tileData; // weak
int CTRPluginFramework::glyph; // weak
_UNKNOWN CTRPluginFramework::Font::_mutex; // weak
int CTRPluginFramework::g_glyphAllocated; // weak
// extern _UNKNOWN g_sharedFont; weak
// extern _UNKNOWN charPerSheet; weak
// extern _UNKNOWN _dso_handle; weak


//----- (00000024) --------------------------------------------------------
int __fastcall CTRPluginFramework::Glyph::Width(int result)
{
  float v1; // s0

  v1 = *(float *)result + *(float *)(result + 4);
  return result;
}

//----- (00000034) --------------------------------------------------------
void *__fastcall CTRPluginFramework::Font::Initialize(CTRPluginFramework::Font *this)
{
  fontEnsureMapped(this);
  if ( CTRPluginFramework::defaultSysFont )
    operator delete[]((void *)CTRPluginFramework::defaultSysFont);
  CTRPluginFramework::defaultSysFont = operator new[](0x7544u);
  CTRPluginFramework::g_fontAllocated = 30020;
  CTRPluginFramework::tileData = operator new[](0x1000u);
  CTRPluginFramework::glyph = operator new[](0x3E8u);
  return memset((void *)CTRPluginFramework::defaultSysFont, 0, 0x7544u);
}
// 4: using guessed type int CTRPluginFramework::defaultSysFont;
// 8: using guessed type int CTRPluginFramework::g_fontAllocated;
// C: using guessed type int CTRPluginFramework::tileData;
// 10: using guessed type int CTRPluginFramework::glyph;
// 8B4: using guessed type int __fastcall fontEnsureMapped(_DWORD);

//----- (00000094) --------------------------------------------------------
int __fastcall CTRPluginFramework::GetOriginalGlyph(CTRPluginFramework *this, unsigned int a2)
{
  int v2; // r6
  int v3; // s16
  unsigned int v4; // r4
  signed int v5; // s17
  int v6; // r5
  double v7; // r0
  double v8; // r0
  signed int v9; // r7
  double v10; // r0
  signed int v11; // r3
  int v12; // r2
  signed int i; // r0
  int v14; // r8
  signed int v15; // r4
  int v16; // lr
  int v17; // r5
  signed int v18; // r6
  int v19; // r9
  int v20; // r10
  signed int j; // r12
  int v22; // r2
  _BYTE *v23; // lr
  int v24; // r0
  _BYTE *k; // r12
  char v26; // lr
  signed int v28; // [sp+4h] [bp-8Ch]
  int v29; // [sp+8h] [bp-88h]
  int v30; // [sp+Ch] [bp-84h]
  int v31; // [sp+10h] [bp-80h]
  int v32; // [sp+14h] [bp-7Ch]
  int v33; // [sp+18h] [bp-78h]
  int v34; // [sp+1Ch] [bp-74h]
  int v35; // [sp+20h] [bp-70h]
  int v36; // [sp+24h] [bp-6Ch]
  int v37; // [sp+28h] [bp-68h]
  signed int v38; // [sp+2Ch] [bp-64h]
  unsigned int v39; // [sp+34h] [bp-5Ch]
  int v40; // [sp+5Ch] [bp-34h]

  v2 = *(_DWORD *)(g_sharedFont + 36);
  v3 = *(unsigned __int16 *)(v2 + 16);
  v4 = *(_DWORD *)(v2 + 4) * ((unsigned int)this / charPerSheet);
  v39 = (unsigned int)this % charPerSheet;
  v5 = *(unsigned __int16 *)(v2 + 18);
  v6 = *(_DWORD *)(v2 + 20);
  LODWORD(v7) = ((int (*)(void))log2)();
  v8 = ceil(v7);
  v9 = 1 << (signed int)(double)v3;
  v28 = (signed int)(double)v3;
  LODWORD(v10) = log2(LODWORD(v8), HIDWORD(v8));
  ceil(v10);
  v11 = v9 + 7;
  if ( v9 >= 0 )
    v11 = 1 << (signed int)(double)v3;
  v38 = v11 >> 3;
  v29 = CTRPluginFramework::tileData;
  memset((void *)CTRPluginFramework::tileData, 0, 0x1000u);
  v37 = CTRPluginFramework::glyph;
  memset((void *)CTRPluginFramework::glyph, 0, 0x3E8u);
  v12 = 0;
  v40 = v6 + v4;
  while ( v12 < (1 << (signed int)(double)v5) / 8 )
  {
    for ( i = 0; i < v38; ++i )
    {
      v14 = v12;
      v36 = 8 * (v12 << v28) + (i << 6);
      v35 = 8 * v12;
      do
      {
        v15 = 0;
        v34 = v36;
        while ( 1 )
        {
          v16 = v14;
          v33 = v34;
          v32 = v35;
          do
          {
            v17 = 0;
            v30 = v15 + i;
            v31 = v33;
            do
            {
              v18 = v16;
              v19 = v31;
              v20 = v32;
              do
              {
                for ( j = 0; ; j = 1 )
                {
                  if ( v5 > v18 && v3 > j + v30 )
                    *(_BYTE *)(v29 + 8 * i + 4 * v15 + v17 + (v20 << v28) + j) = 17
                                                                               * (((signed int)*(unsigned __int8 *)(v40 + (v19 + j) / 2) >> 4 * ((v19 + j) & 1)) & 0xF);
                  if ( j == 1 )
                    break;
                }
                ++v18;
                ++v20;
                v19 += 2;
              }
              while ( v18 != v16 + 2 );
              v17 += 2;
              ++v30;
              v31 += 4;
            }
            while ( v17 != 4 );
            ++v16;
            v32 += 2;
            v33 += 8;
          }
          while ( v16 != v14 + 2 );
          v34 += 16;
          if ( v15 == 1 )
            break;
          v15 = 1;
        }
        ++v14;
        v35 += 4;
        v36 += 32;
      }
      while ( v14 != v12 + 2 );
    }
    ++v12;
  }
  v22 = 0;
  v23 = (_BYTE *)v37;
  do
  {
    v24 = v39 * (v9 / 5);
    for ( k = v23; ; ++k )
    {
      v23 = k;
      if ( v24 >= (signed int)(v9 / 5 + v39 * (v9 / 5)) )
        break;
      v26 = *(_BYTE *)(v29 + (v22 << v28) + v24++);
      *k = v26;
    }
    ++v22;
  }
  while ( v22 != 32 );
  return v37;
}
// C: using guessed type int CTRPluginFramework::tileData;
// 10: using guessed type int CTRPluginFramework::glyph;
// 8C8: using guessed type int __fastcall log2(_DWORD, _DWORD);

//----- (000003E8) --------------------------------------------------------
int __fastcall CTRPluginFramework::ShrinkGlyph(__int64 this, unsigned __int8 *a2)
{
  float v2; // s28
  int v3; // r5
  signed int v4; // r8
  float v5; // s16
  double v6; // r0
  float v7; // s24
  float v8; // s29
  float v9; // s25
  signed int v10; // s16
  float v11; // s30
  signed int v12; // r7
  float v13; // s27
  int v14; // r10
  signed int v15; // r4
  double v16; // r0
  float v17; // s23
  float v18; // s18
  float v19; // s15
  float v20; // s12
  int v21; // r2
  int v22; // r3
  signed int v23; // t1
  float v24; // s13
  signed int v25; // r3
  float j; // s15
  int i; // r12
  signed int v28; // r2
  int v29; // r11
  signed int v30; // lr
  signed int v31; // t1
  bool v32; // zf
  bool v33; // nf
  unsigned __int8 v34; // vf
  int v35; // r3
  signed int v36; // r2
  int v37; // r12
  int v38; // lr
  signed int v39; // t1
  float v40; // s15
  int v42; // [sp+4h] [bp-6Ch]

  v2 = 0.0;
  v3 = HIDWORD(this);
  v4 = 16;
  v5 = 0.0;
  v42 = this;
  do
  {
    v6 = ceil(*(double *)&this);
    v7 = v5 - v5;
    v8 = v5 + 2.0;
    if ( v7 == 0.0 )
      v7 = 1.0;
    *(double *)&this = floor(v6);
    v9 = (float)(v5 + 2.0) - (float)(v5 + 2.0);
    v10 = (signed int)v5;
    v11 = 0.0;
    v12 = 13;
    if ( v9 == 0.0 )
      v9 = 1.0;
    v13 = 0.0;
    v14 = 25 * v10;
    do
    {
      v15 = (signed int)v13;
      v16 = ceil(*(double *)&this);
      v17 = v13 - v13;
      v13 = v13 + 2.0;
      if ( v17 == 0.0 )
        v17 = 1.0;
      floor(v16);
      v18 = v13 - v13;
      if ( v18 == 0.0 )
        v18 = 1.0;
      v19 = (float)*(unsigned __int8 *)(v3 + v14 + v15) * (float)(v7 * v17);
      v20 = v13 - 1.0;
      v21 = v15 + 1;
      v22 = v3 + v14 + v15;
      while ( 1 )
      {
        v23 = *(unsigned __int8 *)(v22++ + 1);
        HIDWORD(this) = v23;
        v33 = (float)v21++ < v20;
        v24 = (float)v23;
        if ( !v33 )
          break;
        v19 = v19 + (float)(v7 * v24);
      }
      v25 = v10;
      j = v19 + (float)((float)(v7 * v18) * v24);
      for ( i = v15 + 25 * v10 + 25; ; i += 25 )
      {
        LODWORD(this) = v25++;
        if ( (float)v25 >= (float)(v8 - 1.0) )
          break;
        if ( (signed int)this > 30 )
          goto LABEL_35;
        HIDWORD(this) = v3 + i;
        v28 = v15;
        for ( j = j + (float)((float)*(unsigned __int8 *)(v3 + i) * v17); ; j = j + (float)v31 )
        {
          v29 = v28 - v15;
          v30 = v28++;
          if ( v20 <= (float)v28 )
            break;
          if ( v30 > 23 )
            goto LABEL_26;
          v31 = *(unsigned __int8 *)(HIDWORD(this)++ + 1);
        }
        v34 = __OFSUB__(v30, 23);
        v32 = v30 == 23;
        v33 = v30 - 23 < 0;
        if ( v30 <= 23 )
        {
          v34 = __OFSUB__((_DWORD)this, 23);
          v32 = (_DWORD)this == 23;
          v33 = (signed int)this - 23 < 0;
        }
        if ( (unsigned __int8)(v33 ^ v34) | v32 )
          j = j + (float)((float)*(unsigned __int8 *)(v3 + i + v29 + 1) * v18);
LABEL_26:
        ;
      }
      if ( (signed int)this <= 30 )
      {
        v35 = v15 + 25 * v25;
        v36 = v15;
        j = j + (float)((float)*(unsigned __int8 *)(v3 + v35) * (float)(v9 * v17));
        v37 = v3 + v35;
        while ( 1 )
        {
          LODWORD(this) = v36;
          v38 = v36++ - v15;
          HIDWORD(this) = v20 <= (float)v36;
          if ( (signed int)this > 23 )
            HIDWORD(this) = 1;
          if ( HIDWORD(this) )
            break;
          v39 = *(unsigned __int8 *)(v37++ + 1);
          j = j + (float)((float)v39 * v9);
        }
        if ( (signed int)this <= 23 )
          j = j + (float)((float)*(unsigned __int8 *)(v3 + v35 + v38 + 1) * (float)(v9 * v18));
      }
LABEL_35:
      v40 = j * 0.25;
      if ( v40 > 0.0 )
      {
        if ( v40 >= 255.0 )
          v40 = 255.0;
      }
      else
      {
        v40 = 0.0;
      }
      --v12;
      *(_BYTE *)(v42 + 13 * (unsigned int)v2 + (unsigned int)v11) = (unsigned int)v40;
      v11 = v11 + 1.0;
    }
    while ( v12 );
    --v4;
    v2 = v2 + 1.0;
    v5 = v8;
  }
  while ( v4 );
  return this;
}

//----- (000006EC) --------------------------------------------------------
float *__fastcall CTRPluginFramework::Font::CacheGlyph(CTRPluginFramework::Font *this, unsigned int a2)
{
  float *v2; // r5
  CTRPluginFramework *v3; // r6
  unsigned int v4; // r1
  int v5; // r5
  void *v6; // r8
  unsigned __int8 *v7; // r2
  float *v8; // r0
  int v9; // r3
  int v10; // r3
  int v11; // r0
  float v12; // s0
  float v13; // s0
  int v14; // r3
  char v16; // [sp+4h] [bp-54h]
  char v17; // [sp+8h] [bp-50h]
  char v18; // [sp+10h] [bp-48h]
  float v19; // [sp+14h] [bp-44h]
  float v20; // [sp+18h] [bp-40h]

  if ( *(_DWORD *)(CTRPluginFramework::defaultSysFont + 4 * (_DWORD)this) )
    return *(float **)(CTRPluginFramework::defaultSysFont + 4 * (_DWORD)this);
  v3 = this;
  CTRPluginFramework::Lock::Lock(
    (CTRPluginFramework::Lock *)&v17,
    (CTRPluginFramework::Mutex *)&CTRPluginFramework::Font::_mutex);
  v5 = CTRPluginFramework::GetOriginalGlyph(v3, v4);
  v6 = (void *)operator new[](0xE0u);
  CTRPluginFramework::g_fontAllocated += 224;
  memset(v6, 0, 0xE0u);
  CTRPluginFramework::ShrinkGlyph(__PAIR__(v5, (unsigned int)v6), v7);
  v8 = (float *)operator new(0xCu);
  v9 = CTRPluginFramework::g_fontAllocated;
  *v8 = 0.0;
  CTRPluginFramework::g_fontAllocated = v9 + 12;
  v10 = CTRPluginFramework::g_glyphAllocated;
  v8[1] = 0.0;
  v8[2] = 0.0;
  v2 = v8;
  CTRPluginFramework::g_glyphAllocated = v10 + 1;
  v11 = CTRPluginFramework::Renderer::FontCalcGlyphPos(&v18, &v16, v3);
  if ( v3 )
  {
    v12 = v19;
    v11 = roundf(v11);
  }
  else
  {
    v12 = 0.0;
  }
  *v2 = v12;
  v13 = v20;
  if ( v3 )
    roundf(v11);
  v14 = CTRPluginFramework::defaultSysFont;
  v2[1] = v13;
  *((_DWORD *)v2 + 2) = v6;
  *(_DWORD *)(v14 + 4 * (_DWORD)v3) = v2;
  CTRPluginFramework::Lock::~Lock((CTRPluginFramework::Lock *)&v17);
  return v2;
}
// 4: using guessed type int CTRPluginFramework::defaultSysFont;
// 8: using guessed type int CTRPluginFramework::g_fontAllocated;
// 20: using guessed type int CTRPluginFramework::g_glyphAllocated;
// 8DC: using guessed type _DWORD __cdecl CTRPluginFramework::Lock::Lock(CTRPluginFramework::Lock *__hidden this, CTRPluginFramework::Mutex *);
// 8E4: using guessed type int __fastcall CTRPluginFramework::Renderer::FontCalcGlyphPos(_DWORD, _DWORD, _DWORD);
// 8E8: using guessed type int __fastcall roundf(_DWORD);

//----- (000007F8) --------------------------------------------------------
float *__fastcall CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *this, unsigned __int8 **a2)
{
  CTRPluginFramework::Font *v2; // r4
  int v3; // r0
  float *result; // r0
  int v5; // r3
  unsigned __int8 **v6; // r0
  CTRPluginFramework::Font *v7; // r0
  unsigned int v8; // r1
  unsigned __int8 **v9; // [sp+4h] [bp-Ch]

  v9 = a2;
  v2 = this;
  v3 = decode_utf8(&v9, *(_DWORD *)this);
  if ( v3 == -1 )
    return 0;
  v5 = *(_DWORD *)v2 + v3;
  v6 = v9;
  *(_DWORD *)v2 = v5;
  if ( !v6 )
    return 0;
  v7 = (CTRPluginFramework::Font *)fontGlyphIndexFromCodePoint();
  if ( *(_DWORD *)(CTRPluginFramework::defaultSysFont + 4 * (_DWORD)v7) )
    result = *(float **)(CTRPluginFramework::defaultSysFont + 4 * (_DWORD)v7);
  else
    result = CTRPluginFramework::Font::CacheGlyph(v7, v8);
  return result;
}
// 4: using guessed type int CTRPluginFramework::defaultSysFont;
// 8F0: using guessed type int __fastcall decode_utf8(_DWORD, _DWORD);
// 8F4: using guessed type int fontGlyphIndexFromCodePoint(void);

//----- (00000860) --------------------------------------------------------
float *__fastcall CTRPluginFramework::Font::GetGlyph(CTRPluginFramework::Font *this, int a2, int a3)
{
  char v4; // [sp+7h] [bp-11h]
  int v5; // [sp+8h] [bp-10h]
  char *v6; // [sp+Ch] [bp-Ch]

  v5 = a3;
  v4 = (char)this;
  v6 = &v4;
  return CTRPluginFramework::Font::GetGlyph((CTRPluginFramework::Font *)&v6, (unsigned __int8 **)a2);
}

//----- (00000880) --------------------------------------------------------
int GLOBAL__sub_I__ZN18CTRPluginFramework15g_fontAllocatedE()
{
  CTRPluginFramework::Mutex::Mutex((CTRPluginFramework::Mutex *)&CTRPluginFramework::Font::_mutex);
  return _aeabi_atexit(&CTRPluginFramework::Font::_mutex, &CTRPluginFramework::Mutex::~Mutex, &_dso_handle);
}
// 8FC: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 904: using guessed type _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this);

// ALL OK, 8 function(s) have been successfully decompiled
