/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

CTRPluginFramework *__fastcall CTRPluginFramework::GetCond32Str(CTRPluginFramework *this, unsigned int a2, unsigned int a3, const char *a4);
CTRPluginFramework *__fastcall CTRPluginFramework::GetCond16Str(CTRPluginFramework *this, unsigned int a2, unsigned int a3, const char *a4);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
int *__fastcall CTRPluginFramework::ColorToString(int *a1, unsigned __int8 *a2);
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2);
CTRPluginFramework::ARCodeEditor::CodeLine *__fastcall CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(CTRPluginFramework::ARCodeEditor::CodeLine *this, CTRPluginFramework::ARCode *a2);
int __fastcall CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(int result, int a2);
int __fastcall CTRPluginFramework::ARCodeEditor::CodeLine::Update(CTRPluginFramework::ARCodeEditor::CodeLine *this);
CTRPluginFramework::ARCodeEditor *__fastcall CTRPluginFramework::ARCodeEditor::ARCodeEditor(CTRPluginFramework::ARCodeEditor *this);
CTRPluginFramework::ARCode *__fastcall CTRPluginFramework::ARCode::~ARCode(CTRPluginFramework::ARCode *this);
int __fastcall CTRPluginFramework::ARCodeEditor::_RenderTop(CTRPluginFramework::ARCodeEditor *this);
int __fastcall CTRPluginFramework::ARCodeEditor::_RenderBottom(CTRPluginFramework::ARCodeEditor *this);
int __fastcall CTRPluginFramework::ARCodeEditor::_Update(CTRPluginFramework::ARCodeEditor *this);
bool __fastcall std::operator==<char>(int a1, int a2);
bool std::operator==<char,std::char_traits<char>,std::allocator<char>>();
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::resize(void **a1, unsigned int a2);
_QWORD *__fastcall std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::clear(_QWORD *result);
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1);
void __fastcall std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::_M_realloc_insert<CTRPluginFramework::Event const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3);
void __fastcall std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::_M_realloc_insert<CTRPluginFramework::ARCodeEditor::CodeLine>(int *a1, int a2, int a3);
void __fastcall std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::emplace_back<CTRPluginFramework::ARCodeEditor::CodeLine>(int *a1, int a2);
signed int __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_check_len(_DWORD *a1, unsigned int a2, const char *a3);
CTRPluginFramework::ARCode *__fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(CTRPluginFramework::ARCode *result, CTRPluginFramework::ARCode *a2);
CTRPluginFramework::ARCode *__fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear(CTRPluginFramework::ARCode *result);
void **__fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::~vector(void **a1);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(int a1, const CTRPluginFramework::ARCode *a2);
CTRPluginFramework::ARCode *__fastcall CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(CTRPluginFramework::ARCodeEditor *this);
int __fastcall CTRPluginFramework::ARCodeEditor::CodeLine::Edit(int result, unsigned int a2, unsigned int a3);
char *__fastcall std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, _BYTE *a2, char *a3);
char **__fastcall std::vector<unsigned long,std::allocator<unsigned long>>::operator=(char **a1, char **a2);
int __fastcall CTRPluginFramework::ARCode::operator=(int a1, _BYTE *a2);
int *__fastcall CTRPluginFramework::ARCodeEditor::CodeLine::operator=(int *a1, _BYTE **a2);
int __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_insert_rval(int a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3);
void __fastcall CTRPluginFramework::ARCodeEditor::_ProcessEvent(CTRPluginFramework::ARCodeEditor *this, Event *a2);
int __fastcall CTRPluginFramework::ARCodeEditor::operator()(_DWORD, _DWORD); // weak
void __fastcall CTRPluginFramework::ARCodeEditor::Edit(int a1);
// int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// void __cdecl __noreturn std::__throw_logic_error(const char *); idb
// int __fastcall ZNK18CTRPluginFramework6ARCode8ToStringB5cxx11Ev(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD); weak
// int CTRPluginFramework::ARCode::Update(void); weak
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Clock::Clock(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD CTRPluginFramework::Converter::Converter(CTRPluginFramework::Converter *__hidden this); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall CTRPluginFramework::SubMenu::SubMenu(_DWORD, _DWORD); weak
// void __cdecl operator delete(void *); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::KeyboardImpl::_Hexadecimal(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD); weak
// int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::SubMenu::Draw(CTRPluginFramework::SubMenu *__hidden this); idb
// int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::KeyboardImpl::_RenderBottom(CTRPluginFramework::KeyboardImpl *__hidden this); idb
// _DWORD CTRPluginFramework::SubMenu::IsOpen(CTRPluginFramework::SubMenu *__hidden this); idb
// int memcmp(const void *s1, const void *s2, size_t n);
// int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(void); weak
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// void *memmove(void *dest, const void *src, size_t n);
// void *memcpy(void *dest, const void *src, size_t n);
// void __noreturn std::__throw_bad_alloc(void); idb
// _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *); weak
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// int __fastcall _cxa_guard_release(_DWORD); weak
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::ARCode::IsCodeWithData(CTRPluginFramework::ARCode *__hidden this); idb
// int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(_DWORD); weak
// int __fastcall CTRPluginFramework::ActionReplayPriv::Str2U32(_DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::MessageBox::~MessageBox(CTRPluginFramework::MessageBox *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Milliseconds(CTRPluginFramework *__hidden this, int); idb
// _DWORD __cdecl CTRPluginFramework::Clock::HasTimePassed(CTRPluginFramework::Clock *__hidden this, Time); idb
// _DWORD CTRPluginFramework::Clock::Restart(CTRPluginFramework::Clock *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::SubMenu::ProcessEvent(CTRPluginFramework::SubMenu *__hidden this, const Event *); idb
// int __fastcall CTRPluginFramework::SubMenu::operator()(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::HexEditor::Goto(CTRPluginFramework::HexEditor *__hidden this, unsigned int, bool); idb
// _DWORD CTRPluginFramework::System::IsNew3DS(CTRPluginFramework::System *__hidden this); idb
// _DWORD CTRPluginFramework::ScreenImpl::Clean(CTRPluginFramework::ScreenImpl *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Seconds(CTRPluginFramework *__hidden this, float); idb
// _DWORD CTRPluginFramework::Time::Time(CTRPluginFramework::Time *__hidden this); idb
// _DWORD CTRPluginFramework::Time::AsMilliseconds(CTRPluginFramework::Time *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::Fade(CTRPluginFramework::ScreenImpl *__hidden this, float, bool); idb
// _DWORD __cdecl CTRPluginFramework::ScreenImpl::SwapBuffer(CTRPluginFramework::ScreenImpl *__hidden this, bool, bool); idb
// _DWORD CTRPluginFramework::Clock::GetElapsedTime(CTRPluginFramework::Clock *__hidden this); idb
// int __fastcall CTRPluginFramework::KeyboardImpl::operator()(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::EventManager::EventManager(CTRPluginFramework::EventManager *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::EventManager::PollEvent(CTRPluginFramework::EventManager *__hidden this, Event *); idb
// _DWORD __cdecl CTRPluginFramework::Renderer::EndFrame(CTRPluginFramework::Renderer *__hidden this, bool); idb

//-------------------------------------------------------------------------
// Data declarations

char CTRPluginFramework::g_condAgainstData; // weak
char CTRPluginFramework::g_newCondDataToggle; // weak
int CTRPluginFramework::__arCodeEditor; // weak
char `guard variable for'CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar; // weak
int CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar; // weak
int dword_14; // weak
int dword_18; // weak
char *off_A0[4] =
{
  "if data %s [%07X+offs]:",
  "if %08X %s storage:",
  "if %08X %s data:",
  "if data %s storage:"
}; // weak
char *off_A8[2] = { "if %08X %s data:", "if data %s storage:" }; // weak
char *CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[7] = { "data", "data#1", "data#2", "A", "B", "Select", "Start" }; // weak
char *CTRPluginFramework::KeysToString(unsigned long)::keysText[4] = { "A", "B", "Select", "Start" }; // weak
_UNKNOWN unk_3FC7; // weak
_UNKNOWN unk_3FE1; // weak
// extern _UNKNOWN CTRPluginFramework::Color::Gray; weak
// extern _UNKNOWN CTRPluginFramework::Color::Red; weak
// extern _UNKNOWN CTRPluginFramework::Color::Brown; weak
// extern _UNKNOWN CTRPluginFramework::Color::ForestGreen; weak
// extern _UNKNOWN CTRPluginFramework::Color::Orange; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::Blue; weak
// extern _UNKNOWN CTRPluginFramework::Color::Green; weak
// extern _UNKNOWN CTRPluginFramework::Window::TopWindow; weak
// extern _UNKNOWN CTRPluginFramework::Color::SkyBlue; weak
// extern _UNKNOWN CTRPluginFramework::Color::DeepSkyBlue; weak
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN CTRPluginFramework::Color::DimGrey; weak
// extern _DWORD CTRPluginFramework::Preferences::Settings[5]; idb
// extern _UNKNOWN _dso_handle; weak


//----- (00000020) --------------------------------------------------------
CTRPluginFramework *__fastcall CTRPluginFramework::GetCond32Str(CTRPluginFramework *this, unsigned int a2, unsigned int a3, const char *a4)
{
  CTRPluginFramework *v4; // r4
  const char *v6; // r1
  unsigned int v7; // [sp+4h] [bp-Ch]

  v7 = a2;
  v4 = this;
  if ( CTRPluginFramework::g_condAgainstData )
  {
    switch ( CTRPluginFramework::g_condAgainstData )
    {
      case 1:
        a3 = (unsigned int)a4;
        a4 = (const char *)a2;
        v6 = "if data %s [%07X+offs]:";
        break;
      case 3:
        v6 = "if %08X %s storage:";
        break;
      case 4:
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(this, "if data %s storage:");
        return v4;
      default:
        v6 = "if %08X %s data:";
        break;
    }
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(this, v6, a3, a4, this, v7);
  }
  else
  {
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(this, "if %08X %s [%07X+off]:", a3, a4, a2, a2);
  }
  return v4;
}
// 4: using guessed type char CTRPluginFramework::g_condAgainstData;
// 433C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);

//----- (000000B0) --------------------------------------------------------
CTRPluginFramework *__fastcall CTRPluginFramework::GetCond16Str(CTRPluginFramework *this, unsigned int a2, unsigned int a3, const char *a4)
{
  CTRPluginFramework *v4; // r4
  unsigned int v5; // r0
  const char *v6; // r1
  const char *v8; // r1

  v4 = this;
  v5 = a3 >> 16;
  if ( a3 >> 16 )
    v5 ^= 0xFFFFu;
  if ( CTRPluginFramework::g_condAgainstData )
  {
    if ( CTRPluginFramework::g_condAgainstData != 1 )
    {
      if ( CTRPluginFramework::g_condAgainstData == 3 )
      {
        if ( v5 )
          v8 = "if %04X %s stor. & %04X:";
        else
          v8 = "if %04X %s storage:";
        if ( v5 )
          goto LABEL_9;
      }
      else
      {
        if ( CTRPluginFramework::g_condAgainstData == 4 )
        {
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, "if data %s storage:", a4);
          return v4;
        }
        if ( v5 )
        {
          v8 = "if %04X %s data & %04X:";
          goto LABEL_9;
        }
        v8 = "if %04X %s data:";
      }
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, v8);
      return v4;
    }
    if ( v5 )
    {
      v6 = "if data%s[%07X+of] & %04X:";
      goto LABEL_6;
    }
    v8 = "if data %s [%07X+offs]:";
LABEL_9:
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, v8);
    return v4;
  }
  if ( !v5 )
  {
    v8 = "if %04X %s [%07X+offs]:";
    goto LABEL_9;
  }
  v6 = "if %04X%s[%07X+off] & %04X:";
LABEL_6:
  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(v4, v6);
  return v4;
}
// 4: using guessed type char CTRPluginFramework::g_condAgainstData;
// 433C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);

//----- (000001C8) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  const char *v2; // r5
  int *v3; // r4
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  const char *v11; // [sp+4h] [bp-14h]

  v11 = a2;
  v2 = a2;
  *a1 = (int)(a1 + 2);
  if ( !a2 )
    std::__throw_logic_error("basic_string::_M_construct null not valid");
  v3 = a1;
  v4 = strlen(a2);
  v5 = (int)&v2[v4];
  v11 = (const char *)v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v3, &v11, 0);
    v7 = (int)v11;
    *v3 = v6;
    v3[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v3, v2, v5);
  result = v3;
  v9 = (int)v11;
  v10 = *v3;
  v3[1] = (int)v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 4344: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 4348: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (00000250) --------------------------------------------------------
int *__fastcall CTRPluginFramework::ColorToString(int *a1, unsigned __int8 *a2)
{
  unsigned int v2; // r3
  int *v3; // r4
  unsigned int v4; // r3
  unsigned int v5; // r3
  int *v7; // [sp+0h] [bp-10h]
  unsigned __int8 *v8; // [sp+4h] [bp-Ch]

  v7 = a1;
  v8 = a2;
  LOBYTE(v8) = 0;
  LOBYTE(v7) = 27;
  v2 = *a2;
  v3 = a1;
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  BYTE1(v7) = v2;
  v4 = a2[1];
  if ( v4 < 1 )
    LOBYTE(v4) = 1;
  BYTE2(v7) = v4;
  v5 = a2[2];
  if ( v5 < 1 )
    LOBYTE(v5) = 1;
  HIBYTE(v7) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, (const char *)&v7);
  return v3;
}

//----- (000002AC) --------------------------------------------------------
int *__fastcall CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(int *a1, unsigned __int8 *a2)
{
  unsigned int v2; // r3
  int *v3; // r4
  unsigned int v4; // r3
  unsigned int v5; // r3
  int *v7; // [sp+0h] [bp-10h]
  unsigned __int8 *v8; // [sp+4h] [bp-Ch]

  v7 = a1;
  v8 = a2;
  LOBYTE(v8) = 0;
  LOBYTE(v7) = 27;
  v2 = *a2;
  v3 = a1;
  if ( v2 < 1 )
    LOBYTE(v2) = 1;
  BYTE1(v7) = v2;
  v4 = a2[1];
  if ( v4 < 1 )
    LOBYTE(v4) = 1;
  BYTE2(v7) = v4;
  v5 = a2[2];
  if ( v5 < 1 )
    LOBYTE(v5) = 1;
  HIBYTE(v7) = v5;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(a1, (const char *)&v7);
  return v3;
}

//----- (00000308) --------------------------------------------------------
CTRPluginFramework::ARCodeEditor::CodeLine *__fastcall CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(CTRPluginFramework::ARCodeEditor::CodeLine *this, CTRPluginFramework::ARCode *a2)
{
  __int64 v2; // r2
  CTRPluginFramework::ARCodeEditor::CodeLine *v3; // r4
  CTRPluginFramework::ARCode *v4; // r5
  CTRPluginFramework::ARCodeEditor::CodeLine *result; // r0
  int v6; // [sp+0h] [bp-28h]

  v2 = (unsigned int)this + 20;
  *(_QWORD *)((char *)this + 12) = v2;
  LODWORD(v2) = (char *)this + 44;
  *(_QWORD *)((char *)this + 36) = v2;
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 44) = 0;
  v3 = this;
  if ( !*((_DWORD *)a2 + 7) )
  {
    v4 = a2;
    ZNK18CTRPluginFramework6ARCode8ToStringB5cxx11Ev(&v6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=((char *)v4 + 24, &v6);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v6);
  }
  result = v3;
  *((_WORD *)v3 + 4) |= 8u;
  return result;
}
// 4350: using guessed type int __fastcall ZNK18CTRPluginFramework6ARCode8ToStringB5cxx11Ev(_DWORD);
// 4354: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00000380) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(int result, int a2)
{
  __int16 v2; // r2

  *(_DWORD *)result = *(_DWORD *)a2;
  *(_DWORD *)(result + 12) = result + 20;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 36) = result + 44;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
  v2 = *(_WORD *)(a2 + 8);
  *(_WORD *)(result + 8) = v2;
  *(_WORD *)(result + 10) = *(_WORD *)(a2 + 10);
  *(_WORD *)(result + 8) = v2 | 8;
  return result;
}

//----- (000003D0) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCodeEditor::CodeLine::Update(CTRPluginFramework::ARCodeEditor::CodeLine *this)
{
  __int16 v1; // r3
  CTRPluginFramework::ARCodeEditor::CodeLine *v2; // r5
  int v3; // r3
  int v4; // r1
  char *v5; // r4
  int v6; // r6
  int v7; // r7
  unsigned int v8; // r3
  unsigned int v9; // r2
  unsigned int v10; // r2
  int v11; // r0
  __int16 v12; // r3
  const char *v13; // r1
  int result; // r0
  signed int v15; // r3
  bool v16; // zf
  int v17; // r4
  int v18; // r0
  signed int v19; // r8
  int v20; // r3
  int v21; // r4
  unsigned int v22; // r3
  bool v23; // zf
  unsigned __int8 *v24; // r1
  signed int v25; // r1
  bool v26; // zf
  signed int v27; // r1
  unsigned __int8 *v28; // r1
  signed int v29; // r1
  unsigned __int8 *v30; // r1
  unsigned __int8 *v31; // r1
  int v32; // r4
  unsigned int v33; // r3
  const char *v34; // r1
  int v35; // r3
  int v36; // r3
  const char *v37; // r3
  const char *v38; // r3
  int v39; // r3
  int v40; // r2
  const char *v41; // r1
  int v42; // r2
  const char *v43; // r1
  const char *v44; // r1
  __int64 v45; // r2
  int v46; // r9
  int v47; // r4
  const char *v48; // r1
  bool v49; // zf
  signed int v50; // r1
  int v51; // r4
  const char *v52; // r2
  char *v53; // r2
  bool v54; // zf
  signed int v55; // r3
  bool v56; // zf
  signed int v57; // r3
  bool v58; // zf
  char **v59; // r2
  const char *v60; // r1
  int *v61; // [sp+0h] [bp-70h]
  unsigned int v62; // [sp+4h] [bp-6Ch]
  unsigned int v63; // [sp+8h] [bp-68h]
  int *v64; // [sp+18h] [bp-58h]
  int v65; // [sp+1Ch] [bp-54h]
  unsigned int v66; // [sp+20h] [bp-50h]
  int v67; // [sp+30h] [bp-40h]
  int v68; // [sp+34h] [bp-3Ch]

  v1 = *((_WORD *)this + 4);
  v2 = this;
  if ( v1 & 0x70 && v1 & 8 )
  {
    v3 = *((unsigned __int16 *)this + 5);
    v4 = *(_DWORD *)(*((_DWORD *)this + 1) + 12);
    v5 = (char *)this + 12;
    v6 = *(_DWORD *)(v4 + 4 * v3);
    v7 = *(_DWORD *)(v4 + 4 * (v3 + 1));
    CTRPluginFramework::ColorToString((int *)&v61, (unsigned __int8 *)&CTRPluginFramework::Color::Gray);
    ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v64, "%08X %08X", v6, v7);
    v8 = v62 + v65;
    if ( v61 == (int *)&v63 )
      v9 = 15;
    else
      v9 = v63;
    if ( v8 <= v9 || (v64 != (int *)&v66 ? (v10 = v66) : (v10 = 15), v8 > v10) )
      v11 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(&v61, &v64);
    else
      v11 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v61);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v67, v11);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(v5, &v67);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v64);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v61);
    v12 = *((_WORD *)v2 + 4);
    if ( v12 & 0x20 )
    {
      v13 = "pattern data";
    }
    else if ( v12 & 0x10 )
    {
      v13 = "patch data";
    }
    else
    {
      v13 = "asm data";
    }
    result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
               (char *)v2 + 36,
               v13);
    *((_WORD *)v2 + 4) &= 0xFFF7u;
    return result;
  }
  result = *(_DWORD *)this;
  if ( CTRPluginFramework::g_newCondDataToggle && (unsigned int)*(unsigned __int8 *)(result + 1) - 48 <= 0x70 )
  {
    *((_WORD *)v2 + 4) = v1 | 8;
    goto LABEL_24;
  }
  if ( v1 & 8 )
  {
LABEL_24:
    v15 = *(unsigned __int8 *)(result + 1);
    v16 = v15 == 223;
    if ( v15 == 223 )
    {
      v15 = 0xFFFFFF;
      v17 = *(_DWORD *)(result + 4);
    }
    else
    {
      v17 = 0;
    }
    if ( v16 )
      v17 = v17 == v15;
    v18 = CTRPluginFramework::ARCode::Update();
    v19 = v18;
    if ( v17 || *(unsigned __int8 *)(*(_DWORD *)v2 + 1) == 223 && *(_DWORD *)(*(_DWORD *)v2 + 4) == 0xFFFFFF )
      CTRPluginFramework::g_newCondDataToggle = 1;
    if ( v18 )
    {
      CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
        (int *)&v64,
        (unsigned __int8 *)&CTRPluginFramework::Color::Red);
      CTRPluginFramework::operator<<(&v67, &v64, *(_DWORD *)v2 + 24);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=((char *)v2 + 12, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v64);
      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
                 (char *)v2 + 36,
                 "!! error !!");
LABEL_35:
      *((_WORD *)v2 + 4) &= 0xFFF7u;
      goto LABEL_36;
    }
    v21 = *(_DWORD *)v2;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v64, *(_DWORD *)v2 + 24);
    v22 = *(unsigned __int8 *)(v21 + 1);
    if ( v22 == 210 )
      goto LABEL_97;
    if ( v22 <= 0xD2 )
    {
      if ( v22 == 128 )
        goto LABEL_61;
      if ( v22 <= 0x80 )
      {
        if ( v22 == 48 )
          goto LABEL_51;
        if ( v22 <= 0x30 )
        {
          if ( v22 != 16 )
          {
            if ( v22 == 32 )
            {
              CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
              CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::ForestGreen);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 5, &v67);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
              CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 17, &v67);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
              CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
              v29 = 27;
              goto LABEL_99;
            }
            v23 = v22 == 0;
            goto LABEL_49;
          }
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::ForestGreen);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 5, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          v28 = (unsigned __int8 *)&CTRPluginFramework::Color::Black;
LABEL_91:
          CTRPluginFramework::ColorToString(&v67, v28);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 17, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
          v29 = 25;
          goto LABEL_99;
        }
        if ( v22 == 80 )
          goto LABEL_51;
        if ( v22 <= 0x50 )
        {
          v23 = v22 == 64;
          goto LABEL_49;
        }
        if ( v22 == 96 )
        {
LABEL_51:
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          v24 = (unsigned __int8 *)&CTRPluginFramework::Color::ForestGreen;
LABEL_52:
          CTRPluginFramework::ColorToString(&v67, v24);
          v25 = 5;
LABEL_53:
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, v25, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
LABEL_113:
          v31 = (unsigned __int8 *)&CTRPluginFramework::Color::Blue;
          goto LABEL_95;
        }
        v26 = v22 == 112;
        goto LABEL_59;
      }
      if ( v22 == 192 )
      {
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        v24 = (unsigned __int8 *)&CTRPluginFramework::Color::Black;
        goto LABEL_52;
      }
      if ( v22 <= 0xC0 )
      {
        if ( v22 != 160 )
        {
          if ( v22 == 176 )
          {
            CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
            CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::ForestGreen);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 5, &v67);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
            v31 = (unsigned __int8 *)&CTRPluginFramework::Color::Black;
LABEL_95:
            CTRPluginFramework::ColorToString(&v67, v31);
            v29 = 17;
            goto LABEL_99;
          }
          v26 = v22 == 144;
LABEL_59:
          if ( !v26 )
            goto LABEL_71;
        }
LABEL_61:
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::ForestGreen);
        v27 = 5;
LABEL_62:
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, v27, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        v28 = (unsigned __int8 *)&CTRPluginFramework::Color::Orange;
        goto LABEL_91;
      }
      if ( v22 != 208 )
      {
        if ( v22 <= 0xD0 )
        {
          if ( v22 > 0xC2 )
          {
LABEL_71:
            CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Red);
            v29 = 0;
            goto LABEL_99;
          }
          goto LABEL_77;
        }
LABEL_111:
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
        v29 = 6;
        goto LABEL_99;
      }
LABEL_97:
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 6, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      if ( !*(_DWORD *)(v21 + 8) )
        goto LABEL_100;
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
      v29 = 24;
LABEL_99:
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, v29, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
LABEL_100:
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=((char *)v2 + 12, &v64);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v64);
      v61 = (int *)&v63;
      v32 = *(_DWORD *)v2;
      v62 = 0;
      LOBYTE(v63) = 0;
      v33 = *(unsigned __int8 *)(v32 + 1);
      if ( v33 == 216 )
      {
        HIDWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
        v44 = "[%08X+off] = %s, off+=1";
        LODWORD(v45) = *(_DWORD *)(v32 + 8);
        goto LABEL_195;
      }
      if ( v33 <= 0xD8 )
      {
        if ( v33 == 176 )
        {
          v40 = *(_DWORD *)(v32 + 4);
          v41 = "offset = [%08X + offset]";
        }
        else
        {
          if ( v33 <= 0xB0 )
          {
            if ( v33 != 80 )
            {
              if ( v33 <= 0x50 )
              {
                if ( v33 != 32 )
                {
                  if ( v33 <= 0x20 )
                  {
                    if ( *(_BYTE *)(v32 + 1) )
                    {
                      if ( v33 != 16 )
                        goto LABEL_110;
                      HIDWORD(v45) = *(unsigned __int16 *)(v32 + 8);
                      LODWORD(v45) = *(_DWORD *)(v32 + 4);
                      v44 = "[%08X + offs] = %04X";
                    }
                    else
                    {
                      v45 = *(_QWORD *)(v32 + 4);
                      v44 = "[%08X + offs] = %08X";
                    }
                    goto LABEL_195;
                  }
                  if ( v33 == 48 )
                  {
                    v37 = ">";
                  }
                  else
                  {
                    if ( v33 != 64 )
                      goto LABEL_110;
                    v37 = "<";
                  }
                  goto LABEL_127;
                }
                HIDWORD(v45) = *(unsigned __int8 *)(v32 + 8);
                LODWORD(v45) = *(_DWORD *)(v32 + 4);
                v44 = "[%08X + offs] = %02X";
LABEL_195:
                ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v67, v44, v45, v61);
                goto LABEL_196;
              }
              if ( v33 == 128 )
              {
                v38 = "<";
              }
              else
              {
                if ( v33 <= 0x80 )
                {
                  if ( v33 != 96 )
                  {
                    if ( v33 != 112 )
                      goto LABEL_110;
                    v38 = ">";
                    goto LABEL_134;
                  }
                  v37 = "!=";
LABEL_127:
                  CTRPluginFramework::GetCond32Str(
                    (CTRPluginFramework *)&v67,
                    *(_DWORD *)(v32 + 4),
                    *(_DWORD *)(v32 + 8),
                    v37);
LABEL_196:
                  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v61, &v67);
LABEL_197:
                  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
                  goto LABEL_198;
                }
                if ( v33 == 144 )
                {
                  v38 = "==";
                }
                else
                {
                  if ( v33 != 160 )
                    goto LABEL_110;
                  v38 = "!=";
                }
              }
LABEL_134:
              CTRPluginFramework::GetCond16Str(
                (CTRPluginFramework *)&v67,
                *(_DWORD *)(v32 + 4),
                *(_DWORD *)(v32 + 8),
                v38);
              goto LABEL_196;
            }
            v37 = "==";
            goto LABEL_127;
          }
          if ( v33 == 210 )
          {
            if ( *(_DWORD *)(v32 + 8) & 1 )
              v34 = "exit code immediately";
            else
              v34 = "end all if,start loop,clr reg";
            goto LABEL_147;
          }
          if ( v33 > 0xD2 )
          {
            if ( v33 == 213 )
            {
              HIDWORD(v45) = *(_DWORD *)(v32 + 8);
              LODWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
            }
            else
            {
              if ( v33 > 0xD5 )
              {
                if ( v33 == 214 )
                {
                  HIDWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
                  v44 = "[%08X+off] = %s, off+=4";
                  LODWORD(v45) = *(_DWORD *)(v32 + 8);
                }
                else
                {
                  if ( v33 != 215 )
                    goto LABEL_110;
                  HIDWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
                  v44 = "[%08X+off] = %s, off+=2";
                  LODWORD(v45) = *(_DWORD *)(v32 + 8);
                }
                goto LABEL_195;
              }
              if ( v33 != 211 )
              {
                if ( v33 != 212 )
                  goto LABEL_110;
                v39 = *(_DWORD *)(v32 + 4);
                if ( v39 )
                {
                  if ( v39 == 1 )
                  {
                    v42 = *(_DWORD *)(v32 + 8);
                    v43 = "data#1 += data#2 + %08X";
                  }
                  else
                  {
                    if ( v39 != 2 )
                    {
LABEL_201:
                      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
                        &v61,
                        "!! error !!");
LABEL_202:
                      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
                        (char *)v2 + 36,
                        &v61);
                      result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v61);
                      goto LABEL_35;
                    }
                    v42 = *(_DWORD *)(v32 + 8);
                    v43 = "data#2 += data#1 + %08X";
                  }
                  ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v67, v43, v42);
                  goto LABEL_197;
                }
                v40 = *(_DWORD *)(v32 + 8);
                v41 = "data += %08X";
                goto LABEL_211;
              }
              LODWORD(v45) = "Offset#1";
              if ( *(_DWORD *)(v32 + 4) & 1 )
                LODWORD(v45) = "Offset#2";
              HIDWORD(v45) = *(_DWORD *)(v32 + 8);
            }
            v44 = "%s = %08X";
            goto LABEL_195;
          }
          if ( v33 == 194 )
          {
            v34 = "loop [data#2] times";
            goto LABEL_147;
          }
          if ( v33 > 0xC2 )
          {
            if ( v33 == 208 )
            {
              if ( *(_DWORD *)(v32 + 8) )
                v34 = "exit loop";
              else
                v34 = "end if";
              goto LABEL_147;
            }
            if ( v33 == 209 )
            {
              v34 = "start loop";
              goto LABEL_147;
            }
            goto LABEL_110;
          }
          if ( v33 != 192 )
          {
            if ( v33 == 193 )
            {
              v34 = "loop [data#1] times";
              goto LABEL_147;
            }
LABEL_110:
            v34 = "!! error !!";
LABEL_147:
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v61, v34);
            goto LABEL_198;
          }
          v40 = *(_DWORD *)(v32 + 8);
          v41 = "Loop %X times:";
        }
LABEL_211:
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v67, v41, v40);
        goto LABEL_196;
      }
      if ( v33 == 243 )
      {
        v45 = *(_QWORD *)(v32 + 4);
        v44 = "[%08X+offs] /= %08X";
        goto LABEL_195;
      }
      if ( v33 > 0xF3 )
      {
        if ( v33 == 249 )
        {
          v34 = "data = ~data";
          goto LABEL_147;
        }
        if ( v33 > 0xF9 )
        {
          if ( v33 == 252 )
          {
            v40 = *(_DWORD *)(v32 + 8);
            v41 = "Copy %08X, off#2 => off#1";
          }
          else if ( v33 > 0xFC )
          {
            if ( v33 != 254 )
            {
              if ( v33 <= 0xFE )
              {
                v34 = "hook at offset";
                goto LABEL_147;
              }
              v45 = *(_QWORD *)(v32 + 4);
              if ( !v45 )
              {
                v34 = "data = random number";
                goto LABEL_147;
              }
              v44 = "data=rand[%08X:%08X]";
              goto LABEL_195;
            }
            v40 = *(_DWORD *)(v32 + 8);
            v41 = "if pattern in [off:%08X]:";
          }
          else if ( v33 == 250 )
          {
            v40 = *(_DWORD *)(v32 + 8);
            v41 = "data <<= %08X";
          }
          else
          {
            if ( v33 != 251 )
              goto LABEL_110;
            v40 = *(_DWORD *)(v32 + 8);
            v41 = "data >>= %08X";
          }
        }
        else if ( v33 == 246 )
        {
          v40 = *(_DWORD *)(v32 + 8);
          v41 = "data &= %08X";
        }
        else if ( v33 > 0xF6 )
        {
          if ( v33 == 247 )
          {
            v40 = *(_DWORD *)(v32 + 8);
            v41 = "data |= %08X";
          }
          else
          {
            if ( v33 != 248 )
              goto LABEL_110;
            v40 = *(_DWORD *)(v32 + 8);
            v41 = "data ^= %08X";
          }
        }
        else if ( v33 == 244 )
        {
          v40 = *(_DWORD *)(v32 + 8);
          v41 = "data *= %08X";
        }
        else
        {
          if ( v33 != 245 )
            goto LABEL_110;
          v40 = *(_DWORD *)(v32 + 8);
          v41 = "data /= %08X";
        }
        goto LABEL_211;
      }
      if ( v33 == 222 )
      {
        v44 = *(const char **)(v32 + 4);
        HIDWORD(v45) = *(_DWORD *)(v32 + 8);
        v49 = v44 == 0;
        LODWORD(v45) = HIDWORD(v45) >> 16;
        if ( !v44 )
          v44 = "if %04X <= touch.X <= %04X:";
        HIDWORD(v45) = WORD2(v45);
        if ( !v49 )
          v44 = "if %04X <= touch.Y <= %04X:";
        goto LABEL_195;
      }
      if ( v33 <= 0xDE )
      {
        if ( v33 == 219 )
        {
          LODWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
          HIDWORD(v45) = *(_DWORD *)(v32 + 8);
          v44 = "%s = [%08X+offs] & FF";
          goto LABEL_195;
        }
        if ( v33 <= 0xDB )
        {
          if ( v33 == 217 )
          {
            LODWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
            HIDWORD(v45) = *(_DWORD *)(v32 + 8);
            v44 = "%s = [%08X+offs]";
          }
          else
          {
            if ( v33 != 218 )
              goto LABEL_110;
            LODWORD(v45) = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[*(_DWORD *)(v32 + 4) & 3];
            HIDWORD(v45) = *(_DWORD *)(v32 + 8);
            v44 = "%s = [%08X+offs] & FFFF";
          }
          goto LABEL_195;
        }
        if ( v33 == 220 )
        {
          v40 = *(_DWORD *)(v32 + 8);
          v41 = "offset += %08X";
          goto LABEL_211;
        }
        if ( v33 != 221 )
          goto LABEL_110;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v61, "if ");
        v46 = *(_DWORD *)(v32 + 8);
        v47 = 0;
        v64 = (int *)&v66;
        v65 = 0;
        LOBYTE(v66) = 0;
        do
        {
          if ( v46 & (1 << v47) )
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
              &v67,
              CTRPluginFramework::KeysToString(unsigned long)::keysText[v47]);
            if ( v68 )
            {
              if ( v19 )
                std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(&v64, 43);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v64, &v67);
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
              v19 = 1;
            }
            else
            {
              std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
            }
          }
          ++v47;
        }
        while ( v47 != 32 );
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v61, &v64);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v64);
        v48 = ":";
LABEL_183:
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v61, v48);
        goto LABEL_198;
      }
      if ( v33 == 240 )
      {
        if ( *(_DWORD *)(v32 + 4) == 1 )
        {
          v60 = "Enable ";
          if ( !(*(_DWORD *)(v32 + 8) & 1) )
            v60 = "Disable ";
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v61, v60);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(
            &v61,
            "vfp mode for F1,F2,F3");
        }
        if ( *(_DWORD *)(v32 + 4) == 15728640 )
        {
          v34 = "ASM code";
          goto LABEL_147;
        }
        goto LABEL_198;
      }
      if ( v33 > 0xF0 )
      {
        if ( v33 == 241 )
        {
          v45 = *(_QWORD *)(v32 + 4);
          v44 = "[%08X+offs] += %08X";
        }
        else
        {
          if ( v33 != 242 )
            goto LABEL_110;
          v45 = *(_QWORD *)(v32 + 4);
          v44 = "[%08X+offs] *= %08X";
        }
        goto LABEL_195;
      }
      if ( v33 != 223 )
      {
        if ( v33 != 224 || !*(_DWORD *)(v32 + 8) )
          goto LABEL_110;
        v40 = *(_DWORD *)(v32 + 4);
        v41 = "[%08X+offs] = patch data";
        goto LABEL_211;
      }
      v50 = *(_DWORD *)(v32 + 4);
      HIDWORD(v45) = *(_DWORD *)(v32 + 8);
      if ( v50 == 16777214 )
      {
        v51 = *(_DWORD *)(v32 + 8) & 0x10;
        LODWORD(v45) = "enabled";
        if ( !(v45 & 0x100000000LL) )
          v52 = "disabled";
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v67, "data vfp state %s", v52);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v61, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        if ( v51 )
        {
          v48 = ", cvt";
          goto LABEL_183;
        }
LABEL_198:
        if ( v62 > 0x1D )
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(&v61, 30, -1);
        if ( v62 )
          goto LABEL_202;
        goto LABEL_201;
      }
      if ( v50 == 0xFFFFFF )
      {
        v34 = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[(*(_DWORD *)(v32 + 8) & 7)
                                                                                          + 35];
        goto LABEL_147;
      }
      LODWORD(v45) = HIDWORD(v45) >> 16;
      v16 = HIDWORD(v45) >> 16 == 1;
      HIDWORD(v45) = WORD2(v45);
      if ( v16 )
      {
        if ( v50 )
        {
          if ( v50 == 1 )
          {
            v56 = HIDWORD(v45) == 0;
            if ( HIDWORD(v45) )
            {
              v57 = 1;
            }
            else
            {
              v57 = 0;
              v50 = 4;
            }
            if ( !v56 )
              v50 = 0;
            HIDWORD(v45) = *(char **)((char *)&CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[v57]
                                    + (_DWORD)off_A8);
            LODWORD(v45) = (char *)CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data + v50;
          }
          else
          {
            if ( v50 != 2 )
              goto LABEL_275;
            LODWORD(v45) = &CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[HIDWORD(v45) != 0];
            HIDWORD(v45) = *(_DWORD *)(v45 + 176);
          }
          goto LABEL_299;
        }
        v54 = HIDWORD(v45) == 0;
        if ( HIDWORD(v45) )
        {
          v55 = 1;
        }
        else
        {
          v55 = 0;
          v50 = 4;
        }
        if ( !v54 )
          v50 = 0;
        HIDWORD(v45) = *(char **)((char *)&CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[v55]
                                + (_DWORD)off_A0);
        LODWORD(v45) = (char *)CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data + v50;
      }
      else
      {
        if ( !(_DWORD)v45 )
        {
          if ( v50 )
          {
            if ( v50 == 1 )
            {
              v53 = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[(HIDWORD(v45) != 0)
                                                                                                + 42];
            }
            else
            {
              if ( v50 != 2 )
                goto LABEL_276;
              v53 = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[(HIDWORD(v45) != 0)
                                                                                                + 44];
            }
          }
          else
          {
            v53 = CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[(HIDWORD(v45) != 0) + 40];
          }
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v67, "Set %s as active", v53);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v61, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
LABEL_275:
          LODWORD(v45) = 0;
LABEL_276:
          HIDWORD(v45) = 0;
          goto LABEL_300;
        }
        if ( (_DWORD)v45 != 2 )
          goto LABEL_275;
        if ( !v50 )
        {
          LODWORD(v45) = &CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[HIDWORD(v45) != 0];
          HIDWORD(v45) = *(_DWORD *)(v45 + 160);
LABEL_299:
          LODWORD(v45) = *(_DWORD *)(v45 + 168);
          goto LABEL_300;
        }
        if ( v50 != 1 )
        {
          if ( v50 != 2 )
            goto LABEL_275;
          v59 = &CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[HIDWORD(v45) != 0];
          HIDWORD(v45) = v59[42];
          LODWORD(v45) = *(_DWORD *)(v45 + 176);
LABEL_300:
          v58 = (_DWORD)v45 == 0;
          if ( (_DWORD)v45 )
            v58 = HIDWORD(v45) == 0;
          if ( !v58 )
          {
            v44 = "%s = %s";
            goto LABEL_195;
          }
          goto LABEL_198;
        }
        LODWORD(v45) = &CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[HIDWORD(v45) != 0];
        HIDWORD(v45) = *(_DWORD *)(v45 + 168);
      }
      LODWORD(v45) = *(_DWORD *)(v45 + 160);
      goto LABEL_300;
    }
    if ( v22 == 240 )
    {
      v36 = *(_DWORD *)(v21 + 4);
      if ( v36 != 1 )
      {
        if ( v36 != 15728640 )
          goto LABEL_71;
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        v30 = (unsigned __int8 *)&CTRPluginFramework::Color::Orange;
LABEL_78:
        CTRPluginFramework::ColorToString(&v67, v30);
        v25 = 6;
        goto LABEL_53;
      }
      goto LABEL_116;
    }
    if ( v22 <= 0xF0 )
    {
      if ( v22 <= 0xDD )
      {
        if ( v22 < 0xD6 && v22 != 212 )
        {
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 6, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          if ( *(_DWORD *)(v21 + 4) )
          {
            CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Red);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 15, &v67);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
            CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
            v29 = 21;
            goto LABEL_99;
          }
          goto LABEL_113;
        }
        goto LABEL_77;
      }
      if ( v22 != 223 )
      {
        if ( v22 < 0xDF )
        {
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 6, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Red);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 15, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 21, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Green);
          v29 = 29;
          goto LABEL_99;
        }
        v23 = v22 == 224;
LABEL_49:
        if ( !v23 )
          goto LABEL_71;
        goto LABEL_51;
      }
      v35 = *(_DWORD *)(v21 + 4);
      if ( v35 != 0xFFFFFF )
      {
        if ( v35 == 16777214 )
        {
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 6, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 17, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Red);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 27, &v67);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
          CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
          v29 = 32;
          goto LABEL_99;
        }
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
        CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Gray);
        v27 = 6;
        goto LABEL_62;
      }
LABEL_116:
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 6, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Black);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 17, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Blue);
      v29 = 28;
      goto LABEL_99;
    }
    if ( v22 == 249 )
      goto LABEL_111;
    if ( v22 > 0xF9 )
    {
      if ( v22 > 0xFC )
      {
        if ( v22 < 0xFE )
          goto LABEL_71;
        goto LABEL_86;
      }
    }
    else if ( v22 <= 0xF3 )
    {
LABEL_86:
      CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
      v30 = (unsigned __int8 *)&CTRPluginFramework::Color::ForestGreen;
      goto LABEL_78;
    }
LABEL_77:
    CTRPluginFramework::ColorToString(&v67, (unsigned __int8 *)&CTRPluginFramework::Color::Brown);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(&v64, 0, &v67);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v67);
    v30 = (unsigned __int8 *)&CTRPluginFramework::Color::Black;
    goto LABEL_78;
  }
LABEL_36:
  v20 = *(_DWORD *)v2;
  if ( *(unsigned __int8 *)(*(_DWORD *)v2 + 1) == 223 && *(_DWORD *)(v20 + 4) == 0xFFFFFF )
    CTRPluginFramework::g_condAgainstData = *(_DWORD *)(v20 + 8) & 7;
  return result;
}
// 4: using guessed type char CTRPluginFramework::g_condAgainstData;
// 5: using guessed type char CTRPluginFramework::g_newCondDataToggle;
// A0: using guessed type char *off_A0[4];
// A8: using guessed type char *off_A8[2];
// 396C: using guessed type char *CTRPluginFramework::CommentCodeLine(CTRPluginFramework::ARCode const&)::_data[7];
// 3978: using guessed type char *CTRPluginFramework::KeysToString(unsigned long)::keysText[4];
// 433C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 4354: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 435C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 4360: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 4364: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 4368: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(_DWORD, _DWORD);
// 436C: using guessed type int CTRPluginFramework::ARCode::Update(void);
// 4370: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 4374: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 4378: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 437C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 4380: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD);
// 4384: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::push_back(_DWORD, _DWORD);

//----- (00001724) --------------------------------------------------------
CTRPluginFramework::ARCodeEditor *__fastcall CTRPluginFramework::ARCodeEditor::ARCodeEditor(CTRPluginFramework::ARCodeEditor *this)
{
  CTRPluginFramework::ARCodeEditor *v1; // r4
  int v2; // r5
  char *v3; // r6
  char *v4; // r1
  int v5; // r0
  char *v6; // r5
  int v7; // r6
  unsigned int v8; // r5
  bool v9; // cf
  CTRPluginFramework::ARCodeEditor *result; // r0
  void *v11; // [sp+4h] [bp-B4h]
  char *v12; // [sp+8h] [bp-B0h]
  char *v13; // [sp+Ch] [bp-ACh]
  char v14[24]; // [sp+10h] [bp-A8h]
  char v15; // [sp+28h] [bp-90h]
  char v16; // [sp+40h] [bp-78h]
  char v17; // [sp+58h] [bp-60h]
  char v18; // [sp+70h] [bp-48h]
  char v19; // [sp+88h] [bp-30h]

  v1 = this;
  v2 = 0;
  CTRPluginFramework::Clock::Clock((CTRPluginFramework::ARCodeEditor *)((char *)this + 16));
  CTRPluginFramework::Converter::Converter((CTRPluginFramework::ARCodeEditor *)((char *)v1 + 32));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)v14,
    "Copy to clipboard");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v15,
    "Clear clipboard");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)&v16,
    "Delete all codes");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v17, "Converter");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v18, "Hex Editor");
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string((int *)&v19, "Help");
  v12 = 0;
  v3 = (char *)operator new(0x90u);
  v11 = v3;
  v13 = v3 + 144;
  do
  {
    v4 = &v14[v2];
    v5 = (int)&v3[v2];
    v2 += 24;
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(v5, v4);
  }
  while ( v2 != 144 );
  v12 = v3 + 144;
  CTRPluginFramework::SubMenu::SubMenu((char *)v1 + 272, &v11);
  v6 = (char *)v11;
  v7 = (int)v12;
  while ( (char *)v7 != v6 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v6);
    v6 += 24;
  }
  if ( v11 )
    operator delete(v11);
  v8 = 5;
  do
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v14[24 * v8]);
    v9 = v8-- >= 1;
  }
  while ( v9 );
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
    (int *)v14,
    (const char *)&unk_3FC7);
  CTRPluginFramework::KeyboardImpl::KeyboardImpl((char *)v1 + 304, v14);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v14);
  *((_DWORD *)v1 + 132) = 0;
  *((_DWORD *)v1 + 133) = 0;
  *((_DWORD *)v1 + 134) = 0;
  *(_BYTE *)v1 = 0;
  *((_DWORD *)v1 + 1) = 0;
  *((_DWORD *)v1 + 2) = 0;
  CTRPluginFramework::KeyboardImpl::SetLayout((char *)v1 + 304, 2);
  CTRPluginFramework::KeyboardImpl::_Hexadecimal((CTRPluginFramework::ARCodeEditor *)((char *)v1 + 304));
  result = v1;
  *((_BYTE *)v1 + 424) = 0;
  CTRPluginFramework::__arCodeEditor = (int)v1;
  *((_DWORD *)v1 + 6) = 0;
  return result;
}
// 8: using guessed type int CTRPluginFramework::__arCodeEditor;
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4374: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 43B4: using guessed type int __fastcall CTRPluginFramework::SubMenu::SubMenu(_DWORD, _DWORD);
// 43BC: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::KeyboardImpl(_DWORD, _DWORD);
// 43C0: using guessed type int __fastcall CTRPluginFramework::KeyboardImpl::SetLayout(_DWORD, _DWORD);
// 1724: using guessed type char var_A8[24];

//----- (000018B8) --------------------------------------------------------
CTRPluginFramework::ARCode *__fastcall CTRPluginFramework::ARCode::~ARCode(CTRPluginFramework::ARCode *this)
{
  CTRPluginFramework::ARCode *v1; // r4
  void *v2; // r0

  v1 = this;
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)this + 24);
  v2 = (void *)*((_DWORD *)v1 + 3);
  if ( v2 )
    operator delete(v2);
  return v1;
}
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (000018E0) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCodeEditor::_RenderTop(CTRPluginFramework::ARCodeEditor *this)
{
  CTRPluginFramework::ARCodeEditor *v1; // r5
  int v3; // r2
  int v4; // r6
  int v5; // r4
  int v6; // r8
  int v7; // [sp+14h] [bp-4Ch]
  int v8; // [sp+18h] [bp-48h]
  int v9; // [sp+1Ch] [bp-44h]
  int v10; // [sp+20h] [bp-40h]

  v1 = this;
  CTRPluginFramework::Renderer::SetTarget(1);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v10, "Code Editor");
  CTRPluginFramework::Window::Draw(&CTRPluginFramework::Window::TopWindow, &v10);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
  CTRPluginFramework::Renderer::DrawRect(35, 61, 31, 20, &CTRPluginFramework::Color::SkyBlue, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(67, 61, 112, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(180, 61, 185, 20, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  v7 = 82;
  CTRPluginFramework::Renderer::DrawRect(35, 82, 31, 112, &CTRPluginFramework::Color::DeepSkyBlue, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(67, 82, 112, 112, &CTRPluginFramework::Color::White, 1, 1);
  CTRPluginFramework::Renderer::DrawRect(180, 82, 185, 112, &CTRPluginFramework::Color::SkyBlue, 1, 1);
  if ( *((_DWORD *)v1 + 133) != *((_DWORD *)v1 + 132) )
  {
    CTRPluginFramework::Renderer::DrawRect(
      *((unsigned __int16 *)v1 + 6),
      *((unsigned __int16 *)v1 + 7),
      7,
      10,
      &CTRPluginFramework::Color::SkyBlue,
      1,
      1);
    v3 = *((_DWORD *)v1 + 132);
    v7 += 2;
    v8 = v7;
    v9 = v7;
    v4 = (*((_DWORD *)v1 + 1) - 10) & ~((*((_DWORD *)v1 + 1) - 10) >> 31);
    v5 = v4 + 11;
    if ( -286331153 * ((*((_DWORD *)v1 + 133) - v3) >> 2) < v4 + 11 )
      v5 = -286331153 * ((*((_DWORD *)v1 + 133) - v3) >> 2);
    while ( v4 < v5 )
    {
      ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v10, "%3d", ++v4);
      CTRPluginFramework::Renderer::DrawString(v10, 40, &v8, CTRPluginFramework::Color::Black);
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v10);
      v6 = 60 * v4 - 60;
      CTRPluginFramework::Renderer::DrawString(
        *(_DWORD *)(*((_DWORD *)v1 + 132) + v6 + 12),
        72,
        &v7,
        CTRPluginFramework::Color::Black);
      CTRPluginFramework::Renderer::DrawString(
        *(_DWORD *)(*((_DWORD *)v1 + 132) + v6 + 36),
        185,
        &v9,
        CTRPluginFramework::Color::DimGrey);
    }
    v7 = 203;
    CTRPluginFramework::Renderer::DrawString("Options:", 260, &v7, CTRPluginFramework::Preferences::Settings[4]);
    v7 -= 14;
    CTRPluginFramework::Renderer::DrawSysString(
      &unk_3FE1,
      320,
      &v7,
      380,
      CTRPluginFramework::Preferences::Settings[4],
      0);
  }
  return CTRPluginFramework::SubMenu::Draw((CTRPluginFramework::ARCodeEditor *)((char *)v1 + 272));
}
// 433C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 43C8: using guessed type int __fastcall CTRPluginFramework::Renderer::SetTarget(_DWORD);
// 43CC: using guessed type int __fastcall CTRPluginFramework::Window::Draw(_DWORD, _DWORD);
// 43D0: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawRect(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 43D8: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawString(_DWORD, _DWORD, _DWORD, _DWORD);
// 43DC: using guessed type int __fastcall CTRPluginFramework::Renderer::DrawSysString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4404: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(void);

//----- (00001B94) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCodeEditor::_RenderBottom(CTRPluginFramework::ARCodeEditor *this)
{
  return CTRPluginFramework::KeyboardImpl::_RenderBottom((CTRPluginFramework::ARCodeEditor *)((char *)this + 304));
}

//----- (00001B9C) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCodeEditor::_Update(CTRPluginFramework::ARCodeEditor *this)
{
  CTRPluginFramework::ARCodeEditor *v1; // r4
  int result; // r0
  CTRPluginFramework::ARCodeEditor::CodeLine *v3; // r6
  int v4; // r3
  CTRPluginFramework::ARCodeEditor::CodeLine *v5; // r5

  v1 = this;
  result = CTRPluginFramework::SubMenu::IsOpen((CTRPluginFramework::ARCodeEditor *)((char *)this + 272));
  if ( !result )
  {
    v3 = (CTRPluginFramework::ARCodeEditor::CodeLine *)*((_DWORD *)v1 + 133);
    *((_WORD *)v1 + 6) = 6 * *((_WORD *)v1 + 4) + 71;
    v4 = *((_DWORD *)v1 + 1);
    v5 = (CTRPluginFramework::ARCodeEditor::CodeLine *)*((_DWORD *)v1 + 132);
    if ( v4 - 10 >= 0 )
      LOWORD(v4) = 10;
    *((_WORD *)v1 + 7) = 10 * v4 + 83;
    CTRPluginFramework::g_condAgainstData = 0;
    while ( v3 != v5 )
    {
      result = CTRPluginFramework::ARCodeEditor::CodeLine::Update(v5);
      v5 = (CTRPluginFramework::ARCodeEditor::CodeLine *)((char *)v5 + 60);
    }
    CTRPluginFramework::g_newCondDataToggle = 0;
  }
  return result;
}
// 4: using guessed type char CTRPluginFramework::g_condAgainstData;
// 5: using guessed type char CTRPluginFramework::g_newCondDataToggle;

//----- (00001C24) --------------------------------------------------------
bool __fastcall std::operator==<char>(int a1, int a2)
{
  size_t v2; // r2

  v2 = *(_DWORD *)(a1 + 4);
  if ( v2 != *(_DWORD *)(a2 + 4) )
    return 0;
  if ( v2 )
    return memcmp(*(const void **)a1, *(const void **)a2, v2) == 0;
  return 1;
}

//----- (00001C68) --------------------------------------------------------
bool std::operator==<char,std::char_traits<char>,std::allocator<char>>()
{
  return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare() == 0;
}
// 4404: using guessed type int std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(void);

//----- (00001C7C) --------------------------------------------------------
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::resize(void **a1, unsigned int a2)
{
  char *v2; // r2
  unsigned int v3; // r3
  unsigned int v4; // r1
  int v5; // r5
  int v6; // r5
  void **v7; // r4
  signed int v8; // r0
  unsigned __int8 v9; // cf
  unsigned int v10; // r1
  int v11; // r7
  char *v12; // r0
  void *v13; // r8
  _BYTE *v14; // r3
  char *v15; // r9
  int v16; // r6
  char *v17; // r2
  int v18; // r5
  int v19; // r1

  v2 = (char *)a1[1];
  v3 = (v2 - (_BYTE *)*a1) >> 2;
  if ( a2 <= v3 )
  {
    if ( a2 < v3 )
    {
      v19 = (int)*a1 + 4 * a2;
      if ( (char *)v19 != v2 )
        a1[1] = (void *)v19;
    }
  }
  else
  {
    v4 = a2 - v3;
    v5 = 4 * v4;
    if ( v4 > ((_BYTE *)a1[2] - v2) >> 2 )
    {
      v7 = a1;
      v8 = 0x3FFFFFFF;
      if ( v4 > 0x3FFFFFFF - v3 )
        std::__throw_length_error("vector::_M_default_append");
      if ( v4 < v3 )
        v4 = v3;
      v9 = __CFADD__(v3, v4);
      v10 = v3 + v4;
      if ( !v9 && v10 < 0x3FFFFFFF )
        v8 = v10;
      v11 = 4 * v8;
      v12 = (char *)operator new(4 * v8);
      v13 = *v7;
      v14 = v7[1];
      v15 = v12;
      v16 = v14 - (_BYTE *)*v7;
      if ( *v7 != v14 )
        memmove(v12, *v7, v14 - (_BYTE *)*v7);
      v17 = &v15[v16];
      v18 = (int)&v15[v16 + v5];
      do
      {
        *(_DWORD *)v17 = 0;
        v17 += 4;
      }
      while ( v17 != (char *)v18 );
      if ( v13 )
        operator delete(v13);
      *v7 = v15;
      v7[1] = (void *)v18;
      v7[2] = &v15[v11];
    }
    else
    {
      v6 = (int)&v2[v5];
      do
      {
        *(_DWORD *)v2 = 0;
        v2 += 4;
      }
      while ( (char *)v6 != v2 );
      a1[1] = (void *)v6;
    }
  }
}

//----- (00001D84) --------------------------------------------------------
_QWORD *__fastcall std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::clear(_QWORD *result)
{
  __int64 v1; // r6
  _QWORD *v2; // r4
  int v3; // r5
  int v4; // r0

  v1 = *result;
  if ( (_DWORD)v1 != HIDWORD(v1) )
  {
    v2 = result;
    v3 = v1;
    do
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v3 + 36);
      v4 = v3 + 12;
      v3 += 60;
      result = (_QWORD *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v4);
    }
    while ( HIDWORD(v1) != v3 );
    *((_DWORD *)v2 + 1) = v1;
  }
  return result;
}
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001DC0) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (00001E04) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::_M_realloc_insert<CTRPluginFramework::Event const&>(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  _BYTE *v3; // r5
  _BYTE *v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  _DWORD *v9; // r6
  _BYTE *v10; // r7
  _DWORD *v11; // r10
  size_t v12; // r9
  char *v13; // r11
  int v14; // r1
  int v15; // r2
  char *v16; // r3
  char *v17; // r9
  int v18; // r9

  v3 = (_BYTE *)*a1;
  v4 = (_BYTE *)a1[1];
  v5 = -1431655765 * ((signed int)&v4[-*a1] >> 2);
  if ( -1431655765 * ((signed int)&v4[-*a1] >> 2) )
    v6 = -1431655765 * ((signed int)&v4[-*a1] >> 2);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x15555555 )
  {
    v8 = 357913941;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (char *)operator new(12 * v8);
LABEL_8:
  v14 = v11[1];
  v15 = v11[2];
  v16 = &v13[v12];
  *(_DWORD *)v16 = *v11;
  *((_DWORD *)v16 + 1) = v14;
  *((_DWORD *)v16 + 2) = v15;
  if ( v10 != v3 )
    memmove(v13, v3, v12);
  v17 = &v13[v12 + 12];
  if ( v10 != v4 )
    memcpy(v17, v10, v4 - v10);
  v18 = (int)&v17[v4 - v10];
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v18;
  v9[2] = &v13[12 * v8];
}

//----- (00001EE8) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::_M_realloc_insert<CTRPluginFramework::ARCodeEditor::CodeLine>(int *a1, int a2, int a3)
{
  char *v3; // r6
  char *v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int *v9; // r7
  int v10; // r9
  int v11; // r10
  unsigned int v12; // r5
  int v13; // r11
  int v14; // r0
  int i; // r3
  int v16; // r10
  int v17; // r2
  int v18; // r3
  int v19; // r5
  int v20; // r2
  int v21; // r10
  char *v22; // r9
  unsigned int v23; // r5
  int v24; // r3
  int v25; // ST04_4

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = -286331153 * ((signed int)&v4[-*a1] >> 2);
  if ( v5 )
    v6 = -286331153 * ((signed int)&v4[-*a1] >> 2);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - (_DWORD)v3;
  if ( v7 || v8 > 0x4444444 )
  {
    v8 = 71582788;
    goto LABEL_21;
  }
  if ( v8 )
  {
LABEL_21:
    v13 = operator new(60 * v8);
    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:
  CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(v13 + v12, v11);
  v14 = v13;
  for ( i = (int)v3; ; i = v24 + 60 )
  {
    v16 = v14 + 60;
    if ( v10 == i )
      break;
    CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(v14, i);
    v14 = v16;
  }
  v17 = 787410671 * (v12 >> 2) & 0x3FFFFFFF;
  v18 = v13 + 60 * v17 + 60;
  v19 = (int)&v3[60 * v17];
  v20 = v13 + 60 * v17 + 60;
  v21 = v19;
  while ( (char *)v21 != v4 )
  {
    v25 = v20;
    CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(v20, v21);
    v21 += 60;
    v20 = v25 + 60;
  }
  v22 = v3;
  v23 = v18 + 60 * (787410671 * ((unsigned int)&v4[-v19] >> 2) & 0x3FFFFFFF);
  while ( v22 != v4 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v22 + 36);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v22 + 12);
    v22 += 60;
  }
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v23;
  v9[2] = v13 + 60 * v8;
}
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00002050) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::emplace_back<CTRPluginFramework::ARCodeEditor::CodeLine>(int *a1, int a2)
{
  int v2; // r3

  if ( a1[1] == a1[2] )
  {
    std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::_M_realloc_insert<CTRPluginFramework::ARCodeEditor::CodeLine>(
      a1,
      a1[1],
      a2);
  }
  else
  {
    CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(a1[1], a2);
    *(_DWORD *)(v2 + 4) += 60;
  }
}

//----- (0000208C) --------------------------------------------------------
signed int __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_check_len(_DWORD *a1, unsigned int a2, const char *a3)
{
  unsigned int v3; // r3
  unsigned __int8 v4; // cf
  unsigned int v5; // r3
  signed int v6; // r0
  signed int result; // r0

  v3 = -1431655765 * ((a1[1] - *a1) >> 4);
  if ( 89478485 - v3 < a2 )
    std::__throw_length_error(a3);
  if ( a2 < v3 )
    a2 = -1431655765 * ((a1[1] - *a1) >> 4);
  v4 = __CFADD__(v3, a2);
  v5 = v3 + a2;
  if ( v4 )
    v6 = 1;
  else
    v6 = 0;
  if ( v5 > 0x5555555 )
    v6 |= 1u;
  if ( v6 )
    result = 89478485;
  else
    result = v5;
  return result;
}

//----- (000020F0) --------------------------------------------------------
CTRPluginFramework::ARCode *__fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(CTRPluginFramework::ARCode *result, CTRPluginFramework::ARCode *a2)
{
  CTRPluginFramework::ARCode *v2; // r4
  CTRPluginFramework::ARCode *v3; // r5

  v2 = result;
  v3 = a2;
  while ( v2 != v3 )
  {
    result = CTRPluginFramework::ARCode::~ARCode(v2);
    v2 = (CTRPluginFramework::ARCode *)((char *)v2 + 48);
  }
  return result;
}

//----- (00002114) --------------------------------------------------------
CTRPluginFramework::ARCode *__fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear(CTRPluginFramework::ARCode *result)
{
  CTRPluginFramework::ARCode *v1; // r5
  CTRPluginFramework::ARCode *v2; // r1
  CTRPluginFramework::ARCode *v3; // r4

  v1 = *(CTRPluginFramework::ARCode **)result;
  v2 = (CTRPluginFramework::ARCode *)*((_DWORD *)result + 1);
  if ( *(CTRPluginFramework::ARCode **)result != v2 )
  {
    v3 = result;
    result = std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(
               *(CTRPluginFramework::ARCode **)result,
               v2);
    *((_DWORD *)v3 + 1) = v1;
  }
  return result;
}

//----- (0000213C) --------------------------------------------------------
void **__fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::~vector(void **a1)
{
  void **v1; // r4

  v1 = a1;
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(
    (CTRPluginFramework::ARCode *)*(_QWORD *)a1,
    (CTRPluginFramework::ARCode *)(*(_QWORD *)a1 >> 32));
  if ( *v1 )
    operator delete(*v1);
  return v1;
}

//----- (00002164) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3)
{
  const CTRPluginFramework::ARCode *v3; // r11
  const CTRPluginFramework::ARCode *v4; // r10
  CTRPluginFramework::ARCode **v5; // r8
  unsigned int v6; // r0
  CTRPluginFramework::ARCode *v7; // r7
  const CTRPluginFramework::ARCode *v8; // r9
  unsigned int v9; // r5
  unsigned int v10; // r4
  CTRPluginFramework::ARCode *v11; // r6
  const CTRPluginFramework::ARCode *v12; // r10
  CTRPluginFramework::ARCode *v13; // r0
  int v14; // r3
  int v15; // r10
  int v16; // r4
  CTRPluginFramework::ARCode *v17; // r2
  const CTRPluginFramework::ARCode *v18; // r3
  const CTRPluginFramework::ARCode *v19; // ST04_4
  CTRPluginFramework::ARCode *v20; // ST00_4
  int v21; // ST00_4
  unsigned int v22; // r1
  int v23; // r4

  v3 = a2;
  v4 = a3;
  v5 = a1;
  v6 = std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_check_len(
         a1,
         1u,
         "vector::_M_realloc_insert");
  v7 = *v5;
  v8 = v5[1];
  v9 = v6;
  v10 = v3 - *v5;
  if ( v6 )
  {
    if ( v6 > 0x5555555 )
      std::__throw_bad_alloc();
    v11 = (CTRPluginFramework::ARCode *)operator new(48 * v6);
  }
  else
  {
    v11 = (CTRPluginFramework::ARCode *)v6;
  }
  CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)((char *)v11 + v10), v4);
  v12 = v7;
  v13 = v11;
  while ( v3 != v12 )
  {
    v21 = (int)v13 + 48;
    CTRPluginFramework::ARCode::ARCode(v13, v12);
    v12 = (const CTRPluginFramework::ARCode *)((char *)v12 + 48);
    v13 = (CTRPluginFramework::ARCode *)v21;
  }
  v14 = 178956971 * (v10 >> 4) & 0xFFFFFFF;
  v15 = (int)v7 + 48 * v14;
  v16 = (int)v11 + 48 * v14 + 48;
  v17 = (CTRPluginFramework::ARCode *)((char *)v11 + 48 * v14 + 48);
  v18 = (CTRPluginFramework::ARCode *)((char *)v7 + 48 * v14);
  while ( v8 != v18 )
  {
    v19 = v18;
    v20 = v17;
    CTRPluginFramework::ARCode::ARCode(v17, v18);
    v18 = (const CTRPluginFramework::ARCode *)((char *)v19 + 48);
    v17 = (CTRPluginFramework::ARCode *)((char *)v20 + 48);
  }
  v22 = 48 * (178956971 * (((unsigned int)v8 - v15) >> 4) & 0xFFFFFFF);
  v23 = v16 + v22;
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(v7, (CTRPluginFramework::ARCode *)(v15 + v22));
  if ( v7 )
    operator delete((void *)v7);
  *v5 = v11;
  v5[1] = (CTRPluginFramework::ARCode *)v23;
  v5[2] = (CTRPluginFramework::ARCode *)((char *)v11 + 48 * v9);
}
// 4418: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (000022AC) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(int a1, const CTRPluginFramework::ARCode *a2)
{
  int v2; // r4

  if ( *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8) )
  {
    std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(
      (CTRPluginFramework::ARCode **)a1,
      *(const CTRPluginFramework::ARCode **)(a1 + 4),
      a2);
  }
  else
  {
    v2 = a1;
    CTRPluginFramework::ARCode::ARCode(*(CTRPluginFramework::ARCode **)(a1 + 4), a2);
    *(_DWORD *)(v2 + 4) += 48;
  }
}
// 4418: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (000022E8) --------------------------------------------------------
CTRPluginFramework::ARCode *__fastcall CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(CTRPluginFramework::ARCodeEditor *this)
{
  CTRPluginFramework::ARCodeEditor *v1; // r5
  int v2; // r4
  CTRPluginFramework::ARCode *result; // r0
  int v4; // r3
  int v5; // r4
  unsigned int v6; // r3
  signed int v7; // r2
  _BOOL4 v8; // r1
  int v9; // r3
  signed __int16 v10; // r3
  unsigned int v11; // r7
  __int64 v12; // r2
  int v13; // r8
  int v14; // r3
  int v15; // r11
  unsigned int v16; // r0
  CTRPluginFramework::ARCode *v17; // r10
  unsigned int v18; // r8
  int v19; // r9
  CTRPluginFramework::ARCode *v20; // r0
  const CTRPluginFramework::ARCode *v21; // r3
  const CTRPluginFramework::ARCode *v22; // ST18_4
  int v23; // r3
  int v24; // r11
  int v25; // r11
  signed __int16 v26; // [sp+4h] [bp-CCh]
  __int16 v27; // [sp+8h] [bp-C8h]
  int *v28; // [sp+Ch] [bp-C4h]
  int v29; // [sp+10h] [bp-C0h]
  unsigned int v30; // [sp+14h] [bp-BCh]
  int v31; // [sp+1Ch] [bp-B4h]
  char v32; // [sp+23h] [bp-ADh]
  char v33; // [sp+24h] [bp-ACh]
  char v34; // [sp+3Ch] [bp-94h]
  int v35; // [sp+40h] [bp-90h]
  int v36; // [sp+44h] [bp-8Ch]
  char v37; // [sp+6Ch] [bp-64h]
  char v38; // [sp+78h] [bp-58h]
  char v39; // [sp+90h] [bp-40h]

  v1 = this;
  v2 = `guard variable for'CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar & 1;
  __mcr(15, 0, (unsigned int)this, 7, 10, 5);
  if ( !(`guard variable for'CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar & 1)
    && _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar) )
  {
    CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar = v2;
    dword_14 = v2;
    dword_18 = v2;
    _cxa_guard_release(&`guard variable for'CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar);
    _aeabi_atexit(
      &CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar,
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::~vector,
      &_dso_handle);
  }
  v28 = (int *)((char *)v1 + 528);
  std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::clear((_QWORD *)v1 + 66);
  result = std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear((CTRPluginFramework::ARCode *)&CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar);
  v4 = *((_DWORD *)v1 + 7);
  v5 = *(_DWORD *)(v4 + 12);
  v29 = *(_DWORD *)(v4 + 16);
  v27 = 0;
  while ( v5 != v29 )
  {
    CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(
      (CTRPluginFramework::ARCodeEditor::CodeLine *)&v37,
      (CTRPluginFramework::ARCode *)v5);
    std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::emplace_back<CTRPluginFramework::ARCodeEditor::CodeLine>(
      v28,
      (int)&v37);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v39);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v38);
    *(_WORD *)(*((_DWORD *)v1 + 133) - 50) = v27;
    result = (CTRPluginFramework::ARCode *)CTRPluginFramework::ARCode::IsCodeWithData((CTRPluginFramework::ARCode *)v5);
    if ( result && *(_DWORD *)(v5 + 16) != *(_DWORD *)(v5 + 12) )
    {
      v9 = *(unsigned __int8 *)(v5 + 1);
      if ( v9 == 254 )
      {
        v10 = 32;
      }
      else if ( v9 == 240 )
      {
        if ( *(_DWORD *)(v5 + 4) == 15728640 )
          v10 = 64;
        else
          v10 = 16;
      }
      else
      {
        v10 = 16;
      }
      v11 = 0;
      v26 = v10;
      while ( 1 )
      {
        v12 = *(_QWORD *)(v5 + 12);
        if ( ((HIDWORD(v12) - (signed int)v12) >> 2) - 1 <= v11 )
          break;
        v13 = 4 * v11 + 4;
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(
          &v33,
          "%08X %08X",
          *(_DWORD *)(v12 + 4 * v11),
          *(_DWORD *)(v12 + v13));
        CTRPluginFramework::ARCode::ARCode(&v34, &v33, &v32);
        v14 = *(_DWORD *)(v5 + 12);
        v35 = *(_DWORD *)(v14 + 4 * v11);
        v36 = *(_DWORD *)(v14 + v13);
        v15 = dword_14;
        if ( dword_14 == dword_18 )
        {
          v16 = std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_check_len(
                  &CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar,
                  1u,
                  "vector::_M_realloc_insert");
          v17 = (CTRPluginFramework::ARCode *)CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar;
          v18 = v16;
          v30 = v15 - CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar;
          if ( v16 )
          {
            if ( v16 > 0x5555555 )
              std::__throw_bad_alloc();
            v19 = operator new(48 * v16);
          }
          else
          {
            v19 = v16;
          }
          CTRPluginFramework::ARCode::ARCode(
            (CTRPluginFramework::ARCode *)(v19 + v15 - (_DWORD)v17),
            (const CTRPluginFramework::ARCode *)&v34);
          v20 = (CTRPluginFramework::ARCode *)v19;
          v21 = v17;
          while ( 1 )
          {
            v31 = (int)v20 + 48;
            if ( (const CTRPluginFramework::ARCode *)v15 == v21 )
              break;
            v22 = v21;
            CTRPluginFramework::ARCode::ARCode(v20, v21);
            v21 = (const CTRPluginFramework::ARCode *)((char *)v22 + 48);
            v20 = (CTRPluginFramework::ARCode *)v31;
          }
          v23 = 178956971 * (v30 >> 4) & 0xFFFFFFF;
          v24 = 48 * v23 + 48;
          std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(
            v17,
            (CTRPluginFramework::ARCode *)((char *)v17 + 48 * v23));
          v25 = v19 + v24;
          if ( v17 )
            operator delete((void *)v17);
          CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar = v19;
          dword_14 = v25;
          dword_18 = v19 + 48 * v18;
        }
        else
        {
          CTRPluginFramework::ARCode::ARCode(
            (CTRPluginFramework::ARCode *)dword_14,
            (const CTRPluginFramework::ARCode *)&v34);
          dword_14 += 48;
        }
        CTRPluginFramework::ARCodeEditor::CodeLine::CodeLine(
          (CTRPluginFramework::ARCodeEditor::CodeLine *)&v37,
          (CTRPluginFramework::ARCode *)(dword_14 - 48));
        std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::emplace_back<CTRPluginFramework::ARCodeEditor::CodeLine>(
          v28,
          (int)&v37);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v39);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v38);
        *(_DWORD *)(*((_DWORD *)v1 + 133) - 56) = v5;
        *(_WORD *)(*((_DWORD *)v1 + 133) - 52) |= v26;
        *(_WORD *)(*((_DWORD *)v1 + 133) - 50) = v11;
        CTRPluginFramework::ARCode::~ARCode((CTRPluginFramework::ARCode *)&v34);
        result = (CTRPluginFramework::ARCode *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v33);
        v11 += 2;
      }
    }
    v5 += 48;
    ++v27;
  }
  v6 = -286331153 * ((*((_DWORD *)v1 + 133) - *((_DWORD *)v1 + 132)) >> 2);
  while ( 1 )
  {
    v7 = *((_DWORD *)v1 + 1);
    v8 = v7 >= v6;
    if ( v7 <= 0 )
      v8 = 0;
    if ( !v8 )
      break;
    *((_DWORD *)v1 + 1) = v7 - 1;
  }
  if ( v7 < 0 )
    *((_DWORD *)v1 + 1) = 0;
  return result;
}
// C: using guessed type char `guard variable for'CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar;
// 10: using guessed type int CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(void)::tempar;
// 14: using guessed type int dword_14;
// 18: using guessed type int dword_18;
// 433C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4418: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);
// 441C: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 4420: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 4424: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);
// 442C: using guessed type int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD, _DWORD);

//----- (00002668) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCodeEditor::CodeLine::Edit(int result, unsigned int a2, unsigned int a3)
{
  _WORD *v3; // r4
  unsigned int v4; // r6
  int v5; // r3
  int v6; // r1
  int v7; // r3
  unsigned int *v8; // r3
  int v9; // r5
  int v10; // r7
  _BOOL4 v11; // r8
  unsigned int v12; // r2
  int v13; // r7
  int v14; // r7
  int v15; // r3
  int v16; // r0
  int v17; // r0
  int v18; // r2
  bool v19; // nf
  int v20; // r3
  int v21; // r0
  int v22; // r7
  int *v23; // r0
  int v24; // r3
  int v25; // r5
  int v26; // r2
  int v27; // r0
  int v28; // r2
  bool v29; // zf
  int v30; // r0
  int v31; // r0
  unsigned int v32; // r1
  int v33; // r3
  int v34; // r3
  bool v35; // r0
  int v36; // r0
  _BOOL4 v37; // r8
  char v38; // [sp+Bh] [bp-ADh]
  char v39; // [sp+Ch] [bp-ACh]
  _BYTE *v40; // [sp+10h] [bp-A8h]
  _BYTE *v41; // [sp+28h] [bp-90h]
  unsigned int v42; // [sp+2Ch] [bp-8Ch]
  int v43; // [sp+40h] [bp-78h]
  int v44; // [sp+58h] [bp-60h]
  char v45; // [sp+70h] [bp-48h]
  char v46; // [sp+88h] [bp-30h]

  v3 = (_WORD *)result;
  v4 = a2;
  if ( *(_WORD *)(result + 8) & 0x70 )
  {
    v5 = *(_DWORD *)(result + 4);
    if ( !v5 )
      return result;
    v6 = *(unsigned __int16 *)(result + 10);
    v7 = *(_DWORD *)(v5 + 12);
    if ( v4 <= 7 )
      v8 = (unsigned int *)(v7 + 4 * v6);
    else
      v8 = (unsigned int *)(v7 + 4 * (v6 + 1));
    if ( v4 > 7 )
      LOBYTE(v4) = v4 - 9;
    *v8 = *v8 & ~(15 << (-4 * v4 + 28)) | (a3 << (-4 * v4 + 28));
    goto LABEL_9;
  }
  if ( (unsigned __int8)a3 > 9u )
  {
    if ( (unsigned int)(unsigned __int8)a3 - 10 > 5 )
      return result;
    v9 = (unsigned __int8)a3 + 55;
  }
  else
  {
    v9 = (unsigned __int8)a3 + 48;
  }
  if ( *(unsigned __int8 *)(*(_DWORD *)(*(_DWORD *)result + 24) + a2) != v9 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(
      &v40,
      *(_DWORD *)result + 24,
      0,
      2);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(&v41, &v40);
    if ( v4 <= 1 )
      v41[v4] = v9;
    if ( *v40 == 69 )
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(&v40);
    if ( *v41 == 69 )
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(&v41);
    v10 = !std::operator==<char>((int)&v41, (int)&v40) & 0xFF;
    if ( v10 )
    {
      if ( std::operator==<char,std::char_traits<char>,std::allocator<char>>()
        && *(_DWORD *)(*(_DWORD *)v3 + 4) == 15728640 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
          *(_DWORD *)v3 + 24,
          "F0F00000 00000000");
        v3[4] |= 8u;
LABEL_25:
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v41);
        return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v40);
      }
    }
    else
    {
      v35 = std::operator==<char,std::char_traits<char>,std::allocator<char>>();
      if ( v4 <= 7 )
        v36 = v35;
      else
        v36 = 0;
      if ( v36 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(
          &v44,
          *(_DWORD *)v3 + 24,
          0,
          8);
        *(_BYTE *)(v44 + v4) = v9;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v45,
          "F0F00000 00000000");
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v46, &v45, 0, 8);
        v37 = std::operator==<char>((int)&v44, (int)&v46);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v46);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v45);
        if ( v37 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
            *(_DWORD *)v3 + 24,
            "F0F00000 00000000");
          v23 = &v44;
          v3[4] |= 8u;
          goto LABEL_91;
        }
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v44);
      }
    }
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      &v44,
      "F0F00000 00000000");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v45, &v44, 0, 8);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v46, *(_DWORD *)v3 + 24, 0, 8);
    v11 = std::operator==<char>((int)&v45, (int)&v46);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v46);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v45);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v44);
    if ( v11 )
    {
      if ( v4 > 8 )
      {
LABEL_30:
        v12 = *(_DWORD *)(*(_DWORD *)v3 + 4);
        if ( *(unsigned __int8 *)(*(_DWORD *)v3 + 1) != 254 )
          v12 = *(_DWORD *)(*(_DWORD *)v3 + 8);
        v13 = v12 & 7;
        if ( v12 & 7 )
          v13 = 1;
        v14 = v13 + (v12 >> 3);
        ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v43, "%08X");
        if ( v4 > 8 )
          v15 = v4 - 9;
        else
          v15 = v4;
        *(_BYTE *)(v43 + v15) = v9;
        v16 = CTRPluginFramework::ActionReplayPriv::Str2U32(&v43, &v38);
        if ( v38 )
        {
          v17 = 0;
        }
        else
        {
          v18 = v16 + 7;
          if ( v16 >= 0 )
            v18 = v16;
          v19 = -v16 < 0;
          v20 = -v16 & 7;
          v21 = v16 & 7;
          if ( !v19 )
            v21 = -v20;
          v17 = (v21 > 0) + (v18 >> 3);
        }
        if ( v14 - v17 > 0 )
        {
          ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(&v44, "You're about to delete %d line(s) of data, continue ?");
          CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
            (int *)&v45,
            (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
          CTRPluginFramework::operator<<(&v46, &v45, "Warning");
          CTRPluginFramework::MessageBox::MessageBox(&v39, &v46, &v44, 2, 0);
          v22 = CTRPluginFramework::MessageBox::operator()(&v39);
          CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v39);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v46);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v45);
          if ( !v22 )
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v44);
            v23 = &v43;
LABEL_91:
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v23);
            goto LABEL_25;
          }
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v44);
        }
        *(_BYTE *)(*(_DWORD *)(*(_DWORD *)v3 + 24) + v4) = v9;
        v30 = *(_DWORD *)v3;
        if ( !CTRPluginFramework::ARCode::Update() )
        {
          v31 = *(_DWORD *)v3;
          v32 = *(_DWORD *)(*(_DWORD *)v3 + 4);
          if ( *(unsigned __int8 *)(*(_DWORD *)v3 + 1) != 254 )
            v32 = *(_DWORD *)(*(_DWORD *)v3 + 8);
          if ( v32 )
          {
            v33 = v32 & 7;
            if ( v32 & 7 )
              v33 = 1;
            std::vector<unsigned long,std::allocator<unsigned long>>::resize(
              (void **)(v31 + 12),
              2 * (v33 + (v32 >> 3)));
          }
          else
          {
            v34 = *(_DWORD *)(v31 + 12);
            if ( v34 != *(_DWORD *)(v31 + 16) )
              *(_DWORD *)(v31 + 16) = v34;
          }
          CTRPluginFramework::ARCodeEditor::_ReloadCodeLines((CTRPluginFramework::ARCodeEditor *)CTRPluginFramework::__arCodeEditor);
        }
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v43);
LABEL_55:
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v41);
        result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v40);
LABEL_9:
        v3[4] |= 8u;
        return result;
      }
    }
    else
    {
      if ( !v10 )
        goto LABEL_94;
      if ( std::operator==<char,std::char_traits<char>,std::allocator<char>>()
        || std::operator==<char,std::char_traits<char>,std::allocator<char>>()
        || std::operator==<char,std::char_traits<char>,std::allocator<char>>() )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
          *(_DWORD *)v3 + 24,
          "00000000 00000000");
        **(_BYTE **)(*(_DWORD *)v3 + 24) = *v41;
        if ( v42 > 1 )
          *(_BYTE *)(*(_DWORD *)(*(_DWORD *)v3 + 24) + 1) = v41[1];
        goto LABEL_55;
      }
      if ( *(_DWORD *)(*(_DWORD *)v3 + 16) == *(_DWORD *)(*(_DWORD *)v3 + 12)
        || !std::operator==<char,std::char_traits<char>,std::allocator<char>>()
        && !std::operator==<char,std::char_traits<char>,std::allocator<char>>()
        && !std::operator==<char,std::char_traits<char>,std::allocator<char>>() )
      {
LABEL_94:
        v24 = *(_DWORD *)v3;
        if ( v4 > 7 )
        {
          v28 = *(unsigned __int8 *)(v24 + 1);
          v29 = v28 == 253;
          if ( v28 != 253 )
            v29 = v28 == 224;
          if ( v29 )
            goto LABEL_30;
        }
        else if ( v4 - 2 <= 5 && *(unsigned __int8 *)(v24 + 1) == 254 )
        {
          goto LABEL_30;
        }
        *(_BYTE *)(*(_DWORD *)(v24 + 24) + v4) = v9;
        goto LABEL_55;
      }
    }
    CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
      &v44,
      (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
    CTRPluginFramework::operator<<(&v45, &v44, "Warning");
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
      (int *)&v46,
      "You're about to delete a code with all it's data, continue ?");
    CTRPluginFramework::MessageBox::MessageBox(&v43, &v45, &v46, 2, 0);
    v25 = CTRPluginFramework::MessageBox::operator()(&v43);
    CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v43);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v46);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v45);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v44);
    if ( v25 )
    {
      std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(
        *(_DWORD *)v3 + 24,
        "00000000 00000000");
      v26 = *(_DWORD *)(*(_DWORD *)v3 + 12);
      if ( v26 != *(_DWORD *)(*(_DWORD *)v3 + 16) )
        *(_DWORD *)(*(_DWORD *)v3 + 16) = v26;
      v27 = *(_DWORD *)v3;
      CTRPluginFramework::ARCode::Update();
      **(_BYTE **)(*(_DWORD *)v3 + 24) = *v41;
      if ( v42 > 1 )
        *(_BYTE *)(*(_DWORD *)(*(_DWORD *)v3 + 24) + 1) = v41[1];
      CTRPluginFramework::ARCodeEditor::_ReloadCodeLines((CTRPluginFramework::ARCodeEditor *)CTRPluginFramework::__arCodeEditor);
    }
    goto LABEL_25;
  }
  return result;
}
// 8: using guessed type int CTRPluginFramework::__arCodeEditor;
// 433C: using guessed type int ZN18CTRPluginFramework5Utils6FormatB5cxx11EPKcz(_DWORD, const char *, ...);
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4364: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 436C: using guessed type int CTRPluginFramework::ARCode::Update(void);
// 4374: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(_DWORD, _DWORD);
// 4434: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD);
// 4438: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(_DWORD);
// 443C: using guessed type int __fastcall CTRPluginFramework::ActionReplayPriv::Str2U32(_DWORD, _DWORD);
// 4440: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 4444: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4448: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (00002CEC) --------------------------------------------------------
char *__fastcall std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(void *src, _BYTE *a2, char *a3)
{
  char *v3; // r3
  size_t v4; // r4

  v3 = a3;
  v4 = a2 - (_BYTE *)src;
  if ( a2 != src )
    v3 = (char *)memmove(a3, src, v4);
  return &v3[v4];
}

//----- (00002D1C) --------------------------------------------------------
char **__fastcall std::vector<unsigned long,std::allocator<unsigned long>>::operator=(char **a1, char **a2)
{
  char **v2; // r4
  char *v3; // r6
  char *v4; // r8
  char *v5; // r2
  int v6; // r7
  unsigned int v7; // r0
  char **v8; // r5
  unsigned int v9; // r5
  int v11; // r3
  __int64 v12; // r0

  v2 = a1;
  if ( a2 != a1 )
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = *a1;
    v6 = v4 - *a2;
    v7 = v6 >> 2;
    v8 = a2;
    if ( v6 >> 2 <= (unsigned int)((v2[2] - *v2) >> 2) )
    {
      v11 = v2[1] - v5;
      if ( v7 > v11 >> 2 )
      {
        std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(v3, &v3[v11], v5);
        v12 = *(_QWORD *)v8;
        v5 = v2[1];
        LODWORD(v12) = *(unsigned __int64 *)v8 + v5 - *v2;
      }
      else
      {
        HIDWORD(v12) = a2[1];
        LODWORD(v12) = v3;
      }
      std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(
        (void *)v12,
        (_BYTE *)HIDWORD(v12),
        v5);
    }
    else
    {
      if ( v7 )
      {
        if ( v7 > 0x3FFFFFFF )
          std::__throw_bad_alloc();
        v7 = operator new(v4 - *a2);
      }
      v9 = v7;
      std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<unsigned long>(v3, v4, (char *)v7);
      if ( *v2 )
        operator delete(*v2);
      *v2 = (char *)v9;
      v2[2] = (char *)(v9 + v6);
    }
    v2[1] = &(*v2)[v6];
  }
  return v2;
}

//----- (00002DF0) --------------------------------------------------------
int __fastcall CTRPluginFramework::ARCode::operator=(int a1, _BYTE *a2)
{
  int v2; // r4
  _BYTE *v3; // r5
  char **v4; // r0
  char v5; // r3
  char **v6; // r1

  v2 = a1;
  v3 = a2;
  v4 = (char **)(a1 + 12);
  *((_BYTE *)v4 - 12) = *a2;
  v5 = a2[1];
  v6 = (char **)(a2 + 12);
  *((_BYTE *)v4 - 11) = v5;
  *(v4 - 2) = *(v6 - 2);
  *(v4 - 1) = *(v6 - 1);
  std::vector<unsigned long,std::allocator<unsigned long>>::operator=(v4, v6);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v2 + 24, v3 + 24);
  return v2;
}
// 4450: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);

//----- (00002E3C) --------------------------------------------------------
int *__fastcall CTRPluginFramework::ARCodeEditor::CodeLine::operator=(int *a1, _BYTE **a2)
{
  _BYTE **v2; // r5
  int *v3; // r4
  int *result; // r0
  __int16 v5; // r3

  v2 = a2;
  v3 = a1;
  CTRPluginFramework::ARCode::operator=(*a1, *a2);
  result = v3;
  v3[1] = (int)v2[1];
  v5 = *((_WORD *)v2 + 4);
  *((_WORD *)v3 + 4) = v5;
  *((_WORD *)v3 + 5) = *((_WORD *)v2 + 5);
  *((_WORD *)v3 + 4) = v5 | 8;
  return result;
}

//----- (00002E7C) --------------------------------------------------------
int __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_insert_rval(int a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3)
{
  const CTRPluginFramework::ARCode *v3; // r3
  _DWORD *v4; // r4
  int v5; // r7
  int v6; // r9
  const CTRPluginFramework::ARCode *v7; // r8
  int v9; // r5
  int v10; // r3
  _BYTE *v11; // r5
  int i; // r6
  int v13; // r0

  v3 = *(const CTRPluginFramework::ARCode **)(a1 + 4);
  v4 = (_DWORD *)a1;
  v5 = (int)a2 - *(_DWORD *)a1;
  if ( v3 == *(const CTRPluginFramework::ARCode **)(a1 + 8) )
  {
    std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode>(
      (CTRPluginFramework::ARCode **)a1,
      a2,
      a3);
  }
  else
  {
    v6 = (int)a2;
    v7 = a3;
    if ( v3 == a2 )
    {
      CTRPluginFramework::ARCode::ARCode(*(CTRPluginFramework::ARCode **)(a1 + 4), a3);
      v4[1] += 48;
    }
    else
    {
      CTRPluginFramework::ARCode::ARCode(
        *(CTRPluginFramework::ARCode **)(a1 + 4),
        (const CTRPluginFramework::ARCode *)((char *)v3 - 48));
      v9 = v4[1];
      v10 = v9 + 48;
      v11 = (_BYTE *)(v9 - 48);
      v4[1] = v10;
      for ( i = -1431655765 * ((signed int)&v11[-v6] >> 4); i > 0; --i )
      {
        v13 = (int)v11;
        v11 -= 48;
        CTRPluginFramework::ARCode::operator=(v13, v11);
      }
      CTRPluginFramework::ARCode::operator=(v6, v7);
    }
  }
  return *v4 + v5;
}
// 4418: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (00002F34) --------------------------------------------------------
void __fastcall CTRPluginFramework::ARCodeEditor::_ProcessEvent(CTRPluginFramework::ARCodeEditor *this, Event *a2)
{
  int v2; // r7
  CTRPluginFramework::ARCodeEditor *v3; // r4
  Event *v4; // r6
  signed int v5; // r3
  Time v6; // r1
  signed int v7; // r3
  int v8; // r2
  unsigned int v9; // r5
  int v10; // r5
  int v11; // r7
  int v12; // r7
  int v13; // r0
  int v14; // r3
  int v15; // r5
  int v16; // r8
  int v17; // r1
  int v18; // r2
  int v19; // r5
  int v20; // r3
  const CTRPluginFramework::ARCode *v21; // r1
  const CTRPluginFramework::ARCode *v22; // r7
  int v23; // r1
  int v24; // r2
  const CTRPluginFramework::ARCode *v25; // r1
  CTRPluginFramework::ARCode *v26; // r0
  int v27; // r3
  int v28; // r7
  int v29; // r5
  void *v30; // r8
  CTRPluginFramework::ARCode *v31; // r8
  void *v32; // r5
  int v33; // r3
  int v34; // r2
  int v35; // r3
  int v36; // r3
  int v37; // r3
  __int64 v38; // [sp+8h] [bp-88h]
  char v39; // [sp+14h] [bp-7Ch]
  char v40; // [sp+18h] [bp-78h]
  char v41; // [sp+30h] [bp-60h]
  char v42; // [sp+48h] [bp-48h]

  v2 = LOBYTE(a2->modifiers);
  v3 = this;
  v4 = a2;
  if ( !LOBYTE(a2->modifiers) )
  {
    v5 = a2->modifierMask;
    if ( v5 == 512 )
    {
      v17 = *((_DWORD *)this + 132);
      v18 = *((_DWORD *)this + 7);
      v19 = v18 + 12;
      if ( *((_DWORD *)this + 133) == v17 )
      {
        *((_DWORD *)this + 1) = v2;
LABEL_30:
        v25 = (const CTRPluginFramework::ARCode *)*((_DWORD *)this + 6);
        if ( !v25 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v41,
            "00000000 00000000");
          CTRPluginFramework::ARCode::ARCode(&v42, &v41, &v40);
          std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(
            v19,
            (const CTRPluginFramework::ARCode *)&v42);
LABEL_32:
          CTRPluginFramework::ARCode::~ARCode((CTRPluginFramework::ARCode *)&v42);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v41);
LABEL_33:
          CTRPluginFramework::ARCodeEditor::_ReloadCodeLines(v3);
          goto LABEL_7;
        }
        CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)&v42, v25);
        std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::emplace_back<CTRPluginFramework::ARCode>(
          v19,
          (const CTRPluginFramework::ARCode *)&v42);
        goto LABEL_35;
      }
      v20 = v17 + 60 * *((_DWORD *)this + 1);
      if ( *(_WORD *)(v20 + 8) & 0x30 )
        goto LABEL_7;
      v21 = (const CTRPluginFramework::ARCode *)*((_DWORD *)this + 6);
      v22 = (const CTRPluginFramework::ARCode *)(*(_DWORD *)(v18 + 12) + 48 * *(unsigned __int16 *)(v20 + 10));
      if ( !v21 )
      {
LABEL_39:
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
          (int *)&v41,
          "00000000 00000000");
        CTRPluginFramework::ARCode::ARCode(&v42, &v41, &v40);
        std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_insert_rval(
          v19,
          v22,
          (const CTRPluginFramework::ARCode *)&v42);
        goto LABEL_32;
      }
LABEL_28:
      CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)&v42, v21);
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_insert_rval(
        v19,
        v22,
        (const CTRPluginFramework::ARCode *)&v42);
LABEL_35:
      v26 = (CTRPluginFramework::ARCode *)&v42;
LABEL_36:
      CTRPluginFramework::ARCode::~ARCode(v26);
      goto LABEL_33;
    }
    if ( v5 <= 512 )
    {
      if ( v5 == 2 )
      {
        *(_BYTE *)this = 1;
        goto LABEL_7;
      }
      if ( v5 != 256 )
        goto LABEL_7;
      v23 = *((_DWORD *)this + 132);
      v24 = *((_DWORD *)this + 7);
      v19 = v24 + 12;
      if ( *((_DWORD *)this + 133) == v23 )
        goto LABEL_30;
      v27 = v23 + 60 * *((_DWORD *)this + 1);
      if ( *(_WORD *)(v27 + 8) & 0x30 )
        goto LABEL_7;
      v21 = (const CTRPluginFramework::ARCode *)*((_DWORD *)this + 6);
      v22 = (const CTRPluginFramework::ARCode *)(*(_DWORD *)(v24 + 12) + 48 * *(unsigned __int16 *)(v27 + 10) + 48);
      if ( !v21 )
        goto LABEL_39;
      goto LABEL_28;
    }
    switch ( v5 )
    {
      case 0x4000:
        v28 = *((_DWORD *)this + 132);
        if ( v28 != *((_DWORD *)this + 133) )
        {
          if ( *((_DWORD *)this + 7) )
          {
            v29 = 60 * *((_DWORD *)this + 1);
            if ( !(*(_WORD *)(v28 + v29 + 8) & 0x30) )
            {
              v30 = (void *)*((_DWORD *)this + 6);
              if ( v30 )
              {
                CTRPluginFramework::ARCode::~ARCode(*((CTRPluginFramework::ARCode **)this + 6));
                operator delete(v30);
              }
              v31 = (CTRPluginFramework::ARCode *)operator new(0x30u);
              CTRPluginFramework::ARCode::ARCode(v31, *(const CTRPluginFramework::ARCode **)(v28 + v29));
              *((_DWORD *)v3 + 6) = v31;
            }
          }
        }
        break;
      case 0x8000:
        v32 = (void *)*((_DWORD *)this + 6);
        if ( v32 )
        {
          CTRPluginFramework::ARCode::~ARCode(*((CTRPluginFramework::ARCode **)this + 6));
          operator delete(v32);
          *((_DWORD *)v3 + 6) = v2;
        }
        break;
      case 0x800:
        v8 = *((_DWORD *)this + 132);
        v9 = *((_DWORD *)this + 1);
        if ( v9 < -286331153 * ((*((_DWORD *)this + 133) - v8) >> 2) )
        {
          v10 = v8 + 60 * v9;
          if ( !(*(_WORD *)(v10 + 8) & 0x30) )
          {
            CTRPluginFramework::Color::operator std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>(
              (int *)&v40,
              (unsigned __int8 *)&CTRPluginFramework::Color::Orange);
            CTRPluginFramework::operator<<(&v41, &v40, "Warning");
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
              (int *)&v42,
              "Do you really want to delete this line ?");
            CTRPluginFramework::MessageBox::MessageBox(&v39, &v41, &v42, 2, 0);
            v11 = CTRPluginFramework::MessageBox::operator()(&v39);
            CTRPluginFramework::MessageBox::~MessageBox((CTRPluginFramework::MessageBox *)&v39);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v42);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v41);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v40);
            if ( v11 )
            {
              v12 = *((_DWORD *)v3 + 7);
              v13 = *(_DWORD *)(v12 + 12) + 48 * *(unsigned __int16 *)(v10 + 10);
              v14 = *(_DWORD *)(v12 + 16);
              if ( v13 + 48 != v14 )
              {
                v15 = -1431655765 * ((v14 - (v13 + 48)) >> 4);
                while ( 1 )
                {
                  v16 = v13 + 48;
                  if ( v15 <= 0 )
                    break;
                  CTRPluginFramework::ARCode::operator=(v13, (_BYTE *)(v13 + 48));
                  --v15;
                  v13 = v16;
                }
              }
              v26 = (CTRPluginFramework::ARCode *)(*(_DWORD *)(v12 + 16) - 48);
              *(_DWORD *)(v12 + 16) = v26;
              goto LABEL_36;
            }
          }
        }
        break;
    }
  }
LABEL_7:
  if ( LOBYTE(v4->modifiers) == 1 )
  {
    CTRPluginFramework::Milliseconds((CTRPluginFramework *)&v38, 150);
    if ( CTRPluginFramework::Clock::HasTimePassed((CTRPluginFramework::ARCodeEditor *)((char *)v3 + 16), v6) )
    {
      v7 = v4->modifierMask;
      if ( v7 == 32 )
      {
        v35 = *((_DWORD *)v3 + 2);
        if ( v35 == 9 )
          v36 = 7;
        else
          v36 = (v35 - 1) & ~((v35 - 1) >> 31);
      }
      else
      {
        if ( v7 > 32 )
        {
          if ( v7 == 64 )
          {
            *((_DWORD *)v3 + 1) = (*((_DWORD *)v3 + 1) - 1) & ~((*((_DWORD *)v3 + 1) - 1) >> 31);
          }
          else if ( v7 == 128 )
          {
            v33 = ~(286331153 * ((*((_DWORD *)v3 + 133) - *((_DWORD *)v3 + 132)) >> 2));
            v34 = *((_DWORD *)v3 + 1) + 1;
            if ( v33 > v34 )
              *((_DWORD *)v3 + 1) = v34;
            else
              *((_DWORD *)v3 + 1) = v33;
          }
          goto LABEL_12;
        }
        if ( v7 != 16 )
        {
LABEL_12:
          CTRPluginFramework::Clock::Restart((CTRPluginFramework::Clock *)&v38);
          return;
        }
        v37 = *((_DWORD *)v3 + 2);
        if ( v37 == 7 )
        {
          v36 = 9;
        }
        else
        {
          v36 = v37 + 1;
          if ( v36 >= 16 )
            v36 = 16;
        }
      }
      *((_DWORD *)v3 + 2) = v36;
      goto LABEL_12;
    }
  }
}
// 4358: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 4418: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);
// 442C: using guessed type int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD, _DWORD);
// 4440: using guessed type int __fastcall CTRPluginFramework::operator<<(_DWORD, _DWORD, _DWORD);
// 4444: using guessed type int __fastcall CTRPluginFramework::MessageBox::MessageBox(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 4448: using guessed type int __fastcall CTRPluginFramework::MessageBox::operator()(_DWORD);

//----- (000033A8) --------------------------------------------------------
#error "36AC: call analysis failed (funcsize=284)"

//----- (00003874) --------------------------------------------------------
void __fastcall CTRPluginFramework::ARCodeEditor::Edit(int a1)
{
  int v1; // r4
  TMLongCard v2; // r3
  TMLongCard v3; // r3
  TMLongCard v4; // r1
  LateBindingsPtr v5; // r2
  int v6; // r6
  bool v7; // r1
  Event v8; // [sp+4h] [bp-64h]

  v1 = CTRPluginFramework::__arCodeEditor;
  if ( CTRPluginFramework::__arCodeEditor )
  {
    *(_DWORD *)(CTRPluginFramework::__arCodeEditor + 28) = a1;
    *(_BYTE *)v1 = 0;
    *(_DWORD *)(v1 + 4) = 0;
    *(_DWORD *)(v1 + 8) = 0;
    std::vector<CTRPluginFramework::ARCodeEditor::CodeLine,std::allocator<CTRPluginFramework::ARCodeEditor::CodeLine>>::clear((_QWORD *)(v1 + 528));
    CTRPluginFramework::ARCodeEditor::_ReloadCodeLines((CTRPluginFramework::ARCodeEditor *)v1);
    v8.eventType = 0;
    v8.eventCode = 0;
    v8.eventCodeMask = 0;
    CTRPluginFramework::EventManager::EventManager((CTRPluginFramework::EventManager *)&v8.matchEvent);
    do
    {
      v2 = v8.eventType;
      if ( v8.eventType == v8.eventCode )
        goto LABEL_5;
LABEL_4:
      v8.eventCode = v2;
LABEL_5:
      while ( CTRPluginFramework::EventManager::PollEvent((CTRPluginFramework::EventManager *)&v8.matchEvent, &v8) )
      {
        v3 = v8.eventCode;
        if ( v8.eventCode != v8.eventCodeMask )
        {
          v4 = v8.modifierMask;
          v5 = v8.lateModifiers;
          *(_DWORD *)v8.eventCode = v8.modifiers;
          *(_DWORD *)(v3 + 4) = v4;
          *(_DWORD *)(v3 + 8) = v5;
          v2 = v8.eventCode + 12;
          goto LABEL_4;
        }
        std::vector<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::_M_realloc_insert<CTRPluginFramework::Event const&>(
          &v8.eventType,
          (_BYTE *)v8.eventCode,
          &v8);
      }
      v6 = CTRPluginFramework::ARCodeEditor::operator()(v1, &v8.eventType);
      CTRPluginFramework::Renderer::EndFrame(0, v7);
    }
    while ( !v6 );
    std::_Deque_base<CTRPluginFramework::Event,std::allocator<CTRPluginFramework::Event>>::~_Deque_base((void **)&v8.matchEvent);
    if ( v8.eventType )
      operator delete((void *)v8.eventType);
  }
}
// 8: using guessed type int CTRPluginFramework::__arCodeEditor;
// 33A8: using guessed type int __fastcall CTRPluginFramework::ARCodeEditor::operator()(_DWORD, _DWORD);

#error "There were 1 decompilation failure(s) on 37 function(s)"
