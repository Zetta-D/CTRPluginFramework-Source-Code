/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

unsigned int __fastcall std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Hook *,CTRPluginFramework::Hook *,std::allocator<CTRPluginFramework::Hook>>(int a1, int a2, int a3);
int __fastcall CTRPluginFramework::ActionReplay_IsValidAddress(CTRPluginFramework *this, unsigned int a2, int a3);
signed int __fastcall CTRPluginFramework::Write32(CTRPluginFramework *this, unsigned int a2, unsigned int a3);
signed int __fastcall CTRPluginFramework::Write16(CTRPluginFramework *this, unsigned int a2, int a3);
signed int __fastcall CTRPluginFramework::Write8(CTRPluginFramework *this, unsigned int a2, int a3);
signed int __fastcall CTRPluginFramework::Read32(CTRPluginFramework *this, unsigned int a2, unsigned int *a3);
signed int __fastcall CTRPluginFramework::Read16(CTRPluginFramework *this, unsigned int a2, unsigned __int16 *a3);
signed int __fastcall CTRPluginFramework::Read8(CTRPluginFramework *this, unsigned int a2, unsigned __int8 *a3);
void __fastcall std::vector<CTRPluginFramework::Hook,std::allocator<CTRPluginFramework::Hook>>::_M_realloc_insert<CTRPluginFramework::Hook const&>(int *a1, int a2, int *a3);
void __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(int a1, int a2);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode const&>(int *a1, char *a2, int a3);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear(int *a1);
signed int __fastcall CTRPluginFramework::ARHandler::_Execute(int *a1);
signed int __fastcall CTRPluginFramework::ARHandler::Execute(_DWORD *a1);
void GLOBAL__sub_I__ZN18CTRPluginFramework9ARHandler6OffsetE();
// _DWORD __cdecl CTRPluginFramework::Process::CheckAddress(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned int); weak
// void __cdecl operator delete(void *); idb
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::Touch::GetPosition(CTRPluginFramework::Touch *__hidden this); idb
// _DWORD CTRPluginFramework::Touch::IsDown(CTRPluginFramework::Touch *__hidden this); idb
// int __fastcall AR__ExecuteRoutine(_DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Process::CopyMemory(CTRPluginFramework::Process *__hidden this, void *, const void *, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::Utils::Random(CTRPluginFramework::Utils *__hidden this, unsigned int, unsigned int); idb
// _DWORD __cdecl CTRPluginFramework::AlmostEqualRelative(CTRPluginFramework *__hidden this, float, float, float); idb
// _DWORD __cdecl CTRPluginFramework::Controller::IsKeysDown(CTRPluginFramework::Controller *__hidden this, unsigned int); idb
// _DWORD CTRPluginFramework::Hook::Disable(CTRPluginFramework::Hook *__hidden this); idb
// _DWORD CTRPluginFramework::Hook::Hook(CTRPluginFramework::Hook *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Hook::Initialize(CTRPluginFramework::Hook *__hidden this, unsigned int, unsigned int, unsigned int); idb
// _DWORD CTRPluginFramework::Hook::Enable(CTRPluginFramework::Hook *__hidden this); idb
// void *memset(void *s, int c, size_t n);
// _DWORD __cdecl CTRPluginFramework::Process::CheckRegion(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned int *, unsigned int); idb
// int __fastcall svcQueryMemory(_DWORD, _DWORD, _DWORD); weak
// int memcmp(const void *s1, const void *s2, size_t n);

//-------------------------------------------------------------------------
// Data declarations

int CTRPluginFramework::ARHandler::ActiveData[]; // weak
char CTRPluginFramework::ARHandler::ExitCodeImmediately; // weak
int CTRPluginFramework::ARHandler::Offset[]; // weak
int dword_14; // weak
int CTRPluginFramework::ARHandler::ActiveOffset; // weak
char CTRPluginFramework::ARHandler::Data[]; // weak
int dword_20; // weak
char byte_24; // weak
int dword_28; // weak
int CTRPluginFramework::ARHandler::Storage; // weak
int dword_30; // weak
int CTRPluginFramework::ARHandler::ActiveStorage; // weak
char CTRPluginFramework::ToggleFloat; // weak
int CTRPluginFramework::g_context; // weak
_UNKNOWN CTRPluginFramework::arStack; // weak


//----- (00000FE0) --------------------------------------------------------
unsigned int __fastcall std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Hook *,CTRPluginFramework::Hook *,std::allocator<CTRPluginFramework::Hook>>(int a1, int a2, int a3)
{
  int v3; // r7
  int v4; // r4
  int v5; // r5
  int v6; // r6
  int *v7; // r12
  int v8; // r0
  _DWORD *v9; // r12
  int v10; // r1
  int v11; // r2
  int v12; // r3
  _DWORD *v13; // lr
  _DWORD *v14; // lr
  int v15; // r1

  v3 = a1;
  v4 = a2;
  v5 = a3;
  v6 = 0;
  while ( 1 )
  {
    v7 = (int *)(v3 + v6);
    if ( v4 == v3 + v6 )
      break;
    v8 = *v7;
    v10 = v7[1];
    v11 = v7[2];
    v12 = v7[3];
    v9 = v7 + 4;
    v13 = (_DWORD *)(v5 + v6);
    *v13 = v8;
    v13[1] = v10;
    v13[2] = v11;
    v13[3] = v12;
    v14 = (_DWORD *)(v5 + v6 + 16);
    v6 += 24;
    v15 = v9[1];
    *v14 = *v9;
    v14[1] = v15;
  }
  return v5 + 24 * (178956971 * ((unsigned int)(v4 - v3) >> 3) & 0x1FFFFFFF);
}

//----- (00001040) --------------------------------------------------------
int __fastcall CTRPluginFramework::ActionReplay_IsValidAddress(CTRPluginFramework *this, unsigned int a2, int a3)
{
  return CTRPluginFramework::Process::CheckAddress(this, a2 + 1, a3);
}
// 32D4: using guessed type _DWORD __cdecl CTRPluginFramework::Process::CheckAddress(CTRPluginFramework::Process *__hidden this, unsigned int, unsigned int);

//----- (00001048) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Write32(CTRPluginFramework *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3; // r5
  CTRPluginFramework *v4; // r4

  v3 = a2;
  v4 = this;
  if ( CTRPluginFramework::ActionReplay_IsValidAddress(this, 1u, a3) )
    *(_DWORD *)v4 = v3;
  return 1;
}

//----- (0000106C) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Write16(CTRPluginFramework *this, unsigned int a2, int a3)
{
  __int16 v3; // r5
  CTRPluginFramework *v4; // r4

  v3 = a2;
  v4 = this;
  if ( CTRPluginFramework::ActionReplay_IsValidAddress(this, 1u, a3) )
    *(_WORD *)v4 = v3;
  return 1;
}

//----- (00001090) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Write8(CTRPluginFramework *this, unsigned int a2, int a3)
{
  char v3; // r5
  CTRPluginFramework *v4; // r4

  v3 = a2;
  v4 = this;
  if ( CTRPluginFramework::ActionReplay_IsValidAddress(this, 1u, a3) )
    *(_BYTE *)v4 = v3;
  return 1;
}

//----- (000010B4) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Read32(CTRPluginFramework *this, unsigned int a2, unsigned int *a3)
{
  _DWORD *v3; // r4
  CTRPluginFramework *v4; // r5
  int v5; // r0
  int v6; // r3
  bool v7; // zf
  signed int result; // r0

  v3 = (_DWORD *)a2;
  v4 = this;
  v5 = CTRPluginFramework::ActionReplay_IsValidAddress(this, 0, (int)a3);
  v7 = v5 == 0;
  if ( v5 )
    v6 = *(_DWORD *)v4;
  result = 1;
  if ( !v7 )
    *v3 = v6;
  return result;
}

//----- (000010DC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Read16(CTRPluginFramework *this, unsigned int a2, unsigned __int16 *a3)
{
  _WORD *v3; // r4
  CTRPluginFramework *v4; // r5
  int v5; // r0
  __int16 v6; // r3
  bool v7; // zf
  signed int result; // r0

  v3 = (_WORD *)a2;
  v4 = this;
  v5 = CTRPluginFramework::ActionReplay_IsValidAddress(this, 0, (int)a3);
  v7 = v5 == 0;
  if ( v5 )
    v6 = *(_WORD *)v4;
  result = 1;
  if ( !v7 )
    *v3 = v6;
  return result;
}

//----- (00001104) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::Read8(CTRPluginFramework *this, unsigned int a2, unsigned __int8 *a3)
{
  _BYTE *v3; // r4
  CTRPluginFramework *v4; // r5
  int v5; // r0
  char v6; // r3
  bool v7; // zf
  signed int result; // r0

  v3 = (_BYTE *)a2;
  v4 = this;
  v5 = CTRPluginFramework::ActionReplay_IsValidAddress(this, 0, (int)a3);
  v7 = v5 == 0;
  if ( v5 )
    v6 = *(_BYTE *)v4;
  result = 1;
  if ( !v7 )
    *v3 = v6;
  return result;
}

//----- (0000112C) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::Hook,std::allocator<CTRPluginFramework::Hook>>::_M_realloc_insert<CTRPluginFramework::Hook const&>(int *a1, int a2, int *a3)
{
  void *v3; // r5
  int v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int *v9; // r6
  int v10; // r7
  int *v11; // r9
  int v12; // r11
  int v13; // r10
  int v14; // r0
  _DWORD *v15; // r9
  int v16; // r1
  int v17; // r2
  int v18; // r3
  _DWORD *v19; // r12
  _DWORD *v20; // r12
  int v21; // r1
  unsigned int v22; // r0
  unsigned int v23; // r7

  v3 = (void *)*a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 3);
  if ( -1431655765 * ((v4 - *a1) >> 3) )
    v6 = -1431655765 * ((v4 - *a1) >> 3);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - (_DWORD)v3;
  if ( v7 || v8 > 0xAAAAAAA )
  {
    v8 = 178956970;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = operator new(24 * v8);
LABEL_8:
  v14 = *v11;
  v16 = v11[1];
  v17 = v11[2];
  v18 = v11[3];
  v15 = v11 + 4;
  v19 = (_DWORD *)(v13 + v12);
  *v19 = v14;
  v19[1] = v16;
  v19[2] = v17;
  v19[3] = v18;
  v20 = (_DWORD *)(v13 + v12 + 16);
  v21 = v15[1];
  *v20 = *v15;
  v20[1] = v21;
  v22 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Hook *,CTRPluginFramework::Hook *,std::allocator<CTRPluginFramework::Hook>>(
          (int)v3,
          v10,
          v13);
  v23 = std::__uninitialized_move_if_noexcept_a<CTRPluginFramework::Hook *,CTRPluginFramework::Hook *,std::allocator<CTRPluginFramework::Hook>>(
          v10,
          v4,
          v22 + 24);
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v23;
  v9[2] = v13 + 24 * v8;
}

//----- (000011FC) --------------------------------------------------------
void __fastcall std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(int a1, int a2)
{
  int v2; // r4
  int v3; // r5
  void *v4; // r0

  v2 = a1;
  v3 = a2;
  while ( v2 != v3 )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v2 + 24);
    v4 = *(void **)(v2 + 12);
    if ( v4 )
      operator delete(v4);
    v2 += 48;
  }
}
// 32E0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (00001230) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode const&>(int *a1, char *a2, int a3)
{
  char *v3; // r6
  int v4; // r8
  int v5; // r4
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r4
  int *v9; // r7
  char *v10; // r9
  int v11; // r11
  unsigned int v12; // r5
  int v13; // r10
  char *v14; // r11
  int v15; // r0
  int v16; // r3
  int v17; // r11
  int v18; // r5
  int v19; // r3
  int v20; // r9
  int v21; // ST04_4
  int v22; // ST04_4
  unsigned int v23; // r5

  v3 = (char *)*a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 4);
  if ( -1431655765 * ((v4 - *a1) >> 4) )
    v6 = -1431655765 * ((v4 - *a1) >> 4);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x5555555 )
  {
    v8 = 89478485;
    goto LABEL_18;
  }
  if ( v8 )
  {
LABEL_18:
    v13 = operator new(48 * v8);
    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:
  CTRPluginFramework::ARCode::ARCode(v13 + v12, v11);
  v14 = v3;
  v15 = v13;
  while ( v10 != v14 )
  {
    v22 = v15 + 48;
    CTRPluginFramework::ARCode::ARCode(v15, v14);
    v14 += 48;
    v15 = v22;
  }
  v16 = 178956971 * (v12 >> 4) & 0xFFFFFFF;
  v17 = v13 + 48 * v16 + 48;
  v18 = (int)&v3[48 * v16];
  v19 = v13 + 48 * v16 + 48;
  v20 = v18;
  while ( v20 != v4 )
  {
    v21 = v19;
    CTRPluginFramework::ARCode::ARCode(v19, v20);
    v20 += 48;
    v19 = v21 + 48;
  }
  v23 = v17 + 48 * (178956971 * ((unsigned int)(v20 - v18) >> 4) & 0xFFFFFFF);
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>((int)v3, v20);
  if ( v3 )
    operator delete(v3);
  *v9 = v13;
  v9[1] = v23;
  v9[2] = v13 + 48 * v8;
}
// 32E4: using guessed type int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD);

//----- (00001384) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear(int *a1)
{
  int v1; // r5
  int v2; // r1
  int *v3; // r4

  v1 = *a1;
  v2 = a1[1];
  if ( *a1 != v2 )
  {
    v3 = a1;
    std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>(*a1, v2);
    v3[1] = v1;
  }
}

//----- (000013AC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::ARHandler::_Execute(int *a1)
{
  float v1; // s15
  int v2; // r11
  int v3; // r10
  unsigned int v4; // r4
  signed int v5; // r2
  int v6; // r7
  signed int v7; // r8
  int v8; // r9
  unsigned int v9; // r3
  int v10; // r4
  int *v11; // r9
  int v12; // r6
  unsigned __int8 v13; // r0
  __int16 v14; // r4
  unsigned int v15; // r3
  int v16; // r4
  __int16 v17; // r4
  int v18; // r3
  int v19; // r4
  int v21; // r0
  int v22; // r3
  int v23; // r6
  int v24; // r3
  unsigned int v25; // r1
  char v26; // r0
  int *v27; // r3
  int v28; // r2
  int v29; // r3
  int v30; // r2
  _DWORD *v31; // ST08_4
  CTRPluginFramework::Touch *v32; // r0
  unsigned int v33; // r3
  unsigned int v34; // r4
  _BOOL4 v35; // r6
  bool v36; // cf
  bool v37; // zf
  int v38; // r3
  float v39; // r6
  unsigned __int8 v40; // r0
  float *v41; // r6
  float *v42; // r6
  int *v43; // r3
  float *v44; // r6
  float *v45; // r6
  int *v46; // r3
  CTRPluginFramework *v47; // r0
  float v48; // r1
  float v49; // r2
  int v50; // s1
  int *v51; // r9
  float v52; // r2
  int *v53; // r3
  float v54; // s0
  float v55; // r3
  CTRPluginFramework *v56; // r0
  float v57; // r1
  float v58; // r2
  int v59; // s1
  float *v60; // r6
  float *v61; // r6
  int *v62; // r3
  float v63; // s0
  float v64; // r3
  int v65; // r0
  int v66; // r4
  __int16 v67; // r4
  unsigned int v68; // r3
  int v69; // r4
  int v70; // r0
  int v71; // r4
  __int16 v72; // r4
  int v73; // r3
  int v74; // r4
  int v75; // r0
  int v76; // r4
  int *v77; // r3
  int v78; // r4
  int v79; // r0
  int v80; // r4
  char *v81; // r6
  int *v82; // r3
  float v83; // r1
  int v84; // r3
  int v85; // r12
  float v86; // r3
  float v87; // r3
  int v88; // r3
  char v89; // r0
  int *v90; // r3
  int v91; // r2
  int *v92; // r3
  bool v93; // zf
  unsigned int v94; // r1
  char v95; // r0
  int *v96; // r3
  int v97; // r2
  int v98; // r3
  int v99; // r3
  _DWORD *v100; // ST08_4
  int v101; // r0
  unsigned int v102; // r3
  float *v103; // r6
  float v104; // s15
  unsigned int v105; // r2
  CTRPluginFramework *v106; // r6
  CTRPluginFramework *v107; // r3
  int v108; // r9
  int v109; // r2
  CTRPluginFramework *v110; // r9
  int v111; // r4
  int v112; // r9
  _BYTE *v113; // r3
  char v114; // t1
  CTRPluginFramework *v115; // r0
  float v116; // r6
  unsigned int v117; // r2
  CTRPluginFramework *v118; // r0
  float v119; // r6
  unsigned int v120; // r2
  unsigned int v121; // r2
  float *v122; // r6
  float v123; // r3
  float v124; // r2
  bool v125; // zf
  float *v126; // r6
  float v127; // r0
  int *v128; // r4
  CTRPluginFramework::Hook *v129; // r0
  int v130; // r6
  int v131; // r12
  int v132; // lr
  int v133; // r12
  _DWORD *v134; // r6
  int v135; // r1
  int v136; // r2
  int v137; // r3
  _DWORD *v138; // r6
  int v139; // r1
  int v140; // r3
  int v141; // r1
  int **v142; // r12
  int *v143; // r1
  int *v144; // r2
  int *v145; // r3
  int *v146; // r1
  CTRPluginFramework::Process *v147; // r9
  __int64 v148; // r2
  unsigned int v149; // r2
  signed int v150; // r3
  char *v151; // r1
  int v152; // r1
  char *v153; // r0
  int v154; // r0
  unsigned int v155; // r6
  int v156; // t1
  float *v157; // r6
  float v158; // r3
  float *v159; // r2
  float *v160; // r6
  float v161; // r3
  float *v162; // r2
  char *v163; // r6
  float *v164; // r3
  char *v165; // r6
  float *v166; // r3
  int v167; // [sp+0h] [bp-488h]
  int v168; // [sp+4h] [bp-484h]
  char *s1; // [sp+8h] [bp-480h]
  char *s1a; // [sp+8h] [bp-480h]
  int n; // [sp+Ch] [bp-47Ch]
  int v172; // [sp+10h] [bp-478h]
  int v173; // [sp+14h] [bp-474h]
  int v174; // [sp+18h] [bp-470h]
  unsigned int v175; // [sp+20h] [bp-468h]
  unsigned __int16 v176; // [sp+2Eh] [bp-45Ah]
  float v177; // [sp+30h] [bp-458h]
  int v178; // [sp+34h] [bp-454h]
  int v179; // [sp+38h] [bp-450h]
  unsigned int v180; // [sp+3Ch] [bp-44Ch]
  unsigned int v181; // [sp+40h] [bp-448h]
  void *v182[2]; // [sp+44h] [bp-444h]
  void *v183; // [sp+4Ch] [bp-43Ch]
  __int64 s; // [sp+50h] [bp-438h]
  int v185; // [sp+60h] [bp-428h]
  int *v186; // [sp+64h] [bp-424h]
  int *v187; // [sp+68h] [bp-420h]
  int *v188; // [sp+6Ch] [bp-41Ch]
  int *v189; // [sp+70h] [bp-418h]
  int *v190; // [sp+74h] [bp-414h]
  int v191; // [sp+78h] [bp-410h]
  void *v192; // [sp+7Ch] [bp-40Ch]
  _DWORD v193[1]; // [sp+460h] [bp-28h]

  v173 = a1[1];
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = *a1;
  v177 = 0.0;
  v176 = 0;
  v182[0] = 0;
  v182[1] = 0;
  v183 = 0;
  v167 = 0;
  v168 = 0;
  while ( 1 )
  {
    if ( v173 == v6 )
    {
      v7 = 0;
      goto LABEL_74;
    }
    v7 = (unsigned __int8)CTRPluginFramework::ARHandler::ExitCodeImmediately;
    v8 = CTRPluginFramework::ARHandler::ActiveData[0];
    if ( CTRPluginFramework::ARHandler::ExitCodeImmediately )
      goto LABEL_74;
    v9 = *(unsigned __int8 *)(v6 + 1);
    if ( v9 == 210 )
      break;
    if ( v4 )
    {
      if ( v9 == 208 && !*(_DWORD *)(v6 + 8) )
        v4 = --v2 != 0;
LABEL_19:
      if ( v9 - 48 <= 0x70 )
        ++v2;
      v7 = v5;
      goto LABEL_14;
    }
    if ( !v5 )
      goto LABEL_554;
    if ( v9 != 209 || (--v168, v168) )
    {
LABEL_29:
      if ( v182[1] == v183 )
      {
        std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode const&>(
          (int *)v182,
          (char *)v182[1],
          v6);
        v4 = 0;
      }
      else
      {
        CTRPluginFramework::ARCode::ARCode(v182[1], v6);
        v4 = 0;
        v182[1] = (char *)v182[1] + 48;
      }
      v7 = 1;
      goto LABEL_14;
    }
    v12 = v167 - 1;
    do
    {
      v167 = v12;
      if ( v12 == -1 )
        break;
      --v12;
    }
    while ( !CTRPluginFramework::ARHandler::_Execute(v182) );
    std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear((int *)v182);
    v7 = 0;
LABEL_14:
    v6 += 48;
    v5 = v7;
  }
  if ( !*(_DWORD *)(v6 + 8) )
  {
    if ( v4 )
      v2 = 0;
    if ( v5 )
    {
      v10 = v167 - 1;
      do
      {
        v167 = v10;
        if ( v10 == -1 )
          break;
        --v10;
      }
      while ( !CTRPluginFramework::ARHandler::_Execute(v182) );
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear((int *)v182);
      v168 = 0;
    }
    v4 = 0;
    v11 = &CTRPluginFramework::ARHandler::ActiveData[2 * v8];
    CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2] = 0;
    *((_BYTE *)v11 + 20) = 0;
    v11[6] = 0;
    goto LABEL_14;
  }
  if ( v4 )
    goto LABEL_19;
  if ( v5 )
    goto LABEL_29;
LABEL_554:
  v25 = (unsigned int)CTRPluginFramework::ARHandler::Data;
  v23 = 8 * CTRPluginFramework::ARHandler::ActiveData[0];
  v30 = (int)&CTRPluginFramework::ARHandler::Data[8 * CTRPluginFramework::ARHandler::ActiveData[0]];
  if ( v9 == 217 )
  {
    v98 = *(_DWORD *)(v6 + 4);
    v4 = 0;
    if ( v98 )
      v30 = v98 - 1;
    if ( v98 )
      v30 &= 1u;
    if ( v98 )
      v30 = (int)&CTRPluginFramework::ARHandler::Data[8 * v30];
    CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Read32(
                                                           (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                + *(_DWORD *)(v6 + 8)),
                                                           v30 + 4,
                                                           (unsigned int *)v30) ^ 1;
    goto LABEL_14;
  }
  if ( v9 > 0xD9 )
  {
    if ( v9 == 244 )
    {
      v122 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
      v4 = *((unsigned __int8 *)v122 + 20);
      v123 = *(float *)(v6 + 8);
      v124 = v122[6];
      v125 = v4 == 0;
      if ( *((_BYTE *)v122 + 20) )
        v1 = v123 * v124;
      v177 = *(float *)(v6 + 8);
      if ( v4 )
      {
        v122[6] = v1;
        v4 = 0;
      }
      else
      {
        LODWORD(v123) *= LODWORD(v124);
      }
      if ( v125 )
      {
        v122[6] = v123;
        v7 = 0;
      }
    }
    else if ( v9 > 0xF4 )
    {
      if ( v9 == 250 )
      {
        v4 = 0;
        *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) <<= *(_DWORD *)(v6 + 8);
      }
      else if ( v9 > 0xFA )
      {
        if ( v9 == 253 )
        {
          v128 = *(int **)(CTRPluginFramework::g_context + 24);
          if ( *(_DWORD *)(v6 + 4) >> 20 == 1 )
          {
            if ( v128 )
            {
              v129 = (CTRPluginFramework::Hook *)*v128;
              v130 = 0;
              while ( v129 != (CTRPluginFramework::Hook *)v128[1] )
              {
                ++v130;
                if ( *((_DWORD *)v129 + 1) == *(_DWORD *)(v6 + 8) )
                {
                  CTRPluginFramework::Hook::Disable(v129);
                  v131 = v128[1];
                  v132 = *v128 + 24 * v130;
                  if ( v132 != v131 )
                  {
                    v133 = -1431655765 * ((v131 - v132) >> 3);
                    while ( 1 )
                    {
                      v132 += 24;
                      if ( v133 <= 0 )
                        break;
                      v134 = (_DWORD *)(v132 - 48);
                      v135 = *(_DWORD *)(v132 - 20);
                      v136 = *(_DWORD *)(v132 - 16);
                      v137 = *(_DWORD *)(v132 - 12);
                      *v134 = *(_DWORD *)(v132 - 24);
                      v134[1] = v135;
                      v134[2] = v136;
                      v134[3] = v137;
                      v138 = (_DWORD *)(v132 - 32);
                      --v133;
                      v139 = *(_DWORD *)(v132 - 4);
                      *v138 = *(_DWORD *)(v132 - 8);
                      v138[1] = v139;
                    }
                  }
                  v140 = v128[1] - 24;
                  goto LABEL_494;
                }
                v129 = (CTRPluginFramework::Hook *)((char *)v129 + 24);
              }
            }
          }
          else
          {
            if ( !v128 )
            {
              v128 = (int *)operator new(0xCu);
              *v128 = 0;
              v128[1] = 0;
              v128[2] = 0;
              *(_DWORD *)(CTRPluginFramework::g_context + 24) = v128;
            }
            CTRPluginFramework::Hook::Hook((CTRPluginFramework::Hook *)&v185);
            LOBYTE(v185) = (v185 & 0xFD | 2 * (((*(_DWORD *)(v6 + 4) >> 4) ^ 1) & 1)) & 0xFB | 4
                                                                                             * (~(unsigned __int8)*(_DWORD *)(v6 + 4) & 1);
            CTRPluginFramework::Hook::Initialize(
              (CTRPluginFramework::Hook *)&v185,
              CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2],
              *(_DWORD *)(v6 + 12),
              0);
            if ( !CTRPluginFramework::Hook::Enable((CTRPluginFramework::Hook *)&v185) )
            {
              v141 = v128[1];
              if ( v141 == v128[2] )
              {
                std::vector<CTRPluginFramework::Hook,std::allocator<CTRPluginFramework::Hook>>::_M_realloc_insert<CTRPluginFramework::Hook const&>(
                  v128,
                  v141,
                  &v185);
              }
              else
              {
                v142 = (int **)v128[1];
                v143 = v186;
                v144 = v187;
                v145 = v188;
                *v142 = (int *)v185;
                v142[1] = v143;
                v142[2] = v144;
                v142[3] = v145;
                v142 += 4;
                v146 = v190;
                *v142 = v189;
                v142[1] = v146;
                v140 = v128[1] + 24;
LABEL_494:
                v128[1] = v140;
              }
            }
          }
          v4 = 0;
        }
        else if ( v9 > 0xFD )
        {
          if ( v9 == 254 )
          {
            v147 = (CTRPluginFramework::Process *)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                                          + 2];
            v178 = 0;
            v179 = 0;
            memset(&s, 0, 0x10u);
            v148 = *(_QWORD *)(v6 + 12);
            if ( (_DWORD)v148 == HIDWORD(v148) )
            {
              v4 = 0;
            }
            else if ( *(_DWORD *)(v6 + 8) )
            {
              v4 = CTRPluginFramework::Process::CheckRegion(v147, (unsigned int)&v178, (unsigned int *)3, HIDWORD(v148));
              if ( v4 )
              {
                if ( svcQueryMemory(&s, &v179, v147) < 0 )
                  goto LABEL_525;
                v149 = *(_DWORD *)(v6 + 8);
                if ( HIDWORD(s) + (signed int)s - (signed int)v147 < v149 )
                  v149 = HIDWORD(s) + s - (_DWORD)v147;
                v150 = v149 == 0;
                if ( !v147 )
                  v150 = 1;
                if ( v150 || (s1a = *(char **)(v6 + 12), v151 = *(char **)(v6 + 16), s1a == v151) )
                {
LABEL_525:
                  ++v2;
                }
                else
                {
                  v152 = v151 - s1a;
                  v153 = (char *)&v185;
                  do
                  {
                    ++v150;
                    *(_DWORD *)v153 = v152;
                    v153 += 4;
                  }
                  while ( v150 != 256 );
                  v154 = (int)(s1a - 1);
                  v155 = v152 - 1;
                  n = v152 - 1;
                  while ( v155 )
                  {
                    v156 = *(unsigned __int8 *)(v154++ + 1);
                    v193[v156 - 256] = v155--;
                  }
                  v174 = (unsigned __int8)s1a[n];
                  v175 = v149 - v152;
                  while ( 1 )
                  {
                    v172 = *((unsigned __int8 *)v147 + n + v155);
                    if ( v172 == v174 && !memcmp(s1a, (char *)v147 + v155, n) )
                      break;
                    v155 += v193[v172 - 256];
                    if ( v175 < v155 )
                      goto LABEL_525;
                  }
                  v4 = 0;
                  CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2] = (int)v147 + v155;
                }
              }
            }
            else
            {
              v4 = 0;
            }
          }
          else
          {
            if ( v9 == 255 )
              *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) = CTRPluginFramework::Utils::Random(
                                                                                        (CTRPluginFramework::Utils *)*(_QWORD *)(v6 + 4),
                                                                                        *(_QWORD *)(v6 + 4) >> 32,
                                                                                        v30);
            v4 = 0;
          }
        }
        else if ( v9 == 251 )
        {
          v4 = 0;
          *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) = *(unsigned int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6]
                                                                                                  + v23) >> *(_DWORD *)(v6 + 8);
        }
        else if ( v9 == 252 )
        {
          if ( CTRPluginFramework::ARHandler::Offset[0] )
          {
            if ( dword_14 )
              CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Process::CopyMemory(
                                                                     (CTRPluginFramework::Process *)CTRPluginFramework::ARHandler::Offset[0],
                                                                     (void *)dword_14,
                                                                     *(const void **)(v6 + 8),
                                                                     0xFCu) ^ 1;
            v4 = 0;
          }
          else
          {
            v4 = 0;
          }
        }
        else
        {
          v4 = 0;
        }
      }
      else if ( v9 == 247 )
      {
        v4 = 0;
        *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) |= *(_DWORD *)(v6 + 8);
      }
      else if ( v9 > 0xF7 )
      {
        if ( v9 == 248 )
        {
          v4 = 0;
          *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) ^= *(_DWORD *)(v6 + 8);
        }
        else if ( v9 == 249 )
        {
          v4 = 0;
          *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) = ~*(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6]
                                                                                          + v23);
        }
        else
        {
          v4 = 0;
        }
      }
      else if ( v9 == 245 )
      {
        v177 = *(float *)(v6 + 8);
        if ( v177 == 0.0 )
        {
          v4 = 0;
        }
        else
        {
          v126 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
          v4 = *((unsigned __int8 *)v126 + 20);
          v127 = v126[6];
          if ( *((_BYTE *)v126 + 20) )
          {
            v1 = v127 / v177;
            v4 = 0;
            v126[6] = v127 / v177;
          }
          else
          {
            v7 = *((unsigned __int8 *)v126 + 20);
            *((_DWORD *)v126 + 6) = LODWORD(v127) / LODWORD(v177);
          }
        }
      }
      else if ( v9 == 246 )
      {
        v4 = 0;
        *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) &= *(_DWORD *)(v6 + 8);
      }
      else
      {
        v4 = 0;
      }
    }
    else if ( v9 == 223 )
    {
      v101 = *(_DWORD *)(v6 + 4);
      v102 = *(_DWORD *)(v6 + 8);
      if ( v101 == 16777214 )
      {
        v103 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
        *((_BYTE *)v103 + 20) = v102 & 1;
        if ( *(_DWORD *)(v6 + 8) & 0x10 )
        {
          v104 = v103[6];
          if ( v102 & 1 )
            v1 = (float)LODWORD(v104);
          else
            LODWORD(v1) = (unsigned int)v104;
          if ( v102 & 1 )
          {
            v103[6] = v1;
            v4 = 0;
          }
          else
          {
            v103[6] = v1;
            v4 = v102 & 1;
          }
        }
        else
        {
          v4 = 0;
        }
      }
      else if ( v101 == 0xFFFFFF )
      {
        v3 = *(_DWORD *)(v6 + 8) & 7;
        v4 = 0;
      }
      else
      {
        v105 = v102 >> 16;
        if ( v102 >> 16 == 1 )
        {
          if ( v101 )
          {
            if ( v101 == 1 )
            {
              CTRPluginFramework::ARHandler::ActiveData[2 * ((unsigned __int16)v102 == 0) + 6] = CTRPluginFramework::ARHandler::ActiveData[2 * (unsigned __int16)v102 + 6];
              v4 = 0;
            }
            else if ( v101 == 2 )
            {
              v4 = 0;
              CTRPluginFramework::ARHandler::ActiveData[2 * (unsigned __int16)v102 + 6] = CTRPluginFramework::ARHandler::ActiveData[(unsigned __int16)v102 + 9];
            }
            else
            {
              v4 = 0;
            }
          }
          else
          {
            CTRPluginFramework::ARHandler::ActiveData[((unsigned __int16)v102 == 0) + 2] = CTRPluginFramework::ARHandler::ActiveData[(unsigned __int16)v102 + 2];
            v4 = 0;
          }
        }
        else if ( v105 )
        {
          if ( v105 == 2 )
          {
            if ( v101 )
            {
              if ( v101 == 1 )
              {
                v4 = 0;
                CTRPluginFramework::ARHandler::ActiveData[(unsigned __int16)v102 + 2] = CTRPluginFramework::ARHandler::ActiveData[2 * (unsigned __int16)v102 + 6];
              }
              else if ( v101 == 2 )
              {
                v4 = 0;
                CTRPluginFramework::ARHandler::ActiveData[(unsigned __int16)v102 + 9] = CTRPluginFramework::ARHandler::ActiveData[2 * (unsigned __int16)v102 + 6];
              }
              else
              {
                v4 = 0;
              }
            }
            else
            {
              v4 = 0;
              CTRPluginFramework::ARHandler::ActiveData[2 * (unsigned __int16)v102 + 6] = CTRPluginFramework::ARHandler::ActiveData[(unsigned __int16)v102 + 2];
            }
          }
          else
          {
            v4 = 0;
          }
        }
        else if ( v101 )
        {
          if ( v101 == 1 )
          {
            CTRPluginFramework::ARHandler::ActiveData[0] = *(_DWORD *)(v6 + 8);
            v4 = 0;
          }
          else
          {
            if ( v101 == 2 )
              CTRPluginFramework::ARHandler::ActiveStorage = *(_DWORD *)(v6 + 8);
            v4 = 0;
          }
        }
        else
        {
          CTRPluginFramework::ARHandler::ActiveOffset = *(_DWORD *)(v6 + 8);
          v4 = 0;
        }
      }
    }
    else if ( v9 > 0xDF )
    {
      if ( v9 == 241 )
      {
        v4 = (unsigned __int8)CTRPluginFramework::ToggleFloat;
        v115 = (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                              + 2]
                                    + *(_DWORD *)(v6 + 4));
        if ( CTRPluginFramework::ToggleFloat )
        {
          v116 = *(float *)(v6 + 8);
          v177 = *(float *)(v6 + 8);
          v4 = CTRPluginFramework::Read32(v115, (unsigned int)&v177, (unsigned int *)v30);
          if ( v4 )
          {
            v1 = v177 + v116;
            v177 = v1;
            v4 = 0;
            CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                                   (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                        + *(_DWORD *)(v6 + 4)),
                                                                   LODWORD(v1),
                                                                   v117) ^ 1;
          }
          else
          {
            v7 = 0;
          }
        }
        else
        {
          v7 = CTRPluginFramework::Read32(v115, (unsigned int)&v177, (unsigned int *)v30);
          if ( v7 )
          {
            CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                                   (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                        + *(_DWORD *)(v6 + 4)),
                                                                   *(_DWORD *)(v6 + 8) + LODWORD(v177),
                                                                   *(_DWORD *)(v6 + 8)) ^ 1;
            v7 = v4;
          }
          else
          {
            v4 = 0;
          }
        }
      }
      else if ( v9 > 0xF1 )
      {
        if ( v9 == 242 )
        {
          v4 = (unsigned __int8)CTRPluginFramework::ToggleFloat;
          v118 = (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                                + 2]
                                      + *(_DWORD *)(v6 + 4));
          if ( CTRPluginFramework::ToggleFloat )
          {
            v119 = *(float *)(v6 + 8);
            v177 = *(float *)(v6 + 8);
            v4 = CTRPluginFramework::Read32(v118, (unsigned int)&v177, (unsigned int *)v30);
            if ( v4 )
            {
              v1 = v177 * v119;
              v177 = v1;
              v4 = 0;
              CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                                     (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                          + *(_DWORD *)(v6 + 4)),
                                                                     LODWORD(v1),
                                                                     v120) ^ 1;
            }
            else
            {
              v7 = 0;
            }
          }
          else
          {
            v7 = CTRPluginFramework::Read32(v118, (unsigned int)&v177, (unsigned int *)v30);
            if ( v7 )
            {
              CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                                     (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                          + *(_DWORD *)(v6 + 4)),
                                                                     LODWORD(v177) * *(_DWORD *)(v6 + 8),
                                                                     *(_DWORD *)(v6 + 8)) ^ 1;
              v7 = 0;
            }
            else
            {
              v4 = 0;
            }
          }
        }
        else if ( v9 == 243 )
        {
          v4 = (unsigned __int8)CTRPluginFramework::ToggleFloat;
          v39 = *(float *)(v6 + 8);
          if ( CTRPluginFramework::ToggleFloat )
          {
            if ( v39 == 0.0 )
            {
              v4 = 0;
            }
            else
            {
              v177 = *(float *)(v6 + 8);
              v4 = CTRPluginFramework::Read32(
                     (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                                    + 2]
                                          + *(_DWORD *)(v6 + 4)),
                     (unsigned int)&v177,
                     (unsigned int *)v30);
              if ( v4 )
              {
                v1 = v177 + v39;
                v177 = v1;
                v4 = 0;
                CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                                       (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                            + *(_DWORD *)(v6 + 4)),
                                                                       LODWORD(v1),
                                                                       v121) ^ 1;
              }
              else
              {
                v7 = 0;
              }
            }
          }
          else if ( v39 == 0.0 )
          {
            v7 = (unsigned __int8)CTRPluginFramework::ToggleFloat;
          }
          else
          {
            v7 = CTRPluginFramework::Read32(
                   (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                                  + 2]
                                        + *(_DWORD *)(v6 + 4)),
                   (unsigned int)&v177,
                   (unsigned int *)v30);
            if ( v7 )
            {
              v7 = v4;
              CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                                     (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                          + *(_DWORD *)(v6 + 4)),
                                                                     LODWORD(v177) / *(_DWORD *)(v6 + 8),
                                                                     CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]) ^ 1;
            }
            else
            {
              v4 = 0;
            }
          }
        }
        else
        {
          v4 = 0;
        }
      }
      else if ( v9 == 224 )
      {
        v106 = *(CTRPluginFramework **)(v6 + 12);
        if ( v106 )
        {
          v107 = *(CTRPluginFramework **)(v6 + 16);
          if ( v106 == v107 )
          {
            v4 = 0;
          }
          else
          {
            v4 = *(_DWORD *)(v6 + 8);
            if ( v4 )
            {
              if ( v4 <= v107 - v106 )
              {
                s1 = (char *)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2];
                v108 = *(_DWORD *)(v6 + 4);
                if ( CTRPluginFramework::ActionReplay_IsValidAddress(*(CTRPluginFramework **)(v6 + 12), 0, v30) )
                {
                  v110 = (CTRPluginFramework *)&s1[v108];
                  if ( CTRPluginFramework::ActionReplay_IsValidAddress(v110, 1u, v109) )
                  {
                    v111 = (int)v106 + v4;
                    v112 = v110 - v106;
                    while ( (CTRPluginFramework *)v111 != v106 )
                    {
                      v113 = (char *)v106 + v112;
                      v114 = *(_BYTE *)v106;
                      v106 = (CTRPluginFramework *)((char *)v106 + 1);
                      *v113 = v114;
                    }
                  }
                }
                CTRPluginFramework::ARHandler::ExitCodeImmediately = 0;
                v4 = 0;
              }
              else
              {
                v4 = 0;
              }
            }
          }
        }
        else
        {
          v4 = 0;
        }
      }
      else if ( v9 == 240 )
      {
        v38 = *(_DWORD *)(v6 + 4);
        if ( v38 == 1 )
        {
          v4 = 0;
          CTRPluginFramework::ToggleFloat = *(_BYTE *)(v6 + 8) & 1;
        }
        else if ( v38 == 15728640 )
        {
          v185 = (int)CTRPluginFramework::ARHandler::Offset;
          v186 = &dword_14;
          v187 = &dword_20;
          v188 = &dword_28;
          v189 = &CTRPluginFramework::ARHandler::Storage;
          v190 = &dword_30;
          v191 = 31985664;
          v192 = &CTRPluginFramework::arStack;
          if ( *(_DWORD *)(v6 + 12) )
            AR__ExecuteRoutine(&v185);
          v4 = 0;
        }
        else
        {
          v4 = 0;
        }
      }
      else
      {
        v4 = 0;
      }
    }
    else if ( v9 == 220 )
    {
      v4 = 0;
      CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2] += *(_DWORD *)(v6 + 8);
    }
    else if ( v9 > 0xDC )
    {
      if ( v9 == 221 )
      {
        if ( CTRPluginFramework::Controller::IsKeysDown(
               *(CTRPluginFramework::Controller **)(v6 + 8),
               (unsigned int)CTRPluginFramework::ARHandler::Data) )
        {
          v4 = 0;
        }
        else
        {
          ++v2;
          v7 = 0;
          v4 = 1;
        }
      }
      else if ( v9 == 222 )
      {
        CTRPluginFramework::Touch::GetPosition((CTRPluginFramework::Touch *)&v180);
        v32 = *(CTRPluginFramework::Touch **)(v6 + 4);
        v33 = *(_DWORD *)(v6 + 8);
        v34 = v33 >> 16;
        if ( v32 )
        {
          v35 = v181 >= v34;
          v36 = v181 >= (unsigned __int16)v33;
          v37 = v181 == (unsigned __int16)v33;
        }
        else
        {
          v35 = v180 >= v34;
          v36 = v180 >= (unsigned __int16)v33;
          v37 = v180 == (unsigned __int16)v33;
        }
        if ( !v37 && v36 )
          v35 = 0;
        if ( CTRPluginFramework::Touch::IsDown(v32) & v35 )
        {
          v4 = 0;
        }
        else
        {
          ++v2;
          v7 = 0;
          v4 = 1;
        }
      }
      else
      {
        v4 = 0;
      }
    }
    else if ( v9 == 218 )
    {
      v99 = *(_DWORD *)(v6 + 4);
      v4 = 0;
      if ( v99 )
        v30 = v99 - 1;
      if ( v99 )
        v30 &= 1u;
      if ( v99 )
        v30 = (int)&CTRPluginFramework::ARHandler::Data[8 * v30];
      v100 = (_DWORD *)v30;
      CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Read16(
                                                             (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                  + *(_DWORD *)(v6 + 8)),
                                                             (unsigned int)&v176,
                                                             (unsigned __int16 *)v30) ^ 1;
      v100[1] = v176;
    }
    else if ( v9 == 219 )
    {
      LOBYTE(v185) = 0;
      v29 = *(_DWORD *)(v6 + 4);
      v4 = 0;
      if ( v29 )
        v30 = v29 - 1;
      if ( v29 )
        v30 &= 1u;
      if ( v29 )
        v30 = (int)&CTRPluginFramework::ARHandler::Data[8 * v30];
      v31 = (_DWORD *)v30;
      CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Read8(
                                                             (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                  + *(_DWORD *)(v6 + 8)),
                                                             (unsigned int)&v185,
                                                             (unsigned __int8 *)v30) ^ 1;
      v31[1] = (unsigned __int8)v185;
    }
    else
    {
      v4 = 0;
    }
    goto LABEL_14;
  }
  if ( v9 == 176 )
  {
    CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Read32(
                                                           (CTRPluginFramework *)(*(_DWORD *)(v6 + 4)
                                                                                + CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]),
                                                           (unsigned int)&CTRPluginFramework::ARHandler::Offset[CTRPluginFramework::ARHandler::ActiveOffset],
                                                           (unsigned int *)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]) ^ 1;
    v4 = 0;
    goto LABEL_14;
  }
  if ( v9 <= 0xB0 )
  {
    if ( v9 == 80 )
    {
      if ( v3 == 2 )
      {
        v163 = (char *)CTRPluginFramework::ARHandler::ActiveData + v23;
        v4 = (unsigned __int8)v163[20];
        v164 = *(float **)(v6 + 8);
        if ( v163[20] )
        {
          v1 = fabsf(*v164);
          if ( v1 > 3.4028e38
            || (v50 = *((_DWORD *)v163 + 6),
                !CTRPluginFramework::AlmostEqualRelative(
                   (CTRPluginFramework *)CTRPluginFramework::ARHandler::Data,
                   COERCE_FLOAT(CTRPluginFramework::ARHandler::Data),
                   *(float *)&v30,
                   *(float *)&v164)) )
          {
LABEL_219:
            ++v2;
            v4 = 1;
            goto LABEL_14;
          }
          v4 = 0;
        }
        else
        {
          if ( *((float **)v163 + 6) != v164 )
            goto LABEL_219;
          v7 = (unsigned __int8)v163[20];
        }
      }
      else
      {
        v47 = (CTRPluginFramework *)(CTRPluginFramework::Read32(
                                       (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                            + *(_DWORD *)(v6 + 4)),
                                       (unsigned int)&v177,
                                       (unsigned int *)v30) ^ 1);
        v4 = (unsigned __int8)v47;
        CTRPluginFramework::ARHandler::ExitCodeImmediately = (char)v47;
        if ( (_BYTE)v47 )
          goto LABEL_219;
        switch ( v3 )
        {
          case 3:
            if ( *(_DWORD *)(v6 + 8) != CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage
                                                                                + 9] )
              goto LABEL_219;
            v7 = 0;
            break;
          case 1:
            if ( *((_BYTE *)&CTRPluginFramework::ARHandler::ActiveData[5] + v23) )
            {
              v1 = fabsf(*(float *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23));
              if ( v1 > 3.4028e38
                || !CTRPluginFramework::AlmostEqualRelative(
                      v47,
                      v48,
                      v49,
                      COERCE_FLOAT(*((_BYTE *)&CTRPluginFramework::ARHandler::ActiveData[5] + v23))) )
              {
                goto LABEL_219;
              }
              v7 = 0;
            }
            else
            {
              if ( CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6] != LODWORD(v177) )
                goto LABEL_219;
              v7 = 0;
              v4 = 0;
            }
            break;
          case 4:
            v51 = &CTRPluginFramework::ARHandler::ActiveData[2 * v8];
            LODWORD(v52) = *((unsigned __int8 *)v51 + 20);
            v53 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage];
            if ( *((_BYTE *)v51 + 20) )
            {
              v54 = *((float *)v51 + 6);
              v55 = *((float *)v53 + 9);
              v177 = v55;
              v1 = fabsf(v54);
              if ( v1 > 3.4028e38 || !CTRPluginFramework::AlmostEqualRelative(v47, v48, v52, v55) )
                goto LABEL_219;
              v7 = 0;
            }
            else
            {
              if ( v51[6] != v53[9] )
                goto LABEL_219;
              v4 = *((unsigned __int8 *)v51 + 20);
              v7 = *((unsigned __int8 *)v51 + 20);
            }
            break;
          default:
            if ( *(_DWORD *)(v6 + 8) != LODWORD(v177) )
              goto LABEL_219;
            v7 = 0;
            break;
        }
      }
    }
    else if ( v9 > 0x50 )
    {
      if ( v9 == 128 )
      {
        v67 = ~*(_WORD *)(v6 + 10);
        if ( v3 != 2 )
        {
          v70 = (unsigned __int8)(CTRPluginFramework::Read16(
                                    (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                         + *(_DWORD *)(v6 + 4)),
                                    (unsigned int)&v176,
                                    (unsigned __int16 *)v30) ^ 1);
          CTRPluginFramework::ARHandler::ExitCodeImmediately = v70;
          if ( v70 )
            goto LABEL_291;
        }
        v68 = (unsigned __int16)(v176 & v67);
        v176 &= v67;
        switch ( v3 )
        {
          case 2:
            if ( *(unsigned __int16 *)(v6 + 8) < (unsigned int)LOWORD(CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6]) )
              v69 = v67 & 1;
            else
              v69 = 0;
            if ( v69 )
            {
              v4 = 0;
              goto LABEL_14;
            }
LABEL_291:
            ++v2;
            v4 = 1;
            goto LABEL_14;
          case 3:
            if ( *(unsigned __int16 *)(v6 + 8) < (unsigned int)LOWORD(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage + 9]) )
              v71 = v67 & 1;
            else
              v71 = 0;
            if ( !v71 )
              goto LABEL_291;
            v4 = 0;
            break;
          case 1:
            if ( LOWORD(CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6]) >= v68 )
              goto LABEL_291;
            v4 = 0;
            break;
          case 4:
            if ( *(unsigned __int16 *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) >= (unsigned int)LOWORD(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage + 9]) )
              goto LABEL_291;
            v4 = 0;
            break;
          default:
            if ( *(unsigned __int16 *)(v6 + 8) >= v68 )
              goto LABEL_291;
            v4 = 0;
            break;
        }
      }
      else if ( v9 > 0x80 )
      {
        if ( v9 == 144 )
        {
          v72 = ~*(_WORD *)(v6 + 10);
          if ( v3 != 2 )
          {
            v75 = (unsigned __int8)(CTRPluginFramework::Read16(
                                      (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                           + *(_DWORD *)(v6 + 4)),
                                      (unsigned int)&v176,
                                      (unsigned __int16 *)v30) ^ 1);
            CTRPluginFramework::ARHandler::ExitCodeImmediately = v75;
            if ( v75 )
              goto LABEL_314;
          }
          v73 = (unsigned __int16)(v176 & v72);
          v176 &= v72;
          switch ( v3 )
          {
            case 2:
              if ( (unsigned __int16)*(_DWORD *)(v6 + 8) ^ (unsigned __int16)CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6] )
                v74 = 0;
              else
                v74 = v72 & 1;
              if ( v74 )
              {
                v4 = 0;
                goto LABEL_14;
              }
LABEL_314:
              ++v2;
              v4 = 1;
              goto LABEL_14;
            case 3:
              if ( (unsigned __int16)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage
                                                                             + 9] ^ (unsigned __int16)*(_DWORD *)(v6 + 8) )
                v76 = 0;
              else
                v76 = v72 & 1;
              if ( !v76 )
                goto LABEL_314;
              v4 = 0;
              break;
            case 1:
              if ( LOWORD(CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6]) != v73 )
                goto LABEL_314;
              v4 = 0;
              break;
            case 4:
              v77 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage];
              v78 = *(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23);
              if ( (unsigned __int16)v77[9] ^ (unsigned __int16)v78 )
                goto LABEL_314;
              v4 = (unsigned __int16)(v77[9] ^ v78);
              break;
            default:
              if ( *(unsigned __int16 *)(v6 + 8) != v73 )
                goto LABEL_314;
              v4 = 0;
              break;
          }
        }
        else
        {
          if ( v9 != 160 )
          {
            v4 = 0;
            goto LABEL_14;
          }
          v17 = ~*(_WORD *)(v6 + 10);
          if ( v3 != 2 )
          {
            v79 = (unsigned __int8)(CTRPluginFramework::Read16(
                                      (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                           + *(_DWORD *)(v6 + 4)),
                                      (unsigned int)&v176,
                                      (unsigned __int16 *)v30) ^ 1);
            CTRPluginFramework::ARHandler::ExitCodeImmediately = v79;
            if ( v79 )
              goto LABEL_330;
          }
          v18 = (unsigned __int16)(v176 & v17);
          v176 &= v17;
          switch ( v3 )
          {
            case 2:
              if ( (unsigned __int16)*(_DWORD *)(v6 + 8) ^ (unsigned __int16)CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6] )
                v19 = v17 & 1;
              else
                v19 = 0;
              if ( v19 )
              {
                v4 = 0;
                goto LABEL_14;
              }
LABEL_330:
              ++v2;
              v4 = 1;
              goto LABEL_14;
            case 3:
              if ( (unsigned __int16)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage
                                                                             + 9] ^ (unsigned __int16)*(_DWORD *)(v6 + 8) )
                v80 = v17 & 1;
              else
                v80 = 0;
              if ( !v80 )
                goto LABEL_330;
              v4 = 0;
              break;
            case 1:
              if ( LOWORD(CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6]) == v18 )
                goto LABEL_330;
              v4 = 0;
              break;
            case 4:
              if ( !((unsigned __int16)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage
                                                                               + 9] ^ (unsigned __int16)*(int *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23)) )
                goto LABEL_330;
              v4 = 0;
              break;
            default:
              if ( *(unsigned __int16 *)(v6 + 8) == v18 )
                goto LABEL_330;
              v4 = 0;
              break;
          }
        }
      }
      else if ( v9 == 96 )
      {
        if ( v3 == 2 )
        {
          v165 = (char *)CTRPluginFramework::ARHandler::ActiveData + v23;
          v4 = (unsigned __int8)v165[20];
          v166 = *(float **)(v6 + 8);
          if ( v165[20] )
          {
            v1 = fabsf(*v166);
            if ( v1 <= 3.4028e38 )
            {
              v59 = *((_DWORD *)v165 + 6);
              v4 = CTRPluginFramework::AlmostEqualRelative(
                     (CTRPluginFramework *)CTRPluginFramework::ARHandler::Data,
                     COERCE_FLOAT(CTRPluginFramework::ARHandler::Data),
                     *(float *)&v30,
                     *(float *)&v166);
              if ( v4 )
                goto LABEL_241;
              v7 = 0;
            }
            else
            {
              v4 = 0;
            }
          }
          else
          {
            if ( *((float **)v165 + 6) == v166 )
            {
LABEL_241:
              ++v2;
              v4 = 1;
              goto LABEL_14;
            }
            v7 = (unsigned __int8)v165[20];
          }
        }
        else
        {
          v56 = (CTRPluginFramework *)(CTRPluginFramework::Read32(
                                         (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                              + *(_DWORD *)(v6 + 4)),
                                         (unsigned int)&v177,
                                         (unsigned int *)v30) ^ 1);
          v4 = (unsigned __int8)v56;
          CTRPluginFramework::ARHandler::ExitCodeImmediately = (char)v56;
          if ( (_BYTE)v56 )
            goto LABEL_241;
          switch ( v3 )
          {
            case 3:
              if ( *(_DWORD *)(v6 + 8) == CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage
                                                                                  + 9] )
                goto LABEL_241;
              v7 = 0;
              break;
            case 1:
              v60 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
              if ( *((_BYTE *)v60 + 20) )
              {
                v1 = fabsf(v60[6]);
                if ( v1 <= 3.4028e38 )
                {
                  v4 = CTRPluginFramework::AlmostEqualRelative(v56, v57, v58, COERCE_FLOAT(*((_BYTE *)v60 + 20)));
                  if ( v4 )
                    goto LABEL_241;
                  v7 = 0;
                }
                else
                {
                  v7 = 0;
                }
              }
              else
              {
                if ( *((_DWORD *)v60 + 6) == LODWORD(v177) )
                  goto LABEL_241;
                v7 = 0;
              }
              break;
            case 4:
              v61 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
              v62 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage];
              if ( *((_BYTE *)v61 + 20) )
              {
                v63 = v61[6];
                v64 = *((float *)v62 + 9);
                v177 = v64;
                v1 = fabsf(v63);
                if ( v1 <= 3.4028e38 )
                {
                  v4 = CTRPluginFramework::AlmostEqualRelative(v56, v57, v58, v64);
                  if ( v4 )
                    goto LABEL_241;
                  v7 = 0;
                }
                else
                {
                  v7 = 0;
                }
              }
              else
              {
                if ( *((_DWORD *)v61 + 6) == v62[9] )
                  goto LABEL_241;
                v7 = 0;
              }
              break;
            default:
              if ( *(_DWORD *)(v6 + 8) == LODWORD(v177) )
                goto LABEL_241;
              v7 = 0;
              break;
          }
        }
      }
      else
      {
        if ( v9 != 112 )
        {
          v4 = 0;
          goto LABEL_14;
        }
        v14 = ~*(_WORD *)(v6 + 10);
        if ( v3 != 2 )
        {
          v65 = (unsigned __int8)(CTRPluginFramework::Read16(
                                    (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                         + *(_DWORD *)(v6 + 4)),
                                    (unsigned int)&v176,
                                    (unsigned __int16 *)v30) ^ 1);
          CTRPluginFramework::ARHandler::ExitCodeImmediately = v65;
          if ( v65 )
            goto LABEL_268;
        }
        v15 = (unsigned __int16)(v176 & v14);
        v176 &= v14;
        switch ( v3 )
        {
          case 2:
            if ( *(unsigned __int16 *)(v6 + 8) > (unsigned int)LOWORD(CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6]) )
              v16 = v14 & 1;
            else
              v16 = 0;
            if ( v16 )
            {
              v4 = 0;
              goto LABEL_14;
            }
LABEL_268:
            ++v2;
            v4 = 1;
            goto LABEL_14;
          case 3:
            if ( *(unsigned __int16 *)(v6 + 8) > (unsigned int)LOWORD(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage + 9]) )
              v66 = v14 & 1;
            else
              v66 = 0;
            if ( !v66 )
              goto LABEL_268;
            v4 = 0;
            break;
          case 1:
            if ( LOWORD(CTRPluginFramework::ARHandler::ActiveData[2 * v8 + 6]) <= v15 )
              goto LABEL_268;
            v4 = 0;
            break;
          case 4:
            if ( *(unsigned __int16 *)((char *)&CTRPluginFramework::ARHandler::ActiveData[6] + v23) <= (unsigned int)LOWORD(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage + 9]) )
              goto LABEL_268;
            v4 = 0;
            break;
          default:
            if ( *(unsigned __int16 *)(v6 + 8) <= v15 )
              goto LABEL_268;
            v4 = 0;
            break;
        }
      }
    }
    else
    {
      if ( v9 == 32 )
      {
        v4 = 0;
        CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write8(
                                                               (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                    + *(_DWORD *)(v6 + 4)),
                                                               *(unsigned __int8 *)(v6 + 8),
                                                               v30) ^ 1;
        goto LABEL_14;
      }
      if ( v9 > 0x20 )
      {
        if ( v9 == 48 )
        {
          if ( v3 == 2 )
          {
            v157 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
            v4 = *((unsigned __int8 *)v157 + 20);
            v158 = v157[6];
            v159 = *(float **)(v6 + 8);
            if ( *((_BYTE *)v157 + 20) )
            {
              v1 = *v159;
              if ( *v159 <= v158 )
                goto LABEL_178;
              v4 = 0;
            }
            else
            {
              if ( LODWORD(v158) >= (unsigned int)v159 )
                goto LABEL_178;
              v7 = *((unsigned __int8 *)v157 + 20);
            }
          }
          else
          {
            v40 = CTRPluginFramework::Read32(
                    (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                                   + 2]
                                         + *(_DWORD *)(v6 + 4)),
                    (unsigned int)&v177,
                    (unsigned int *)v30) ^ 1;
            v4 = v40;
            CTRPluginFramework::ARHandler::ExitCodeImmediately = v40;
            if ( v40 )
              goto LABEL_178;
            switch ( v3 )
            {
              case 3:
                if ( *(_DWORD *)(v6 + 8) <= (unsigned int)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage + 9] )
                {
LABEL_178:
                  ++v2;
                  v4 = 1;
                  goto LABEL_14;
                }
                v7 = 0;
                break;
              case 1:
                v41 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
                if ( *((_BYTE *)v41 + 20) )
                {
                  v1 = v177;
                  if ( v41[6] <= v177 )
                    goto LABEL_178;
                  v7 = 0;
                }
                else
                {
                  if ( *((_DWORD *)v41 + 6) <= LODWORD(v177) )
                    goto LABEL_178;
                  v7 = 0;
                }
                break;
              case 4:
                v42 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
                v43 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage];
                if ( *((_BYTE *)v42 + 20) )
                {
                  v1 = v42[6];
                  v177 = *((float *)v43 + 9);
                  if ( v1 <= v177 )
                    goto LABEL_178;
                  v7 = 0;
                }
                else
                {
                  if ( *((_DWORD *)v42 + 6) <= (unsigned int)v43[9] )
                    goto LABEL_178;
                  v7 = 0;
                }
                break;
              default:
                if ( *(_DWORD *)(v6 + 8) <= LODWORD(v177) )
                  goto LABEL_178;
                v7 = 0;
                break;
            }
          }
        }
        else
        {
          if ( v9 != 64 )
          {
            v4 = 0;
            goto LABEL_14;
          }
          if ( v3 == 2 )
          {
            v160 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
            v4 = *((unsigned __int8 *)v160 + 20);
            v161 = v160[6];
            v162 = *(float **)(v6 + 8);
            if ( *((_BYTE *)v160 + 20) )
            {
              v1 = *v162;
              if ( *v162 >= v161 )
                goto LABEL_38;
              v4 = 0;
            }
            else
            {
              if ( LODWORD(v161) <= (unsigned int)v162 )
              {
LABEL_38:
                ++v2;
                v4 = 1;
                goto LABEL_14;
              }
              v7 = *((unsigned __int8 *)v160 + 20);
            }
          }
          else
          {
            v13 = CTRPluginFramework::Read32(
                    (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                                   + 2]
                                         + *(_DWORD *)(v6 + 4)),
                    (unsigned int)&v177,
                    (unsigned int *)v30) ^ 1;
            v4 = v13;
            CTRPluginFramework::ARHandler::ExitCodeImmediately = v13;
            if ( v13 )
              goto LABEL_38;
            switch ( v3 )
            {
              case 3:
                if ( *(_DWORD *)(v6 + 8) >= (unsigned int)CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage + 9] )
                  goto LABEL_38;
                v7 = 0;
                break;
              case 1:
                v44 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
                if ( *((_BYTE *)v44 + 20) )
                {
                  v1 = v177;
                  if ( v44[6] >= v177 )
                    goto LABEL_38;
                  v7 = 0;
                }
                else
                {
                  if ( *((_DWORD *)v44 + 6) >= LODWORD(v177) )
                    goto LABEL_38;
                  v7 = 0;
                }
                break;
              case 4:
                v45 = (float *)((char *)CTRPluginFramework::ARHandler::ActiveData + v23);
                v46 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveStorage];
                if ( *((_BYTE *)v45 + 20) )
                {
                  v1 = v45[6];
                  v177 = *((float *)v46 + 9);
                  if ( v1 >= v177 )
                    goto LABEL_38;
                  v7 = 0;
                }
                else
                {
                  if ( *((_DWORD *)v45 + 6) >= (unsigned int)v46[9] )
                    goto LABEL_38;
                  v7 = 0;
                }
                break;
              default:
                if ( *(_DWORD *)(v6 + 8) >= LODWORD(v177) )
                  goto LABEL_38;
                v7 = 0;
                break;
            }
          }
        }
      }
      else if ( *(_BYTE *)(v6 + 1) )
      {
        if ( v9 == 16 )
        {
          v4 = 0;
          CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write16(
                                                                 (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                      + *(_DWORD *)(v6 + 4)),
                                                                 *(unsigned __int16 *)(v6 + 8),
                                                                 v30) ^ 1;
        }
        else
        {
          v4 = 0;
        }
      }
      else
      {
        CTRPluginFramework::ARHandler::ExitCodeImmediately = CTRPluginFramework::Write32(
                                                               (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset + 2]
                                                                                    + *(_DWORD *)(v6 + 4)),
                                                               *(_DWORD *)(v6 + 8),
                                                               *(_DWORD *)(v6 + 4)) ^ 1;
        v4 = 0;
      }
    }
    goto LABEL_14;
  }
  if ( v9 == 211 )
  {
    CTRPluginFramework::ARHandler::ActiveData[(*(_DWORD *)(v6 + 4) & 1) + 2] = *(_DWORD *)(v6 + 8);
    v4 = 0;
    goto LABEL_14;
  }
  if ( v9 > 0xD3 )
  {
    if ( v9 == 214 )
    {
      v88 = *(_DWORD *)(v6 + 4);
      v4 = 0;
      if ( v88 )
        v25 = CTRPluginFramework::ARHandler::ActiveData[2 * (((_BYTE)v88 - 1) & 1) + 6];
      if ( !v88 )
        v23 += (int)CTRPluginFramework::ARHandler::ActiveData;
      if ( !v88 )
        v25 = *(_DWORD *)(v23 + 24);
      v89 = CTRPluginFramework::Write32(
              (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                             + 2]
                                   + *(_DWORD *)(v6 + 8)),
              v25,
              v30);
      v90 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset];
      v91 = v90[2];
      CTRPluginFramework::ARHandler::ExitCodeImmediately = v89 ^ 1;
      v90[2] = v91 + 4;
    }
    else if ( v9 > 0xD6 )
    {
      if ( v9 == 215 )
      {
        v92 = *(int **)(v6 + 4);
        v4 = 0;
        v93 = v92 == 0;
        if ( v92 )
          v92 = &CTRPluginFramework::ARHandler::ActiveData[2 * (((_BYTE)v92 - 1) & 1)];
        else
          v23 += (int)CTRPluginFramework::ARHandler::ActiveData;
        if ( v93 )
          v94 = *(unsigned __int16 *)(v23 + 24);
        else
          v94 = *((unsigned __int16 *)v92 + 12);
        v176 = v94;
        v95 = CTRPluginFramework::Write16(
                (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                               + 2]
                                     + *(_DWORD *)(v6 + 8)),
                v94,
                v30);
        v96 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset];
        v97 = v96[2];
        CTRPluginFramework::ARHandler::ExitCodeImmediately = v95 ^ 1;
        v96[2] = v97 + 2;
      }
      else if ( v9 == 216 )
      {
        v24 = *(_DWORD *)(v6 + 4);
        v4 = 0;
        if ( v24 )
          v25 = LOBYTE(CTRPluginFramework::ARHandler::ActiveData[2 * (((_BYTE)v24 - 1) & 1) + 6]);
        if ( !v24 )
          v23 += (int)CTRPluginFramework::ARHandler::ActiveData;
        if ( !v24 )
          v25 = *(unsigned __int8 *)(v23 + 24);
        v26 = CTRPluginFramework::Write8(
                (CTRPluginFramework *)(CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset
                                                                               + 2]
                                     + *(_DWORD *)(v6 + 8)),
                v25,
                v30);
        v27 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset];
        v28 = v27[2];
        CTRPluginFramework::ARHandler::ExitCodeImmediately = v26 ^ 1;
        v27[2] = v28 + 1;
      }
      else
      {
        v4 = 0;
      }
    }
    else if ( v9 == 212 )
    {
      v83 = *(float *)(v6 + 8);
      v177 = *(float *)(v6 + 8);
      v84 = *(_DWORD *)(v6 + 4) & 3;
      if ( v84 )
      {
        v85 = 2 * (v84 - 1);
        v30 = (int)&CTRPluginFramework::ARHandler::Data[v85 * 4];
        v86 = *(float *)&CTRPluginFramework::ARHandler::ActiveData[2 * (v84 == 1) + 6];
        if ( LOBYTE(CTRPluginFramework::ARHandler::ActiveData[v85 + 5]) )
        {
          v1 = v83 + v86;
          v177 = v83 + v86;
        }
        else
        {
          LODWORD(v177) = LODWORD(v83) + LODWORD(v86);
        }
      }
      v4 = *(unsigned __int8 *)v30;
      v87 = *(float *)(v30 + 4);
      if ( *(_BYTE *)v30 )
        v1 = v87 + v177;
      else
        LODWORD(v87) += LODWORD(v177);
      if ( *(_BYTE *)v30 )
      {
        *(float *)(v30 + 4) = v1;
        v4 = 0;
      }
      else
      {
        *(float *)(v30 + 4) = v87;
        v7 = 0;
      }
    }
    else if ( v9 == 213 )
    {
      v21 = *(_DWORD *)(v6 + 4);
      v22 = *(_DWORD *)(v6 + 8);
      if ( v21 )
        v4 = (unsigned int)&CTRPluginFramework::ARHandler::ActiveData[2 * (((_BYTE)v21 - 1) & 1)];
      else
        v23 += (int)CTRPluginFramework::ARHandler::ActiveData;
      if ( v21 )
      {
        *(_DWORD *)(v4 + 24) = v22;
      }
      else
      {
        *(_DWORD *)(v23 + 24) = v22;
        v4 = 0;
      }
      if ( v21 )
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    goto LABEL_14;
  }
  if ( v9 == 194 )
  {
    v4 = 0;
    v167 = dword_28;
    v7 = 1;
    ++v168;
    goto LABEL_14;
  }
  if ( v9 <= 0xC2 )
  {
    if ( v9 == 192 )
    {
      v4 = 0;
      v167 = *(_DWORD *)(v6 + 8);
      v7 = 1;
      ++v168;
    }
    else if ( v9 == 193 )
    {
      v4 = 0;
      v167 = dword_20;
      v7 = 1;
      ++v168;
    }
    else
    {
      v4 = 0;
    }
    goto LABEL_14;
  }
  if ( v9 != 208 )
  {
    if ( v9 == 210 )
    {
      v4 = *(_DWORD *)(v6 + 8);
      if ( v4 )
      {
        v7 = 1;
        CTRPluginFramework::ARHandler::ExitCodeImmediately = 1;
        goto LABEL_74;
      }
      v81 = (char *)CTRPluginFramework::ARHandler::ActiveData + v23;
      v82 = &CTRPluginFramework::ARHandler::ActiveData[CTRPluginFramework::ARHandler::ActiveOffset];
      v81[20] = 0;
      *((_DWORD *)v81 + 6) = 0;
      v82[2] = 0;
      v2 = 0;
      std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::clear((int *)v182);
    }
    else
    {
      v4 = 0;
    }
    goto LABEL_14;
  }
  if ( *(_DWORD *)(v6 + 8) != 1 )
  {
    v4 = 0;
    goto LABEL_14;
  }
  v7 = 1;
LABEL_74:
  std::_Destroy_aux<false>::__destroy<CTRPluginFramework::ARCode *>((int)v182[0], (int)v182[1]);
  if ( v182[0] )
    operator delete(v182[0]);
  return v7;
}
// 8: using guessed type int CTRPluginFramework::ARHandler::ActiveData[];
// C: using guessed type char CTRPluginFramework::ARHandler::ExitCodeImmediately;
// 10: using guessed type int CTRPluginFramework::ARHandler::Offset[];
// 14: using guessed type int dword_14;
// 18: using guessed type int CTRPluginFramework::ARHandler::ActiveOffset;
// 20: using guessed type int dword_20;
// 28: using guessed type int dword_28;
// 2C: using guessed type int CTRPluginFramework::ARHandler::Storage;
// 30: using guessed type int dword_30;
// 34: using guessed type int CTRPluginFramework::ARHandler::ActiveStorage;
// 38: using guessed type char CTRPluginFramework::ToggleFloat;
// 3C: using guessed type int CTRPluginFramework::g_context;
// 32E4: using guessed type int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD);
// 32F4: using guessed type int __fastcall AR__ExecuteRoutine(_DWORD);
// 3320: using guessed type int __fastcall svcQueryMemory(_DWORD, _DWORD, _DWORD);

//----- (00003220) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::ARHandler::Execute(_DWORD *a1)
{
  _DWORD *v1; // r5
  int v2; // r2
  int v3; // r2
  signed int result; // r0

  v1 = a1;
  dword_14 = 0;
  byte_24 = 0;
  dword_28 = 0;
  CTRPluginFramework::ARHandler::Offset[0] = 0;
  dword_20 = 0;
  v2 = a1[1];
  CTRPluginFramework::g_context = (int)a1;
  CTRPluginFramework::ARHandler::Storage = v2;
  v3 = a1[2];
  CTRPluginFramework::ARHandler::Data[0] = 0;
  CTRPluginFramework::ARHandler::ActiveOffset = 0;
  CTRPluginFramework::ARHandler::ActiveData[0] = 0;
  CTRPluginFramework::ARHandler::ActiveStorage = 0;
  CTRPluginFramework::ARHandler::ExitCodeImmediately = 0;
  CTRPluginFramework::ToggleFloat = 0;
  dword_30 = v3;
  result = CTRPluginFramework::ARHandler::_Execute(a1 + 3);
  v1[1] = CTRPluginFramework::ARHandler::Storage;
  v1[2] = dword_30;
  return result;
}
// 8: using guessed type int CTRPluginFramework::ARHandler::ActiveData[];
// C: using guessed type char CTRPluginFramework::ARHandler::ExitCodeImmediately;
// 10: using guessed type int CTRPluginFramework::ARHandler::Offset[];
// 14: using guessed type int dword_14;
// 18: using guessed type int CTRPluginFramework::ARHandler::ActiveOffset;
// 20: using guessed type int dword_20;
// 24: using guessed type char byte_24;
// 28: using guessed type int dword_28;
// 2C: using guessed type int CTRPluginFramework::ARHandler::Storage;
// 30: using guessed type int dword_30;
// 34: using guessed type int CTRPluginFramework::ARHandler::ActiveStorage;
// 38: using guessed type char CTRPluginFramework::ToggleFloat;
// 3C: using guessed type int CTRPluginFramework::g_context;

//----- (00003290) --------------------------------------------------------
void GLOBAL__sub_I__ZN18CTRPluginFramework9ARHandler6OffsetE()
{
  CTRPluginFramework::ARHandler::Data[0] = 0;
  dword_20 = 0;
  byte_24 = 0;
  dword_28 = 0;
}
// 20: using guessed type int dword_20;
// 24: using guessed type char byte_24;
// 28: using guessed type int dword_28;

// ALL OK, 15 function(s) have been successfully decompiled
