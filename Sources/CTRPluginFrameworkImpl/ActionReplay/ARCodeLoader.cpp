/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void **__fastcall std::vector<CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::PColor,std::allocator<CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::PColor>>::~vector(void **a1);
bool __fastcall __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(unsigned __int8 *a1);
unsigned __int8 **__fastcall CTRPluginFramework::Ltrim(unsigned __int8 **a1);
bool __fastcall __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(_DWORD *a1);
_DWORD *__fastcall CTRPluginFramework::Rtrim(_DWORD *a1, int a2, int a3);
unsigned __int8 **__fastcall CTRPluginFramework::Trim(_DWORD *a1, int a2, int a3);
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this);
int __fastcall CTRPluginFramework::ActionReplay_OpenCheatsFile(int a1, int a2);
signed int __fastcall CTRPluginFramework::ActionReplay_CheckCodeTypeValidity(CTRPluginFramework *this, unsigned int a2);
int __fastcall CTRPluginFramework::ActionReplay_IsHexCode(unsigned __int8 **a1);
signed int __fastcall CTRPluginFramework::ActionReplay_IsValidCode(unsigned __int8 **a1, int a2);
int __fastcall CTRPluginFramework::ActionReplay_ProcessString(int result, int a2);
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::resize(void **a1, unsigned int a2);
void **__fastcall std::_Deque_base<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::~_Deque_base(void **a1);
void **__fastcall std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::~deque(void **a1);
int __fastcall std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(_DWORD *a1);
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode const&>(const CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3);
void __fastcall std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::_M_reserve_map_at_back(void **a1, unsigned int a2);
CTRPluginFramework::File *__fastcall CTRPluginFramework::ActionReplay_LoadCodes(int a1);
// void __cdecl operator delete(void *); idb
// int isspace(int);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD); weak
// size_t strlen(const char *s);
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::File::Close(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::Mutex::~Mutex(CTRPluginFramework::Mutex *__hidden this); idb
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD); weak
// int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD); weak
// int isxdigit(int);
// int __fastcall CTRPluginFramework::ActionReplayPriv::Str2U32(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD); weak
// int __fastcall encode_utf8(_DWORD, _DWORD); weak
// _DWORD __cdecl CTRPluginFramework::Color::Color(CTRPluginFramework::Color *__hidden this, unsigned int); idb
// int __fastcall _cxa_guard_acquire(_DWORD); weak
// _DWORD __cdecl operator new(unsigned int); idb
// int __fastcall _cxa_guard_release(_DWORD); weak
// int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD); weak
// int strncmp(const char *s1, const char *s2, size_t n);
// void __cdecl __noreturn std::__throw_length_error(const char *); idb
// void *memmove(void *dest, const void *src, size_t n);
// _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *); weak
// void __noreturn std::__throw_bad_alloc(void); idb
// _DWORD CTRPluginFramework::File::File(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::LineReader::LineReader(CTRPluginFramework::LineReader *__hidden this, CTRPluginFramework::File *); idb
// _DWORD CTRPluginFramework::File::IsOpen(CTRPluginFramework::File *__hidden this); idb
// _DWORD __cdecl CTRPluginFramework::LineReader::~LineReader(CTRPluginFramework::LineReader *__hidden this); idb
// int __fastcall CTRPluginFramework::LineReader::operator()(_DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::MenuEntryActionReplay::Update(CTRPluginFramework::MenuEntryActionReplay *__hidden this); idb
// int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD); weak
// int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void); weak
// int CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay(void); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD); weak
// int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(_DWORD); weak
// int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD, _DWORD); weak
// _DWORD CTRPluginFramework::ARCode::IsCodeWithData(CTRPluginFramework::ARCode *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

char `guard variable for'CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors; // weak
int CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors; // weak
int dword_C; // weak
int dword_10; // weak
_UNKNOWN unk_148D; // weak
// extern _UNKNOWN ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E; weak
// extern unsigned __int8 *CTRPluginFramework::g_codeTypes[2]; idb
// extern _UNKNOWN CTRPluginFramework::Color::White; weak
// extern _UNKNOWN CTRPluginFramework::Color::Black; weak
// extern _UNKNOWN CTRPluginFramework::Color::Red; weak
// extern _UNKNOWN CTRPluginFramework::Color::Green; weak
// extern _UNKNOWN CTRPluginFramework::Color::Blue; weak
// extern _UNKNOWN CTRPluginFramework::Color::Cyan; weak
// extern _UNKNOWN CTRPluginFramework::Color::Magenta; weak
// extern _UNKNOWN CTRPluginFramework::Color::Yellow; weak
// extern _UNKNOWN CTRPluginFramework::Color::Gray; weak
// extern _UNKNOWN _dso_handle; weak


//----- (00000014) --------------------------------------------------------
void **__fastcall std::vector<CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::PColor,std::allocator<CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::PColor>>::~vector(void **a1)
{
  void **v1; // r4
  void *v2; // r0

  v1 = a1;
  v2 = *a1;
  if ( v2 )
    operator delete(v2);
  return v1;
}

//----- (00000034) --------------------------------------------------------
bool __fastcall __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(unsigned __int8 *a1)
{
  return isspace(*a1) == 0;
}

//----- (0000004C) --------------------------------------------------------
unsigned __int8 **__fastcall CTRPluginFramework::Ltrim(unsigned __int8 **a1)
{
  unsigned __int8 *v1; // r8
  unsigned __int8 **v2; // r7
  unsigned __int8 *v3; // r5
  unsigned __int8 *v4; // r6
  signed int i; // r9
  unsigned __int8 *v6; // r4
  _BOOL4 v7; // r0
  int v8; // r6
  int v9; // r3

  v1 = *a1;
  v2 = a1;
  v3 = *a1;
  v4 = a1[1];
  for ( i = (signed int)v4 >> 2; ; --i )
  {
    v6 = v3;
    if ( i <= 0 )
      break;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v3) )
      goto LABEL_13;
    v6 = v3 + 1;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v3 + 1) )
      goto LABEL_13;
    v6 = v3 + 2;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v3 + 2) )
      goto LABEL_13;
    v6 = v3 + 3;
    v7 = __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v3 + 3);
    v3 += 4;
    if ( v7 )
      goto LABEL_13;
  }
  v8 = (int)&v4[(_DWORD)v1];
  v9 = v8 - (_DWORD)v3;
  if ( v8 - (_DWORD)v3 == 2 )
  {
LABEL_16:
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v6) )
      goto LABEL_13;
    ++v6;
    goto LABEL_11;
  }
  if ( v9 == 3 )
  {
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v3) )
      goto LABEL_13;
    v6 = v3 + 1;
    goto LABEL_16;
  }
  if ( v9 != 1 )
  {
LABEL_12:
    v6 = (unsigned __int8 *)v8;
    goto LABEL_13;
  }
LABEL_11:
  if ( !__gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Ltrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>(v6) )
    goto LABEL_12;
LABEL_13:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v2, v1, v6);
  return v2;
}
// 149C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD);

//----- (00000140) --------------------------------------------------------
bool __fastcall __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(_DWORD *a1)
{
  return isspace(*(unsigned __int8 *)(*a1 - 1)) == 0;
}

//----- (0000015C) --------------------------------------------------------
_DWORD *__fastcall CTRPluginFramework::Rtrim(_DWORD *a1, int a2, int a3)
{
  int v3; // r6
  int v4; // r8
  _DWORD *v5; // r7
  int v6; // r9
  int v7; // r5
  int i; // r6
  int v9; // r4
  int v10; // r3
  int v12; // [sp+4h] [bp-24h]
  int v13; // [sp+8h] [bp-20h]

  v12 = a2;
  v13 = a3;
  v3 = a1[1];
  v4 = *a1;
  v5 = a1;
  v6 = *a1 + v3;
  v7 = *a1 + v3;
  for ( i = v3 >> 2; ; --i )
  {
    v9 = v7;
    if ( i <= 0 )
      break;
    v12 = v7;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
      goto LABEL_13;
    v9 = v7 - 1;
    v12 = v7 - 1;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
      goto LABEL_13;
    v9 = v7 - 2;
    v12 = v7 - 2;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
      goto LABEL_13;
    v9 = v7 - 3;
    v12 = v7 - 3;
    v7 -= 4;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
      goto LABEL_13;
  }
  v10 = v7 - v4;
  if ( v7 - v4 == 2 )
  {
LABEL_16:
    v12 = v9;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
      goto LABEL_13;
    --v9;
    goto LABEL_11;
  }
  if ( v10 == 3 )
  {
    v12 = v7;
    if ( __gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
      goto LABEL_13;
    v9 = v7 - 1;
    goto LABEL_16;
  }
  if ( v10 != 1 )
  {
LABEL_12:
    v9 = v4;
    goto LABEL_13;
  }
LABEL_11:
  v12 = v9;
  if ( !__gnu_cxx::__ops::_Iter_pred<CTRPluginFramework::Rtrim(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &)::{lambda(char)#1}>::operator()<std::reverse_iterator<__gnu_cxx::__normal_iterator<char *,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>>>(&v12) )
    goto LABEL_12;
LABEL_13:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v5, v9, v6);
  return v5;
}
// 149C: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD);

//----- (00000270) --------------------------------------------------------
unsigned __int8 **__fastcall CTRPluginFramework::Trim(_DWORD *a1, int a2, int a3)
{
  unsigned __int8 **v3; // r0

  v3 = (unsigned __int8 **)CTRPluginFramework::Rtrim(a1, a2, a3);
  return CTRPluginFramework::Ltrim(v3);
}

//----- (00000280) --------------------------------------------------------
int *__fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(int *a1, const char *a2)
{
  int *v2; // r4
  const char *v3; // r5
  size_t v4; // r0
  int v5; // r6
  int v6; // r0
  int v7; // r3
  int *result; // r0
  int v9; // r3
  int v10; // r2
  int v11; // [sp+4h] [bp-14h]

  *a1 = (int)(a1 + 2);
  v2 = a1;
  v3 = a2;
  v4 = strlen(a2);
  v5 = (int)&v3[v4];
  v11 = v4;
  if ( v4 > 0xF )
  {
    v6 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(v2, &v11, 0);
    v7 = v11;
    *v2 = v6;
    v2[2] = v7;
  }
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(*v2, v3, v5);
  result = v2;
  v9 = v11;
  v10 = *v2;
  v2[1] = v11;
  *(_BYTE *)(v10 + v9) = 0;
  return result;
}
// 14A4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_create(_DWORD, _DWORD, _DWORD);
// 14A8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_S_copy_chars(_DWORD, _DWORD, _DWORD);

//----- (000002F8) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::File::~File(CTRPluginFramework::File *this)
{
  CTRPluginFramework::File *v1; // r4

  v1 = this;
  CTRPluginFramework::File::Close(this);
  CTRPluginFramework::Mutex::~Mutex((CTRPluginFramework::File *)((char *)v1 + 48));
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v1);
  return v1;
}
// 14B4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);

//----- (0000031C) --------------------------------------------------------
int __fastcall CTRPluginFramework::ActionReplay_OpenCheatsFile(int a1, int a2)
{
  signed int v2; // r2

  if ( a2 )
    v2 = 55;
  else
    v2 = 35;
  return CTRPluginFramework::File::Open(a1, &ZN18CTRPluginFramework11Preferences10CheatsFileB5cxx11E, v2);
}
// 14B8: using guessed type int __fastcall CTRPluginFramework::File::Open(_DWORD, _DWORD, _DWORD);

//----- (00000334) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::ActionReplay_CheckCodeTypeValidity(CTRPluginFramework *this, unsigned int a2)
{
  signed int v2; // r0
  unsigned __int8 *v3; // r2
  int v4; // r1
  signed int v5; // r0
  unsigned int v6; // r3
  unsigned int v7; // t1

  v2 = (unsigned int)this >> 24;
  v3 = CTRPluginFramework::g_codeTypes[0];
  v4 = (unsigned __int8)v2;
  v5 = v2 >> 4;
  while ( v3 != CTRPluginFramework::g_codeTypes[1] )
  {
    v7 = *v3++;
    v6 = v7;
    if ( v7 & 0xF )
    {
      if ( v4 == v6 )
        return 1;
    }
    else if ( v5 == v6 >> 4 )
    {
      return 1;
    }
  }
  return 0;
}

//----- (00000388) --------------------------------------------------------
int __fastcall CTRPluginFramework::ActionReplay_IsHexCode(unsigned __int8 **a1)
{
  int v1; // r4
  unsigned __int8 *v2; // r5
  int v3; // r6
  int v4; // r0
  int v5; // t1
  int result; // r0

  v1 = 0;
  v2 = *a1;
  v3 = (int)&a1[1][(_DWORD)*a1];
  do
  {
    if ( v2 == (unsigned __int8 *)v3 )
      break;
    v5 = *v2++;
    v4 = v5;
    if ( v1 != 8 )
    {
      result = isxdigit(v4);
      if ( !result )
        return result;
    }
    ++v1;
  }
  while ( v1 != 16 );
  return 1;
}

//----- (000003CC) --------------------------------------------------------
signed int __fastcall CTRPluginFramework::ActionReplay_IsValidCode(unsigned __int8 **a1, int a2)
{
  unsigned __int8 **v2; // r4
  signed int result; // r0
  CTRPluginFramework *v4; // r0
  unsigned int v5; // r1
  int v6; // [sp+4h] [bp-Ch]

  v6 = a2;
  v2 = a1;
  if ( !CTRPluginFramework::ActionReplay_IsHexCode(a1)
    || (HIBYTE(v6) = 0,
        v4 = (CTRPluginFramework *)CTRPluginFramework::ActionReplayPriv::Str2U32(v2, (char *)&v6 + 3),
        HIBYTE(v6)) )
  {
    result = 0;
  }
  else
  {
    result = CTRPluginFramework::ActionReplay_CheckCodeTypeValidity(v4, v5);
  }
  return result;
}
// 14C8: using guessed type int __fastcall CTRPluginFramework::ActionReplayPriv::Str2U32(_DWORD, _DWORD);

//----- (00000414) --------------------------------------------------------
int __fastcall CTRPluginFramework::ActionReplay_ProcessString(int result, int a2)
{
  unsigned int v2; // r9
  int v3; // r8
  int *v4; // r5
  unsigned int i; // r4
  int v6; // r2
  int v7; // r3
  int v8; // r7
  int v9; // r1
  int v10; // r3
  int v11; // r0
  int v12; // r7
  const char **v13; // r0
  int v14; // r10
  _BOOL4 v15; // r3
  int v16; // r0
  int v17; // r3
  char v18; // r3
  char v19; // r3
  char v20; // r3
  int v21; // r7
  int v22; // r2
  int v23; // r3
  const char **v24; // lr
  const char **v25; // r3
  const char *v26; // r1
  int v27; // r3
  int j; // r7
  char *s2; // ST00_4
  size_t v30; // r0
  size_t v31; // r11
  unsigned __int8 *v32; // r2
  unsigned int v33; // r1
  unsigned int v34; // r3
  unsigned int v35; // r3
  unsigned int v36; // r3
  int v37; // [sp+4h] [bp-B4h]
  char v38; // [sp+Bh] [bp-ADh]
  int v39; // [sp+Ch] [bp-ACh]
  int v40; // [sp+10h] [bp-A8h]
  __int16 v41; // [sp+14h] [bp-A4h]
  _BYTE *v42; // [sp+18h] [bp-A0h]
  char v43; // [sp+1Ch] [bp-9Ch]
  char v44; // [sp+30h] [bp-88h]
  const char *v45; // [sp+48h] [bp-70h]
  void *v46; // [sp+4Ch] [bp-6Ch]
  const char *v47; // [sp+50h] [bp-68h]
  void *v48; // [sp+54h] [bp-64h]
  const char *v49; // [sp+58h] [bp-60h]
  void *v50; // [sp+5Ch] [bp-5Ch]
  const char *v51; // [sp+60h] [bp-58h]
  void *v52; // [sp+64h] [bp-54h]
  const char *v53; // [sp+68h] [bp-50h]
  void *v54; // [sp+6Ch] [bp-4Ch]
  const char *v55; // [sp+70h] [bp-48h]
  void *v56; // [sp+74h] [bp-44h]
  const char *v57; // [sp+78h] [bp-40h]
  void *v58; // [sp+7Ch] [bp-3Ch]
  const char *v59; // [sp+80h] [bp-38h]
  void *v60; // [sp+84h] [bp-34h]
  const char *v61; // [sp+88h] [bp-30h]
  void *v62; // [sp+8Ch] [bp-2Ch]

  v2 = *(_DWORD *)(result + 4);
  if ( v2 > 1 )
  {
    v3 = a2;
    v4 = (int *)result;
    for ( i = 0; ; ++i )
    {
      if ( v2 - 2 <= i )
        return result;
      v6 = *v4;
      v7 = *(unsigned __int8 *)(*v4 + i);
      result = *v4 + i;
      if ( v7 == 10 )
        v8 = ((unsigned __int8)v3 ^ 1) & 1;
      else
        v8 = 0;
      v9 = i + 1;
      if ( v8 )
      {
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v4, i, 1, v7);
        result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(v4, i, "\\n");
        continue;
      }
      if ( v7 == 92 )
      {
        v10 = *(unsigned __int8 *)(v6 + v9);
        if ( v10 != 110 )
        {
          if ( v10 != 117 )
            continue;
          v38 = 0;
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v42, v4, i, 6);
          v39 = 0;
          v40 = 0;
          v41 = 0;
          if ( *v42 == 92 || v42[1] == 117 )
          {
            v38 = 0;
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v45, &v42, 2, 4);
            v12 = CTRPluginFramework::ActionReplayPriv::Str2U32(&v45, &v38);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v45);
            if ( !v38 )
              encode_utf8(&v39, v12);
          }
          else
          {
            v38 = 1;
          }
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v45,
            (const char *)&v39);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v42);
          if ( v46 && !v38 )
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v4, i, 6, 0);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(v4, i, &v45);
          }
          v13 = &v45;
          goto LABEL_24;
        }
        if ( v3 )
        {
          *(_BYTE *)result = 10;
          v11 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v4, v9, 1, 10);
          result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v4, v11);
        }
      }
      else if ( v7 == 126 )
      {
        v42 = 0;
        v43 = 0;
        result = v2 - 1 - i;
        v14 = v6 + v9;
        v15 = result > 7;
        if ( *(_BYTE *)(v6 + v9) != 35 )
          v15 = 0;
        if ( v15 && *(_BYTE *)(v14 + 7) == 126 )
        {
          LOBYTE(v39) = 0;
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v44, v4, i + 2, 6);
          v16 = CTRPluginFramework::ActionReplayPriv::Str2U32(&v44, &v39);
          if ( !(_BYTE)v39 )
          {
            CTRPluginFramework::Color::Color((CTRPluginFramework::Color *)&v45, v16 << 8);
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v4, i, 9, v17);
            LOBYTE(v42) = 27;
            v18 = (char)v45;
            if ( (unsigned __int8)v45 < 1u )
              v18 = 1;
            BYTE1(v42) = v18;
            v19 = BYTE1(v45);
            if ( BYTE1(v45) < 1u )
              v19 = 1;
            BYTE2(v42) = v19;
            v20 = BYTE2(v45);
            if ( BYTE2(v45) < 1u )
              v20 = 1;
            HIBYTE(v42) = v20;
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(v4, i, &v42);
            i += 3;
          }
          v13 = (const char **)&v44;
LABEL_24:
          result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(v13);
          continue;
        }
        __mcr(15, 0, result, 7, 10, 5);
        v21 = `guard variable for'CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors & 1;
        if ( !(`guard variable for'CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors & 1) )
        {
          result = _cxa_guard_acquire(&`guard variable for'CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors);
          if ( result )
          {
            v45 = "white";
            CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors = v21;
            v46 = &CTRPluginFramework::Color::White;
            dword_C = v21;
            v47 = "black";
            dword_10 = v21;
            v48 = &CTRPluginFramework::Color::Black;
            v49 = "red";
            v50 = &CTRPluginFramework::Color::Red;
            v51 = "green";
            v52 = &CTRPluginFramework::Color::Green;
            v53 = "blue";
            v54 = &CTRPluginFramework::Color::Blue;
            v55 = "cyan";
            v56 = &CTRPluginFramework::Color::Cyan;
            v57 = "magenta";
            v58 = &CTRPluginFramework::Color::Magenta;
            v59 = "yellow";
            v60 = &CTRPluginFramework::Color::Yellow;
            v61 = "gray";
            v62 = &CTRPluginFramework::Color::Gray;
            v22 = operator new(0x48u);
            CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors = v22;
            dword_10 = v22 + 72;
            do
            {
              v23 = 2 * v21++;
              v24 = (const char **)(v22 + v23 * 4);
              v25 = &(&v45)[v23];
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
            }
            while ( v21 != 9 );
            dword_C = v22 + 72;
            _cxa_guard_release(&`guard variable for'CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors);
            result = _aeabi_atexit(
                       &CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors,
                       std::vector<CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::PColor,std::allocator<CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::PColor>>::~vector,
                       &_dso_handle);
          }
        }
        v27 = dword_C;
        for ( j = CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors;
              ;
              j += 8 )
        {
          v37 = v27;
          if ( j == v27 )
            break;
          s2 = *(char **)j;
          v30 = strlen(*(const char **)j);
          v31 = v30;
          result = strncmp((const char *)v14, s2, v30);
          v27 = v37;
          if ( !result && *(_BYTE *)(v14 + v31) == 126 )
          {
            std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(v4, i, v31 + 2, v37);
            LOBYTE(v42) = 27;
            v32 = *(unsigned __int8 **)(j + 4);
            v33 = i;
            v34 = *v32;
            if ( v34 < 1 )
              LOBYTE(v34) = 1;
            BYTE1(v42) = v34;
            v35 = v32[1];
            i += 3;
            if ( v35 < 1 )
              LOBYTE(v35) = 1;
            BYTE2(v42) = v35;
            v36 = v32[2];
            if ( v36 < 1 )
              LOBYTE(v36) = 1;
            HIBYTE(v42) = v36;
            result = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(v4, v33, &v42);
            break;
          }
        }
      }
    }
  }
  return result;
}
// 4: using guessed type char `guard variable for'CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors;
// 8: using guessed type int CTRPluginFramework::ActionReplay_ProcessString(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &,bool)::colors;
// C: using guessed type int dword_C;
// 10: using guessed type int dword_10;
// 14B4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14C8: using guessed type int __fastcall CTRPluginFramework::ActionReplayPriv::Str2U32(_DWORD, _DWORD);
// 14CC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(_DWORD, _DWORD, _DWORD, _DWORD);
// 14D0: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 14D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 14D8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD);
// 14DC: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::insert(_DWORD, _DWORD, _DWORD);
// 14E0: using guessed type int __fastcall encode_utf8(_DWORD, _DWORD);
// 14E8: using guessed type int __fastcall _cxa_guard_acquire(_DWORD);
// 14F0: using guessed type int __fastcall _cxa_guard_release(_DWORD);
// 14F4: using guessed type int __fastcall _aeabi_atexit(_DWORD, _DWORD, _DWORD);

//----- (000008E8) --------------------------------------------------------
void __fastcall std::vector<unsigned long,std::allocator<unsigned long>>::resize(void **a1, unsigned int a2)
{
  char *v2; // r2
  unsigned int v3; // r3
  unsigned int v4; // r1
  int v5; // r5
  int v6; // r5
  void **v7; // r4
  signed int v8; // r0
  unsigned __int8 v9; // cf
  unsigned int v10; // r1
  int v11; // r7
  char *v12; // r0
  void *v13; // r8
  _BYTE *v14; // r3
  char *v15; // r9
  int v16; // r6
  char *v17; // r2
  int v18; // r5
  int v19; // r1

  v2 = (char *)a1[1];
  v3 = (v2 - (_BYTE *)*a1) >> 2;
  if ( a2 <= v3 )
  {
    if ( a2 < v3 )
    {
      v19 = (int)*a1 + 4 * a2;
      if ( (char *)v19 != v2 )
        a1[1] = (void *)v19;
    }
  }
  else
  {
    v4 = a2 - v3;
    v5 = 4 * v4;
    if ( v4 > ((_BYTE *)a1[2] - v2) >> 2 )
    {
      v7 = a1;
      v8 = 0x3FFFFFFF;
      if ( v4 > 0x3FFFFFFF - v3 )
        std::__throw_length_error("vector::_M_default_append");
      if ( v4 < v3 )
        v4 = v3;
      v9 = __CFADD__(v3, v4);
      v10 = v3 + v4;
      if ( !v9 && v10 < 0x3FFFFFFF )
        v8 = v10;
      v11 = 4 * v8;
      v12 = (char *)operator new(4 * v8);
      v13 = *v7;
      v14 = v7[1];
      v15 = v12;
      v16 = v14 - (_BYTE *)*v7;
      if ( *v7 != v14 )
        memmove(v12, *v7, v14 - (_BYTE *)*v7);
      v17 = &v15[v16];
      v18 = (int)&v15[v16 + v5];
      do
      {
        *(_DWORD *)v17 = 0;
        v17 += 4;
      }
      while ( v17 != (char *)v18 );
      if ( v13 )
        operator delete(v13);
      *v7 = v15;
      v7[1] = (void *)v18;
      v7[2] = &v15[v11];
    }
    else
    {
      v6 = (int)&v2[v5];
      do
      {
        *(_DWORD *)v2 = 0;
        v2 += 4;
      }
      while ( (char *)v6 != v2 );
      a1[1] = (void *)v6;
    }
  }
}

//----- (000009F0) --------------------------------------------------------
void **__fastcall std::_Deque_base<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::~_Deque_base(void **a1)
{
  void **v1; // r4
  void **v2; // r5
  unsigned int v3; // r6
  void *v4; // t1

  v1 = a1;
  if ( *a1 )
  {
    v2 = (void **)a1[5];
    v3 = (unsigned int)a1[9] + 4;
    while ( v3 > (unsigned int)v2 )
    {
      v4 = *v2;
      ++v2;
      operator delete(v4);
    }
    operator delete(*v1);
  }
  return v1;
}

//----- (00000A34) --------------------------------------------------------
void **__fastcall std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::~deque(void **a1)
{
  void **v1; // r4

  v1 = a1;
  std::_Deque_base<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::~_Deque_base(a1);
  return v1;
}

//----- (00000A48) --------------------------------------------------------
int __fastcall std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(_DWORD *a1)
{
  int v1; // r3

  v1 = a1[6];
  if ( v1 == a1[7] )
    v1 = *(_DWORD *)(a1[9] - 4) + 512;
  return v1 - 4;
}

//----- (00000A68) --------------------------------------------------------
void __fastcall std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode const&>(const CTRPluginFramework::ARCode **a1, const CTRPluginFramework::ARCode *a2, const CTRPluginFramework::ARCode *a3)
{
  const CTRPluginFramework::ARCode *v3; // r6
  const CTRPluginFramework::ARCode *v4; // r8
  int v5; // r5
  int v6; // r3
  unsigned __int8 v7; // cf
  unsigned int v8; // r5
  CTRPluginFramework::ARCode **v9; // r7
  const CTRPluginFramework::ARCode *v10; // r9
  const CTRPluginFramework::ARCode *v11; // r11
  unsigned int v12; // r4
  CTRPluginFramework::ARCode *v13; // r10
  const CTRPluginFramework::ARCode *v14; // r11
  CTRPluginFramework::ARCode *v15; // r0
  int v16; // r3
  int v17; // r9
  int v18; // r4
  CTRPluginFramework::ARCode *v19; // r2
  const CTRPluginFramework::ARCode *v20; // r3
  unsigned int v21; // r4
  const CTRPluginFramework::ARCode *i; // r9
  void *v23; // r0
  int v24; // ST00_4
  const CTRPluginFramework::ARCode *v25; // ST04_4
  CTRPluginFramework::ARCode *v26; // ST00_4

  v3 = *a1;
  v4 = a1[1];
  v5 = -1431655765 * ((v4 - *a1) >> 4);
  if ( -1431655765 * ((v4 - *a1) >> 4) )
    v6 = -1431655765 * ((v4 - *a1) >> 4);
  else
    v6 = 1;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a2 - v3;
  if ( v7 || v8 > 0x5555555 )
  {
    v8 = 89478485;
  }
  else if ( !v8 )
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = (CTRPluginFramework::ARCode *)operator new(48 * v8);
LABEL_8:
  CTRPluginFramework::ARCode::ARCode((CTRPluginFramework::ARCode *)((char *)v13 + v12), v11);
  v14 = v3;
  v15 = v13;
  while ( v10 != v14 )
  {
    v24 = (int)v15 + 48;
    CTRPluginFramework::ARCode::ARCode(v15, v14);
    v14 = (const CTRPluginFramework::ARCode *)((char *)v14 + 48);
    v15 = (CTRPluginFramework::ARCode *)v24;
  }
  v16 = 178956971 * (v12 >> 4) & 0xFFFFFFF;
  v17 = (int)v13 + 48 * v16 + 48;
  v18 = (int)v3 + 48 * v16;
  v19 = (CTRPluginFramework::ARCode *)((char *)v13 + 48 * v16 + 48);
  v20 = (const CTRPluginFramework::ARCode *)((char *)v3 + 48 * v16);
  while ( v20 != v4 )
  {
    v25 = v20;
    v26 = v19;
    CTRPluginFramework::ARCode::ARCode(v19, v20);
    v20 = (const CTRPluginFramework::ARCode *)((char *)v25 + 48);
    v19 = (CTRPluginFramework::ARCode *)((char *)v26 + 48);
  }
  v21 = v17 + 48 * (178956971 * (((unsigned int)v4 - v18) >> 4) & 0xFFFFFFF);
  for ( i = v3; i != v4; i = (const CTRPluginFramework::ARCode *)((char *)i + 48) )
  {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose((char *)i + 24);
    v23 = (void *)*((_DWORD *)i + 3);
    if ( v23 )
      operator delete(v23);
  }
  if ( v3 )
    operator delete((void *)v3);
  *v9 = v13;
  v9[1] = (CTRPluginFramework::ARCode *)v21;
  v9[2] = (CTRPluginFramework::ARCode *)((char *)v13 + 48 * v8);
}
// 14B4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 152C: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);

//----- (00000BE0) --------------------------------------------------------
void __fastcall std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::_M_reserve_map_at_back(void **a1, unsigned int a2)
{
  _BYTE *v2; // r2
  unsigned int v3; // r3
  unsigned int v4; // r7
  void **v5; // r1
  void **v6; // r4
  int v7; // r6
  int v8; // r5
  void **v9; // r5
  int v10; // r3
  size_t v11; // r2
  void **v12; // r0
  char *v13; // r3
  int v14; // r6
  char *v15; // r3
  int v16; // r1
  unsigned int v17; // r7
  char *v18; // r0
  const void *v19; // r1
  int v20; // r2
  void *v21; // r8

  v2 = a1[9];
  v3 = (unsigned int)a1[1];
  if ( a2 + 1 > v3 - ((v2 - (_BYTE *)*a1) >> 2) )
  {
    v4 = a2;
    v5 = (void **)a1[5];
    v6 = a1;
    v7 = (v2 - (_BYTE *)v5) >> 2;
    v8 = v4 + v7 + 1;
    if ( v3 <= 2 * v8 )
    {
      v16 = v3 + 2;
      if ( v3 < v4 )
        v17 = v16 + v4;
      else
        v17 = v16 + v3;
      if ( v17 > 0x3FFFFFFF )
        std::__throw_bad_alloc();
      v18 = (char *)operator new(4 * v17);
      v19 = v6[5];
      v20 = (int)v6[9] + 4;
      v21 = v18;
      v9 = (void **)&v18[4 * ((v17 - v8) >> 1)];
      if ( v19 != (const void *)v20 )
        memmove(v9, v19, v20 - (_DWORD)v19);
      operator delete(*v6);
      *v6 = v21;
      v6[1] = (void *)v17;
      goto LABEL_6;
    }
    v9 = (void **)((char *)*a1 + 4 * ((v3 - v8) >> 1));
    v10 = (int)(v2 + 4);
    v11 = v2 + 4 - (_BYTE *)v5;
    if ( v5 <= v9 )
    {
      if ( v5 != (void **)v10 )
      {
        v12 = (void **)((char *)v9 + 4 * (v7 + 1) - v11);
        goto LABEL_9;
      }
    }
    else if ( v5 != (void **)v10 )
    {
      v12 = v9;
LABEL_9:
      memmove(v12, v5, v11);
      goto LABEL_6;
    }
LABEL_6:
    v6[5] = v9;
    v13 = (char *)*v9;
    v14 = v7 + 0x40000000;
    v6[3] = *v9;
    v6[4] = v13 + 512;
    v6[9] = &v9[v14];
    v15 = (char *)v9[v14];
    v6[7] = v15;
    v6[8] = v15 + 512;
  }
}

//----- (00000D04) --------------------------------------------------------
CTRPluginFramework::File *__fastcall CTRPluginFramework::ActionReplay_LoadCodes(int a1)
{
  int v1; // r6
  int v2; // r7
  int *v3; // r8
  int v4; // r0
  int v6; // r3
  int *v7; // r4
  int v8; // r2
  int v9; // r5
  int v10; // r7
  unsigned int v11; // r6
  int v12; // r4
  int v13; // r6
  int v14; // r0
  int v15; // r1
  int v16; // r2
  int v17; // r10
  int v18; // ST04_4
  int v19; // r10
  int v20; // r6
  int v21; // r3
  int v22; // r10
  int v23; // r0
  int v24; // r4
  int v25; // r1
  int v26; // r2
  int v27; // r4
  int v28; // r3
  int *v29; // r10
  int v30; // r2
  __int64 v31; // r10
  int *v32; // r0
  bool v33; // zf
  int v34; // r4
  int v35; // r2
  _DWORD *v36; // r0
  int v37; // r1
  int v38; // r2
  int v39; // r1
  int v40; // r2
  _DWORD *v41; // r0
  int v42; // r1
  int v43; // r2
  int v44; // r2
  int v45; // r10
  unsigned int v46; // r3
  int v47; // r7
  CTRPluginFramework::ARCode *v48; // r0
  int v49; // r5
  int v50; // r0
  unsigned __int8 v51; // [sp+Fh] [bp-149h]
  char v52; // [sp+10h] [bp-148h]
  char *v53; // [sp+20h] [bp-138h]
  int v54; // [sp+24h] [bp-134h]
  char v55; // [sp+28h] [bp-130h]
  char *v56; // [sp+38h] [bp-120h]
  int v57; // [sp+3Ch] [bp-11Ch]
  char v58; // [sp+40h] [bp-118h]
  char *v59; // [sp+50h] [bp-108h]
  int v60; // [sp+54h] [bp-104h]
  char v61; // [sp+58h] [bp-100h]
  char v62; // [sp+68h] [bp-F0h]
  char v63; // [sp+80h] [bp-D8h]
  int v64; // [sp+98h] [bp-C0h]
  int v65; // [sp+9Ch] [bp-BCh]
  int v66; // [sp+A0h] [bp-B8h]
  int v67; // [sp+A4h] [bp-B4h]
  int v68; // [sp+A8h] [bp-B0h]
  int *v69; // [sp+ACh] [bp-ACh]
  __int64 v70; // [sp+B0h] [bp-A8h]
  int v71; // [sp+B8h] [bp-A0h]
  int *v72; // [sp+BCh] [bp-9Ch]
  unsigned __int8 v73; // [sp+C0h] [bp-98h]
  unsigned __int8 v74; // [sp+C1h] [bp-97h]
  unsigned int v75; // [sp+C4h] [bp-94h]
  unsigned int v76; // [sp+C8h] [bp-90h]
  void *v77; // [sp+CCh] [bp-8Ch]
  char v78; // [sp+D8h] [bp-80h]
  char v79; // [sp+F0h] [bp-68h]

  v1 = a1;
  CTRPluginFramework::File::File((CTRPluginFramework::File *)&v79);
  CTRPluginFramework::LineReader::LineReader((CTRPluginFramework::LineReader *)&v52, (CTRPluginFramework::File *)&v79);
  v65 = 8;
  v64 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0LL;
  v71 = 0;
  v72 = 0;
  v2 = operator new(0x20u);
  v3 = (int *)(v2 + 4 * ((unsigned int)(v65 - 1) >> 1));
  v64 = v2;
  v4 = operator new(0x200u);
  v68 = v4 + 512;
  v71 = v4 + 512;
  v53 = &v55;
  *v3 = v4;
  v67 = v4;
  HIDWORD(v70) = v4;
  v66 = v4;
  LODWORD(v70) = v4;
  v56 = &v58;
  v59 = &v61;
  v69 = v3;
  v72 = v3;
  v54 = 0;
  v55 = 0;
  v57 = 0;
  v58 = 0;
  v60 = 0;
  v61 = 0;
  v51 = 0;
  CTRPluginFramework::ActionReplay_OpenCheatsFile((int)&v79, 0);
  if ( !CTRPluginFramework::File::IsOpen((CTRPluginFramework::File *)&v79) )
    goto LABEL_2;
  if ( (_DWORD)v70 == v71 - 4 )
  {
    std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::_M_reserve_map_at_back(
      (void **)&v64,
      1u);
    v7 = v72;
    v7[1] = operator new(0x200u);
    *(_DWORD *)v70 = v1;
    ++v72;
    v6 = *v72;
    v8 = *v72 + 512;
    HIDWORD(v70) = *v72;
    v71 = v8;
  }
  else
  {
    *(_DWORD *)v70 = v1;
    v6 = v70 + 4;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  LODWORD(v70) = v6;
  while ( CTRPluginFramework::LineReader::operator()(&v52, &v53) )
  {
    CTRPluginFramework::Ltrim((unsigned __int8 **)&v53);
    if ( !v54 )
    {
      if ( v12 )
      {
LABEL_10:
        v13 = *(_DWORD *)std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(&v64);
        v14 = CTRPluginFramework::MenuEntryActionReplay::Update((CTRPluginFramework::MenuEntryActionReplay *)v12);
        CTRPluginFramework::MenuFolderImpl::Append(v13, v14, 0);
      }
LABEL_11:
      v57 = 0;
      v11 = 0;
      *v56 = 0;
      v51 = 0;
      goto LABEL_29;
    }
    if ( !CTRPluginFramework::ActionReplay_IsHexCode((unsigned __int8 **)&v53) || (v16 = v51) != 0 )
    {
      v21 = (unsigned __int8)*v53;
      if ( v21 == 91 )
      {
        if ( v12 )
        {
          v22 = *(_DWORD *)std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(&v64);
          v23 = CTRPluginFramework::MenuEntryActionReplay::Update((CTRPluginFramework::MenuEntryActionReplay *)v12);
          CTRPluginFramework::MenuFolderImpl::Append(v22, v23, 0);
        }
        CTRPluginFramework::Rtrim(&v53, v15, v16);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v73, &v53, 0, 3);
        v24 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(&v73, "[++");
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v73);
        if ( !v24 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v73, &v53, 3, v54 - 6);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v56, &v73);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v73);
          CTRPluginFramework::Trim(&v56, v25, v26);
          CTRPluginFramework::ActionReplay_ProcessString((int)&v56, 0);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v73,
            (const char *)&unk_148D);
          v27 = operator new(0x64u);
          CTRPluginFramework::MenuFolderImpl::MenuFolderImpl();
          if ( (_DWORD)v70 == v71 - 4 )
          {
            std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::_M_reserve_map_at_back(
              (void **)&v64,
              1u);
            v29 = v72;
            v29[1] = operator new(0x200u);
            *(_DWORD *)v70 = v27;
            ++v72;
            v28 = *v72;
            v30 = *v72 + 512;
            HIDWORD(v70) = *v72;
            v71 = v30;
          }
          else
          {
            *(_DWORD *)v70 = v27;
            v28 = v70 + 4;
          }
          LODWORD(v70) = v28;
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v73);
          goto LABEL_29;
        }
        v12 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(&v53, "[--]");
        if ( v12 )
        {
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v73, &v53, 1, v54 - 2);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v56, &v73);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v73);
          CTRPluginFramework::Trim(&v56, v37, v38);
          CTRPluginFramework::ActionReplay_ProcessString((int)&v56, 0);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(
            (int *)&v73,
            (const char *)&unk_148D);
          v12 = operator new(0x94u);
          CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay();
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v73);
          v51 = 0;
        }
        else
        {
          v31 = v70;
          if ( (unsigned int)((((signed int)v70 - HIDWORD(v70)) >> 2) + ((v72 - v69 - 1) << 7) + ((v68 - v66) >> 2)) > 1 )
          {
            v32 = (int *)std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(&v64);
            v33 = (_DWORD)v31 == HIDWORD(v31);
            if ( (_DWORD)v31 != HIDWORD(v31) )
              LODWORD(v31) = v31 - 4;
            v34 = *v32;
            if ( v33 )
            {
              operator delete((void *)v31);
              --v72;
              v35 = *v72 + 512;
              HIDWORD(v70) = *v72;
              v71 = v35;
              LODWORD(v70) = HIDWORD(v70) + 508;
            }
            else
            {
              LODWORD(v70) = v31;
            }
            v36 = (_DWORD *)std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(&v64);
            CTRPluginFramework::MenuFolderImpl::Append(*v36, v34, 0);
LABEL_29:
            v12 = 0;
          }
        }
      }
      else
      {
        if ( !v12 )
          goto LABEL_11;
        if ( v21 != 123 )
          goto LABEL_10;
        CTRPluginFramework::Rtrim(&v53, v15, v16);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v73, &v53, 1, -1);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(&v59, &v73);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v73);
        while ( (!v54 || v53[v54 - 1] != 125) && CTRPluginFramework::LineReader::operator()(&v52, &v53) )
        {
          v41 = CTRPluginFramework::Rtrim(&v53, v39, v40);
          std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v59, v41);
        }
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(&v59);
        CTRPluginFramework::Trim(&v59, v42, v43);
        CTRPluginFramework::ActionReplay_ProcessString((int)&v59, 1);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(v12 + 28, &v59);
        v60 = 0;
        *v59 = 0;
      }
    }
    else if ( v12 )
    {
      if ( v11 )
      {
        v17 = *(_DWORD *)(v12 + 136);
        v73 = v51;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v63, &v53, v51, 8);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(&v62, &v53, 9, 8);
        v18 = *(_DWORD *)(v17 - 36);
        *(_DWORD *)(v18 + 4 * v9) = CTRPluginFramework::ActionReplayPriv::Str2U32(&v63, &v73);
        if ( v73 )
        {
          ++v9;
        }
        else
        {
          v19 = *(_DWORD *)(v17 - 36);
          v20 = 4 * v9 + 4;
          v9 += 2;
          *(_DWORD *)(v19 + v20) = CTRPluginFramework::ActionReplayPriv::Str2U32(&v62, &v73);
        }
        v11 = v73;
        *(_BYTE *)(v12 + 120) = v73;
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v62);
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v63);
        if ( v11 )
        {
          v44 = *(_DWORD *)(v12 + 136);
          v51 = 1;
          *(_BYTE *)(v44 - 48) = 1;
        }
        else
        {
          v11 = --v10 > 0;
        }
      }
      else
      {
        CTRPluginFramework::ARCode::ARCode(&v73, &v53, &v51);
        v45 = v51;
        if ( !v51 )
        {
          v11 = CTRPluginFramework::ARCode::IsCodeWithData((CTRPluginFramework::ARCode *)&v73);
          if ( v11 )
          {
            v46 = v75;
            if ( v74 != 254 )
              v46 = v76;
            if ( v46 )
            {
              v47 = v46 & 7;
              if ( v46 & 7 )
                v47 = 1;
              v10 = v47 + (v46 >> 3);
              std::vector<unsigned long,std::allocator<unsigned long>>::resize(&v77, 2 * v10);
              v9 = v45;
            }
            else
            {
              v11 = 0;
            }
          }
        }
        v48 = *(CTRPluginFramework::ARCode **)(v12 + 136);
        if ( v48 == *(CTRPluginFramework::ARCode **)(v12 + 140) )
        {
          std::vector<CTRPluginFramework::ARCode,std::allocator<CTRPluginFramework::ARCode>>::_M_realloc_insert<CTRPluginFramework::ARCode const&>(
            (const CTRPluginFramework::ARCode **)(v12 + 132),
            *(const CTRPluginFramework::ARCode **)(v12 + 136),
            (const CTRPluginFramework::ARCode *)&v73);
        }
        else
        {
          CTRPluginFramework::ARCode::ARCode(v48, (const CTRPluginFramework::ARCode *)&v73);
          *(_DWORD *)(v12 + 136) += 48;
        }
        std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v78);
        if ( v77 )
          operator delete(v77);
      }
    }
  }
  if ( v12 )
  {
    v49 = *(_DWORD *)std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::back(&v64);
    v50 = CTRPluginFramework::MenuEntryActionReplay::Update((CTRPluginFramework::MenuEntryActionReplay *)v12);
    CTRPluginFramework::MenuFolderImpl::Append(v49, v50, 0);
  }
LABEL_2:
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v59);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v56);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(&v53);
  std::deque<CTRPluginFramework::MenuFolderImpl *,std::allocator<CTRPluginFramework::MenuFolderImpl *>>::~deque((void **)&v64);
  CTRPluginFramework::LineReader::~LineReader((CTRPluginFramework::LineReader *)&v52);
  return CTRPluginFramework::File::~File((CTRPluginFramework::File *)&v79);
}
// 14B4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_dispose(_DWORD);
// 14C8: using guessed type int __fastcall CTRPluginFramework::ActionReplayPriv::Str2U32(_DWORD, _DWORD);
// 14D4: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::_M_assign(_DWORD, _DWORD);
// 14D8: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr(_DWORD, _DWORD, _DWORD, _DWORD);
// 152C: using guessed type _DWORD __cdecl CTRPluginFramework::ARCode::ARCode(CTRPluginFramework::ARCode *__hidden this, const CTRPluginFramework::ARCode *);
// 1544: using guessed type int __fastcall CTRPluginFramework::LineReader::operator()(_DWORD, _DWORD);
// 154C: using guessed type int __fastcall CTRPluginFramework::MenuFolderImpl::Append(_DWORD, _DWORD, _DWORD);
// 1550: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(_DWORD, _DWORD);
// 1554: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(_DWORD, _DWORD);
// 1558: using guessed type int CTRPluginFramework::MenuFolderImpl::MenuFolderImpl(void);
// 155C: using guessed type int CTRPluginFramework::MenuEntryActionReplay::MenuEntryActionReplay(void);
// 1560: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(_DWORD, _DWORD);
// 1564: using guessed type int __fastcall std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::pop_back(_DWORD);
// 1568: using guessed type int __fastcall CTRPluginFramework::ARCode::ARCode(_DWORD, _DWORD, _DWORD);

// ALL OK, 20 function(s) have been successfully decompiled
